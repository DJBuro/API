<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:degrafa="http://www.degrafa.com/2007"
				xmlns:paint="com.degrafa.paint.*"
				xmlns:geometry="com.degrafa.geometry.*"
				xmlns:AndroGauge="com.controls.*"
				backgroundColor="#222222" backgroundGradientColors="[ #666666, #222222 ]"
				creationComplete="initTime(event)" fontFamily="Arial" horizontalScrollPolicy="off"
				layout="absolute" verticalScrollPolicy="off">
	<mx:Style source="Index.css"/>
	
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

				
			private var dashtick:Timer= new Timer(30000);
			
			
			private function initDrawData(event:TimerEvent):void
			{
				setDial();
			}
			
			public function initTime(e:Event):void
			{    
				/* The following code will parse a URL that passes firstName and lastName as
				query string parameters after the "#" sign; for example:
				http://www.mydomain.com/MyApp.html#firstName=Nick&lastName=Danger */
				//var o:Object = URLUtil.stringToObject(bm.fragment, "&");     
				
				bm = BrowserManager.getInstance();  
				
				bm.init(null,null);
				
				myName = bm.fragment;
				
				_gaugeRadius = this.width;
				_applicationWidth= this.width;
				setDial();
				
				dashtick.addEventListener(TimerEvent.TIMER, initDrawData);
				dashtick.start();
				
				TextScroller.start();
				TextScroller2.start();
				TextScroller3.start();
			}
			
			[Bindable]
			private var dp:ArrayCollection;
			

			[Bindable]
			private var _headOfficeMessageWidth:Number = 100;
			
			
			[Bindable]
			private var _headOfficeMessageHeight:Number = 20;
			
			[Bindable]
			private var _gaugeRadius:Number  = 300;
			
			[Bindable]
			private var _columnWidth:Number = 300;
			
			[Bindable]
			private var _applicationWidth:Number;
			
			[Bindable]
			private var _gaugeHandLocation:Number;
			
			[Bindable]
			private var _gaugeTextLocation:Number;
			
			[Bindable]
			private var _gaugeHandLength:Number = 140;
			
			[Bindable]
			private var _gaugeDistance:Number = 140;
			
			[Bindable]
			private var _gaugeY:Number = 40;
			
			[Bindable]
			private var _fontSize:Number = 16;
			
			[Bindable]
			private var OTD_TEXT:String = "";
			
			[Bindable]
			private var OPD_TEXT:String = "";
			
			[Bindable]
			private var TICKET_TEXT:String = "";
			
			
			[Bindable]
			private var _gauge01Arrow:int;
			[Bindable]
			private var _gauge02Arrow:int;
			[Bindable]
			private var _gauge03Arrow:int;
			[Bindable]
			private var _gauge04Arrow:int;
			[Bindable]
			private var _gauge05Arrow:int;
			
			[Bindable]
			private var _gauge01CurrentValue:Number;
			[Bindable]
			private var _gauge02CurrentValue:Number;
			[Bindable]
			private var _gauge03CurrentValue:Number;
			[Bindable]
			private var _gauge04CurrentValue:Number;
			[Bindable]
			private var _gauge05CurrentValue:Number;
			
			[Bindable]
			private var _column0601CurrentValue:Number;
			
			[Bindable]
			private var _column0602CurrentValue:Number;
			
			[Bindable]
			private var _gaugeAngle:int;
			
			
			//gauge face etc.
			//01
			[Bindable]
			private var _gauge01MaxValue:int;
			[Bindable]
			private var _gauge01BenchmarkArc:Number;
			[Bindable]
			private var _gauge01GreenArc:Number;
			[Bindable]
			private var _gauge01GreenArcStart:Number;
			[Bindable]
			private var _gauge01MajorTickCount:Number;
			[Bindable]
			private var _gauge01MajorTickOffset:Number;
			//02
			[Bindable]
			private var _gauge02MaxValue:int;
			[Bindable]
			private var _gauge02BenchmarkArc:Number;
			[Bindable]
			private var _gauge02GreenArc:Number;
			[Bindable]
			private var _gauge02GreenArcStart:Number;
			[Bindable]
			private var _gauge02MajorTickCount:Number;
			[Bindable]
			private var _gauge02MajorTickOffset:Number;
			//03
			[Bindable]
			private var _gauge03MaxValue:int;
			[Bindable]
			private var _gauge03BenchmarkArc:Number;
			[Bindable]
			private var _gauge03GreenArc:Number;
			[Bindable]
			private var _gauge03GreenArcStart:Number;
			[Bindable]
			private var _gauge03MajorTickCount:Number;
			[Bindable]
			private var _gauge03MajorTickOffset:Number;
			//04
			[Bindable]
			private var _gauge04MaxValue:int;
			[Bindable]
			private var _gauge04BenchmarkArc:Number;
			[Bindable]
			private var _gauge04GreenArc:Number;
			[Bindable]
			private var _gauge04GreenArcStart:Number;
			[Bindable]
			private var _gauge04MajorTickCount:Number;
			[Bindable]
			private var _gauge04MajorTickOffset:Number;
			//05
			[Bindable]
			private var _gauge05MaxValue:int;
			[Bindable]
			private var _gauge05BenchmarkArc:Number;
			[Bindable]
			private var _gauge05GreenArc:Number;
			[Bindable]
			private var _gauge05GreenArcStart:Number;
			[Bindable]
			private var _gauge05MajorTickCount:Number;
			[Bindable]
			private var _gauge05MajorTickOffset:Number;
			
			[Bindable]
			public var _GAUGESTART : Number = 210;
			[Bindable]
			public var _TickDivisor : Number = 10;
			
			[Bindable]
			public var _columnHeight : Number = 600;
			
		
			
			[Bindable]
			private var gauge01TickLabels : Array;
			[Bindable]
			private var gauge02TickLabels : Array;
			[Bindable]
			private var gauge03TickLabels : Array;
			[Bindable]
			private var gauge04TickLabels : Array;
			[Bindable]
			private var gauge05TickLabels : Array;
			
			//Gauge math
			public var _maximum : Number = 100;
			public var _minimum : Number = 0;
			[Bindable]
			public var _minimumAngle : Number = 60;
			[Bindable]
			public var _maximumAngle : Number = 300;
			public static const SCALE_LINEAR : String = "linear";
			private var _valueScale:String=SCALE_LINEAR;
			public static const SCALE_LOG : String = "log";
			
			[Bindable]
			public var _gaugeTicksStart:Number = 0;
			
			public function Diameter(): Number {
				return this.width/6.45; //for 6 columns
			}
			
			public function Height(): Number {
				return this.height *.8;
			}
			
			public function assignGaugeLabels(notches:int, tickDivisor:int):Array
			{
				return generateTickArray(notches, tickDivisor);
			}

			[Bindable]
			private var myName:String;
			
			private var bm:IBrowserManager;
			[Bindable]
			private var fName:String;
			[Bindable]
			private var lName:String;  
			
			
			/// Anjana Error Handling 2012-04-19			
			private function onFault(event:FaultEvent):void
			{
				trace("Server Error Occured : " + event.message);
				// No need to retry as anyway by 30 sec it calls for server data
			}
			
			private function onResult(event:ResultEvent):void
			{
				//myName = FlexGlobals.topLevelApplication.parameters["myName"];
				
				//myName = FlexGlobals.topLevelApplication.url;

				_applicationWidth= this.width;
				_columnHeight = Height(); 
				_columnWidth = Diameter();
				
				_headOfficeMessageWidth = (_columnWidth * 6) * 1.042;
				_headOfficeMessageHeight = (_columnWidth/12) + 6;
				
				_gaugeRadius = _columnWidth;
				_fontSize = _gaugeRadius/12;
				
				_gaugeY = _fontSize *2;
				
				_gaugeHandLocation = (_gaugeRadius/2);
				_gaugeDistance = _gaugeRadius + 10;
				_gaugeTextLocation = _gaugeHandLocation/1.8;
				
				_gaugeAngle = _maximumAngle - _minimumAngle;
				
				var json:Object;
	//			var json:Object = JSON.decode('{"SiteName":"Basingstoke","HeadOfficeMessage":null,"Columns":[{"TopSites":[{"siteId":288,"rank":1,"name":"Osterley","value":"13.75min","indicator":13.75},{"siteId":295,"rank":2,"name":"Woking","value":"15.05min","indicator":15.05},{"siteId":292,"rank":3,"name":"Staines","value":"16.6min","indicator":16.6}],"BottomSites":[{"siteId":290,"rank":6,"name":"Southampton","value":"30.43min","indicator":30.43},{"siteId":291,"rank":7,"name":"Slough ","value":"30.87min","indicator":30.87},{"siteId":294,"rank":8,"name":"Uxbridge","value":"32.28min","indicator":32.28}],"Name":"OTD","Data":{"CurrentValue":0,"MaxValue":60,"Name":"OTD","Benchmark":15.00,"DisplayValue":"0min","IsReverse":true,"IsGauge":true},"SiteRank":0,"RegionRank":0},{"TopSites":[{"siteId":295,"rank":1,"name":"Woking","value":"25.4min","indicator":25.4},{"siteId":288,"rank":2,"name":"Osterley","value":"26.93min","indicator":26.93},{"siteId":292,"rank":3,"name":"Staines","value":"29.42min","indicator":29.42}],"BottomSites":[{"siteId":290,"rank":6,"name":"Southampton","value":"40.77min","indicator":40.77},{"siteId":287,"rank":7,"name":"High Wycombe","value":"43.87min","indicator":43.87},{"siteId":291,"rank":8,"name":"Slough ","value":"47.38min","indicator":47.38}],"Name":"TTD","Data":{"CurrentValue":0,"MaxValue":60,"Name":"TTD","Benchmark":20.00,"DisplayValue":"0min","IsReverse":true,"IsGauge":true},"SiteRank":0,"RegionRank":0},{"TopSites":[{"siteId":295,"rank":1,"name":"Woking","value":"80.0%","indicator":80.0},{"siteId":288,"rank":2,"name":"Osterley","value":"67.00%","indicator":67.00},{"siteId":284,"rank":3,"name":"Bracknell","value":"60.0%","indicator":60.0}],"BottomSites":[{"siteId":292,"rank":4,"name":"Staines","value":"50.0%","indicator":50.0},{"siteId":294,"rank":5,"name":"Uxbridge","value":"33.00%","indicator":33.00},{"siteId":291,"rank":6,"name":"Slough ","value":"6.00%","indicator":6.00}],"Name":"Under 30min","Data":{"CurrentValue":0,"MaxValue":100,"Name":"Under 30min","Benchmark":85.00,"DisplayValue":"0%","IsReverse":false,"IsGauge":true},"SiteRank":0,"RegionRank":0},{"TopSites":[{"siteId":283,"rank":1,"name":"Basingstoke","value":"1","indicator":1},{"siteId":287,"rank":2,"name":"High Wycombe","value":"1","indicator":1},{"siteId":288,"rank":3,"name":"Osterley","value":"1","indicator":1}],"BottomSites":[{"siteId":284,"rank":10,"name":"Bracknell","value":"1.17","indicator":1.17},{"siteId":292,"rank":11,"name":"Staines","value":"1.2","indicator":1.2},{"siteId":291,"rank":12,"name":"Slough ","value":"1.24","indicator":1.24}],"Name":"Order Per Driver","Data":{"CurrentValue":1,"MaxValue":3,"Name":"Order Per Driver","Benchmark":1.40,"DisplayValue":"1","IsReverse":true,"IsGauge":true},"SiteRank":1,"RegionRank":1},{"TopSites":[{"siteId":283,"rank":1,"name":"Basingstoke","value":"£30.95","indicator":30.95},{"siteId":287,"rank":2,"name":"High Wycombe","value":"£21.56","indicator":21.56},{"siteId":291,"rank":3,"name":"Slough ","value":"£16.51","indicator":16.51}],"BottomSites":[{"siteId":293,"rank":9,"name":"Swindon","value":"£8.36","indicator":8.36},{"siteId":295,"rank":10,"name":"Woking","value":"£8.07","indicator":8.07},{"siteId":289,"rank":11,"name":"Sandhurst","value":"£6.46","indicator":6.46}],"Name":"Ticket Avg","Data":{"CurrentValue":30.95,"MaxValue":100,"Name":"Ticket Avg","Benchmark":25.00,"DisplayValue":"£30.95","IsReverse":false,"IsGauge":true},"SiteRank":1,"RegionRank":1},{"TopSites":[{"siteId":292,"rank":1,"name":"Staines","value":"2.88min","indicator":2.88},{"siteId":295,"rank":2,"name":"Woking","value":"3.92min","indicator":3.92},{"siteId":294,"rank":3,"name":"Uxbridge","value":"4.63min","indicator":4.63}],"BottomSites":[{"siteId":284,"rank":6,"name":"Bracknell","value":"9.93min","indicator":9.93},{"siteId":291,"rank":7,"name":"Slough ","value":"14.82min","indicator":14.82},{"siteId":287,"rank":8,"name":"High Wycombe","value":"15.53min","indicator":15.53}],"Name":"Make","Data":{"CurrentValue":0,"MaxValue":60,"Name":"Make","Benchmark":14.00,"DisplayValue":"0min","IsReverse":true,"IsGauge":false},"SiteRank":0,"RegionRank":0},{"TopSites":[{"siteId":291,"rank":1,"name":"Slough ","value":"29","indicator":29},{"siteId":295,"rank":2,"name":"Woking","value":"21","indicator":21},{"siteId":284,"rank":3,"name":"Bracknell","value":"15","indicator":15}],"BottomSites":[{"siteId":290,"rank":9,"name":"Southampton","value":"3","indicator":3},{"siteId":293,"rank":10,"name":"Swindon","value":"2","indicator":2},{"siteId":283,"rank":11,"name":"Basingstoke","value":"1","indicator":1}],"Name":"Total Tickets","Data":{"CurrentValue":1,"MaxValue":100,"Name":"Total Tickets","Benchmark":15.00,"DisplayValue":"1","IsReverse":false,"IsGauge":false},"SiteRank":11,"RegionRank":11}],"Scrollers":[{"Name":"Mk","Data":"Staines:2.88   Woking:3.92   Uxbridge:4.63   Osterley:6.45   Southampton:7.18   Bracknell:9.93   Slough :14.82   High Wycombe:15.53   "},{"Name":"OTD","Data":"Osterley:13.75   Woking:15.05   Staines:16.6   Bracknell:23.42   High Wycombe:24.58   Southampton:30.43   Slough :30.87   Uxbridge:32.28   "},{"Name":"\u003c30m","Data":"Slough :6.00   Uxbridge:33.00   Staines:50.0   Bracknell:60.0   Osterley:67.00   Woking:80.0   "},{"Name":"Avg","Data":"Sandhurst:6.46   Woking:8.07   Swindon:8.36   Osterley:8.96   Bracknell:9.39   Southampton:12.08   Uxbridge:13.12   Staines:14.36   Slough :16.51   High Wycombe:21.56   Basingstoke:30.95   "},{"Name":"Tick","Data":"Basingstoke:1   Swindon:2   Southampton:3   High Wycombe:6   Sandhurst:7   Staines:7   Osterley:10   Uxbridge:10   Bracknell:15   Woking:21   Slough :29   "}]}');
	//			dp = new ArrayCollection(json.Columns as Array);
				if(event.result != "")
				{
					//json = JSON.parse(event.result as String);
					//old but valid way (if you don't want to pass events around
					json = JSON.decode(dashboardData.lastResult as String);
					//var json:Object = JSON.decode('');
	//				var json:Object = JSON.decode('{"SiteName":"Basingstoke","HeadOfficeMessage":null,"Columns":[{"TopSites":[{"siteId":288,"rank":1,"name":"Osterley","value":"13.75min","indicator":13.75},{"siteId":295,"rank":2,"name":"Woking","value":"15.05min","indicator":15.05},{"siteId":292,"rank":3,"name":"Staines","value":"16.6min","indicator":16.6}],"BottomSites":[{"siteId":290,"rank":6,"name":"Southampton","value":"30.43min","indicator":30.43},{"siteId":291,"rank":7,"name":"Slough ","value":"30.87min","indicator":30.87},{"siteId":294,"rank":8,"name":"Uxbridge","value":"32.28min","indicator":32.28}],"Name":"OTD","Data":{"CurrentValue":0,"MaxValue":60,"Name":"OTD","Benchmark":15.00,"DisplayValue":"0min","IsReverse":true,"IsGauge":true},"SiteRank":0,"RegionRank":0},{"TopSites":[{"siteId":295,"rank":1,"name":"Woking","value":"25.4min","indicator":25.4},{"siteId":288,"rank":2,"name":"Osterley","value":"26.93min","indicator":26.93},{"siteId":292,"rank":3,"name":"Staines","value":"29.42min","indicator":29.42}],"BottomSites":[{"siteId":290,"rank":6,"name":"Southampton","value":"40.77min","indicator":40.77},{"siteId":287,"rank":7,"name":"High Wycombe","value":"43.87min","indicator":43.87},{"siteId":291,"rank":8,"name":"Slough ","value":"47.38min","indicator":47.38}],"Name":"TTD","Data":{"CurrentValue":0,"MaxValue":60,"Name":"TTD","Benchmark":20.00,"DisplayValue":"0min","IsReverse":true,"IsGauge":true},"SiteRank":0,"RegionRank":0},{"TopSites":[{"siteId":295,"rank":1,"name":"Woking","value":"80.0%","indicator":80.0},{"siteId":288,"rank":2,"name":"Osterley","value":"67.00%","indicator":67.00},{"siteId":284,"rank":3,"name":"Bracknell","value":"60.0%","indicator":60.0}],"BottomSites":[{"siteId":292,"rank":4,"name":"Staines","value":"50.0%","indicator":50.0},{"siteId":294,"rank":5,"name":"Uxbridge","value":"33.00%","indicator":33.00},{"siteId":291,"rank":6,"name":"Slough ","value":"6.00%","indicator":6.00}],"Name":"Under 30min","Data":{"CurrentValue":0,"MaxValue":100,"Name":"Under 30min","Benchmark":85.00,"DisplayValue":"0%","IsReverse":false,"IsGauge":true},"SiteRank":0,"RegionRank":0},{"TopSites":[{"siteId":283,"rank":1,"name":"Basingstoke","value":"1","indicator":1},{"siteId":287,"rank":2,"name":"High Wycombe","value":"1","indicator":1},{"siteId":288,"rank":3,"name":"Osterley","value":"1","indicator":1}],"BottomSites":[{"siteId":284,"rank":10,"name":"Bracknell","value":"1.17","indicator":1.17},{"siteId":292,"rank":11,"name":"Staines","value":"1.2","indicator":1.2},{"siteId":291,"rank":12,"name":"Slough ","value":"1.24","indicator":1.24}],"Name":"Order Per Driver","Data":{"CurrentValue":1,"MaxValue":3,"Name":"Order Per Driver","Benchmark":1.40,"DisplayValue":"1","IsReverse":true,"IsGauge":true},"SiteRank":1,"RegionRank":1},{"TopSites":[{"siteId":283,"rank":1,"name":"Basingstoke","value":"£30.95","indicator":30.95},{"siteId":287,"rank":2,"name":"High Wycombe","value":"£21.56","indicator":21.56},{"siteId":291,"rank":3,"name":"Slough ","value":"£16.51","indicator":16.51}],"BottomSites":[{"siteId":293,"rank":9,"name":"Swindon","value":"£8.36","indicator":8.36},{"siteId":295,"rank":10,"name":"Woking","value":"£8.07","indicator":8.07},{"siteId":289,"rank":11,"name":"Sandhurst","value":"£6.46","indicator":6.46}],"Name":"Ticket Avg","Data":{"CurrentValue":30.95,"MaxValue":100,"Name":"Ticket Avg","Benchmark":25.00,"DisplayValue":"£30.95","IsReverse":false,"IsGauge":true},"SiteRank":1,"RegionRank":1},{"TopSites":[{"siteId":292,"rank":1,"name":"Staines","value":"2.88min","indicator":2.88},{"siteId":295,"rank":2,"name":"Woking","value":"3.92min","indicator":3.92},{"siteId":294,"rank":3,"name":"Uxbridge","value":"4.63min","indicator":4.63}],"BottomSites":[{"siteId":284,"rank":6,"name":"Bracknell","value":"9.93min","indicator":9.93},{"siteId":291,"rank":7,"name":"Slough ","value":"14.82min","indicator":14.82},{"siteId":287,"rank":8,"name":"High Wycombe","value":"15.53min","indicator":15.53}],"Name":"Make","Data":{"CurrentValue":0,"MaxValue":60,"Name":"Make","Benchmark":14.00,"DisplayValue":"0min","IsReverse":true,"IsGauge":false},"SiteRank":0,"RegionRank":0},{"TopSites":[{"siteId":291,"rank":1,"name":"Slough ","value":"29","indicator":29},{"siteId":295,"rank":2,"name":"Woking","value":"21","indicator":21},{"siteId":284,"rank":3,"name":"Bracknell","value":"15","indicator":15}],"BottomSites":[{"siteId":290,"rank":9,"name":"Southampton","value":"3","indicator":3},{"siteId":293,"rank":10,"name":"Swindon","value":"2","indicator":2},{"siteId":283,"rank":11,"name":"Basingstoke","value":"1","indicator":1}],"Name":"Total Tickets","Data":{"CurrentValue":1,"MaxValue":100,"Name":"Total Tickets","Benchmark":15.00,"DisplayValue":"1","IsReverse":false,"IsGauge":false},"SiteRank":11,"RegionRank":11}],"Scrollers":[{"Name":"Mk","Data":"Staines:2.88   Woking:3.92   Uxbridge:4.63   Osterley:6.45   Southampton:7.18   Bracknell:9.93   Slough :14.82   High Wycombe:15.53   "},{"Name":"OTD","Data":"Osterley:13.75   Woking:15.05   Staines:16.6   Bracknell:23.42   High Wycombe:24.58   Southampton:30.43   Slough :30.87   Uxbridge:32.28   "},{"Name":"\u003c30m","Data":"Slough :6.00   Uxbridge:33.00   Staines:50.0   Bracknell:60.0   Osterley:67.00   Woking:80.0   "},{"Name":"Avg","Data":"Sandhurst:6.46   Woking:8.07   Swindon:8.36   Osterley:8.96   Bracknell:9.39   Southampton:12.08   Uxbridge:13.12   Staines:14.36   Slough :16.51   High Wycombe:21.56   Basingstoke:30.95   "},{"Name":"Tick","Data":"Basingstoke:1   Swindon:2   Southampton:3   High Wycombe:6   Sandhurst:7   Staines:7   Osterley:10   Uxbridge:10   Bracknell:15   Woking:21   Slough :29   "}]}');
					//
					dp = new ArrayCollection(json.Columns as Array);
					
				}
				else
				{
					trace("Dataformat Error");
					
				}
/*				
				for each (var column in json.Columns)
				{
					trace(column);
					//var clo = new Gauge();
				}
*/				
				
				if(dp != null)
				{
				var i:int;
				for (i = 0; i < dp.length; i++)
				{
					var gaugeObject:Object = dp[i];
					
					if (gaugeObject.Data.MaxValue > 0)
					{
						gaugeObject.Data.Benchmark = (gaugeObject.Data.MaxValue / 100) * gaugeObject.Data.Benchmark;
					}
					
					switch (i) { 
						case 0 : 
							
							//_columnWidth
							gauge01.width = _gaugeRadius;
							gauge01.height = _gaugeRadius;
							gauge01.x = 0;
							column01.y = _gaugeY;
							
							_maximum = gaugeObject.Data.MaxValue;
							_TickDivisor = calulateTickDivisor(_maximum);
							/*_TickDivisor = 10;
							if(_maximum < 10)
							{
								_TickDivisor = 1;
							}
							*/
							gauge01Hand.rotation = calculateAngleFromValue(gaugeObject.Data.CurrentValue);
							
							gauge01Hand.x = _gaugeHandLocation;
							gauge01Hand.y = _gaugeHandLocation + _gaugeY;
							
							gauge01Label.x = gauge01.centerX;
							
							if(gaugeObject.Data.DisplayValue.length > 2)
							{
								gauge01Label.x = gauge01.centerX - (_fontSize *(gaugeObject.Data.DisplayValue.length/3));
							}
							
							
							gauge01Label.y = ((_gaugeHandLocation + _gaugeRadius)/2);
							gauge01Label.text = gaugeObject.Data.DisplayValue;
							gauge01Label.autoSizeField = true;
							
													
							//reflections
							gauge01TopReflection.width= gauge01.radius *1.65;
							gauge01TopReflection.height=gauge01.radius *1.3;
							gauge01TopReflection.y= (gauge01.radius *.06) + _gaugeY; 
							gauge01TopReflection.x= gauge01.radius *.06;
							
							gauge01BottomReflection.width = gauge01.radius *1.5; 
							gauge01BottomReflection.height = gauge01.radius *1.2;
							gauge01BottomReflection.y = (gauge01Hand.y *.80); 
							gauge01BottomReflection.x = gauge01Hand.x *.23;
							
							
							//Gauge graduation setup
							
							_gauge01MajorTickCount = (gaugeObject.Data.MaxValue/_TickDivisor) +1;
							
							//gauge01TickLabels = assignGaugeLabels(_gauge01MajorTickCount, _maximum);
							gauge01TickLabels = assignGaugeLabels(_gauge01MajorTickCount, _TickDivisor);
							
							_gauge01MajorTickOffset = (_maximumAngle - _minimumAngle)/(_maximum/_TickDivisor);     					
							_gauge01BenchmarkArc = (gaugeObject.Data.Benchmark /gaugeObject.Data.MaxValue) * (_maximumAngle - _minimumAngle);
							_gauge01GreenArc = _gaugeAngle - _gauge01BenchmarkArc;
							_gauge01GreenArcStart = _GAUGESTART - _gauge01BenchmarkArc;
							
							if(gaugeObject.Data.IsReverse)
							{	     					
								Gauge01GreenArc.stroke = this.redIndicatorStroke;
								Gauge01BenchmarkArc.stroke = this.greenIndicatorStroke;
							}
							else
							{
								Gauge01GreenArc.stroke = this.greenIndicatorStroke;
								Gauge01BenchmarkArc.stroke = this.redIndicatorStroke;
							}
							
							//indicator drop shadow
							gauge01HandDS.x = gauge01Hand.x + 1;
							gauge01HandDS.y = gauge01Hand.y + 4;
							gauge01HandDS.rotation = gauge01Hand.rotation;
							
							gauge01ArrowIndicator.fill = this.redFill;
							
							if(_gauge01CurrentValue!= gaugeObject.Data.CurrentValue)
							{
								if(gaugeObject.Data.IsReverse)
								{
									//we default to down
									if(_gauge01CurrentValue > gaugeObject.Data.CurrentValue)
									{
										gauge01Arrow.rotation = 180;
										gauge01ArrowDS.rotation = 180;
										gauge01ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge01Arrow.rotation = 0;
										gauge01ArrowDS.rotation = 0;
										gauge01ArrowIndicator.fill = this.redFill;
									}
								}
								else
								{
									//we default to down
									if(_gauge01CurrentValue < gaugeObject.Data.CurrentValue)
									{
										gauge01Arrow.rotation = 180;
										gauge01ArrowDS.rotation = 180;
										gauge01ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge01Arrow.rotation = 0;
										gauge01ArrowDS.rotation = 0;
										gauge01ArrowIndicator.fill = this.redFill;
									}
									
								}
							}
							else //set equals
							{
								gauge01Arrow.rotation = 90;
								gauge01ArrowDS.rotation = 90;
								gauge01ArrowIndicator.fill = this.greyFill;
							}
							
							_gauge01CurrentValue = gaugeObject.Data.CurrentValue;
							
							//Legend
							gauge01LegendLabel.y = _gaugeRadius + _fontSize/2;
							gauge01LegendLabel.x = gauge01.centerX - (_fontSize *(gaugeObject.Data.Name.length/3));
							gauge01LegendLabel.text = gaugeObject.Data.Name;
							gauge01LegendLabel.autoSizeField = true;
							gauge01LegendLabel.left;
							
							//SiteRanking
							gauge01RankText.y = gauge01LegendLabel.y + _fontSize *1.3;
							gauge01SiteRankText.y =gauge01RankText.y + _fontSize;
							gauge01RegionRankText.y = gauge01SiteRankText.y + _fontSize
							gauge01SiteRankText.text = "Site: " + gaugeObject.SiteRank;
							gauge01RegionRankText.text = "Region: " + gaugeObject.RegionRank;
							
							//UpDownArrow
							gauge01Arrow.x = _gaugeHandLocation + _fontSize*2;
							gauge01Arrow.y = gauge01LegendLabel.y + _fontSize*3;
							gauge01ArrowDS.x = gauge01Arrow.x +1;
							gauge01ArrowDS.y = gauge01Arrow.y +4;
							
							gauge01LeadersText.y = gauge01Arrow.y + _fontSize*2;
							
							//Leaders -- Laggers
							if(gaugeObject.TopSites != null)
							{
								//TopSite
								for (y = 0; y < gaugeObject.TopSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge01Leaders1.y =	gauge01LeadersText.y + _fontSize;
											gauge01Leaders1.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 1 :
											gauge01Leaders2.y = gauge01Leaders1.y + _fontSize;
											gauge01Leaders2.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 2 :
											gauge01Leaders3.y = gauge01Leaders2.y + _fontSize;
											gauge01Leaders3.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										default:
											break;
									}
								}
							}
							
							gauge01LaggersText.y = gauge01Leaders3.y + _fontSize*2;
							
							if(gaugeObject.BottomSites != null)
							{
								//BottomSite
								for (y = 0; y < gaugeObject.BottomSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge01Laggers1.y = gauge01LaggersText.y + _fontSize;
											gauge01Laggers1.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 1 :
											gauge01Laggers2.y = gauge01Laggers1.y + _fontSize;
											gauge01Laggers2.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 2 :
											gauge01Laggers3.y = gauge01Laggers2.y + _fontSize;
											gauge01Laggers3.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										default:
											break;
									}
								}
							}
							break; 
						
						case 1 :
							column02.x	=_gaugeDistance;
							gauge02.width = _gaugeRadius;
							gauge02.height = _gaugeRadius;
							column02.y = _gaugeY;
							
							_maximum = gaugeObject.Data.MaxValue;
							_TickDivisor = calulateTickDivisor(_maximum);
							/*_TickDivisor = 10;
							if(_maximum < 10)
							{
								_TickDivisor = 1;
							}
							*/
							gauge02Hand.rotation = calculateAngleFromValue(gaugeObject.Data.CurrentValue);
							gauge02Hand.x = _gaugeHandLocation + _gaugeDistance;
							gauge02Hand.y = _gaugeHandLocation +  _gaugeY;
							
							gauge02Label.x = gauge02.centerX;
							
							if(gaugeObject.Data.DisplayValue.length > 3)
							{
								gauge02Label.x = gauge02.centerX - (_fontSize *(gaugeObject.Data.DisplayValue.length/3));
							}

							gauge02Label.y = (_gaugeHandLocation + _gaugeRadius)/2;
							gauge02Label.text = gaugeObject.Data.DisplayValue;  
							gauge02Label.autoSizeField = true;
							
							
							//reflections
							gauge02TopReflection.width= gauge02.radius *1.65;
							gauge02TopReflection.height=gauge02.radius *1.3;
							gauge02TopReflection.y= (_fontSize*.5) + _gaugeY; 
							gauge02TopReflection.x= gauge02Hand.x *.7;
							
							gauge02BottomReflection.width = gauge02.radius *1.5; 
							gauge02BottomReflection.height = gauge02.radius *1.2;
							gauge02BottomReflection.y = gauge02Hand.y *.80; 
							gauge02BottomReflection.x = gauge02Hand.x *.75;
							
							//Gauge graduation setup
							_gauge02MajorTickCount = (gaugeObject.Data.MaxValue/_TickDivisor) +1;
							
//							gauge02TickLabels = assignGaugeLabels(_gauge02MajorTickCount, _maximum);
							gauge02TickLabels = assignGaugeLabels(_gauge02MajorTickCount, _TickDivisor);
							
							_gauge02MajorTickOffset = (_maximumAngle - _minimumAngle)/(_maximum/_TickDivisor);     					
							_gauge02BenchmarkArc = (gaugeObject.Data.Benchmark /gaugeObject.Data.MaxValue) * (_maximumAngle - _minimumAngle);
							
							_gauge02GreenArc = _gaugeAngle - _gauge02BenchmarkArc;
							_gauge02GreenArcStart = _GAUGESTART - _gauge02BenchmarkArc;
							
							//reverse the arc colors
							if(gaugeObject.Data.IsReverse)
							{	     					
								Gauge02GreenArc.stroke = this.redIndicatorStroke;
								Gauge02BenchmarkArc.stroke = this.greenIndicatorStroke;
							}
							else
							{
								Gauge02GreenArc.stroke = this.greenIndicatorStroke;
								Gauge02BenchmarkArc.stroke = this.redIndicatorStroke;
							}
							
							
							//indicator drop shadow
							gauge02HandDS.x = gauge02Hand.x + 1;
							gauge02HandDS.y = gauge02Hand.y + 4;
							gauge02HandDS.rotation = gauge02Hand.rotation;
							
							gauge02ArrowIndicator.fill = this.redFill;
							
							if(_gauge02CurrentValue!= gaugeObject.Data.CurrentValue)
							{
								if(gaugeObject.Data.IsReverse)
								{
									//we default to down
									if(_gauge02CurrentValue > gaugeObject.Data.CurrentValue)
									{
										gauge02Arrow.rotation = 180;
										gauge02ArrowDS.rotation = 180;
										gauge02ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge02Arrow.rotation = 0;
										gauge02ArrowDS.rotation = 0;
										gauge02ArrowIndicator.fill = this.redFill;
									}
								}
								else
								{
									//we default to down
									if(_gauge02CurrentValue < gaugeObject.Data.CurrentValue)
									{
										gauge02Arrow.rotation = 180;
										gauge02ArrowDS.rotation = 180;
										gauge02ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge02Arrow.rotation = 0;
										gauge02ArrowDS.rotation = 0;
										gauge02ArrowIndicator.fill = this.redFill;
									}
									
								}
							}
							else //set equals
							{
								gauge02Arrow.rotation = 90;
								gauge02ArrowDS.rotation = 90;
								gauge02ArrowIndicator.fill = this.greyFill;
							}
							
							_gauge02CurrentValue = gaugeObject.Data.CurrentValue;
							
							//Legend
							gauge02LegendLabel.y = _gaugeRadius + _fontSize/2;
							gauge02LegendLabel.x = gauge02.centerX - (_fontSize *(gaugeObject.Data.Name.length/3));
							gauge02LegendLabel.text = gaugeObject.Data.Name;
							gauge02LegendLabel.autoSizeField = true;
							
							//SiteRanking
							gauge02RankText.y = gauge02LegendLabel.y + _fontSize *1.3;
							gauge02SiteRankText.y =gauge02RankText.y + _fontSize;
							gauge02RegionRankText.y = gauge02SiteRankText.y + _fontSize;
							gauge02SiteRankText.text = "Site: " + gaugeObject.SiteRank;
							gauge02RegionRankText.text = "Region: " + gaugeObject.RegionRank;
							
							//UpDownArrow
							gauge02Arrow.x = _gaugeHandLocation + _fontSize*2;
							gauge02Arrow.y = gauge02LegendLabel.y + _fontSize*3;
							gauge02ArrowDS.x = gauge02Arrow.x +1;
							gauge02ArrowDS.y = gauge02Arrow.y +4;
							
							gauge02LeadersText.y = gauge02Arrow.y + _fontSize*2;
							
							//Leaders -- Laggers
							if(gaugeObject.TopSites != null)
							{ 
								//TopSite
								for (y = 0; y < gaugeObject.TopSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge02Leaders1.y =	gauge02LeadersText.y + _fontSize;
											gauge02Leaders1.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											
											break
										case 1 :
											gauge02Leaders2.y = gauge02Leaders1.y + _fontSize;
											gauge02Leaders2.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 2 :
											gauge02Leaders3.y = gauge02Leaders2.y + _fontSize;
											gauge02Leaders3.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										default:
											break;
									}
								}
							}
							
							gauge02LaggersText.y =gauge02Leaders3.y + _fontSize*2;
							
							if(gaugeObject.BottomSites != null)
							{
								//BottomSite
								for (y = 0; y < gaugeObject.BottomSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge02Laggers1.y = gauge02LaggersText.y + _fontSize;
											gauge02Laggers1.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 1 :
											gauge02Laggers2.y = gauge02Laggers1.y + _fontSize;
											gauge02Laggers2.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 2 :
											gauge02Laggers3.y = gauge02Laggers2.y + _fontSize;
											gauge02Laggers3.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										default:
											break;
									}
								}
							}
							break;
						case 2 :
							column03.x = _gaugeDistance + column02.x;
							//_TickDivisor = 10;
							gauge03.width = _gaugeRadius;
							gauge03.height = _gaugeRadius;
							column03.y = _gaugeY;
							
							_maximum = gaugeObject.Data.MaxValue;
							_TickDivisor = calulateTickDivisor(_maximum);
							/*_TickDivisor = 10;
							if(_maximum < 10)
							{
								_TickDivisor = 1;
							}
							*/
							
							gauge03Hand.rotation = calculateAngleFromValue(gaugeObject.Data.CurrentValue);

							gauge03Hand.x = _gaugeHandLocation + _gaugeDistance + column02.x;
							gauge03Hand.y = _gaugeHandLocation + _gaugeY;
							
							gauge03Label.x = gauge03.centerX;
							
							if(gaugeObject.Data.DisplayValue.length > 3)
							{
								gauge03Label.x = gauge03.centerX - (_fontSize *(gaugeObject.Data.DisplayValue.length/3));
							}
							
							gauge03Label.y = (_gaugeHandLocation + _gaugeRadius)/2;
							gauge03Label.text = gaugeObject.Data.DisplayValue;  
							gauge03Label.autoSizeField = true;
							
							gauge03ArrowIndicator.fill = this.redFill;
							
							if(_gauge03CurrentValue!= gaugeObject.Data.CurrentValue)
							{
								if(gaugeObject.Data.IsReverse)
								{
									//we default to down
									if(_gauge03CurrentValue > gaugeObject.Data.CurrentValue)
									{
										gauge03Arrow.rotation = 180;
										gauge03ArrowDS.rotation = 180;
										gauge03ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge03Arrow.rotation = 0;
										gauge03ArrowDS.rotation = 0;
										gauge03ArrowIndicator.fill = this.redFill;
									}
								}
								else
								{
									//we default to down
									if(_gauge03CurrentValue < gaugeObject.Data.CurrentValue)
									{
										gauge03Arrow.rotation = 180;
										gauge03ArrowDS.rotation = 180;
										gauge03ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge03Arrow.rotation = 0;
										gauge03ArrowDS.rotation = 0;
										gauge03ArrowIndicator.fill = this.redFill;
									}
									
								}
							}
							else //set equals
							{
								gauge03Arrow.rotation = 90;
								gauge03ArrowDS.rotation = 90;
								gauge03ArrowIndicator.fill = this.greyFill;
							}
							
							_gauge03CurrentValue = gaugeObject.Data.CurrentValue;
							
							
							
							//Legend
							gauge03LegendLabel.y = _gaugeRadius + _fontSize/2;
							gauge03LegendLabel.x = gauge03.centerX - (_fontSize *(gaugeObject.Data.Name.length/3));
							gauge03LegendLabel.text = gaugeObject.Data.Name;
							gauge03LegendLabel.autoSizeField = true;
							
							//reflections
							gauge03TopReflection.width= gauge03.radius *1.65;
							gauge03TopReflection.height=gauge03.radius *1.3;
							gauge03TopReflection.y= (_fontSize*.5) + _gaugeY; 
							gauge03TopReflection.x= gauge03Hand.x *.83;
							
							gauge03BottomReflection.width = gauge03.radius *1.5; 
							gauge03BottomReflection.height = gauge03.radius *1.2;
							gauge03BottomReflection.y = gauge03Hand.y *.80; 
							gauge03BottomReflection.x = gauge03Hand.x *.85;
							
							//Gauge graduation setup
							//_maximum = gaugeObject.Data.MaxValue;
							//if(_maximum < 10)
						//	{
							//	_TickDivisor = 1;
							//}
							_gauge03MajorTickCount = (gaugeObject.Data.MaxValue/_TickDivisor) +1;
							
							gauge03TickLabels = assignGaugeLabels(_gauge03MajorTickCount, _TickDivisor);
							//gauge03TickLabels = assignGaugeLabels(_gauge03MajorTickCount, _maximum);
							
							_gauge03MajorTickOffset = (_maximumAngle - _minimumAngle)/(_maximum/_TickDivisor);     					
						
							_gauge03BenchmarkArc = (gaugeObject.Data.Benchmark /gaugeObject.Data.MaxValue) * (_maximumAngle - _minimumAngle);
							
							_gauge03GreenArc = _gaugeAngle - _gauge03BenchmarkArc;
							_gauge03GreenArcStart = _GAUGESTART - _gauge03BenchmarkArc;
							
							if(gaugeObject.Data.IsReverse)
							{	     					
								Gauge03GreenArc.stroke = this.redIndicatorStroke;
								Gauge03BenchmarkArc.stroke = this.greenIndicatorStroke;
							}
							else
							{
								Gauge03GreenArc.stroke = this.greenIndicatorStroke;
								Gauge03BenchmarkArc.stroke = this.redIndicatorStroke;
							}
							
							//indicator drop shadow
							gauge03HandDS.x = gauge03Hand.x + 1;
							gauge03HandDS.y = gauge03Hand.y + 4;
							gauge03HandDS.rotation = gauge03Hand.rotation;
							
							
							//SiteRanking
							gauge03RankText.y = gauge03LegendLabel.y + _fontSize *1.3;
							gauge03SiteRankText.y =gauge03RankText.y + _fontSize;
							gauge03RegionRankText.y = gauge03SiteRankText.y + _fontSize;
							gauge03SiteRankText.text = "Site: " + gaugeObject.SiteRank;
							gauge03RegionRankText.text = "Region: " + gaugeObject.RegionRank;
							
							//UpDownArrow
							gauge03Arrow.x = _gaugeHandLocation + _fontSize*2;
							gauge03Arrow.y = gauge03LegendLabel.y + _fontSize*3;
							gauge03ArrowDS.x = gauge03Arrow.x +1;
							gauge03ArrowDS.y = gauge03Arrow.y +4;
							
							gauge03LeadersText.y = gauge03Arrow.y + _fontSize*2;
							
							//Leaders -- Laggers
							if(gaugeObject.TopSites != null)
							{   //TopSite
								for (y = 0; y < gaugeObject.TopSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge03Leaders1.y =	gauge03LeadersText.y + _fontSize;
											gauge03Leaders1.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 1 :
											gauge03Leaders2.y = gauge03Leaders1.y + _fontSize;
											gauge03Leaders2.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 2 :
											gauge03Leaders3.y = gauge03Leaders2.y + _fontSize;
											gauge03Leaders3.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;						
											break
										default:
											break;
									}
								}
							}
							
							gauge03LaggersText.y =gauge03Leaders3.y + _fontSize*2;
							
							if(gaugeObject.BottomSites != null)
							{
								//BottomSite
								for (y = 0; y < gaugeObject.BottomSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge03Laggers1.y = gauge03LaggersText.y + _fontSize;
											gauge03Laggers1.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 1 :
											gauge03Laggers2.y = gauge03Laggers1.y + _fontSize;
											gauge03Laggers2.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 2 :
											gauge03Laggers3.y = gauge03Laggers2.y + _fontSize;
											gauge03Laggers3.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										default:
											break;
									}
								}
							}
							break;
						case 3 :
							column04.x = _gaugeDistance + column03.x;
							gauge04.width = _gaugeRadius;
							gauge04.height = _gaugeRadius;
							column04.y = _gaugeY;
							
							_maximum = gaugeObject.Data.MaxValue;
							_TickDivisor = calulateTickDivisor(_maximum);
							/*_TickDivisor = 10;
							if(_maximum < 10)
							{
								_TickDivisor = 1;
							}*/
							
							gauge04Hand.rotation = calculateAngleFromValue(gaugeObject.Data.CurrentValue);
							gauge04Hand.x = _gaugeHandLocation + _gaugeDistance + column03.x;
							gauge04Hand.y = _gaugeHandLocation + _gaugeY;
							
							gauge04Label.x = gauge04.centerX;
							
							if(gaugeObject.Data.DisplayValue.length > 2)
							{
								gauge04Label.x = gauge04.centerX - (_fontSize *(gaugeObject.Data.DisplayValue.length/3));
							}
							
							gauge04Label.y = (_gaugeHandLocation + _gaugeRadius)/2;
							gauge04Label.text = gaugeObject.Data.DisplayValue;  
							gauge04Label.autoSizeField = true;
							
							gauge04ArrowIndicator.fill = this.redFill;
							
							if(_gauge04CurrentValue!= gaugeObject.Data.CurrentValue)
							{
								if(gaugeObject.Data.IsReverse)
								{
									//we default to down
									if(_gauge04CurrentValue > gaugeObject.Data.CurrentValue)
									{
										gauge04Arrow.rotation = 180;
										gauge04ArrowDS.rotation = 180;
										gauge04ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge04Arrow.rotation = 0;
										gauge04ArrowDS.rotation = 0;
										gauge04ArrowIndicator.fill = this.redFill;
									}
								}
								else
								{
									//we default to down
									if(_gauge04CurrentValue < gaugeObject.Data.CurrentValue)
									{
										gauge04Arrow.rotation = 180;
										gauge04ArrowDS.rotation = 180;
										gauge04ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge04Arrow.rotation = 0;
										gauge04ArrowDS.rotation = 0;
										gauge04ArrowIndicator.fill = this.redFill;
									}
									
								}
							}
							else //set equals
							{
								gauge04Arrow.rotation = 90;
								gauge04ArrowDS.rotation = 90;
								gauge04ArrowIndicator.fill = this.greyFill;
							}
							
							_gauge04CurrentValue = gaugeObject.Data.CurrentValue;
							
							
							//Legend
							gauge04LegendLabel.y = _gaugeRadius + _fontSize/2;
							gauge04LegendLabel.x = gauge04.centerX - (_fontSize *(gaugeObject.Data.Name.length/3));
							gauge04LegendLabel.text = gaugeObject.Data.Name;
							gauge04LegendLabel.autoSizeField = true;
							
							//reflections
							gauge04TopReflection.width= gauge04.radius *1.65;
							gauge04TopReflection.height=gauge04.radius *1.3;
							gauge04TopReflection.y= (_fontSize*.5) + _gaugeY; 
							gauge04TopReflection.x= gauge04Hand.x *.88;
							
							gauge04BottomReflection.width = gauge04.radius *1.5; 
							gauge04BottomReflection.height = gauge04.radius *1.2;
							gauge04BottomReflection.y = gauge04Hand.y *.80; 
							gauge04BottomReflection.x = gauge04Hand.x *.89;
							
							//Gauge graduation setup
							_gauge04MajorTickCount = (gaugeObject.Data.MaxValue/_TickDivisor) +1;
							
							gauge04TickLabels = assignGaugeLabels(_gauge04MajorTickCount, _TickDivisor);
							//gauge04TickLabels = assignGaugeLabels(_gauge04MajorTickCount, _maximum);
							
							_gauge04MajorTickOffset = (_maximumAngle - _minimumAngle)/(_maximum/_TickDivisor);     					
							_gauge04BenchmarkArc = (gaugeObject.Data.Benchmark /gaugeObject.Data.MaxValue) * (_maximumAngle - _minimumAngle);
							
							_gauge04GreenArc = _gaugeAngle - _gauge04BenchmarkArc;
							_gauge04GreenArcStart = _GAUGESTART - _gauge04BenchmarkArc;
							
							if(gaugeObject.Data.IsReverse)
							{	     					
								Gauge04GreenArc.stroke = this.redIndicatorStroke;
								Gauge04BenchmarkArc.stroke = this.greenIndicatorStroke;
							}
							else
							{
								Gauge04GreenArc.stroke = this.greenIndicatorStroke;
								Gauge04BenchmarkArc.stroke = this.redIndicatorStroke;
							}
							
							//indicator drop shadow
							gauge04HandDS.x = gauge04Hand.x + 1;
							gauge04HandDS.y = gauge04Hand.y + 4;
							gauge04HandDS.rotation = gauge04Hand.rotation;
							
							//SiteRanking
							gauge04RankText.y = gauge04LegendLabel.y + _fontSize *1.3;
							gauge04SiteRankText.y =gauge04RankText.y + _fontSize;
							gauge04RegionRankText.y = gauge04SiteRankText.y + _fontSize;
							gauge04SiteRankText.text = "Site: " + gaugeObject.SiteRank;
							gauge04RegionRankText.text = "Region: " + gaugeObject.RegionRank;
							
							//UpDownArrow
							gauge04Arrow.x = _gaugeHandLocation + _fontSize*2;
							gauge04Arrow.y = gauge04LegendLabel.y + _fontSize*3;
							gauge04ArrowDS.x = gauge04Arrow.x +1;
							gauge04ArrowDS.y = gauge04Arrow.y +4;
							
							
							gauge04LeadersText.y = gauge04Arrow.y + _fontSize*2;
							
							//Leaders -- Laggers
							if(gaugeObject.TopSites != null)
							{ //TopSite
								for (y = 0; y < gaugeObject.TopSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge04Leaders1.y =	gauge04LeadersText.y + _fontSize;
											gauge04Leaders1.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 1 :
											gauge04Leaders2.y = gauge04Leaders1.y + _fontSize;
											gauge04Leaders2.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 2 :
											gauge04Leaders3.y = gauge04Leaders2.y + _fontSize;
											gauge04Leaders3.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										default:
											break;
									}
								}
							}
							
							gauge04LaggersText.y =gauge04Leaders3.y + _fontSize*2;
							
							//BottomSite
							if(gaugeObject.BottomSites != null)
							{
								for (y = 0; y < gaugeObject.BottomSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge04Laggers1.y = gauge04LaggersText.y + _fontSize;
											gauge04Laggers1.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;								
											break
										case 1 :
											gauge04Laggers2.y = gauge04Laggers1.y + _fontSize;
											gauge04Laggers2.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 2 :
											gauge04Laggers3.y = gauge04Laggers2.y + _fontSize;
											gauge04Laggers3.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;						
											break
										default:
											break;
									}
								}
							}
							break;
						case 4 :
							column05.x = _gaugeDistance + column04.x;

							gauge05.width = _gaugeRadius;
							gauge05.height = _gaugeRadius;
							column05.y = _gaugeY;
							
							_maximum = gaugeObject.Data.MaxValue;
							_TickDivisor = calulateTickDivisor(_maximum);
							/*_TickDivisor = 10;
							if(_maximum < 10)
							{
								_TickDivisor = 1;
							}*/
							
							gauge05Hand.rotation = calculateAngleFromValue(gaugeObject.Data.CurrentValue);
							
							gauge05Hand.x = _gaugeHandLocation + _gaugeDistance + column04.x;
							gauge05Hand.y = _gaugeHandLocation + _gaugeY;
							
							gauge05Label.x = gauge05.centerX;
							
							if(gaugeObject.Data.DisplayValue.length > 2)
							{
								gauge05Label.x = gauge05.centerX - (_fontSize *(gaugeObject.Data.DisplayValue.length/3));
							}
							
							gauge05Label.y = (_gaugeHandLocation + _gaugeRadius)/2;
							gauge05Label.text = gaugeObject.Data.DisplayValue;  
							gauge05Label.autoSizeField = true;
							
							gauge05ArrowIndicator.fill = this.redFill;
							
							if(_gauge05CurrentValue!= gaugeObject.Data.CurrentValue)
							{
								if(gaugeObject.Data.IsReverse)
								{
									//we default to down
									if(_gauge05CurrentValue > gaugeObject.Data.CurrentValue)
									{
										gauge05Arrow.rotation = 180;
										gauge05ArrowDS.rotation = 180;
										gauge05ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge05Arrow.rotation = 0;
										gauge05ArrowDS.rotation = 0;
										gauge05ArrowIndicator.fill = this.redFill;
									}
								}
								else
								{
									//we default to down
									if(_gauge05CurrentValue < gaugeObject.Data.CurrentValue)
									{
										gauge05Arrow.rotation = 180;
										gauge05ArrowDS.rotation = 180;
										gauge05ArrowIndicator.fill = this.greenFill;
									}
									else
									{
										gauge05Arrow.rotation = 0;
										gauge05ArrowDS.rotation = 0;
										gauge05ArrowIndicator.fill = this.redFill;
									}
									
								}
							}
							else //set equals
							{
								gauge05Arrow.rotation = 90;
								gauge05ArrowDS.rotation = 90;
								gauge05ArrowIndicator.fill = this.greyFill;
							}
							
							_gauge05CurrentValue = gaugeObject.Data.CurrentValue;
							
							//Legend
							gauge05LegendLabel.y = _gaugeRadius + _fontSize/2;
							gauge05LegendLabel.x = gauge05.centerX - (_fontSize *(gaugeObject.Data.Name.length/3));
							gauge05LegendLabel.text = gaugeObject.Data.Name;
							gauge05LegendLabel.autoSizeField = true;
							
							//reflections
							gauge05TopReflection.width= gauge05.radius *1.65;
							gauge05TopReflection.height=gauge05.radius *1.3;
							gauge05TopReflection.y= (_fontSize*.5) + _gaugeY; 
							gauge05TopReflection.x= gauge05Hand.x *.91;
							
							gauge05BottomReflection.width = gauge05.radius *1.5; 
							gauge05BottomReflection.height = gauge05.radius *1.2;
							gauge05BottomReflection.y = gauge05Hand.y *.80; 
							gauge05BottomReflection.x = gauge05Hand.x *.916;
							
							//Gauge graduation setup							
							// The number of notches to dislay
							_gauge05MajorTickCount = (gaugeObject.Data.MaxValue/_TickDivisor) +1;
							
							gauge05TickLabels = assignGaugeLabels(_gauge05MajorTickCount, _TickDivisor);
							//gauge05TickLabels = assignGaugeLabels(_gauge05MajorTickCount, _maximum);
							
							_gauge05MajorTickOffset = (_maximumAngle - _minimumAngle) / (_maximum/_TickDivisor);     					
							_gauge05BenchmarkArc = (gaugeObject.Data.Benchmark /gaugeObject.Data.MaxValue) * (_maximumAngle - _minimumAngle);
							
							_gauge05GreenArc = _gaugeAngle - _gauge05BenchmarkArc;
							_gauge05GreenArcStart = _GAUGESTART - _gauge05BenchmarkArc;
							
							if(gaugeObject.Data.IsReverse)
							{	     					
								Gauge05GreenArc.stroke = this.redIndicatorStroke;
								Gauge05BenchmarkArc.stroke = this.greenIndicatorStroke;
							}
							else
							{
								Gauge05GreenArc.stroke = this.greenIndicatorStroke;
								Gauge05BenchmarkArc.stroke = this.redIndicatorStroke;
							}
							
							//indicator drop shadow
							gauge05HandDS.x = gauge05Hand.x + 1;
							gauge05HandDS.y = gauge05Hand.y + 4;
							gauge05HandDS.rotation = gauge05Hand.rotation;
							
							//SiteRanking
							gauge05RankText.y = gauge05LegendLabel.y + _fontSize *1.3;
							gauge05SiteRankText.y =gauge05RankText.y + _fontSize;
							gauge05RegionRankText.y = gauge05SiteRankText.y + _fontSize;
							gauge05SiteRankText.text = "Site: " + gaugeObject.SiteRank;
							gauge05RegionRankText.text = "Region: " + gaugeObject.RegionRank;
							
							//UpDownArrow
							gauge05Arrow.x = _gaugeHandLocation + _fontSize*2;
							gauge05Arrow.y = gauge05LegendLabel.y + _fontSize*3;
							gauge05ArrowDS.x = gauge05Arrow.x +1;
							gauge05ArrowDS.y = gauge05Arrow.y +4;
							
							gauge05LeadersText.y = gauge05Arrow.y + _fontSize*2;
							
							//TopSite
							if(gaugeObject.TopSites != null)
							{
								for (y = 0; y < gaugeObject.TopSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge05Leaders1.y =	gauge04LeadersText.y + _fontSize;
											gauge05Leaders1.text = gaugeObject.TopSites[y].rank + ". " +  gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 1 :
											gauge05Leaders2.y = gauge05Leaders1.y + _fontSize;
											gauge05Leaders2.text = gaugeObject.TopSites[y].rank + ". " +  gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 2 :
											gauge05Leaders3.y = gauge05Leaders2.y + _fontSize;
											gauge05Leaders3.text = gaugeObject.TopSites[y].rank + ". " +  gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										default:
											break;
									}
								}
							}
							
							gauge05LaggersText.y =gauge05Leaders3.y + _fontSize*2;
							
							//BottomSite
							//BottomSite
							if(gaugeObject.BottomSites != null)
							{
								for (y = 0; y < gaugeObject.BottomSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											gauge05Laggers1.y = gauge05LaggersText.y + _fontSize;
											gauge05Laggers1.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;								
											break
										case 1 :
											gauge05Laggers2.y = gauge05Laggers1.y + _fontSize;
											gauge05Laggers2.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 2 :
											gauge05Laggers3.y = gauge05Laggers2.y + _fontSize;
											gauge05Laggers3.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;						
											break
										default:
											break;
									}
								}
							}
							break;
						case 5 :
							
							column06.x = _gaugeDistance + column05.x;
							column06RankText01.y = column06Label01.y + _fontSize;
							column06SiteRank01.y = column06RankText01.y + _fontSize;
							column06RegionRank01.y = column06SiteRank01.y + _fontSize;
							column06.y = _gaugeY;
							
							column06Label01.width = 500;	
							column06Label01.text = gaugeObject.Data.Name + " " + gaugeObject.Data.DisplayValue;
							column06Label01.autoSizeField = true;
							column06SiteRank01.visible = true;
							column06SiteRank01.text = "Site: " + gaugeObject.SiteRank;
							column06RegionRank01.text = "Region: " + gaugeObject.RegionRank;
							
							column06ArrowIndicator01.fill = this.redFill;
							
							if(_column0601CurrentValue != gaugeObject.Data.CurrentValue)
							{
								if(gaugeObject.Data.IsReverse)
								{
									//we default to down
									if(_column0601CurrentValue > gaugeObject.Data.CurrentValue)
									{
										column06Arrow01.rotation = 180;
										column06ArrowDS01.rotation = 180;
										column06ArrowIndicator01.fill = this.greenFill;
									}
									else
									{
										column06Arrow01.rotation = 0;
										column06ArrowDS01.rotation = 0;
										column06ArrowIndicator01.fill = this.redFill;
									}
								}
								else
								{
									//we default to down
									if(_column0601CurrentValue < gaugeObject.Data.CurrentValue)
									{
										column06Arrow01.rotation = 180;
										column06ArrowDS01.rotation = 180;
										column06ArrowIndicator01.fill = this.greenFill;
									}
									else
									{
										column06Arrow01.rotation = 0;
										column06ArrowDS01.rotation = 0;
										column06ArrowIndicator01.fill = this.redFill;
									}
								}
							}
							else //set equals
							{
								column06Arrow01.rotation = 90;
								column06ArrowDS01.rotation = 90;
								column06ArrowIndicator01.fill = this.greyFill;
							}
							
							_column0601CurrentValue = gaugeObject.Data.CurrentValue;
							
							
							//UpDownArrow
							column06Arrow01.x = _gaugeHandLocation + _fontSize*2;
							column06Arrow01.y = column06Label01.y + _fontSize*3;
							column06ArrowDS01.x = column06Arrow01.x +1;
							column06ArrowDS01.y = column06Arrow01.y +4;
							
							column06LeadersText01.y = column06Arrow01.y + _fontSize*2;
							
							//TopSite
							if(gaugeObject.TopSites != null)
							{
								for (y = 0; y < gaugeObject.TopSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											column06Leaders101.y =	column06LeadersText01.y + _fontSize;
											column06Leaders101.text = gaugeObject.TopSites[y].rank + ". " +  gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 1 :
											column06Leaders201.y = column06Leaders101.y + _fontSize;
											column06Leaders201.text = gaugeObject.TopSites[y].rank + ". " +  gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 2 :
											column06Leaders301.y = column06Leaders201.y + _fontSize;
											column06Leaders301.text = gaugeObject.TopSites[y].rank + ". " +  gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;x;
											break
										default:
											break;
									}
								}
							}
							
							column06LaggersText01.y =column06Leaders301.y + _fontSize*1.5;
							
							
							//BottomSite
							if(gaugeObject.BottomSites != null)
							{
								for (y = 0; y < gaugeObject.BottomSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											column06Laggers101.y = column06LaggersText01.y + _fontSize;
											column06Laggers101.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 1 :
											column06Laggers201.y = column06Laggers101.y + _fontSize;
											column06Laggers201.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 2 :
											column06Laggers301.y = column06Laggers201.y + _fontSize;
											column06Laggers301.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										default:
											break;
									}
								}
							}
							
							break;
						case 6:
							column06LeadersLine02.y = column06Laggers301.y + _fontSize*2;
							column06Label02.y = column06LeadersLine02.y;
							column06RankText02.y = column06Label02.y + _fontSize;
							column06SiteRank02.y = column06RankText02.y + _fontSize;
							column06RegionRank02.y = column06SiteRank02.y + _fontSize;
							
							column06Label02.text = gaugeObject.Data.Name + " " + gaugeObject.Data.DisplayValue;
							column06Label02.autoSizeField = true;
							
							column06SiteRank02.text = "Site: " + gaugeObject.SiteRank;
							column06RegionRank02.text = "Region: " + gaugeObject.RegionRank;
							
							column06LeadersLine02.x1 = _gaugeRadius;
							
							column06ArrowIndicator02.fill = this.redFill;
							
							if(_column0602CurrentValue != gaugeObject.Data.CurrentValue)
							{
								if(gaugeObject.Data.IsReverse)
								{
									//we default to down
									if(_column0602CurrentValue > gaugeObject.Data.CurrentValue)
									{
										column06Arrow02.rotation = 180;
										column06ArrowDS02.rotation = 180;
										column06ArrowIndicator01.fill = this.greenFill;
									}
									else
									{
										column06Arrow02.rotation = 0;
										column06ArrowDS02.rotation = 0;
										column06ArrowIndicator02.fill = this.redFill;
									}
								}
								else
								{
									//we default to down
									if(_column0602CurrentValue < gaugeObject.Data.CurrentValue)
									{
										column06Arrow02.rotation = 180;
										column06ArrowDS02.rotation = 180;
										column06ArrowIndicator02.fill = this.greenFill;
									}
									else
									{
										column06Arrow02.rotation = 0;
										column06ArrowDS02.rotation = 0;
										column06ArrowIndicator02.fill = this.redFill;
									}
								}
							}
							else //set equals
							{
								column06Arrow02.rotation = 90;
								column06ArrowDS02.rotation = 90;
								column06ArrowIndicator02.fill = this.greyFill;
							}
							
							_column0602CurrentValue = gaugeObject.Data.CurrentValue;
							
							
							//UpDownArrow
							column06Arrow02.x = _gaugeHandLocation + _fontSize*2;
							column06Arrow02.y = column06Label02.y + _fontSize*3;
							column06ArrowDS02.x = column06Arrow02.x +1;
							column06ArrowDS02.y = column06Arrow02.y +4;
							
							column06LeadersText02.y = column06Arrow02.y + _fontSize*1.5;
							
							//TopSite
							if(gaugeObject.TopSites != null)
							{
								for (y = 0; y < gaugeObject.TopSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											column06Leaders102.y =	column06LeadersText02.y + _fontSize;
											column06Leaders102.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 1 :
											column06Leaders202.y = column06Leaders102.y + _fontSize;
											column06Leaders202.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										case 2 :
											column06Leaders302.y = column06Leaders202.y + _fontSize;
											column06Leaders302.text = gaugeObject.TopSites[y].rank + ". " + gaugeObject.TopSites[y].name 
											+ " " + gaugeObject.TopSites[y].value;
											break
										default:
											break;
									}
								}
							}
							
							column06LaggersText02.y =column06Leaders302.y + _fontSize*2;
							
							//BottomSite
							if(gaugeObject.BottomSites != null)
							{
								for (y = 0; y < gaugeObject.BottomSites.length; y++)
								{
									switch (y) { 
										case 0 : 
											column06Laggers102.y = column06LaggersText02.y + _fontSize;
											column06Laggers102.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;		
											break
										case 1 :
											column06Laggers202.y = column06Laggers102.y + _fontSize;
											column06Laggers202.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										case 2 :
											column06Laggers302.y = column06Laggers202.y + _fontSize;
											column06Laggers302.text = gaugeObject.BottomSites[y].rank + ". " + gaugeObject.BottomSites[y].name 
											+ " " + gaugeObject.BottomSites[y].value;
											break
										default:
											break;
									}
								}
							}
							
							break;
						default : 
							
							break;
					}
				}
					
					headOfficeLabel.autoSizeField = true;
					
					if (json != null && json.HeadOfficeMessage == null)
					{
						json.HeadOfficeMessage = "";
					}
					if (json != null && json.SiteName == null)
					{
						json.SiteName = "";
					}
					headOfficeLabel.text = json.SiteName + " : " + json.HeadOfficeMessage;
					
					var x:int;
					
					if (json != null && json.Scrollers.length > 0)
					{
						for (x = 0; x < json.Scrollers.length; x++)
						{
							var scroller:Object = json.Scrollers[x];
							
							switch (x) { 
								case 0 : 
									OTD_TEXT = json.Scrollers[x].Data;
									Scroller1TLA.text  = json.Scrollers[x].Name;
									break;
								case 1 : 
									OPD_TEXT = json.Scrollers[x].Data;
									Scroller2TLA.text  = json.Scrollers[x].Name;
									break;
								case 2 : 
									TICKET_TEXT = json.Scrollers[x].Data;
									Scroller3TLA.text  = json.Scrollers[x].Name;
									break;
							}	
						}
					}					
				}
				
				
			}//end for loop?
			
			public function setDial():void
			{
				dashboardData.send();   	
			}
			
			
			
			[Persistent]
			public function get valueScale () : String {
				return _valueScale;
			}
			
			public function calculateAngleFromValue (v : Number) : Number {
				
				var ratio : Number = (v - _minimum) / (_maximum  -_minimum); //percentage value
				
				if (valueScale == SCALE_LOG) {       		
					//On less than 1 values set to 1 otherwise log function gets odd.
					if (v < 1) 
						v = 1;      		
					
					var computedMaximum : Number = Math.ceil(Math.log(_maximum) / Math.LN10);
					var computedMinimum : Number = Math.floor(Math.log(_minimum) / Math.LN10);
					
					ratio = (Math.log(v) * Math.LOG10E) / (computedMaximum - computedMinimum);
					
				}
				
				var angle : Number = (_maximumAngle - _minimumAngle) * ratio + _minimumAngle;  
				
				return angle;
				
				
			}
			
			public function calulateTickDivisor (maximum:int) : int
			{
				var maximumString:String = String(maximum);
				var maximumDigits:int = maximumString.length;
				var tickDivisorString:String = "1";
				
				while (maximumDigits > 1)
				{
					tickDivisorString = tickDivisorString + "0";
					maximumDigits--;
				}							
				
				var tickDivisor:int = parseInt(tickDivisorString);
				
				if (tickDivisor == maximum)
				{
					tickDivisor = tickDivisor / 10;
				}
				
				return tickDivisor;
			}
			
			public function generateTickArray (notches:int, tickDivisor:int) : Array 
			{							
				var ticks:Array = new Array(notches);
				
				var tickIncrement:int = tickDivisor;
				var tick:int = 0;
				var index:int = 0;
				while(index < notches)
				{
					ticks[index] = String(tick);
					
					tick += tickIncrement;
					
					index++;
				}
				
				return ticks;				
			}
			
			//cross domain xml has already been set up, doesn't usually work from local dev to live json.
			//http://curtismorley.com/2007/09/01/flash-flex-tutorial-how-to-create-a-crossdomainxml-file/
			//http://localhost/WebDashboard/home/FlexData
			//http://dashboard.androtechnology.co.uk/Dashboard/Home/FlexData/
			
		]]>
	</mx:Script>

	<!--
	<mx:HTTPService id="dashboardData" url="http://test.androtechnology.co.uk/Dashboard/Home/FlexData/{myName}" 
					resultFormat="text" result="onResult(event)"  fault="onFault(event)">
		<mx:request>
			<output>json</output>
		</mx:request>
	</mx:HTTPService>
	
	
-->
	
	
	<mx:HTTPService id="dashboardData" url="http://dashboard.androtechnology.co.uk/Dashboard/Home/FlexData/{myName}" 
					resultFormat="text" result="onResult(event)"  fault="onFault(event)">
		<mx:request>
			<output>json</output>
		</mx:request>
	</mx:HTTPService>	
	
	<!--
	<mx:HTTPService id="dashboardData" fault="onFault(event)" result="onResult(event)"  resultFormat="text" url="http://localhost/WebDashboard/Home/FlexData/{myName}">
		<mx:request>
			<output>json</output>
		</mx:request>
	</mx:HTTPService>
	-->
	
	
	<degrafa:Surface id="dashboardSurface" x="10" y="10">
		
		<degrafa:fills>
			<degrafa:RadialGradientFill id="greyRadFill" cx="40" cy="20" radius="440">
				<degrafa:GradientStop color="#333333"/>
				<degrafa:GradientStop color="#000000"/>
			</degrafa:RadialGradientFill>
			
			<degrafa:SolidFill id="whiteFill" color="#FFFFFF"/>
			<degrafa:SolidFill id="greyFill" alpha=".6" color="#CCCCCC"/>
			<degrafa:SolidFill id="blackFill" alpha=".3" color="#000000"/>
			
			<degrafa:SolidFill id="greenFill" color="Green"/>
			<degrafa:SolidFill id="redFill" color="Red"/>
			
			<paint:LinearGradientFill id="reflectionFillTop" angle="90">
				<paint:GradientStop alpha=".6" color="#FFFFFF" ratio="0"/>
				<paint:GradientStop alpha="0" color="#FFFFFF" ratio=".65"/>
			</paint:LinearGradientFill>
			
			<paint:LinearGradientFill id="reflectionFillBottom" angle="270">
				<paint:GradientStop alpha=".2" color="#FFFFFF"/>
				<paint:GradientStop alpha="0" color="#FFFFFF" ratio=".3"/>
			</paint:LinearGradientFill>
			
			<paint:LinearGradientFill id="indicatorFill">
				<paint:GradientStop color="red"/>
				<paint:GradientStop color="ColorUtil.adjustBrightness2(red,-15)"/>
			</paint:LinearGradientFill>
		</degrafa:fills>
		
		
		<degrafa:strokes>
			<degrafa:SolidStroke id="greyStroke" alpha=".3" caps="none" color="#CCCCCC" weight="2"/>
			<degrafa:SolidStroke id="whiteStroke" alpha="1" caps="none" color="#FFFFFF" weight="1"/> 
			<degrafa:SolidStroke id="blackStroke" alpha=".3" caps="none" color="#000000" weight="2"/>
			
			<paint:RadialGradientStroke id="blueGradient" weight="8">
				<paint:GradientStop alpha=".3" color="#CCCCCC" ratio=".8"/>
				<paint:GradientStop alpha=".8" color="#FFFFFF" ratio="1"/>
			</paint:RadialGradientStroke>
			<paint:SolidStroke id="majorMarksStroke" alpha=".7" color="#FFFFFF"
							   weight="{_fontSize/10}"/>
			
			<paint:SolidStroke id="redIndicatorStroke" caps="none" color="Red"
							   suppressEventProcessing="true" weight="{_fontSize}"/>
			<paint:SolidStroke id="greenIndicatorStroke" caps="none" color="Green"
							   suppressEventProcessing="true" weight="{_fontSize}"/>
			
		</degrafa:strokes>
		
		
		<!-- HEADOFFICE MESSAGE -->
		<degrafa:GeometryGroup id="headOfficeMessage">            
			<geometry:RegularRectangle width="{_headOfficeMessageWidth}"
									   height="{_headOfficeMessageHeight}" fill="{blackFill}"
									   stroke="{blackStroke}"/>
			<!-- 01 text  -->      
			<degrafa:RasterText id="headOfficeLabel" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" textColor="#FFFFFF"/>
		</degrafa:GeometryGroup>
		
		
		<!-- GAUGE 01 -->
		<degrafa:GeometryGroup id="column01">            
			<geometry:RegularRectangle width="{_columnWidth}" height="{_columnHeight}"
									   fill="{blackFill}" stroke="{blackStroke}"/>
			<!-- 01 Face  -->
			<degrafa:Circle id="gauge01" fill="{ greyRadFill }" stroke="{blueGradient}"/>
			
			<!-- 01 text  -->      
			<degrafa:RasterText id="gauge01Label" fontFamily="Arial" fontSize="{_fontSize *1.4}"
								fontWeight="bold" textColor="#FFFFFF"/>
			
			<degrafa:RasterText id="gauge01LegendLabel" fontFamily="Arial"
								fontSize="{_fontSize *1.4}" fontWeight="bold" textColor="#FFFFFF"/>
			
			<degrafa:RasterText id="gauge01RankText" fontFamily="Arial" fontSize="{_fontSize}"
								text="Rankings" textColor="#999999"/>
			<degrafa:RasterText id="gauge01SiteRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge01RegionRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			
			<!-- Up/Down Arrow-->
			<degrafa:GeometryGroup id="gauge01ArrowDS">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge01ArrowIndicatorDS"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)          }"
								 fill="{blackFill}"/>
			</degrafa:GeometryGroup>		 
			<degrafa:GeometryGroup id="gauge01Arrow">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge01ArrowIndicator"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)          }"/>
			</degrafa:GeometryGroup>
			
			<!--Leaders/Laggers-->	
			<degrafa:RasterText id="gauge01LeadersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Leaders" textColor="#999999"/>
			<degrafa:RasterText id="gauge01Leaders1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge01Leaders2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge01Leaders3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge01LaggersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Laggers" textColor="#999999"/>
			<degrafa:RasterText id="gauge01Laggers1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge01Laggers2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge01Laggers3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			
			<!-- Benchmark arcs -->
			<geometry:EllipticalArc id="Gauge01BenchmarkArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge01BenchmarkArc}"
									closureType="open" startAngle="{_GAUGESTART}"/>
			<!-- Green arcs -->
			<geometry:EllipticalArc id="Gauge01GreenArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge01GreenArc}"
									closureType="open" startAngle="{_gauge01GreenArcStart}"/>
			
			<degrafa:GeometryRepeater count="{_gauge01MajorTickCount}">
				<degrafa:RegularRectangle x="{_gaugeRadius*.5}" y="{_gaugeRadius*.05}" width="2"
										  height="{_fontSize *.5}" stroke="{majorMarksStroke}">
					<degrafa:transform>
						<degrafa:RotateTransform id="Rtransform01" angle="{_gaugeAngle}"
												 centerX="{_gaugeHandLocation}"
												 centerY="{_gaugeHandLocation}"/>
					</degrafa:transform>
				</degrafa:RegularRectangle>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge01MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[Rtransform01]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
			<degrafa:GeometryRepeater count="{_gauge01MajorTickCount}">
				<degrafa:RasterText id="gauge01GaugeText" x="{_gaugeRadius*.5}" y="{_gaugeRadius*.1}"
									align="left" fontFamily="Arial" fontSize="{_fontSize *.8}"
									fontWeight="bold" textColor="#999999">
					<degrafa:transform>
						<degrafa:TransformGroup>
							<degrafa:RotateTransform id="RtransformG01" angle="{_gaugeAngle -5}"
													 centerX="{_gaugeHandLocation}"
													 centerY="{_gaugeHandLocation}"/>
							<!-- <degrafa:RotateTransform id="numberRotate" registrationPoint="center" /> -->
						</degrafa:TransformGroup>
					</degrafa:transform>
				</degrafa:RasterText>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge01MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[RtransformG01]}"/>
					<!--<degrafa:PropertyModifier targets="{[numberRotate]}" property="angle"  modifier="{_gauge01MajorTickOffset-20}"  modifierOperator="add"/>-->
					<degrafa:PropertyModifier modifier="{gauge01TickLabels}" modifierOperator="none"
											  property="text" targets="{[gauge01GaugeText]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
			
		</degrafa:GeometryGroup>
		
		
		<!-- 01 hand --> 
		<degrafa:GeometryGroup id="gauge01HandDS">
			<!-- Indicator a Polygon Shadow. -->
			<degrafa:Polygon id="gauge01LineDS"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{blackFill}"/>
		</degrafa:GeometryGroup>
		<degrafa:GeometryGroup id="gauge01Hand">
			<!-- Indicator a Polygon. -->
			<degrafa:Polygon id="gauge01Line"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{indicatorFill}"/>
		</degrafa:GeometryGroup>
		
		
		<degrafa:GeometryGroup visible="true">
			<geometry:Ellipse id="gauge01TopReflection" fill="{reflectionFillTop}"/>
			<geometry:Ellipse id="gauge01BottomReflection" fill="{reflectionFillBottom}"/>
		</degrafa:GeometryGroup>
		
		<!-- GAUGE 02 -->
		<degrafa:GeometryGroup id="column02">          
			<geometry:RegularRectangle width="{_columnWidth}" height="{_columnHeight}"
									   fill="{blackFill}" stroke="{blackStroke}"/>
			<!-- 02 Face  -->
			<degrafa:Circle id="gauge02" fill="{ greyRadFill }" stroke="{blueGradient}"/>
			<!-- 02 text  -->      
			<degrafa:RasterText id="gauge02Label" fontFamily="Arial" fontSize="{_fontSize *1.4}"
								fontWeight="bold" textColor="#FFFFFF"/>
			
			<degrafa:RasterText id="gauge02LegendLabel" fontFamily="Arial"
								fontSize="{_fontSize *1.4}" fontWeight="bold" textColor="#FFFFFF"/>
			
			<degrafa:RasterText id="gauge02RankText" fontFamily="Arial" fontSize="{_fontSize}"
								text="Rankings" textColor="#999999"/>
			<degrafa:RasterText id="gauge02SiteRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge02RegionRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			
			<!-- Up/Down Arrow-->
			<degrafa:GeometryGroup id="gauge02ArrowDS">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge02ArrowIndicatorDS"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)           }"
								 fill="{blackFill}"/>
			</degrafa:GeometryGroup>		 
			<degrafa:GeometryGroup id="gauge02Arrow">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge02ArrowIndicator"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)           }"/>
			</degrafa:GeometryGroup>
			
			<!--Leaders/Laggers-->	
			<degrafa:RasterText id="gauge02LeadersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Leaders" textColor="#999999"/>
			<degrafa:RasterText id="gauge02Leaders1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge02Leaders2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge02Leaders3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge02LaggersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Laggers" textColor="#999999"/>
			<degrafa:RasterText id="gauge02Laggers1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge02Laggers2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge02Laggers3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			
			<!-- Benchmark arcs -->
			<geometry:EllipticalArc id="Gauge02BenchmarkArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge02BenchmarkArc}"
									closureType="open" startAngle="{_GAUGESTART}"/>
			<!-- Green arcs -->
			<geometry:EllipticalArc id="Gauge02GreenArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge02GreenArc}"
									closureType="open" startAngle="{_gauge02GreenArcStart}"/>
			
			
			<degrafa:GeometryRepeater count="{_gauge02MajorTickCount}">
				<degrafa:RegularRectangle x="{_gaugeRadius*.5}" y="{_gaugeRadius*.05}" width="2"
										  height="{_fontSize *.5}" stroke="{majorMarksStroke}">
					<degrafa:transform>
						<degrafa:RotateTransform id="Rtransform02" angle="{_gaugeAngle}"
												 centerX="{_gaugeHandLocation}"
												 centerY="{_gaugeHandLocation}"/>
					</degrafa:transform>
				</degrafa:RegularRectangle>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge02MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[Rtransform02]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
			<degrafa:GeometryRepeater count="{_gauge02MajorTickCount}">
				<degrafa:RasterText id="gauge02GaugeText" x="{_gaugeRadius*.5}" y="{_gaugeRadius*.1}"
									align="left" fontFamily="Arial" fontSize="{_fontSize *.8}"
									fontWeight="bold" textColor="#999999">
					<degrafa:transform>
						<degrafa:TransformGroup>
							<degrafa:RotateTransform id="RtransformG02" angle="{_gaugeAngle -5}"
													 centerX="{_gaugeHandLocation}"
													 centerY="{_gaugeHandLocation}"/>
							<!-- <degrafa:RotateTransform id="numberRotate" registrationPoint="center" /> -->
						</degrafa:TransformGroup>
					</degrafa:transform>
				</degrafa:RasterText>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge02MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[RtransformG02]}"/>
					<!--<degrafa:PropertyModifier targets="{[numberRotate]}" property="angle"  modifier="{_gauge01MajorTickOffset-20}"  modifierOperator="add"/>-->
					<degrafa:PropertyModifier modifier="{gauge02TickLabels}" modifierOperator="none"
											  property="text" targets="{[gauge02GaugeText]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
		</degrafa:GeometryGroup>
		
		<!-- 02 hand --> 
		<degrafa:GeometryGroup id="gauge02HandDS">
			<!-- Indicator a Polygon Shadow. -->
			<degrafa:Polygon id="gauge02LineDS"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{blackFill}"/>
		</degrafa:GeometryGroup>
		<degrafa:GeometryGroup id="gauge02Hand">
			<!-- Indicator a Polygon. -->
			<degrafa:Polygon id="gauge02Line"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{indicatorFill}"/>
		</degrafa:GeometryGroup>
		
		<degrafa:GeometryGroup visible="true">
			<geometry:Ellipse id="gauge02TopReflection" fill="{reflectionFillTop}"/>
			<geometry:Ellipse id="gauge02BottomReflection" fill="{reflectionFillBottom}"/>
		</degrafa:GeometryGroup>
		
		<!-- GAUGE 03 -->
		<degrafa:GeometryGroup id="column03">          
			<geometry:RegularRectangle width="{_columnWidth}" height="{_columnHeight}"
									   fill="{blackFill}" stroke="{blackStroke}"/>
			<!-- 03 Face  -->
			<degrafa:Circle id="gauge03" fill="{ greyRadFill }" stroke="{blueGradient}"/>
			<!-- 03 text  -->      
			<degrafa:RasterText id="gauge03Label" fontFamily="Arial" fontSize="{_fontSize *1.4}"
								fontWeight="bold" textColor="#FFFFFF"/>
			
			<degrafa:RasterText id="gauge03LegendLabel" fontFamily="Arial"
								fontSize="{_fontSize *1.4}" fontWeight="bold" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge03RankText" fontFamily="Arial" fontSize="{_fontSize}"
								text="Rankings" textColor="#999999"/>
			<degrafa:RasterText id="gauge03SiteRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge03RegionRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			
			<!-- Up/Down Arrow-->
			<degrafa:GeometryGroup id="gauge03ArrowDS">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge03ArrowIndicatorDS"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)           }"
								 fill="{blackFill}"/>
			</degrafa:GeometryGroup>		 
			<degrafa:GeometryGroup id="gauge03Arrow">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge03ArrowIndicator"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)           }"/>
			</degrafa:GeometryGroup>
			
			<!--Leaders/Laggers-->	
			<degrafa:RasterText id="gauge03LeadersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Leaders" textColor="#999999"/>
			<degrafa:RasterText id="gauge03Leaders1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge03Leaders2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge03Leaders3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge03LaggersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Laggers" textColor="#999999"/>
			<degrafa:RasterText id="gauge03Laggers1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge03Laggers2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge03Laggers3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			
			<!-- Benchmark arcs -->
			<geometry:EllipticalArc id="Gauge03BenchmarkArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge03BenchmarkArc}"
									closureType="open" startAngle="{_GAUGESTART}"/>
			<!-- Green arcs -->
			<geometry:EllipticalArc id="Gauge03GreenArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge03GreenArc}"
									closureType="open" startAngle="{_gauge03GreenArcStart}"/>
			
			
			<degrafa:GeometryRepeater count="{_gauge03MajorTickCount}">
				<degrafa:RegularRectangle x="{_gaugeRadius*.5}" y="{_gaugeRadius*.05}" width="2"
										  height="{_fontSize *.5}" stroke="{majorMarksStroke}">
					<degrafa:transform>
						<degrafa:RotateTransform id="Rtransform03" angle="{_gaugeAngle}"
												 centerX="{_gaugeHandLocation}"
												 centerY="{_gaugeHandLocation}"/>
					</degrafa:transform>
				</degrafa:RegularRectangle>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge03MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[Rtransform03]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
			<degrafa:GeometryRepeater count="{_gauge03MajorTickCount}">
				<degrafa:RasterText id="gauge03GaugeText" x="{_gaugeRadius*.5}" y="{_gaugeRadius*.1}"
									align="left" fontFamily="Arial" fontSize="{_fontSize *.8}"
									fontWeight="bold" textColor="#999999">
					<degrafa:transform>
						<degrafa:TransformGroup>
							<degrafa:RotateTransform id="RtransformG03" angle="{_gaugeAngle -5}"
													 centerX="{_gaugeHandLocation}"
													 centerY="{_gaugeHandLocation}"/>
							<!-- <degrafa:RotateTransform id="numberRotate" registrationPoint="center" /> -->
						</degrafa:TransformGroup>
					</degrafa:transform>
				</degrafa:RasterText>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge03MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[RtransformG03]}"/>
					<!--<degrafa:PropertyModifier targets="{[numberRotate]}" property="angle"  modifier="{_gauge01MajorTickOffset-20}"  modifierOperator="add"/>-->
					<degrafa:PropertyModifier modifier="{gauge03TickLabels}" modifierOperator="none"
											  property="text" targets="{[gauge03GaugeText]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
		</degrafa:GeometryGroup>  
		
		<!-- 03 hand -->        
		<degrafa:GeometryGroup id="gauge03HandDS">
			<!-- Indicator a Polygon Shadow. -->
			<degrafa:Polygon id="gauge03LineDS"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{blackFill}"/>
		</degrafa:GeometryGroup>
		<degrafa:GeometryGroup id="gauge03Hand">
			<!-- Indicator a Polygon. -->
			<degrafa:Polygon id="gauge03Line"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{indicatorFill}"/>
		</degrafa:GeometryGroup>
		
		<degrafa:GeometryGroup visible="true">
			<geometry:Ellipse id="gauge03TopReflection" fill="{reflectionFillTop}"/>
			<geometry:Ellipse id="gauge03BottomReflection" fill="{reflectionFillBottom}"/>
		</degrafa:GeometryGroup>
		
		<!-- GAUGE 04 -->
		<degrafa:GeometryGroup id="column04">          
			<geometry:RegularRectangle width="{_columnWidth}" height="{_columnHeight}"
									   fill="{blackFill}" stroke="{blackStroke}"/>
			<!-- 04 Face  -->
			<degrafa:Circle id="gauge04" fill="{ greyRadFill }" stroke="{blueGradient}"/>
			<!-- 04 text  -->      
			<degrafa:RasterText id="gauge04Label" fontFamily="Arial" fontSize="{_fontSize *1.4}"
								fontWeight="bold" textColor="#FFFFFF"/>
			
			<degrafa:RasterText id="gauge04LegendLabel" fontFamily="Arial"
								fontSize="{_fontSize *1.4}" fontWeight="bold" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge04RankText" fontFamily="Arial" fontSize="{_fontSize}"
								text="Rankings" textColor="#999999"/>
			<degrafa:RasterText id="gauge04SiteRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge04RegionRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			
			<!-- Up/Down Arrow-->
			<degrafa:GeometryGroup id="gauge04ArrowDS">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge04ArrowIndicatorDS"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)           }"
								 fill="{blackFill}"/>
			</degrafa:GeometryGroup>		 
			<degrafa:GeometryGroup id="gauge04Arrow">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge04ArrowIndicator"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)           }"/>
			</degrafa:GeometryGroup>           
			<!--Leaders/Laggers-->	
			<degrafa:RasterText id="gauge04LeadersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Leaders" textColor="#999999"/>
			<degrafa:RasterText id="gauge04Leaders1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge04Leaders2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge04Leaders3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge04LaggersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Laggers" textColor="#999999"/>
			<degrafa:RasterText id="gauge04Laggers1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge04Laggers2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge04Laggers3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			
			<!-- Benchmark arcs -->
			<geometry:EllipticalArc id="Gauge04BenchmarkArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge04BenchmarkArc}"
									closureType="open" startAngle="{_GAUGESTART}"/>
			<!-- Green arcs -->
			<geometry:EllipticalArc id="Gauge04GreenArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge04GreenArc}"
									closureType="open" startAngle="{_gauge04GreenArcStart}"/>
			
			
			<degrafa:GeometryRepeater count="{_gauge04MajorTickCount}">
				<degrafa:RegularRectangle x="{_gaugeRadius*.5}" y="{_gaugeRadius*.05}" width="2"
										  height="{_fontSize *.5}" stroke="{majorMarksStroke}">
					<degrafa:transform>
						<degrafa:RotateTransform id="Rtransform04" angle="{_gaugeAngle}"
												 centerX="{_gaugeHandLocation}"
												 centerY="{_gaugeHandLocation}"/>
					</degrafa:transform>
				</degrafa:RegularRectangle>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge04MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[Rtransform04]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
			<degrafa:GeometryRepeater count="{_gauge04MajorTickCount}">
				<degrafa:RasterText id="gauge04GaugeText" x="{_gaugeRadius*.5}" y="{_gaugeRadius*.1}"
									align="left" fontFamily="Arial" fontSize="{_fontSize *.8}"
									fontWeight="bold" textColor="#999999">
					<degrafa:transform>
						<degrafa:TransformGroup>
							<degrafa:RotateTransform id="RtransformG04" angle="{_gaugeAngle - 5}"
													 centerX="{_gaugeHandLocation}"
													 centerY="{_gaugeHandLocation}"/>
							<!-- <degrafa:RotateTransform id="numberRotate" registrationPoint="center" /> -->
						</degrafa:TransformGroup>
					</degrafa:transform>
				</degrafa:RasterText>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge04MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[RtransformG04]}"/>
					<!--<degrafa:PropertyModifier targets="{[numberRotate]}" property="angle"  modifier="{_gauge01MajorTickOffset-20}"  modifierOperator="add"/>-->
					<degrafa:PropertyModifier modifier="{gauge04TickLabels}" modifierOperator="none"
											  property="text" targets="{[gauge04GaugeText]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
		</degrafa:GeometryGroup>  
		
		<!-- 04 hand -->        
		<degrafa:GeometryGroup id="gauge04HandDS">
			<!-- Indicator a Polygon Shadow. -->
			<degrafa:Polygon id="gauge04LineDS"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{blackFill}"/>
		</degrafa:GeometryGroup>
		<degrafa:GeometryGroup id="gauge04Hand">
			<!-- Indicator a Polygon. -->
			<degrafa:Polygon id="gauge04Line"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{indicatorFill}"/>
		</degrafa:GeometryGroup>
		
		<degrafa:GeometryGroup visible="true">
			<geometry:Ellipse id="gauge04TopReflection" fill="{reflectionFillTop}"/>
			<geometry:Ellipse id="gauge04BottomReflection" fill="{reflectionFillBottom}"/>
		</degrafa:GeometryGroup>
		
		
		<!-- GAUGE 05 -->
		<degrafa:GeometryGroup id="column05">          
			<geometry:RegularRectangle width="{_columnWidth}" height="{_columnHeight}"
									   fill="{blackFill}" stroke="{blackStroke}"/>
			<!-- 05 Face  -->
			<degrafa:Circle id="gauge05" fill="{ greyRadFill }" stroke="{blueGradient}"/>
			<!-- 05 text  -->      
			<degrafa:RasterText id="gauge05Label" fontFamily="Arial" fontSize="{_fontSize *1.4}"
								fontWeight="bold" textColor="#FFFFFF"/>
			
			<degrafa:RasterText id="gauge05LegendLabel" fontFamily="Arial"
								fontSize="{_fontSize *1.4}" fontWeight="bold" textColor="#FFFFFF"/>
			
			<degrafa:RasterText id="gauge05RankText" fontFamily="Arial" fontSize="{_fontSize}"
								text="Rankings" textColor="#999999"/>
			<degrafa:RasterText id="gauge05SiteRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge05RegionRankText" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>
			
			<!-- Up/Down Arrow-->
			<degrafa:GeometryGroup id="gauge05ArrowDS">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge05ArrowIndicatorDS"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)           }"
								 fill="{blackFill}"/>
			</degrafa:GeometryGroup>		 
			<degrafa:GeometryGroup id="gauge05Arrow">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="gauge05ArrowIndicator"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)           }"/>
			</degrafa:GeometryGroup>
			
			<!--Leaders/Laggers-->	
			<degrafa:RasterText id="gauge05LeadersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Leaders" textColor="#999999"/>
			<degrafa:RasterText id="gauge05Leaders1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge05Leaders2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge05Leaders3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge05LaggersText" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Laggers" textColor="#999999"/>
			<degrafa:RasterText id="gauge05Laggers1" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge05Laggers2" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="gauge05Laggers3" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			
			<!-- Benchmark arcs -->
			<geometry:EllipticalArc id="Gauge05BenchmarkArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge05BenchmarkArc}"
									closureType="open" startAngle="{_GAUGESTART}"/>
			<!-- Green arcs -->
			<geometry:EllipticalArc id="Gauge05GreenArc" x="{_gaugeRadius*.055}"
									y="{_gaugeRadius*.063}" width="{_gaugeRadius*.89}"
									height="{_gaugeRadius*.89}" arc="{-_gauge05GreenArc}"
									closureType="open" startAngle="{_gauge05GreenArcStart}"/>
			
			
			<degrafa:GeometryRepeater count="{_gauge05MajorTickCount}">
				<degrafa:RegularRectangle x="{_gaugeRadius*.5}" y="{_gaugeRadius*.05}" width="2"
										  height="{_fontSize *.5}" stroke="{majorMarksStroke}">
					<degrafa:transform>
						<degrafa:RotateTransform id="Rtransform05" angle="{_gaugeAngle}"
												 centerX="{_gaugeHandLocation}"
												 centerY="{_gaugeHandLocation}"/>
					</degrafa:transform>
				</degrafa:RegularRectangle>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge05MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[Rtransform05]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
			<degrafa:GeometryRepeater count="{_gauge05MajorTickCount}">
				<degrafa:RasterText id="gauge05GaugeText" x="{_gaugeRadius*.5}" y="{_gaugeRadius*.1}"
									align="left" fontFamily="Arial" fontSize="{_fontSize *.8}"
									fontWeight="bold" textColor="#999999">
					<degrafa:transform>
						<degrafa:TransformGroup>
							<degrafa:RotateTransform id="RtransformG05" angle="{_gaugeAngle - 5}"
													 centerX="{_gaugeHandLocation}"
													 centerY="{_gaugeHandLocation}"/>
							<!-- <degrafa:RotateTransform id="numberRotate" registrationPoint="center" /> -->
						</degrafa:TransformGroup>
					</degrafa:transform>
				</degrafa:RasterText>
				<degrafa:modifiers>
					<degrafa:PropertyModifier modifier="{_gauge05MajorTickOffset}"
											  modifierOperator="add" property="angle"
											  targets="{[RtransformG05]}"/>
					<!--<degrafa:PropertyModifier targets="{[numberRotate]}" property="angle"  modifier="{_gauge01MajorTickOffset-20}"  modifierOperator="add"/>-->
					<degrafa:PropertyModifier modifier="{gauge05TickLabels}" modifierOperator="none"
											  property="text" targets="{[gauge05GaugeText]}"/>
				</degrafa:modifiers>
			</degrafa:GeometryRepeater>
			
		</degrafa:GeometryGroup>
		
		<!-- 05 hand -->        
		<degrafa:GeometryGroup id="gauge05HandDS">
			<!-- Indicator a Polygon Shadow. -->
			<degrafa:Polygon id="gauge05LineDS"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{blackFill}"/>
		</degrafa:GeometryGroup>
		<degrafa:GeometryGroup id="gauge05Hand">
			<!-- Indicator a Polygon. -->
			<degrafa:Polygon id="gauge05Line"
							 data="{         String(_gaugeRadius*-.03) + ',' + String(_gaugeRadius*-.16) + ' ' +          String(_gaugeRadius*-.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*-.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(0) + ',' + String(_gaugeRadius*.46) + ' ' +         String(_gaugeRadius*.01) + ',' + String(_gaugeRadius*.45) + ' ' +         String(_gaugeRadius*.04) + ',' + String(_gaugeRadius*-.15) + ' ' +         String(_gaugeRadius*.03) + ',' + String(_gaugeRadius*-.16)          }"
							 fill="{indicatorFill}"/>
		</degrafa:GeometryGroup>
		
		<degrafa:GeometryGroup visible="true">
			<geometry:Ellipse id="gauge05TopReflection" fill="{reflectionFillTop}"/>
			<geometry:Ellipse id="gauge05BottomReflection" fill="{reflectionFillBottom}"/>
		</degrafa:GeometryGroup>
		
		
		<!-- COLUMN 06 -->
		<degrafa:GeometryGroup id="column06">          
			<geometry:RegularRectangle width="{_columnWidth}" height="{_columnHeight}"
									   fill="{blackFill}" stroke="{blackStroke}"/>
			<!-- 06 text  -->      
			<degrafa:RasterText id="column06Label01" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06RankText01" fontFamily="Arial" fontSize="{_fontSize}"
								text="Rankings" textColor="#999999"/>            
			<degrafa:RasterText id="column06SiteRank01" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>  
			<degrafa:RasterText id="column06RegionRank01" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>  
			
			<!-- Up/Down Arrow 01-->
			<degrafa:GeometryGroup id="column06ArrowDS01">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="column06ArrowIndicatorDS01"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)          }"
								 fill="{blackFill}"/>
			</degrafa:GeometryGroup>		 
			<degrafa:GeometryGroup id="column06Arrow01">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="column06ArrowIndicator01"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)          }"/>
			</degrafa:GeometryGroup>
			
			<!--Leaders/Laggers-->	
			<degrafa:RasterText id="column06LeadersText01" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Leaders" textColor="#999999"/>
			<degrafa:RasterText id="column06Leaders101" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06Leaders201" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06Leaders301" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06LaggersText01" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Laggers" textColor="#999999"/>
			<degrafa:RasterText id="column06Laggers101" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06Laggers201" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06Laggers301" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			
			<!-- 2nd bits -->
			<degrafa:HorizontalLine id="column06LeadersLine02" stroke="{ greyStroke }"/>
			<degrafa:RasterText id="column06Label02" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" textColor="#FFFFFF"/>  
			<degrafa:RasterText id="column06RankText02" fontFamily="Arial" fontSize="{_fontSize}"
								text="Rankings" textColor="#999999"/>            
			<degrafa:RasterText id="column06SiteRank02" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>  
			<degrafa:RasterText id="column06RegionRank02" fontFamily="Arial" fontSize="{_fontSize}"
								textColor="#FFFFFF"/>  
			
			<!-- Up/Down Arrow 02-->
			<degrafa:GeometryGroup id="column06ArrowDS02">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="column06ArrowIndicatorDS02"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)          }"
								 fill="{blackFill}"/>
			</degrafa:GeometryGroup>		 
			<degrafa:GeometryGroup id="column06Arrow02">
				<!-- Indicator a Polygon. -->
				<degrafa:Polygon id="column06ArrowIndicator02"
								 data="{          String(_gaugeRadius*-.1) + ',' + String(_gaugeRadius*-.1) + ' ' +           String(0) + ',' + String(_gaugeRadius*.1) + ' ' +          String(_gaugeRadius*.1) + ',' + String(_gaugeRadius*-.1)          }"/>
			</degrafa:GeometryGroup>
			
			<!--Leaders/Laggers-->	
			<degrafa:RasterText id="column06LeadersText02" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Leaders" textColor="#999999"/>
			<degrafa:RasterText id="column06Leaders102" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06Leaders202" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06Leaders302" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06LaggersText02" fontFamily="Arial" fontSize="{_fontSize}"
								fontWeight="bold" text="Laggers" textColor="#999999"/>
			<degrafa:RasterText id="column06Laggers102" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06Laggers202" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			<degrafa:RasterText id="column06Laggers302" width="{_gaugeRadius}" fontFamily="Arial"
								fontSize="{_fontSize}" textColor="#FFFFFF"/>
			
		</degrafa:GeometryGroup>
		
	</degrafa:Surface>
	<mx:Canvas id="OTDCanvas" width="{_applicationWidth}" height="{_fontSize*1.5}"
			   backgroundColor="Black" horizontalCenter="0" horizontalScrollPolicy="off"
			   verticalCenter="{_columnHeight *.45}" verticalScrollPolicy="off">
		<AndroGauge:ScrollingText id="TextScroller" width="100%" color="white"
								  direction="rightToLeft" fontFamily="Arial" fontSize="{_fontSize}"
								  fontWeight="bold" speed="4" text="{OTD_TEXT}"/>
	</mx:Canvas>
	<mx:Canvas y="{OTDCanvas.y}" height="{_fontSize*1.5}">
		<mx:Box backgroundColor="#999999">
			<mx:Label id="Scroller1TLA" fontFamily="Arial" fontSize="{_fontSize}" fontWeight="bold">
			</mx:Label>
		</mx:Box>	
	</mx:Canvas>
	
	<mx:Canvas id="OPDCanvas" width="{_applicationWidth}" height="{_fontSize*1.5}"
			   backgroundColor="#88aaaa" horizontalCenter="0" horizontalScrollPolicy="off"
			   verticalCenter="{(_columnHeight *.45) + (_fontSize*1.5)}" verticalScrollPolicy="off">
		<AndroGauge:ScrollingText id="TextScroller2" width="100%" direction="rightToLeft"
								  fontFamily="Arial" fontSize="{_fontSize}" fontWeight="bold"
								  speed="2" text="{OPD_TEXT}"/>
	</mx:Canvas>
	<mx:Canvas y="{OPDCanvas.y}" height="{_fontSize*1.5}">
		<mx:Box backgroundColor="#999999">
			<mx:Label id="Scroller2TLA" fontFamily="Arial" fontSize="{_fontSize}" fontWeight="bold">
			</mx:Label>
		</mx:Box>	
	</mx:Canvas>
	
	
	<mx:Canvas id="TICKETSCanvas" width="{_applicationWidth}" height="{_fontSize*1.5}"
			   backgroundColor="#B31601" color="#041F25" horizontalCenter="0"
			   horizontalScrollPolicy="off" verticalCenter="{(_columnHeight *.45) + (_fontSize*3)}"
			   verticalScrollPolicy="off">
		<AndroGauge:ScrollingText id="TextScroller3" width="100%" direction="rightToLeft"
								  fontFamily="Arial" fontSize="{_fontSize}" fontWeight="bold"
								  speed="3" text="{TICKET_TEXT}"/>
	</mx:Canvas>
	
	<mx:Canvas y="{TICKETSCanvas.y}" height="{_fontSize*1.5}">
		<mx:Box backgroundColor="#999999">
			<mx:Label id="Scroller3TLA" fontFamily="Arial" fontSize="{_fontSize}" fontWeight="bold">
			</mx:Label>
		</mx:Box>	
	</mx:Canvas>
	
</mx:Application>
