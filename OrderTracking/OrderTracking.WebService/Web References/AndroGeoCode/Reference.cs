//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace OrderTracking.WebService.AndroGeoCode {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GeoCodeSoap", Namespace="http://gps.andromedagps.com")]
    public partial class GeoCode : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GeoCodeAddressOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GeoCode() {
            this.Url = global::OrderTracking.WebService.Properties.Settings.Default.OrderTracking_WebService_AndroGeoCode_GeoCode;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GeoCodeAddressCompletedEventHandler GeoCodeAddressCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gps.andromedagps.com/GeoCodeAddress", RequestNamespace="http://gps.andromedagps.com", ResponseNamespace="http://gps.andromedagps.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Coordinates GeoCodeAddress(string externalStoreId, string buildingNumber, string buildingName, string roadName, string townCity, string postCode, string country) {
            object[] results = this.Invoke("GeoCodeAddress", new object[] {
                        externalStoreId,
                        buildingNumber,
                        buildingName,
                        roadName,
                        townCity,
                        postCode,
                        country});
            return ((Coordinates)(results[0]));
        }
        
        /// <remarks/>
        public void GeoCodeAddressAsync(string externalStoreId, string buildingNumber, string buildingName, string roadName, string townCity, string postCode, string country) {
            this.GeoCodeAddressAsync(externalStoreId, buildingNumber, buildingName, roadName, townCity, postCode, country, null);
        }
        
        /// <remarks/>
        public void GeoCodeAddressAsync(string externalStoreId, string buildingNumber, string buildingName, string roadName, string townCity, string postCode, string country, object userState) {
            if ((this.GeoCodeAddressOperationCompleted == null)) {
                this.GeoCodeAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeoCodeAddressOperationCompleted);
            }
            this.InvokeAsync("GeoCodeAddress", new object[] {
                        externalStoreId,
                        buildingNumber,
                        buildingName,
                        roadName,
                        townCity,
                        postCode,
                        country}, this.GeoCodeAddressOperationCompleted, userState);
        }
        
        private void OnGeoCodeAddressOperationCompleted(object arg) {
            if ((this.GeoCodeAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeoCodeAddressCompleted(this, new GeoCodeAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gps.andromedagps.com")]
    public partial class Coordinates {
        
        private long idField;
        
        private float longitudeField;
        
        private float latitudeField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public float Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        /// <remarks/>
        public float Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GeoCodeAddressCompletedEventHandler(object sender, GeoCodeAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeoCodeAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeoCodeAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Coordinates Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Coordinates)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591