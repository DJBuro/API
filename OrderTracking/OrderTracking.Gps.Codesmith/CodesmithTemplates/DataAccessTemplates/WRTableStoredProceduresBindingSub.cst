<%-- 
Name: WRTableStoredProceduresBindingSub.cst
Description: CodeSmith sub template for generating binding table stored procedures
Master template: WRTableStoredProcedures.cst
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="WRCommon.cst.cs" Inherits="WRCommon" Debug="False" Description="Add binding table stored procedures" %>
<%-- Properties for sub template --%>
<%@ Property Name="BindingTableSub" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="'Add' and 'Remove' stored procedures will be generated for this associated binding table" %>
<%-- Properties required to be copied through from Master template --%>
<%@ Property Name="ExecutePermissions1" Type="WRStoredProcPermissions" Default="Ignore" Category="Stored Procedure Permissions"
	Description="All generated stored procedures will be given execute permissions for the selected user or role" %>
<%@ Property Name="ExecutePermissions2" Type="WRStoredProcPermissions" Default="Ignore" Category="Stored Procedure Permissions"
	Description="All generated stored procedures will be given execute permissions for the selected user or role" %>
<%@ Property Name="ExecutePermissions3" Type="WRStoredProcPermissions" Default="Ignore" Category="Stored Procedure Permissions"
	Description="All generated stored procedures will be given execute permissions for the selected user or role" %>
<%@ Property Name="ProcedurePrefix" Visible="False" Type="System.String" Default="csp_" Category="Options"
	Description="Prefix to use for all generated procedure names." %>
<%-- Assemblies and Imports --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%------------------------------------------------------------------------------------------
*
* Binding Table Add Procedure
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetBindingTableAddProcedureName(ProcedurePrefix, BindingTableSub));
%>
CREATE PROCEDURE <%= GetBindingTableAddProcedureName(ProcedurePrefix, BindingTableSub) %>
(
	<%GenerateParameters(BindingTableSub.Columns, 1, true, null); %>
	@autoRowsAffected int OUTPUT
)
AS

	SET NOCOUNT ON

	IF NOT EXISTS 
	(
		SELECT <%= BindingTableSub.PrimaryKey.MemberColumns[0].Name %> FROM <% =GetTableOwner() %>[<%= BindingTableSub.Name %>] WHERE 
			<% GenerateConditions(BindingTableSub.PrimaryKey.MemberColumns, 3, null); %> 
	)
	BEGIN
		INSERT INTO <% =GetTableOwner() %>[<%= BindingTableSub.Name %>]
			(
				<% GenerateColumns(BindingTableSub.Columns, 4, null); %>
			) 
			VALUES 
			(
				<% GenerateVariables(BindingTableSub.Columns, 4, null); %>
			)
		
		SET @autoRowsAffected = @@ROWCOUNT
	END
	ELSE
		SET @autoRowsAffected = 0


<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableAddProcedureName(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableAddProcedureName(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableAddProcedureName(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
GenerateProcedureFooter(GetBindingTableAddProcedureName(ProcedurePrefix, BindingTableSub));
this.Progress.PerformStep();
%>
<% if (BindingTableSub.NonPrimaryKeyColumns.Count > 0) {%>
<%------------------------------------------------------------------------------------------
*
* Binding Table AddUpdate Procedure (only add if there are non primary key columns)
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTableSub));
%>
CREATE PROCEDURE <%= GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTableSub) %>
(
	<%GenerateParameters(BindingTableSub.Columns, 1, true, null); %>
	@autoRowsAffected int OUTPUT
)
AS

	SET NOCOUNT ON

	IF NOT EXISTS 
	(
		SELECT <%= BindingTableSub.PrimaryKey.MemberColumns[0].Name %> FROM <% =GetTableOwner() %>[<%= BindingTableSub.Name %>] WHERE 
			<% GenerateConditions(BindingTableSub.PrimaryKey.MemberColumns, 3, null); %> 
	)
	BEGIN
		INSERT INTO <% =GetTableOwner() %>[<%= BindingTableSub.Name %>]
			(
				<% GenerateColumns(BindingTableSub.Columns, 4, null); %>
			) 
			VALUES 
			(
				<% GenerateVariables(BindingTableSub.Columns, 4, null); %>
			)
	END
	ELSE
	BEGIN
		UPDATE <% =GetTableOwner() %>[<%= BindingTableSub.Name %>]
			SET
			<% GenerateUpdates(BindingTableSub.NonPrimaryKeyColumns, 4, null, null); %>
		WHERE
			<% GenerateConditions(BindingTableSub.PrimaryKey.MemberColumns, 3, null); %>
	END

	SET @autoRowsAffected = @@ROWCOUNT

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
GenerateProcedureFooter(GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTableSub));
this.Progress.PerformStep();
%>
<% } %>
<%------------------------------------------------------------------------------------------
*
* Binding Table Remove Procedure
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTableSub));
%>
CREATE PROCEDURE <%= GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTableSub) %>
(
	<%GenerateParameters(BindingTableSub.PrimaryKey.MemberColumns, 1, true, null); %>
	@autoRowsAffected int OUTPUT
)
AS

	SET NOCOUNT ON

	DELETE FROM <% =GetTableOwner() %>[<%= BindingTableSub.Name %>] WHERE 
		<% GenerateConditions(BindingTableSub.PrimaryKey.MemberColumns, 3, null); %> 

	SET @autoRowsAffected = @@ROWCOUNT

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
GenerateProcedureFooter(GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTableSub));
this.Progress.PerformStep();
%>
<%------------------------------------------------------------------------------------------
*
* Binding Table Get Procedure on First Primary Key
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTableSub));
%>
CREATE PROCEDURE <%= GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTableSub) %>
(
	<%GenerateParameter(BindingTableSub.PrimaryKey.MemberColumns[0], 1, true, true); %>
)
AS

	SET NOCOUNT ON

	SELECT
		<% GenerateColumns(BindingTableSub.Columns, 2, null); %>
	FROM
		<% =GetTableOwner() %>[<%= BindingTableSub.Name %>]
	WHERE
		<% GenerateCondition(BindingTableSub.PrimaryKey.MemberColumns[0], 2, true, true); %> 
		

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
GenerateProcedureFooter(GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTableSub));
this.Progress.PerformStep();
%>
<%------------------------------------------------------------------------------------------
*
* Binding Table Get Procedure on Second Primary Key
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTableSub));
%>
CREATE PROCEDURE <%= GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTableSub) %>
(
	<%GenerateParameter(BindingTableSub.PrimaryKey.MemberColumns[1], 1, true, true); %>
)
AS

	SET NOCOUNT ON

	SELECT
		<% GenerateColumns(BindingTableSub.Columns, 2, null); %>
	FROM
		<% =GetTableOwner() %>[<%= BindingTableSub.Name %>]
	WHERE
		<% GenerateCondition(BindingTableSub.PrimaryKey.MemberColumns[1], 2, true, true); %> 
		

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
GenerateProcedureFooter(GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTableSub));
this.Progress.PerformStep();
%>
<%------------------------------------------------------------------------------------------
*
* Binding Table Remove All Procedure on First Primary Key
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTableSub));
%>
CREATE PROCEDURE <%= GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTableSub) %>
(
	<%GenerateParameter(BindingTableSub.PrimaryKey.MemberColumns[0], 1, true, false); %>
	@autoRowsAffected int OUTPUT
)
AS

	SET NOCOUNT ON

	DELETE FROM
		<% =GetTableOwner() %>[<%= BindingTableSub.Name %>]
	WHERE
		<% GenerateCondition(BindingTableSub.PrimaryKey.MemberColumns[0], 2, true, true); %> 
		
	SET @autoRowsAffected = @@ROWCOUNT

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
GenerateProcedureFooter(GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTableSub));
this.Progress.PerformStep();
%>
<%------------------------------------------------------------------------------------------
*
* Binding Table Remove All Procedure on Second Primary Key
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTableSub));
%>
CREATE PROCEDURE <%= GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTableSub) %>
(
	<%GenerateParameter(BindingTableSub.PrimaryKey.MemberColumns[1], 1, true, false); %>
	@autoRowsAffected int OUTPUT
)
AS

	SET NOCOUNT ON

	DELETE FROM
		<% =GetTableOwner() %>[<%= BindingTableSub.Name %>]
	WHERE
		<% GenerateCondition(BindingTableSub.PrimaryKey.MemberColumns[1], 2, true, true); %> 
		
	SET @autoRowsAffected = @@ROWCOUNT

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTableSub) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
GenerateProcedureFooter(GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTableSub));
this.Progress.PerformStep();
%>

