<%-- 
Name: WRTableDALStoredProcSub.cst
Description: CodeSmith sub template for generating a class which wraps a stored procedure
Master template: WRTableDAL.cst
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="WRCommon.cst.cs" Inherits="WRCommon" Debug="False" Description="Generate a class which wraps a stored procedure" %>
<%-- Properties for sub template --%>
<%@ Property Name="StoredProcSub" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure (optional extra)"
	Description="Wrap a custom stored procedure" %>
<%@ Property Name="StoredProcSubDatabase" Type="WRDatabase" Optional="True" Category="Stored Procedure (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProcSubName" Type="System.String" Default="" Optional="True" Category="Stored Procedure (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProcSubReturn" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProcSubIsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure (optional extra)"
	Description="The stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%-- Properties required to be copied through from Master template --%>
<%@ Property Name="DatabaseName" Type="WRDatabase" Category="Options" Description="Choose the William Reed database" %>
<%@ Property Name="NameSpace" Visible="False" Type="System.String" Default="changeMeNameSpace" Category="Options"
	Description="This is the project namespace which contains this data access class. It will be substituted in for XXX in following namespace: WilliamReed.XXX.Data.Base" %>
<%@ Property Name="ProcedurePrefix" Visible="False" Type="System.String" Default="csp_" Category="Options"
	Description="Prefix used in all stored procedure names. This is needed as this class will be using stored procedures" %>
<%@ Property Name="TablePrefix" Type="System.String" Default="d_" Category="Options"
	Description="If this prefix is found at the start of a table name, it will be stripped off to give meaningful procedure and class names." %>
<%-- Assemblies and Imports --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
		<% 
			// identify input parameters only
			ParameterSchemaCollection inputParameters = new ParameterSchemaCollection();
			for (int i=0; i<StoredProcSub.AllInputParameters.Count; i++)
			{
				ParameterSchema parameter = StoredProcSub.AllInputParameters[i];
				if ((parameter.Direction == ParameterDirection.Input) && (parameter.Direction != ParameterDirection.Output))
					inputParameters.Add(parameter);
			}
		%>
		<% Response.WriteLine(""); %>
		#region Stored Procedure <%= StoredProcSub.FullName%> in the <%= StoredProcSubDatabase%> database
		<% switch (StoredProcSubReturn)
		{
			case WRStoredProcReturnType.SqlDataReader:
			{
			%>  
		/// <summary>
		/// execute the stored procedure <%= StoredProcSub.FullName%> in the <%= StoredProcSubDatabase%> database
		/// </summary>
		<%	GenerateCSharpXMLDescriptors(inputParameters, 2); %>
		/// <returns>SqlDataReader (WARNING: the SqlDataReader must be closed to release the valuable SqlConnection object. Use Try{} Finally{} exception handling</returns>
		public static SqlDataReader <%= StoredProcSubName %>(<% GenerateCSharpParameters(inputParameters, false); %>)
		{
			DataBlock localDataBlock = new DataBlock(WRDatabase.<%=StoredProcSubDatabase%>);
			localDataBlock.Command_Init("<%= StoredProcSub.FullName%>");
			<% for (int i=0; i<inputParameters.Count; i++){%>
			localDataBlock.AddSqlInputParameter(<%=GetParamAttributes(inputParameters[i])%>).Value = <%= StringUtil.ToCamelCase(inputParameters[i].Name.Remove(0, 1))%>;
			<% } %>

			return localDataBlock.Command_ExecuteReader();
		}
			<%	if (StoredProcSubIsPaged)
				{%>
		
		/// <summary>
		/// execute the stored procedure <%= StoredProcSub.FullName%> in the <%= StoredProcSubDatabase%> database extracting the statistics result set returned from csp_PagingStatistics into the out parameters and leaving the second paged result set ready for databinding.
		/// </summary>
		/// <example>Expected usage of this routine is as follows...
		/// <code>
		///	Int32 totalRecords;
		/// Int32 totalPages;
		/// bool isFirstPage;
		/// bool isLastPage;
		///
		/// SqlDataReader datareader = <%=GetBLLDerivativeClassName(TablePrefix)%>.<%= StoredProcSubName %>Paged(<% GenerateCSharpVariables(inputParameters, false); %>, out Int32 totalRecords, out Int32 totalPages, out bool isFirstPage, out bool isLastPage);
		/// try
		/// {
		///   TestRepeater.DataSource = datareader;
		///   TestRepeater.DataBind();
		/// }
		/// finally
		/// {
		///   datareader.Close();
		/// }
		/// </code>
		/// </example>
		<%	GenerateCSharpXMLDescriptors(inputParameters, 2); %>
		/// <param name="totalRecords">total number of records in the result set</param>
		/// <param name="totalPages">total number of pages in the result</param>
		/// <param name="isFirstPage">true if the page requested is the first page</param>
		/// <param name="isLastPage">true if the page requested is the last page</param>
		/// <returns>SqlDataReader (WARNING: the SqlDataReader must be closed to release the valuable SqlConnection object. Use Try{} Finally{} exception handling</returns>
		public static SqlDataReader <%= StoredProcSubName %>Paged(<% GenerateCSharpParameters(inputParameters, false); %>, out Int32 totalRecords, out Int32 totalPages, out bool isFirstPage, out bool isLastPage)
		{
			totalRecords = 0;
			totalPages = 0;
			isFirstPage = false;
			isLastPage = false;
	
			SqlDataReader datareader = <%= StoredProcSubName %>(<% GenerateCSharpVariables(inputParameters, false); %>);
			try
			{
				if (datareader.HasRows)
				{
					datareader.Read();
	
					totalRecords = (Int32)datareader["TotalRecords"];
					totalPages = (Int32)datareader["TotalPages"];
					isFirstPage = (bool)datareader["IsFirstPage"];
					isLastPage = (bool)datareader["IsLastPage"];
				}
	
				// advance the data reader to the next result of batched Transact-SQL statements
				datareader.NextResult();
				
				return datareader;
			}
			catch
			{
				datareader.Close();
				throw;
			}
		}
			<%	}
				break;
			}
			case WRStoredProcReturnType.DataSet:
			{
			%>  
		/// <summary>
		/// execute the stored procedure <%= StoredProcSub.FullName%> in the <%= StoredProcSubDatabase%> database
		/// </summary>
		<%	GenerateCSharpXMLDescriptors(inputParameters, 2); %>
		/// <returns>DataSet</returns>
		public static DataSet <%= StoredProcSubName %>(<% GenerateCSharpParameters(inputParameters, false); %>)
		{
			DataBlock localDataBlock = new DataBlock(WRDatabase.<%=StoredProcSubDatabase%>);
			localDataBlock.Command_Init("<%= StoredProcSub.FullName%>");
			<% for (int i=0; i<inputParameters.Count; i++){%>
			localDataBlock.AddSqlInputParameter(<%=GetParamAttributes(inputParameters[i])%>).Value = <%= StringUtil.ToCamelCase(inputParameters[i].Name.Remove(0, 1))%>;
			<% } %>

			return localDataBlock.Command_FillDataSet();
		}
			<%
				break;
			}
			case WRStoredProcReturnType.NoReturn:
			{
			%>  
		/// <summary>
		/// execute the stored procedure <%= StoredProcSub.FullName%> in the <%= StoredProcSubDatabase%> database
		/// </summary>
		<%	GenerateCSharpXMLDescriptors(inputParameters, 2); %>
		/// <returns>number of rows affected</returns>
		public static int <%= StoredProcSubName %>(<% GenerateCSharpParameters(inputParameters, false); %>)
		{
			DataBlock localDataBlock = new DataBlock(WRDatabase.<%=StoredProcSubDatabase%>);
			localDataBlock.Command_Init("<%= StoredProcSub.FullName%>");
			<% for (int i=0; i<inputParameters.Count; i++){%>
			localDataBlock.AddSqlInputParameter(<%=GetParamAttributes(inputParameters[i])%>).Value = <%= StringUtil.ToCamelCase(inputParameters[i].Name.Remove(0, 1))%>;
			<% } %>

			return localDataBlock.Command_ExecuteNonQuery();
		}
			<%
				break;
			}
			case WRStoredProcReturnType.Scalar:
			{
			%>  
		/// <summary>
		/// execute the stored procedure <%= StoredProcSub.FullName%> in the <%= StoredProcSubDatabase%> database
		/// </summary>
		<%	GenerateCSharpXMLDescriptors(inputParameters, 2); %>
		/// <returns>first column of first row of result set. Value is DBNull.Value if no records in result set</returns>
		public static object <%= StoredProcSubName %>(<% GenerateCSharpParameters(inputParameters, false); %>)
		{
			DataBlock localDataBlock = new DataBlock(WRDatabase.<%=StoredProcSubDatabase%>);
			localDataBlock.Command_Init("<%= StoredProcSub.FullName%>");

			<% for (int i=0; i<inputParameters.Count; i++){%>
			localDataBlock.AddSqlInputParameter(<%=GetParamAttributes(inputParameters[i])%>).Value = <%= StringUtil.ToCamelCase(inputParameters[i].Name.Remove(0, 1))%>;
			<% } %>

			return localDataBlock.Command_ExecuteScalar();
		}
			<%
				break;
			}
			case WRStoredProcReturnType.OutputParameters:
			{
			%>  
		/// <summary>
		/// Nested class for execution of stored procedure <%= StoredProcSub.FullName%> in the <%= StoredProcSubDatabase%> database. Resulting output parameters are found in the public properties of <%= StoredProcSubName %> class.
		/// </summary>
		public class <%= StoredProcSubName %>
		{
			#region Public Properties
			<% for (int i=0; i<StoredProcSub.AllOutputParameters.Count; i++) { %>
			private static <%= GetCSharpVariableType(StoredProcSub.AllOutputParameters[i].DataType)%> _<%= StoredProcSub.AllOutputParameters[i].Name.Remove(0, 1) %> = <%= GetCSharpVariableReset(StoredProcSub.AllOutputParameters[i].DataType) %>;
			/// <summary>
			/// <%= StoredProcSub.FullName%>.<%=StoredProcSub.AllOutputParameters[i].Name.Remove(0, 1)%> <%= StoredProcSub.AllOutputParameters[i].Description%> [read only]
			/// </summary>
			public static <%= GetCSharpVariableType(StoredProcSub.AllOutputParameters[i].DataType) %> <%= StoredProcSub.AllOutputParameters[i].Name.Remove(0, 1) %>
			{
				get {return _<%= StoredProcSub.AllOutputParameters[i].Name.Remove(0, 1) %>;}
			}
			<% if (i < StoredProcSub.AllOutputParameters.Count - 1){ Response.WriteLine("");} %>		
			<% } %>
			#endregion

			/// <summary>
			/// execute the stored procedure <%= StoredProcSub.FullName%> in the <%= StoredProcSubDatabase%> database
			/// </summary>
			<% GenerateCSharpXMLDescriptors(inputParameters, 3); %>
			/// <returns>number of rows affected</returns>
			public static int Execute(<% GenerateCSharpParameters(inputParameters, false); %>)
			{
				DataBlock localDataBlock = new DataBlock(WRDatabase.<%=StoredProcSubDatabase%>);
				localDataBlock.Command_Init("<%= StoredProcSub.FullName%>");
	
				<% for (int i=0; i<inputParameters.Count; i++){%>
				localDataBlock.AddSqlInputParameter(<%=GetParamAttributes(inputParameters[i])%>).Value = <%= StringUtil.ToCamelCase(inputParameters[i].Name.Remove(0, 1))%>;
				<% } %>
	
				<% for (int i=0; i<StoredProcSub.AllOutputParameters.Count; i++){%>
				localDataBlock.AddSqlOutputParameter(<%=GetParamAttributes(StoredProcSub.AllOutputParameters[i])%>);
				<% } %>
	
				int rowsAffected = 0;
				rowsAffected = localDataBlock.Command_ExecuteNonQuery();
	
				#region Reset All Properties
				<% 	for (int i=0; i<StoredProcSub.AllOutputParameters.Count; i++)
					{ %>
				_<%= StoredProcSub.AllOutputParameters[i].Name.Remove(0, 1) %> = <%=GetCSharpVariableReset(StoredProcSub.AllOutputParameters[i].DataType)%>;
				<%	}
				%>
				#endregion
	
				#region Set All Properties
				Hashtable hashParams = localDataBlock.Parameters();
				<% 	for (int i=0; i<StoredProcSub.AllOutputParameters.Count; i++)
					{%>
				if (((SqlParameter)hashParams["@<%= StoredProcSub.AllOutputParameters[i].Name.Remove(0, 1) %>"]).Value != DBNull.Value)
					_<%= StoredProcSub.AllOutputParameters[i].Name.Remove(0, 1) %> = (<%= GetCSharpVariableType(StoredProcSub.AllOutputParameters[i].DataType) %>)((SqlParameter)hashParams["@<%= StoredProcSub.AllOutputParameters[i].Name.Remove(0, 1) %>"]).Value;
				<%	}
				%>
				#endregion
	
				return rowsAffected;
			}
		}
			<%
				break;
			}
		}
		%>
		#endregion
