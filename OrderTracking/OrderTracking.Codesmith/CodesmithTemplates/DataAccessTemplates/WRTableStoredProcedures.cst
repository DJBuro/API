<%-- 
Name: WRTableStoredProcedures.cst
Description: CodeSmith Template for generating standard William Reed CRUD stored procedures for a given 
database table.
Asumptions: 

1. Source table being processed has exactly one primary key field (primary key field may or may not be an identity field)
2. Any optional associated binding tables have exactly two fields in the primary key

--%>
<%@ CodeTemplate Debug="True" Language="C#" Src="WRCommon.cst.cs" Inherits="WRCommon" TargetLanguage="T-SQL"
	Description="Generates standard William Reed CRUD stored procedures based on a database table schema. Stored procedures may also be generated for associated binding tables." %>
<%-- Register Map --%>
<%@ Map Name="WRDatabaseEnum" Src="WRTableDatabaseEnumMap" Default="" Reverse="False" Description="Map WRDatabase enum with the real database name" %>
<%-- Register Sub Templates --%>
<%@ Register Name="BindingTableSubTemplate" Template="WRTableStoredProceduresBindingSub.cst" MergeProperties="False" ExcludeProperties="" %>
<%-- Options --%>
<%@ Property Name="DatabaseName" Type="WRDatabase" Category="Options" Description="This defines the William Reed database" %>
<%@ Property Name="AutoExecuteScript" Type="System.Boolean" Default="False" Category="Options"
	Description="Whether or not to immediately execute the script on the target database." %>
<%@ Property Name="BindingTable1" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable2" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable3" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable4" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable5" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable6" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable7" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="ExecutePermissions1" Type="WRStoredProcPermissions" Default="Ignore" Category="Stored Procedure Permissions"
	Description="All generated stored procedures will be given execute permissions for the selected user or role" %>
<%@ Property Name="ExecutePermissions2" Type="WRStoredProcPermissions" Default="Ignore" Category="Stored Procedure Permissions"
	Description="All generated stored procedures will be given execute permissions for the selected user or role" %>
<%@ Property Name="ExecutePermissions3" Type="WRStoredProcPermissions" Default="Ignore" Category="Stored Procedure Permissions"
	Description="All generated stored procedures will be given execute permissions for the selected user or role" %>
<%@ Property Name="IncludeDropStatements" Type="System.Boolean" Default="True" Category="Options"
	Description="If true drop statements will be generated to drop existing stored procedures." %>
<%@ Property Name="ProcedurePrefix" Visible="False" Type="System.String" Default="csp_" Category="Options"
	Description="Prefix to use for all generated procedure names." %>
<%@ Property Name="TablePrefix" Type="System.String" Default="d_" Category="Options"
	Description="If this prefix is found at the start of a table name, it will be stripped off." %>
<%@ Property Name="OrderByExpression" Type="System.String" Default="" Optional="True" Category="Options"
	Description="If supplied, this expression will be used to apply an order to the results on SELECT statements." %>
<%@ Property Name="ExcludedColumns" Type="StringCollection" Default="" Optional="True" Category="Options"
	Description="If supplied, any columns in this list will be excluded from all stored procedures unless the column is part of the primary key. (* is treated as a wildcard)" %>
<%@ Property Name="ReadOnlyColumns" Type="StringCollection" Default="" Optional="True" Category="Options"
	Description="If supplied, any columns in this list will be treated as read only. (* is treated as a wildcard)" %>

<%@ Property Name="includePager" Type="System.Boolean" Default="false" Category="Options" Description="Controls whether the paging statistics stored procedure is included in the generation of the script file." %>

<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<%-- General Validation--%>
<%
	if (DatabaseName == WRDatabase.Ignore)
	{
		ShowValidationError("Please choose a William Reed database other than 'Ignore' for property 'DatabaseName'.");
		return;
	}	
 %>

--------------------------------------------------------------------------------
-- <autogenerated>
--		This Transact SQL script for Microsoft SQL Server
--		was auto generated for William Reed Publishing Limited.
-- </autogenerated>
--------------------------------------------------------------------------------

USE <%= WRDatabaseEnum[DatabaseName.ToString()] %>
GO

<%
this.Progress.MaximumValue = 5;
this.Progress.Step = 1;

// this template requires exactly one primary key on the source table
if (!SourceTable.HasPrimaryKey) throw new ApplicationException("SourceTable does not contain a primary key.");
//if (SourceTable.PrimaryKeys.Count>1) throw new ApplicationException("SourceTable has more than one primary key. This script only works on tables with exactly one primary key.");

// generate drop statements
if (IncludeDropStatements)
{
	Response.WriteLine("--region Drop Existing Procedures");
	if(includePager)
	{
		GenerateDropStatement("[dbo].[csp_PagingStatistics]");
	}
	GenerateDropStatement(GetAddProcedureName(ProcedurePrefix, TablePrefix));
	GenerateDropStatement(GetUpdateProcedureName(ProcedurePrefix, TablePrefix));
	GenerateDropStatement(GetDeleteProcedureName(ProcedurePrefix, TablePrefix));
	GenerateDropStatement(GetSelectProcedureName(ProcedurePrefix, TablePrefix));
	GenerateDropStatement(GetSelectRowProcedureName(ProcedurePrefix, TablePrefix));
	
	// generate binding stored procedure drop statements
	if ((BindingTable1 != null) && (IsValidBindingTable(BindingTable1)))
	{
		GenerateDropStatement(GetBindingTableAddProcedureName(ProcedurePrefix, BindingTable1));
		if (BindingTable1.NonPrimaryKeyColumns.Count > 0)
		{
			GenerateDropStatement(GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTable1));
		}
		GenerateDropStatement(GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTable1));
		GenerateDropStatement(GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTable1));
		GenerateDropStatement(GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTable1));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTable1));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTable1));
	}

	if ((BindingTable2 != null) && (IsValidBindingTable(BindingTable2)))
	{
		GenerateDropStatement(GetBindingTableAddProcedureName(ProcedurePrefix, BindingTable2));
		if (BindingTable2.NonPrimaryKeyColumns.Count > 0)
		{
			GenerateDropStatement(GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTable2));
		}
		GenerateDropStatement(GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTable2));
		GenerateDropStatement(GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTable2));
		GenerateDropStatement(GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTable2));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTable2));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTable2));
	}

	if ((BindingTable3 != null) && (IsValidBindingTable(BindingTable3)))
	{
		GenerateDropStatement(GetBindingTableAddProcedureName(ProcedurePrefix, BindingTable3));
		if (BindingTable3.NonPrimaryKeyColumns.Count > 0)
		{
			GenerateDropStatement(GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTable3));
		}
		GenerateDropStatement(GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTable3));
		GenerateDropStatement(GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTable3));
		GenerateDropStatement(GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTable3));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTable3));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTable3));
	}
	
	if ((BindingTable4 != null) && (IsValidBindingTable(BindingTable4)))
	{
		GenerateDropStatement(GetBindingTableAddProcedureName(ProcedurePrefix, BindingTable4));
		if (BindingTable4.NonPrimaryKeyColumns.Count > 0)
		{
			GenerateDropStatement(GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTable4));
		}
		GenerateDropStatement(GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTable4));
		GenerateDropStatement(GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTable4));
		GenerateDropStatement(GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTable4));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTable4));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTable4));
	}

	if ((BindingTable5 != null) && (IsValidBindingTable(BindingTable5)))
	{
		GenerateDropStatement(GetBindingTableAddProcedureName(ProcedurePrefix, BindingTable5));
		if (BindingTable5.NonPrimaryKeyColumns.Count > 0)
		{
			GenerateDropStatement(GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTable5));
		}
		GenerateDropStatement(GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTable5));
		GenerateDropStatement(GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTable5));
		GenerateDropStatement(GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTable5));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTable5));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTable5));
	}

	if ((BindingTable6 != null) && (IsValidBindingTable(BindingTable6)))
	{
		GenerateDropStatement(GetBindingTableAddProcedureName(ProcedurePrefix, BindingTable6));
		if (BindingTable6.NonPrimaryKeyColumns.Count > 0)
		{
			GenerateDropStatement(GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTable6));
		}
		GenerateDropStatement(GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTable6));
		GenerateDropStatement(GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTable6));
		GenerateDropStatement(GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTable6));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTable6));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTable6));
	}

	if ((BindingTable7 != null) && (IsValidBindingTable(BindingTable7)))
	{
		GenerateDropStatement(GetBindingTableAddProcedureName(ProcedurePrefix, BindingTable7));
		if (BindingTable7.NonPrimaryKeyColumns.Count > 0)
		{
			GenerateDropStatement(GetBindingTableAddUpdateProcedureName(ProcedurePrefix, BindingTable7));
		}
		GenerateDropStatement(GetBindingTableRemoveProcedureName(ProcedurePrefix, BindingTable7));
		GenerateDropStatement(GetBindingTableGetProcedureName1(ProcedurePrefix, BindingTable7));
		GenerateDropStatement(GetBindingTableGetProcedureName2(ProcedurePrefix, BindingTable7));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName1(ProcedurePrefix, BindingTable7));
		GenerateDropStatement(GetBindingTableRemoveAllProcedureName2(ProcedurePrefix, BindingTable7));
	}

	// only generate this drop procedure if the primary key is NOT an identity field
	if (!(bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value)
		GenerateDropStatement(GetAddUpdateProcedureName(ProcedurePrefix, TablePrefix));

	Response.WriteLine("--endregion");
	Response.WriteLine("");
	Response.WriteLine("GO");
	Response.WriteLine("");
	
	this.Progress.PerformStep();
}
%>
<%------------------------------------------------------------------------------------------
*
* Paging Statistics Procedure (always applied if any isPaged is set)
*
------------------------------------------------------------------------------------------
--%>

<%

if(includePager)
{

%>
<%
GenerateProcedureHeader("[dbo].[csp_PagingStatistics]");
%>
CREATE PROCEDURE [dbo].[csp_PagingStatistics]
(
	@TotalRecords int,
	@RecordsPerPage int,
	@RequiredPage int,
	@TotalPages int OUTPUT,
	@IsFirstPage bit OUTPUT,
	@IsLastPage bit OUTPUT
)
AS
	
	-- ================================================================
	-- This stored procedure is for use in paging stored procedures and 
	-- calculates the total number of pages given the total number of 
	-- records and the records per page. If the required page is first 
	-- or last is also calculated.
	-- ================================================================
	
	-- is first page?
	IF (@RequiredPage = 1)
		SET @IsFirstPage = 1
	ELSE
		SET @IsFirstPage =0

	-- total pages
	IF (@TotalRecords > @RecordsPerPage)
	BEGIN
		IF (@TotalRecords % @RecordsPerPage) > 0 -- if a remainder is present then add 1 to total
			SET @TotalPages = (@TotalRecords / @RecordsPerPage) + 1
		ELSE
			SET @TotalPages = (@TotalRecords / @RecordsPerPage)
	END
	ELSE
		SET @TotalPages = 1

	-- is last page?
	IF (@RequiredPage >= @TotalPages)
		SET @IsLastPage = 1
	ELSE
		SET @IsLastPage=0

	SELECT 
		@TotalRecords AS TotalRecords,
		@TotalPages AS TotalPages,
		@IsFirstPage AS IsFirstPage,
		@IsLastPage AS IsLastPage


<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON [dbo].[csp_PagingStatistics] TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON [dbo].[csp_PagingStatistics] TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON [dbo].[csp_PagingStatistics] TO [<%= ExecutePermissions3 %>]
<%} %>
<%
GenerateProcedureFooter("[dbo].[csp_PagingStatistics]");

}

this.Progress.PerformStep();
%>
<%------------------------------------------------------------------------------------------
*
* Insert Procedure
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetAddProcedureName(ProcedurePrefix, TablePrefix));
%>
CREATE PROCEDURE <%= GetAddProcedureName(ProcedurePrefix, TablePrefix) %>
(
<% if (((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value) == true) {  %>
	<% GenerateParameters(FilterReadOnlyAndExcludedColumns(SourceTable.Columns, ExcludedColumns, ReadOnlyColumns), 1, true, true, ExcludedColumns); %>
<%Response.Write('\t');%><%=GetSqlParameterStatement(SourceTable.PrimaryKey.MemberColumns[0], true)%>
<% } else { %>
	<%GenerateParameters(FilterReadOnlyAndExcludedColumns(SourceTable.Columns, ExcludedColumns, ReadOnlyColumns), 1, false, false, ExcludedColumns); %>
<% }%>
)
AS

	SET NOCOUNT ON

	INSERT INTO <% =GetTableOwner() %>[<%= SourceTable.Name %>]
		(
		<% if (((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value) == true) {  %>
			<% GenerateColumns(SourceTable.Columns, 3, true, ExcludedColumns); %>
		<%} else {%>
			<% GenerateColumns(SourceTable.Columns, 3, false, ExcludedColumns); %>
		<%}%>
		) 
		VALUES 
		(
		<% if (((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value) == true) {  %>
			<% GenerateVariables(SourceTable.Columns, 3, true, ExcludedColumns); %>
		<%} else {%>
			<% GenerateVariables(SourceTable.Columns, 3, false, ExcludedColumns); %>
		<%}%>
		)

	<% if (((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value) == true) {  %>
	IF @@ERROR <> 0 
	BEGIN 
		SELECT @<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = 0
		RETURN -1 
	END

	SELECT @<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = @@Identity
	<% }%>
	

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetAddProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetAddProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetAddProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
GenerateProcedureFooter(GetAddProcedureName(ProcedurePrefix, TablePrefix));
this.Progress.PerformStep();
%>
<%------------------------------------------------------------------------------------------
*
* Update Procedure
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetUpdateProcedureName(ProcedurePrefix, TablePrefix));
%>
CREATE PROCEDURE <%= GetUpdateProcedureName(ProcedurePrefix, TablePrefix) %>
(
<% GenerateParameters(FilterReadOnlyAndExcludedColumns(SourceTable.Columns, ExcludedColumns, ReadOnlyColumns), 1, true, ExcludedColumns); %>
	@autoRowsAffected int OUTPUT
)
AS

	SET NOCOUNT ON

	UPDATE <%= GetTableOwner() %>[<%= SourceTable.Name %>] 
	SET
	<% GenerateUpdates(SourceTable.NonPrimaryKeyColumns, 2, ExcludedColumns, ReadOnlyColumns); %>
	WHERE
	<% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 2, ExcludedColumns); %>
	
	SET @autoRowsAffected = @@ROWCOUNT

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetUpdateProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetUpdateProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetUpdateProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
	GenerateProcedureFooter(GetUpdateProcedureName(ProcedurePrefix, TablePrefix));
	this.Progress.PerformStep();
%>
<%------------------------------------------------------------------------------------------
*
* AddUpdate Procedure (only generate if the primary key is NOT an identity field)
*
------------------------------------------------------------------------------------------%>
<%if (!(bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value) {%>
<%
GenerateProcedureHeader(GetAddUpdateProcedureName(ProcedurePrefix, TablePrefix));
%>
CREATE PROCEDURE <%= GetAddUpdateProcedureName(ProcedurePrefix, TablePrefix) %>
(
<% GenerateParameters(FilterReadOnlyAndExcludedColumns(SourceTable.Columns, ExcludedColumns, ReadOnlyColumns), 1, ExcludedColumns); %>
)
AS
	SET NOCOUNT OFF
	
	IF EXISTS(SELECT <% GenerateColumns(SourceTable.PrimaryKey.MemberColumns, -1, ExcludedColumns); %> FROM <%= GetTableOwner() %>[<%= SourceTable.Name %>] WHERE <% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, -1, ExcludedColumns); %>)
	BEGIN
		UPDATE <%= GetTableOwner() %>[<%= SourceTable.Name %>] 
		SET
			<% GenerateUpdates(SourceTable.NonPrimaryKeyColumns, 3, ExcludedColumns, ReadOnlyColumns); %>
		WHERE
			<% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 3, ExcludedColumns); %>
	END
	ELSE
	BEGIN
		INSERT INTO <%= GetTableOwner() %>[<%= SourceTable.Name %>] 
		(
			<% GenerateColumns(SourceTable.Columns, 3, ExcludedColumns); %>
		) 
		VALUES 
		(
			<% GenerateVariables(SourceTable.Columns, 3, ExcludedColumns); %>
		)
	END
	
<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetAddUpdateProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetAddUpdateProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetAddUpdateProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
	GenerateProcedureFooter(GetAddUpdateProcedureName(ProcedurePrefix, TablePrefix));
	this.Progress.PerformStep();
%>
<% } %>
<%------------------------------------------------------------------------------------------
*
* Delete Procedure
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetDeleteProcedureName(ProcedurePrefix, TablePrefix));
%>
CREATE PROCEDURE <%= GetDeleteProcedureName(ProcedurePrefix, TablePrefix) %>
(
<% GenerateParameters(SourceTable.PrimaryKey.MemberColumns, 1, true, ExcludedColumns); %>
	@autoRowsAffected int OUTPUT
)
AS

	SET NOCOUNT ON

	DELETE FROM <%= GetTableOwner() %>[<%= SourceTable.Name %>]
	WHERE
	<% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 2, ExcludedColumns); %>

	SET @autoRowsAffected = @@ROWCOUNT

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetDeleteProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetDeleteProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetDeleteProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
	GenerateProcedureFooter(GetDeleteProcedureName(ProcedurePrefix, TablePrefix));
	this.Progress.PerformStep();
%>
<%------------------------------------------------------------------------------------------
*
* Select Procedure
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetSelectProcedureName(ProcedurePrefix, TablePrefix));
%>
CREATE PROCEDURE <%= GetSelectProcedureName(ProcedurePrefix, TablePrefix) %>
AS

	SET NOCOUNT ON

	SELECT
	<% GenerateColumns(SourceTable.Columns, 2, ExcludedColumns); %>
	FROM
		<%= GetTableOwner() %>[<%= SourceTable.Name %>]
		<% GenerateOrderByClause(OrderByExpression); %>

<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetSelectProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetSelectProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetSelectProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
	GenerateProcedureFooter(GetSelectProcedureName(ProcedurePrefix, TablePrefix));
	this.Progress.PerformStep();
%>
<%------------------------------------------------------------------------------------------
*
* Select Row Procedure
*
------------------------------------------------------------------------------------------%>
<%
GenerateProcedureHeader(GetSelectRowProcedureName(ProcedurePrefix, TablePrefix));
%>
CREATE PROCEDURE <%= GetSelectRowProcedureName(ProcedurePrefix, TablePrefix) %>
(
<%-- if the data types text, ntext or images are found in the columns then cannot use output parameters --%>
<% if (ContainsTextFields(SourceTable.NonPrimaryKeyColumns)) {  %>
<% GenerateParameters(SourceTable.PrimaryKey.MemberColumns, 1, false, false, ExcludedColumns); %>
)
AS

	SET NOCOUNT ON

	SELECT
	<% GenerateColumns(SourceTable.NonPrimaryKeyColumns, 2, ExcludedColumns); %>
	FROM
		<%= GetTableOwner() %>[<%= SourceTable.Name %>]
	WHERE
		<% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 2, ExcludedColumns); %>
	
<% } else { %>
<% GenerateParameters(SourceTable.PrimaryKey.MemberColumns, 1, true, false, ExcludedColumns); %>
<% GenerateParameters(SourceTable.NonPrimaryKeyColumns, 1, true, true, ExcludedColumns, true); %>
	@autoRowsAffected int OUTPUT
)
AS

	SET NOCOUNT ON

	SELECT
		<% GenerateOutputColumns(SourceTable.NonPrimaryKeyColumns, 2, ExcludedColumns); %>
	FROM
		<%= GetTableOwner() %>[<%= SourceTable.Name %>]
	WHERE
		<% GenerateConditions(SourceTable.PrimaryKey.MemberColumns, 2, ExcludedColumns); %>
		
	SET @autoRowsAffected = @@ROWCOUNT
	
<% } %>
<%if (ExecutePermissions1 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetSelectRowProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions1 %>]
<%} %>

<%if (ExecutePermissions2 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetSelectRowProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions2 %>]
<%} %>

<%if (ExecutePermissions3 != WRStoredProcPermissions.Ignore) {  %>
GO
GRANT EXECUTE ON <%= GetSelectRowProcedureName(ProcedurePrefix, TablePrefix) %> TO [<%= ExecutePermissions3 %>]
<%} %>
<%
	GenerateProcedureFooter(GetSelectProcedureName(ProcedurePrefix, TablePrefix));
	this.Progress.PerformStep();
%>
<%	
	//	====================================================================================
	//	Binding table stored procedures (uses sub template WRTableStoredProceduresBindingSub
	//	====================================================================================
 	
	// instantiate the sub-template
	BindingTableSubTemplate bindingSubTemplate = this.Create<BindingTableSubTemplate>();

	// Binding Table 1
	if ((BindingTable1 != null) && (IsValidBindingTable(BindingTable1)))
	{
		OutputBindingTable(BindingTable1, bindingSubTemplate);
	}
	
	// Binding Table 2
	if ((BindingTable2 != null) && (IsValidBindingTable(BindingTable2)))
	{
		OutputBindingTable(BindingTable2, bindingSubTemplate);
	}

	// Binding Table 3
	if ((BindingTable3 != null) && (IsValidBindingTable(BindingTable3)))
	{
		OutputBindingTable(BindingTable3, bindingSubTemplate);
	}

	// Binding Table 4
	if ((BindingTable4 != null) && (IsValidBindingTable(BindingTable4)))
	{
		OutputBindingTable(BindingTable4, bindingSubTemplate);
	}
	
	// Binding Table 5
	if ((BindingTable5 != null) && (IsValidBindingTable(BindingTable5)))
	{
		OutputBindingTable(BindingTable5, bindingSubTemplate);
	}
	
	// Binding Table 6
	if ((BindingTable6 != null) && (IsValidBindingTable(BindingTable6)))
	{
		OutputBindingTable(BindingTable6, bindingSubTemplate);
	}
	
	// Binding Table 7
	if ((BindingTable7 != null) && (IsValidBindingTable(BindingTable7)))
	{
		OutputBindingTable(BindingTable7, bindingSubTemplate);
	}
%>
<script runat="template">
	protected string _storedProcsScriptFile = String.Empty;
	[Category("Output")]
	[FileDialog(FileDialogType.Save, Title="Select Stored Procedures SQL Script File", Filter="Query Files (*.sql)|*.sql|All Files (*.*)|*.*", DefaultExtension=".sql")]
	[EditorAttribute(typeof(CodeSmith.CustomProperties.FileNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
	[Description("Select a file for the stored procedures SQL script")]
	public string StoredProceduresScriptFile
	{
		get {return _storedProcsScriptFile;}
		set {_storedProcsScriptFile = value;}
	}

	protected override void OnPostRender(string result)
	{
		if (this.StoredProceduresScriptFile.Length > 0)
		{
			FileStream stream = null;
			try
			{
				stream = new FileStream(this.StoredProceduresScriptFile, FileMode.Create, FileAccess.Write);
				byte[] output = System.Text.Encoding.UTF8.GetBytes(result);
				stream.Write(output, 0, output.Length);
			}
			finally
			{
				if (stream != null) stream.Close();
			}
		}
		
		if (this.AutoExecuteScript)
		{
			// execute the output on the same database as the source table.
			CodeSmith.BaseTemplates.ScriptResult scriptResult = CodeSmith.BaseTemplates.ScriptUtility.ExecuteScript(this.SourceTable.Database.ConnectionString, result, new System.Data.SqlClient.SqlInfoMessageEventHandler(cn_InfoMessage)); 
			if (!scriptResult.Success)
			{
				ShowValidationError("The SQL script generated for table [" + this.SourceTable.Database.Name + "].[" + this.SourceTable.Name + "] failed to execute. Error message: " + scriptResult.ToString());
			}
		}

		base.OnPostRender(result);
	}

	// assign an appropriate file name to StoredProceduresScriptFile
	public override string GetFileName()
	{
		if (this.SourceTable != null)
		{
			return GetScriptFileName(TablePrefix);
		}
		else
		{
			return base.GetFileName();
		}
	}

	private void cn_InfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e)
	{
		Trace.Write(e.Message);
	}
	
	public void OutputBindingTable(TableSchema bindingTable, BindingTableSubTemplate bindingSubTemplate)
	{
		// copy relevant properties through to sub template
		this.CopyPropertiesTo(bindingSubTemplate);
				
		// setup custom properties
		bindingSubTemplate.BindingTableSub = bindingTable; 
		bindingSubTemplate.Render(this.Response);
	}
</script>