<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GpsGate.Client</name>
    </assembly>
    <members>
        <member name="T:GpsGate.Client.GateException">
            <summary>
            All specific GpsGateClient exceptions derives from this class
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage">Error message</param>
        </member>
        <member name="M:GpsGate.Client.GateException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="exInner">Inner exception.</param>
        </member>
        <member name="T:GpsGate.Client.GateParseException">
            <summary>
            Error parsing a serialized GpsGate Command.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateParseException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:GpsGate.Client.GateParseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with innner exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="T:GpsGate.Client.GateConnectException">
            <summary>
            Failed to connect to server
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateConnectException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="M:GpsGate.Client.GateConnectException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:GpsGate.Client.GateAuthenticationException">
            <summary>
            Wrong username or password
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateAuthenticationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage">Error message</param>
        </member>
        <member name="T:GpsGate.Client.GateDisconnectedException">
            <summary>
            Client was disconnected from server.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateDisconnectedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage">Error message</param>
        </member>
        <member name="M:GpsGate.Client.GateDisconnectedException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="exInner">Inner exception</param>
        </member>
        <member name="T:GpsGate.Client.GateNoResponseException">
            <summary>
            No response from server socket. Or a command that times out.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateNoResponseException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage">Error message</param>
        </member>
        <member name="T:GpsGate.Client.GateCommandException">
            <summary>
            Error when executing command on server.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateCommandException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strCode">Error code from server FRERR response</param>
            <param name="strMessage">Free text message.</param>
        </member>
        <member name="P:GpsGate.Client.GateCommandException.Code">
            <summary>
            The original code from FRERR.Code
            </summary>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient">
            <summary>
            The GpsGateClient is used to connect to GpsGate.com or a GpsGate Server installation.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_parser">
            <summary>
            NMEA Parser for incoming data.
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_bIsConnectAsync">
            <summary>
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_bConnecting">
            <summary>
            True from ConnectAsync() or Connect() is called until the connection failed or succeeded.
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_listTrackPoints">
            <summary>
            List of last known TrackPoint for each username. The keys are set to lower case.
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_listUsernames">
             <summary>
            The original usernames. Not lowercase.
             </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.#ctor(System.String,System.Int32)">
            <summary>
            Create GpsGate Client that will contect to a custom GpsGate Server.
            </summary>
            <param name="strHostname">Server to connect to. Use "online.gpsgate.com" to connect to GpsGate.com</param>
            <param name="iPort">Server port. Usually 30175</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.#ctor">
            <summary>
            Create a client that connects to GpsGate.com
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String)">
            <summary>
            Connects to and tries to login to the server specified in the constructor.
            Some send or request method must be called latest 20 seconds after the connection 
            is made, otherwise the server will disconnect.
            </summary>
            <example>
            <code lang="C#">
            // In this sample we connect to GpsGate.com
            // You can also connect to your own GpsGate Server installation.
            GpsGateClient client = new GpsGateClient("online.gpsgate.com", 30175);
            
            // The user must be created on the server first
            // Replace "username" and "password" by the real user name and password
            client.Connect("username", "password");
            
            // We are now connected. Lets send a position
            client.SendTrackPoint(new TrackPoint(new Position(30, 40), null, DateTime.UtcNow));
            
            // You can do as many operations as you like here...
            
            // And disconnect
            client.Disconnect();
            </code>
            </example>
            <remarks></remarks>
            <param name="strUsername">Username</param>
            <param name="strPassword">Password</param>
            <exception cref="T:System.Net.Sockets.SocketException">Failed to connect to server on a socket level.</exception>
            <exception cref="T:System.ArgumentNullException">Hostname was set to null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">iPort set in the constructor is not a valid socket port.</exception>
            <exception cref="T:System.InvalidOperationException">Client was already connected.</exception>
            <exception cref="T:GpsGate.Client.GateNoResponseException">The server socket was found, but the server is not responding.</exception>
            <exception cref="T:GpsGate.Client.GateDisconnectedException">Server closed the socket.</exception>
            <exception cref="T:GpsGate.Client.GateAuthenticationException">Wrong username or password.</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String,System.String)">
            <summary>
            Connect to server. <see cref="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String)"/> for more information.
            Set namespace to "IMEI" for an IMEI number based login.
            </summary>
            <param name="strDomain">Domain name</param>
            <param name="strUsername">User name</param>
            <param name="strPassword">Password</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.Connect">
            <summary>
            Connect to server without logging in. This can be useful if you want to send a _Login command instead and
            not use the old v1.1 way of logging in.
            </summary>
            <exception cref="T:GpsGate.Client.GateConnectException">Failed to connect.</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.ConnectAsync(System.String,System.String)">
            <summary>
            Connects and tries to login to server specified in constructor. Will return instantly 
            <see cref="M:GpsGate.Client.GpsGateClient.OnConnected"/> is called if the login was successful. 
            <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> followed by <see cref="M:GpsGate.Client.GpsGateClient.OnDisconnected"/> is 
            called if some kind of error happend. If you don't derive from GpsGateClient and overload the
            OnXyz() methods, the events <see cref="E:GpsGate.Client.GpsGateClient.Connected"/>, <see cref="E:GpsGate.Client.GpsGateClient.Error"/> and <see cref="E:GpsGate.Client.GpsGateClient.Disconnected"/>
            will be called. The argument to <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> or <see cref="E:GpsGate.Client.GpsGateClient.Error"/> will be the same as the exceptions
            described under <see cref="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String)"/>.
            </summary>
            <example>
            <code lanuage="C#">
            // Derive from GpsGateClient to override OnConnected() etc.
            class MyClient : GpsGateClient
            {
                public 
            
                protected void override OnConnected()
                {
                    // Successfully connected!
                }
            
                protected void override OnError(Exception ex)
                {
                    // There was an error
                }
            
                protected void override OnDisconnected()
                {
                    // Client was disconnected from server
                }
            }
            
            // Some code using the derived class above
            // 
            MyClient myClient = new MyClient("online.gpsgate.com", 30175);
            
            // The user must be created on the server first
            // Replace "username" and "password" by the real user name and password
            client.ConnectAsync("username", "password");
            
            // You cannot send or receive anything from the server until OnConnected() is called.
            </code>
            </example>
            <param name="strUsername">Username</param>
            <param name="strPassword">Password</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.ConnectAsync(System.String,System.String,System.String)">
            <summary>
            Same as <see cref="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String)"/> but also include namespace.
            Set namespace to "IMEI" for an IMEI number based login.
            </summary>
            <param name="strDomain"></param>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnConnected">
            <summary>
            Called when GpsGateClient has successfully connected and logged into the server.
            The default implementation will call the event <see cref="E:GpsGate.Client.GpsGateClient.Connected"/>. 
            A class that derives from GpsGateClient typically overrides this method.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)">
            <summary>
            Called when there is some kind of error between client and server.
            The default implementation will call the event <see cref="E:GpsGate.Client.GpsGateClient.Error"/>.
            A class that derives from GpsGateClient typically overrides this method to catch errors.
            </summary>
            <param name="ex">Exception that describes the error.</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.Disconnect">
            <summary>
            Disconnects client from server.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.DisconnectAsync">
            <summary>
            Starts disconnecting from server. Returns instantly.
            <see cref="M:GpsGate.Client.GpsGateClient.OnDisconnected"/> is called when client is disconnected from server.
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_bDisconnectCalled">
            <summary>
            Set to true when Disconnect() or DisconnectAsync() is called.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnDisconnected">
            <summary>
            Called when the client has disconnected from the server. The default
            implementation will call the event <see cref="E:GpsGate.Client.GpsGateClient.Disconnected"/>. A class that derives
            from GpsGateClient will typically override this method.
            OnDisconnected() is only called if OnConnected() has been called. If there is an error
            <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> is called first, then this method.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.SendTrackPoint(Franson.Geo.TrackPoint)">
            <summary>
            Sends a <see cref="T:Franson.Geo.TrackPoint"/> for the logged in user to the server.
            The current position and velocity for this user will be updated on the server,
            and also transmitted to any other clients listening for changes of this user.
            The client must be connected to the server.
            The client may not have called <see cref="M:GpsGate.Client.GpsGateClient.RequestTrackPoints(System.String,System.Double)"/> or <see cref="M:GpsGate.Client.GpsGateClient.RequestBuddyListTrackPoints(System.Double)"/>
            before the call to SendTrackPoint. To switch between request and send mode, the client must
            disconnect and connect again. A suceessful call to SendTrackPoint does not guarantee that the server
            has received the new position. It only guarantees it was successfully written to the local socket.
            To have a guaranteed transaction you can have one more GpsGateClient object that requests
            the same users current position, and compares it with the latest sent.
            </summary>
            <param name="trackPoint">TrackPoint</param>
            <exception cref="T:System.InvalidOperationException">If the client is disconnected or in request mode.</exception>
            <exception cref="T:System.IO.IOException">If socket is lost in an unexpected way</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.SendTrackPointAsync(Franson.Geo.TrackPoint)">
            <summary>
            Same as <see cref="M:GpsGate.Client.GpsGateClient.SendTrackPoint(Franson.Geo.TrackPoint)"/>, but the call will return instantly.
            <see cref="M:GpsGate.Client.GpsGateClient.OnTrackPointSent(Franson.Geo.TrackPoint)"/> is called when the data is written to the socket.
            <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> is called if there is an error.
            </summary>
            <param name="trackPoint">TrackPoint to send.</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnTrackPointSent(Franson.Geo.TrackPoint)">
            <summary>
            Called when a TrackPoint is sent. The default imlpementation will call the event
            <see cref="E:GpsGate.Client.GpsGateClient.TrackPointSent"/>. A class that derives from GpsGateClient will typically override 
            this method.
            </summary>
            <param name="trackPoint">The TrackPoint that was sent.</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.RequestTrackPoints(System.String,System.Double)">
            <summary>
            Call this method to request TrackPoints from a specific user.
            Each time a new TrackPoint is sent from the server <see cref="M:GpsGate.Client.GpsGateClient.OnTrackPointReceived(Franson.Geo.TrackPoint,System.String)"/>
            is called.
            To request data from a new user, you must reconnect first.
            </summary>
            <param name="strUsername">Username to receive data from</param>
            <param name="dblInterval">Interval in seconds.</param>
            <exception cref="T:System.InvalidOperationException">If not connected, or if some request or send method 
            has been called before</exception>
            <example><code language="C#">
            
            public class MyForm : System.Windows.Forms.Form
            {
                private GpsGateClient m_client = new GpsGateClient("online.gpsgate.com", 30175);    
            
                void MyForm()
                {
                    m_client.TrackPointReceived += new TrackPointReceivedHandle(MyForm_TrackPointReceived);
                }
            
                public void Start()
                {
                    // The user must be created on the server first
                    // Replace "username" and "password" by the real user name and password
                    // Connect to the server.
                    m_client.Connect("username", "password");
                    
                    // Request TrackPoints from a known user, with a fastest interval of 10 seconds
                    m_client.RequestTrackPoints("someuser", 10);
                }
            
                protected override void MyForm_TrackPointReceived(GpsGateClient client, TrackPoint trackPoint, string strUsername)
                {
                    // This even handler will be called (in a new thread) each time "someuser" has updated his position
                    // But never more often than every 10 seconds.
                    // Note that you need to use Invoke() to synchronize data to the GUI thread.
                }
            }
            </code></example>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.RequestBuddyListTrackPoints(System.Double)">
            <summary>
            Call this method to request TrackPoints from all users that you have the right to see. (Your "buddies").
            Each time a new TrackPoint is sent from the server <see cref="M:GpsGate.Client.GpsGateClient.OnTrackPointReceived(Franson.Geo.TrackPoint,System.String)"/>
            </summary>
            <param name="dblInterval">Interval in seconds.</param>
            <exception cref="T:System.InvalidOperationException">If not connected, or if some request or send method 
            has been called before</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.GetLastTrackPoint(System.String)">
            <summary>
            Get the last known <see cref="T:Franson.Geo.TrackPoint"/> for a known username. You must have connected to the server
            and requested the position for this user first.
            </summary>
            <param name="strUsername">Username to get the last known <see cref="T:Franson.Geo.TrackPoint"/> for</param>
            <returns>Last known TrackPoint</returns>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnTrackPointReceived(Franson.Geo.TrackPoint,System.String)">
            <summary>
            OnTrackPointReceived() is always called in a new thread from the ThreadPool
            </summary>
            <param name="trackPoint"></param>
            <param name="strUsername"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.SendCustomSentence(Franson.Nmea.Sentence)">
            <summary>
            Can be used to implement future aspects of the protocol.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:GpsGate.Client.GateConnectException">Client not connected to server</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnCustomNmeaDataReceived(Franson.Nmea.Sentence)">
            <summary>
            A custom sentence received from server. Override to implement future aspects of protocol.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.ToString">
            <summary>
            Returns a string with the format user@hostname
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.ConnectTimeout">
            <summary>
            Time in miliseconds before an attempt to connect to a server should time out. Default 30000 miliseconds
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.Connected">
            <summary>
            Called when GpsGateClient has successfully connected and logged into the server.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.Error">
            <summary>
            Called when there is some kind of error between client and server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.IsConnected">
            <summary>
            Returns true if there is a valid logged in connection between client and server without any errors.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.Disconnected">
            <summary>
            Called when the client has disconnected from the server.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.TrackPointSent">
            <summary>
            Called when a TrackPoint is sent.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.TrackPointReceived">
            <summary>
            Called when a new <see cref="T:Franson.Geo.TrackPoint"/> is received from the server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.ReceiveUsernameList">
            <summary>
            Returns an array of strings with all usernames for whom a position has been sent from the server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.Username">
            <summary>
            Username used when connecting to server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.Hostname">
            <summary>
            Returns name of server client will connect to.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.Port">
            <summary>
            Returns port number client will connect to.
            </summary>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.ConnectedHandle">
            <summary>
            Delagate used for the Connected event.
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.ErrorHandle">
            <summary>
            Delegate used by the Error event
            </summary>
            <param name="client">The sender of the event</param>
            <param name="ex">The exception describing the error</param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.DisconnectedHandle">
            <summary>
            Delegate used by the Disconnected event
            </summary>
            <param name="client">The sender of the event</param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.TrackPointSentHandle">
            <summary>
            Delegate used by the TrackPointSent event
            </summary>
            <param name="client">The sender of the event</param>
            <param name="trackPoint">The send <see cref="T:Franson.Geo.TrackPoint"/> object</param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.TrackPointReceivedHandle">
            <summary>
            Delegate used by <see cref="E:GpsGate.Client.GpsGateClient.TrackPointReceived"/> event
            </summary>
            <param name="client">The sender of event</param>
            <param name="trackPoint">Received <see cref="T:Franson.Geo.TrackPoint"/></param>
            <param name="strUsername">Username TrackPoint belongs to</param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClientCmd">
            <summary>
            Class use for command based communication with server.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.#ctor">
            <summary>
            Create a client that will connect to GpsGate.com
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.#ctor(System.String,System.Int32)">
            <summary>
            Create a client that will connect to a custom server.
            </summary>
            <param name="strHostname"></param>
            <param name="iPort"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create client that will connect to a custom server.
            If you are using a "Device Mapper" on the server, the device name must match with the one registered on the server.
            </summary>
            <param name="strHostname">Server to connect to</param>
            <param name="iPort">Server port</param>
            <param name="strDeviceName">Device name (on server)</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnConnected">
            <summary>
            Sends version handshake to server. Announces client uses v1.1 of GpsGate protocol.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnRetFromServer(Franson.Nmea.Command.GenericCmd,Franson.Nmea.FRERR)">
            <summary>
            Called when a response is received from server. By default the event <see cref="E:GpsGate.Client.GpsGateClientCmd.RetFromServer"/> is called.
            </summary>
            <param name="retFromServer"></param>
            <param name="errFromServer"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnCmdFromServer(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Called when an outgoing command is received from server. By default the event <see cref="E:GpsGate.Client.GpsGateClientCmd.CmdFromServer"/> is called.
            </summary>
            <param name="cmdFromServer"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.CmdToServerAsync(Franson.Nmea.FRCMD)">
             <summary>
             Send command to server. This is an asynchronous call and will return instantly. To get the answer from the server you 
             either need to override <see cref="M:GpsGate.Client.GpsGateClientCmd.OnRetFromServer(Franson.Nmea.Command.GenericCmd,Franson.Nmea.FRERR)"/> or listen to the <see cref="E:GpsGate.Client.GpsGateClientCmd.RetFromServer"/> event.
             If there is some kind of connection error <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> and <see cref="E:GpsGate.Client.GpsGateClient.Error"/> will be called.
             If the client is disconnected <see cref="M:GpsGate.Client.GpsGateClient.OnDisconnected"/> and <see cref="E:GpsGate.Client.GpsGateClient.Disconnected"/> will be called.
             </summary>
             <param name="cmdToSend"></param>
             <example>
             <code lanuage="C#">
             
             using Franson.Nmea.Command;
             using Franson.Nmea;
             using GpsGate.Client;
             
             private AutoResetEvent m_evCmdFromServer = null;
             private FRERR m_errLast = null;
             private GenericCmd m_cmdLast = null;
             
             public void TestPing()
             {
                 GpsGateClientCmd clientCmd = new GpsGateClientCmd("localhost", 30175);
                 // This event will be called when server has executed command.
                 clientCmd.RetFromServer += new GpsGateClientCmd.RetFromServerHandle(clientCmd_CmdFromServer);
                 // Login to server
                 clientCmd.Connect("username", "password");
             
                 // Send _Ping command
                 Ping ping = new Ping();
                 clientCmd.CmdToServerAsync(ping);
             
                 // Wait for reply from server.                        
                 m_evCmdFromServer.WaitOne(5000, false);
             
                 // m_cmdLast contains result from server, m_errlast contains error from server
             
                 // More commands can be executed here...
             
                 clientCmd.Disconnect();
             }
             
             private void clientCmd_CmdFromServer(GpsGateClient client, GenericCmd cmdFromServer, FRERR errFromServer)
             {
                 m_cmdLast = cmdFromServer;
                 m_errLast = errFromServer;
            
                 m_evCmdFromServer.Set();
             }
             </code>
             </example>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.CmdToServer(Franson.Nmea.FRCMD)">
            <summary>
            Executes command on server. This call is synchronously, which means it locks, and returns when the response from server has been received.
            If there are any errors, and exception is thrown. <see cref="M:GpsGate.Client.GpsGateClientCmd.CmdToServerAsync(Franson.Nmea.FRCMD)"/>
            </summary>
            <param name="cmdToServer">Command to execute on server.</param>
            <returns>Response from server.</returns>
            <exception cref="T:GpsGate.Client.GateNoResponseException">There was no response from server.</exception>
            <exception cref="T:GpsGate.Client.GateDisconnectedException">Client was disconencted. Due to error or a call to Disconnect</exception>
            <exception cref="T:GpsGate.Client.GateCommandException">Error executing command on server.</exception>
            <example>
            <code lanuage="C#">
            
            using Franson.Nmea.Command;
            using Franson.Nmea;
            using Franson.Geo;
            using GpsGate.Client;
            
            public void TestSendMessage()
            {
                // Replace "localhost" if "Franson NMEA Service" is running on another computer.
                GpsGateClientCmd clientCmd = new GpsGateClientCmd("localhost", 30175);
                // Login to server
                clientCmd.Connect("username", "password");
            
                // Send _SendMessage command
                // Use the "Device Mapper" in vehicle Tracker to map signals to alarms etc.
            
                TrackPoint tp = new TrackPoint(new Position(1, 2), new Velocity(3, 4), DateTime.UtcNow);
                SendMessage builder = new SendMessage(tp, "GpsGateDevice");
                builder.AddMessageRecord("Switch1", true);
            
                // Note that this call can throw exceptions if there are any kind of error.
                clientCmd.CmdToServer(builder);
            
                // More commands can be executed here...
            
                clientCmd.Disconnect();
            }
            </code>
            </example>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.RetToServer(Franson.Nmea.FRRET,Franson.Nmea.FRERR)">
            <summary>
            Send a response to server. Either a FRRET based response valid execution or FRERR on error.
            </summary>
            <param name="retToSend"></param>
            <param name="errToSend"></param>
            <exception cref="T:System.InvalidOperationException">If both arguments are null, or both are set.</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnCustomNmeaDataReceived(Franson.Nmea.Sentence)">
            <summary>
            Called when a sentence is received from server.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.m_cmdParser_ErrorFound(Franson.Nmea.Command.CmdParser,Franson.Nmea.FRERR)">
            <summary>
            
            </summary>
            <param name="parser"></param>
            <param name="err"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.m_cmdParser_GenericCmdFound(Franson.Nmea.Command.CmdParser,Franson.Nmea.Command.GenericCmd)">
            <summary>
            Called by command parser, when a complete $FRRET or $FRCMD found. Including argument sentences.
            </summary>
            <param name="parser"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.GetLastTrackPoint(System.String)">
            <summary>
            Do not use in command mode.
            </summary>
            <param name="strUsername"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnTrackPointReceived(Franson.Geo.TrackPoint,System.String)">
            <summary>
            Do not use in command mode.
            </summary>
            <param name="trackPoint"></param>
            <param name="strUsername"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnTrackPointSent(Franson.Geo.TrackPoint)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="trackPoint"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.RequestBuddyListTrackPoints(System.Double)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="dblInterval"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.RequestTrackPoints(System.String,System.Double)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="strUsername"></param>
            <param name="dblInterval"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.SendTrackPoint(Franson.Geo.TrackPoint)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="trackPoint"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.SendTrackPointAsync(Franson.Geo.TrackPoint)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="trackPoint"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientCmd.ServerName">
            <summary>
            Returns name and version to connected server. Returns null if not yet connected.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClientCmd.RetFromServer">
            <summary>
            Event called when there is a response from server, for a command sent from client.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClientCmd.CmdFromServer">
            <summary>
            Event called when there is a outgoing command from server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientCmd.ReceiveUsernameList">
            <summary>
            Do not use in command mode
            </summary>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="T:GpsGate.Client.GpsGateClientCmd.RetFromServerHandle">
            <summary>
            Delegate to handle response from server, for a command sent from client.
            </summary>
        </member>
        <member name="T:GpsGate.Client.GpsGateClientCmd.CmdFromServerHandle">
            <summary>
            Delegate to handle outgoing command from server.
            </summary>
            <param name="client"></param>
            <param name="cmdFromServer"></param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClientHttp">
            <summary>
            GpsGate Client to send commands to GpsGate Server over HTTP.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:GpsGate.Client.GpsGateClientHttp.m_listCmds">
            <summary>
            Array of commands to be sent to server at next call to Execute
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientHttp.#ctor(System.String,System.Int32)">
            <summary>
            Connects to a GpsGate Server using HTTP. The default port is 8008. The host name should not include path.
            The URL will be http://strHostName:iPort/GpsGate/
            </summary>
            <param name="strHostName">Server address not including path or "http://" </param>
            <param name="iPort">Use port 8008</param>
            <exception cref="T:System.ArgumentException">Invalid argument</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientHttp.#ctor">
            <summary>
            Create client that connects to GpsGate.com using HTTP.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientHttp.AddCmd(Franson.Nmea.CmdBase)">
            <summary>
            Add a command to be sent to server at next call to <see cref="M:GpsGate.Client.GpsGateClientHttp.Execute"/> 
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientHttp.Execute">
            <summary>
            Send all commands to server.
            </summary>
            <returns>Array of answers to each command sent to server.</returns>
            <exception cref="T:GpsGate.Client.GateConnectException">Could not connect to server, or posted data was in bad format.</exception>
            <exception cref="T:GpsGate.Client.GateParseException">Could not understand response from server.</exception>
            <exception cref="T:System.InvalidOperationException">Could not build XML from commands.</exception>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientHttp.ServerUrl">
            <summary>
            Server URL. Default "http://online.gpsgate.com:8008/GpsGate/"
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientHttp.ServerHostName">
            <summary>
            Host name. Default "online.gpsgate.com"
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientHttp.ServerPort">
            <summary>
            Server port. Default 8008
            </summary>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient">
            <summary>
            Handles SMS exchange with GpsGate Server. This class can be used when integrating GpsGate Server to a new
            SMS provider. E.g. Vodafone has their own API:s to send an receive bulk SMS. Use this calss when integrating
            GpsGate Server to such provider.
            
            Or you might have a GSM modem connected to your computer, a web service, or similar. This is the class to
            use to integrate such SMS provider to GpsGate Server.
            
            You should NOT use this class to integrate one particular device that uses SMS. This is rather a class
            that acts as a proxy for all SMS messages between GpsGate Server and an SMS provider. Independent of
            what is contained in the SMS.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.SERVER_RESPONSE_TIMEOUT">
            <summary>
            30 seconds server timeout.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_iRetryConnectDelay">
            <summary>
            Wait 60 seconds before reconnecting in "fire and forget" mode.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_iPingInterval">
            <summary>
            Ping interval.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_strServerAddress">
            <summary>
            GpsGate Server address.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_iPort">
            <summary>
            GpsGate Server port.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_strUsername">
            <summary>
            Credentials to login to server.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_ggClient">
            <summary>
            Handles communication with server.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_bAcceptedAsSmsProxy">
            <summary>
            Set to true if confirmed from server we are accepted as SMS Proxy
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.#ctor(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Create object that handles SMS exchange with GpsGate Server.
            </summary>
            <param name="strServerAddress">Address to server</param>
            <param name="iPort">Server port</param>
            <param name="strUsername">Username. Must be set as a SMS Proxy user on server</param>
            <param name="strPassword">Password</param>
            <param name="bFireAndForget">Set fire and forget mode.</param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.Connect(System.Boolean)">
            <summary>
            Connect to server. Waits until connection is successful or fails.
            If "fire and forget" mode is true, then SmsProxyClient will try to reconnect to
            the server if the connection is lost, until <see cref="M:GpsGate.Client.SmsProxyClient.Disconnect"/> is called.
            </summary>
            <param name="bAcceptOutgoingSMS">Set to true to accept outgoing SMS from server.</param>
            <exception cref="T:GpsGate.Client.GateConnectException">Failed to connect to server, when "fire and forget" not active.</exception>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.m_DisconnectAndRetry">
            <summary>
            Disconnects from server if connected. Starts a timer to retry if in "fire and forget mode".
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.Disconnect">
            <summary>
            Disconnect from server.
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.ExecuteCommand(Franson.Nmea.FRCMD)">
            <summary>
            Sends command to server and waits for answer before return. If client not connected and attempt to connect will be made.
            If there is an error, an exception is thrown.
            Exception is thrown in "fire and forget" mode as well.
            </summary>
            <param name="cmdToSend"></param>
            <exception cref="T:System.ArgumentException">Any of the argument is null</exception>
            <exception cref="T:GpsGate.Client.GateCommandException">If server returns an error when executing command.</exception>
            <exception cref="T:GpsGate.Client.GateConnectException">If client fails to connect to server. Or if response from server timed out.</exception>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.m_cmdFromServer(GpsGate.Client.GpsGateClient,Franson.Nmea.Command.GenericCmd)">
            <summary>
            Outgoing command from server received.
            </summary>
            <param name="client"></param>
            <param name="cmdFromServer"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.m_cmd_RetFromServer(GpsGate.Client.GpsGateClient,Franson.Nmea.Command.GenericCmd,Franson.Nmea.FRERR)">
            <summary>
            Response on command from client received.
            </summary>
            <param name="client"></param>
            <param name="retFromServer"></param>
            <param name="errFromServer"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.m_cmd_Error(GpsGate.Client.GpsGateClient,System.Exception)">
            <summary>
            Error in connection to server
            </summary>
            <param name="client"></param>
            <param name="ex"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.OnConnected">
            <summary>
            Called when a connection to server is established.
            By default the <see cref="E:GpsGate.Client.SmsProxyClient.Connected"/> event is called.
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.OnDisconnected">
            <summary>
            Called when disconnected from server.
            By default <see cref="E:GpsGate.Client.SmsProxyClient.Disconnected"/> event is called.
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.OnMessageFromServer(Franson.Nmea.Command.ProxyMessageCmdBuilder)">
            <summary>
            Called when a message is received from server.
            By default <see cref="E:GpsGate.Client.SmsProxyClient.MessageFromServer"/> is called.
            
            If overridden, throw an exception if failing to process message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.OnConnectionError(System.Exception)">
            <summary>
            Called when there is an error in connection to server.
            By default <see cref="E:GpsGate.Client.SmsProxyClient.ConnectionError"/> is called, and a retry timer is started if in "fire and forget mode".
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.TestServerConnection(System.String,System.Int32,System.String,System.String)">
            <summary>
            Tests connection to server. Returns true if server accepts client as outgoing SMS Proxy.
            </summary>
            <param name="strServerAddress"></param>
            <param name="iPort"></param>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
            <returns></returns>
        </member>
        <member name="E:GpsGate.Client.SmsProxyClient.Connected">
            <summary>
            Called when a connection to server is established.
            </summary>
        </member>
        <member name="E:GpsGate.Client.SmsProxyClient.Disconnected">
            <summary>
            Called when disconnected from server.
            </summary>
        </member>
        <member name="E:GpsGate.Client.SmsProxyClient.MessageFromServer">
            <summary>
            Called when a new message has been received from server.
            The event handler should throw an exception if it fails to process the message (e.g. fails to send it)
            </summary>
        </member>
        <member name="E:GpsGate.Client.SmsProxyClient.ConnectionError">
            <summary>
            Called when the connection to server fails unexpectedly.
            </summary>
        </member>
        <member name="P:GpsGate.Client.SmsProxyClient.IsConnected">
            <summary>
            Returns true if client connected to server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.SmsProxyClient.RetryConnectDelay">
            <summary>
            Delay in milliseconds before an attempt to reconnect to server is made in "fire and forget" mode.
            Default 60 * 1000 = 1 minute
            </summary>
        </member>
        <member name="P:GpsGate.Client.SmsProxyClient.PingInterval">
            <summary>
            Milliseconds between _Ping command to server to keep connection alive. 
            Default 3 * 60 * 1000 = 3 minutes.
            </summary>
        </member>
        <member name="P:GpsGate.Client.SmsProxyClient.AcceptedAsSmsProxy">
            <summary>
            Returns true if server accepted proxy as outgoing SMS proxy.
            </summary>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient.ConnectedHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Client.SmsProxyClient.Connected"/>
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient.DisconnectedHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Client.SmsProxyClient.Disconnected"/>
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient.MessageFromServerHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Client.SmsProxyClient.MessageFromServer"/>
            </summary>
            <param name="conn"></param>
            <param name="proxyMessage"></param>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient.ConnectionErrorHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Client.SmsProxyClient.ConnectionError"/>
            </summary>
            <param name="conn"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Franson.Serialization.SerializeAttribute">
            <summary>
            Mockup
            </summary>
        </member>
        <member name="M:Franson.Serialization.SerializeAttribute.#ctor">
            <summary>
            Mockup
            </summary>
        </member>
        <member name="M:Franson.Serialization.SerializeAttribute.#ctor(System.String)">
            <summary>
            Mockup
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Franson.Serialization.SerializeAttribute.Name">
            <summary>
            Mockup
            </summary>
        </member>
        <member name="P:Franson.Serialization.SerializeAttribute.numDecimals">
            <summary>
            Mockup
            </summary>
        </member>
        <member name="T:NLog.Logger">
            <summary>
            Mockup
            </summary>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
            <param name="obj4"></param>
            <param name="obj5"></param>
            <param name="obj6"></param>
            <param name="obj7"></param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
            <param name="obj4"></param>
            <param name="obj5"></param>
            <param name="obj6"></param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
            <param name="obj4"></param>
            <param name="obj5"></param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
            <param name="obj4"></param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
            <param name="obj4"></param>
            <param name="obj5"></param>
            <param name="obj6"></param>
            <param name="obj7"></param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
            <param name="obj4"></param>
            <param name="obj5"></param>
            <param name="obj6"></param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
            <param name="obj4"></param>
            <param name="obj5"></param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
            <param name="obj4"></param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
        </member>
        <member name="M:NLog.Logger.Info(System.String)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="obj3"></param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
            <param name="obj2"></param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="obj1"></param>
        </member>
        <member name="M:NLog.Logger.Error(System.String)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLog.Logger.TraceException(System.String,System.Exception)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:NLog.Logger.WarnException(System.String,System.Exception)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:NLog.Logger.InfoException(System.String,System.Exception)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:NLog.Logger.DebugException(System.String,System.Exception)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:NLog.Logger.ErrorException(System.String,System.Exception)">
            <summary>
            Mockup
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:NLog.LogManager">
            <summary>
            Mockup
            </summary>
        </member>
        <member name="F:NLog.LogManager.m_nlog">
            <summary>
            Mockup
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger">
            <summary>
            Mockup
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Buffer.Circular">
            <summary>
            Circular buffer
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Franson.Buffer.Circular.m_buffer">
            <summary>
            Actual data stroed in circular buffer.
            </summary>
        </member>
        <member name="F:Franson.Buffer.Circular.m_iEndIndex">
            <summary>
            End index in buffer. This value should be taken mod m_iLength when reading and writing data 
            from m_buffer. m_iEndIndex is always greater than m_iStartIndex
            </summary>
        </member>
        <member name="F:Franson.Buffer.Circular.m_iStartIndex">
            <summary>
            Start index in buffer. See m_iEndIndex for more info
            </summary>
        </member>
        <member name="F:Franson.Buffer.Circular.m_iLength">
            <summary>
            Length of buffer.
            </summary>
        </member>
        <member name="M:Franson.Buffer.Circular.#ctor(System.Int32)">
            <summary>
            Creates a new circular buffer
            </summary>
            <param name="iLength">Size of buffer</param>
        </member>
        <member name="M:Franson.Buffer.Circular.Reset">
            <summary>
            Empty buffer.
            </summary>
        </member>
        <member name="M:Franson.Buffer.Circular.Clear">
            <summary>
            Empties buffer. Same as Reset()
            </summary>
        </member>
        <member name="M:Franson.Buffer.Circular.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes new data to buffer
            </summary>
            <param name="arrData">Array to write</param>
            <param name="iStartIndex">Where from arrData to start writing data</param>
            <param name="iLength">Number of bytes to write</param>
            <returns>Number of bytes actually written</returns>
            <exception cref="T:System.NullReferenceException">If arrData is null</exception>
        </member>
        <member name="M:Franson.Buffer.Circular.Write(System.Byte[])">
            <summary>
            Writes data to buffer
            </summary>
            <param name="arrData">Array of data to write</param>
            <returns>Number of bytes written</returns>
            <exception cref="T:System.NullReferenceException">If arrData is null</exception>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadAndAppend(System.Int32,System.Byte[])">
            <summary>
            Reads data from buffer and appends "arrAppend" at end of returned byte array.
            </summary>
            <param name="iLength">Number of bytes to read</param>
            <param name="arrAppend">Array to append at end of read data.</param>
            <returns>Data from buffer + arrAppend</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadAndAppend(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Reads data from buffer and appends "arrAppend" at end of returned byte array.
            </summary>
            <param name="iLength">Number of bytes to read</param>
            <param name="arrAppend">Array to append at end of read data.</param>
            <param name="bPeek">If true returned data will not be removed from buffer.</param>
            <returns>Data from buffer + arrAppend</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Read(System.Int32)">
            <summary>
            Read data from buffer
            </summary>
            <param name="iLength">Number of bytes to read</param>
            <returns>An array of data. Can never exceed the length of this circular buffer.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Read(System.Int32,System.Boolean)">
            <summary>
            Read data from buffer.
            </summary>
            <param name="iLength">Number of bytes to read</param>
            <param name="bPeek">If true returned data will not be removed from buffer.</param>
            <returns>An array of data. Can never exceed the length of this circular buffer.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from buffer and copies it to arrData
            </summary>
            <param name="arrData">Buffer to read data to</param>
            <param name="iOffset">Offset in arrData to start from</param>
            <param name="iLength">Number of bytes to read</param>
            <returns>Number of bytes read from buffer</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Read(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads data from buffer and copies it to arrData
            </summary>
            <param name="arrData">Buffer to read data to</param>
            <param name="iOffset">Offset in arrData to start from</param>
            <param name="iLength">Number of bytes to read</param>
            <param name="bPeek">If true returned data will not be removed from buffer.</param>
            <returns>Number of bytes read from buffer</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadInteger(System.Boolean)">
            <summary>
            Returns next 4 bytes as an integer.
            </summary>
            <param name="bBigEndian">True if Most significant byte is first in buffer == big endian.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">If less then 4 bytes are left in buffer</exception>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadShort(System.Boolean)">
            <summary>
            Returns next 2 bytes as an integer.
            </summary>
            <param name="bBigEndian">True if Most significant byte is first in buffer == big endian.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">If less then 4 bytes are left in buffer</exception>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadByte">
            <summary>
            Returns next byte in buffer. Returns -1 if there is no data in buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.Circular.PeekByte">
            <summary>
            Returns next byte in buffer without moving index. Returns -1 if there is no data in buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Peek(System.Int32,System.Int32)">
            <summary>
            Returns byte array without moving index. Returns null if interval is outside buffer.
            </summary>
            <param name="iStartIndex"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Seek(System.Int32)">
            <summary>
            Skip data in buffer.
            </summary>
            <param name="iOffset">Number of bytes to skip</param>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[][])">
            <summary>
            Returns index of the first occurance of any of the patterns in the array of byte[].
            Returns -1 if not found.
            </summary>
            <param name="arrPatternList">Array of patterns to search for.</param>
            <returns>Index of first occurance of pattern, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[][],System.Int32)">
            <summary>
            Returns index of the first occurance of any of the patterns in the array of byte[].
            Returns -1 if not found.
            </summary>
            <param name="arrPatternList">Array of patterns to search for.</param>
            <param name="iOffset">Offset in buffer where search starts.</param>
            <returns>Index of first occurance of pattern, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte)">
            <summary>
            Returns index of next occurance if bytePattern. Returns -1 if not found
            </summary>
            <param name="bytePattern">Byte to search for.</param>
            <returns>Index of first found byte, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte,System.Int32)">
            <summary>
            Returns index of next occurance if bytePattern. Returns -1 if not found
            </summary>
            <param name="bytePattern">Byte to search for.</param>
            <param name="iOffset">Offset where to start search</param>
            <returns>Index of first found byte, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[],System.Boolean)">
            <summary>
            Returns the index of found data.
            </summary>
            <param name="arrData">Data to search for</param>
            <param name="bFindAny">Searches for the first occurance of any of the bytes in arrData if true, and to the sequence if false.</param>
            <returns>Index of found data. Returns -1 if no match found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Returns the index of found data.
            </summary>
            <param name="arrData">Data to search for</param>
            <param name="bFindAny">Searches for the first occurance of any of the bytes in arrData if true, and to the sequence if false.</param>
            <param name="iOffset">Offset where to start search</param>
            <returns>Index of found data. Returns -1 if no match found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[])">
            <summary>
            Returns index of start of arrPattern. Returns -1 if not found
            </summary>
            <param name="arrPattern">Pattern to find.</param>
            <returns>Index of found data, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[],System.Int32)">
            <summary>
            Returns index of start of arrPattern. Returns -1 if not found
            </summary>
            <param name="arrPattern">Pattern to find.</param>
            <param name="iOffset">Offset where to start search</param>
            <returns>Index of found data, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.CopyArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy a byte array
            </summary>
            <param name="arrSource">byte array to be copied</param>
            <param name="iStartIndex">Start index</param>
            <param name="iLenght">Length</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.Circular.StringToByteArray(System.String)">
            <summary>
            Converts a string to a byte array
            </summary>
            <param name="strData">String to convert</param>
            <returns>Created byte array</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.ToString">
            <summary>
            Returns "UsedLenth: X". Useful for logging and debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Buffer.Circular.UsedLength">
            <summary>
            Number of bytes used in buffer
            </summary>
        </member>
        <member name="P:Franson.Buffer.Circular.EmptyLength">
            <summary>
            Number of bytes free in buffer
            </summary>
        </member>
        <member name="P:Franson.Buffer.Circular.Length">
            <summary>
            Total buffer size
            </summary>
        </member>
        <member name="T:Franson.Geo.BoundingBox">
            <summary>
            Handles a bounding box in up to 5 dimensions (including time).
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Geo.BoundingBox.#ctor(Franson.Geo.TrackPoint)">
            <summary>
            Create bounding box from valid or invalid TrackPoint.
            </summary>
            <param name="tp"></param>
        </member>
        <member name="M:Franson.Geo.BoundingBox.#ctor(Franson.Geo.Position,System.DateTime)">
            <summary>
            Create nounding box in 3D from position object and date time object.
            </summary>
            <param name="pos"></param>
            <param name="dtUTC"></param>
        </member>
        <member name="M:Franson.Geo.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates bounding box in two dimensions.
            </summary>
            <param name="dblMinX">Min X. Typically used for Longitude or Easting.</param>
            <param name="dblMaxX">Max X. Typically used for Longitude or Easting.</param>
            <param name="dblMinY">Min Y. Typically used for Latitude or Easting.</param>
            <param name="dblMaxY">Max Y. Typically used for Latitude or Easting.</param>
        </member>
        <member name="M:Franson.Geo.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.DateTime,System.DateTime)">
            <summary>
            Creates bounding box in 5 dimensions.
            </summary>
            <param name="dblMinX">Min X. Typically used for Longitude or Easting.</param>
            <param name="dblMaxX">Max X. Typically used for Longitude or Easting.</param>
            <param name="dblMinY">Min Y. Typically used for Latitude or Easting.</param>
            <param name="dblMaxY">Max Y. Typically used for Latitude or Easting.</param>
            <param name="dblMinZ">Min Z. Typically used for Altitude.</param>
            <param name="dblMaxZ">Max Z. Typically used for Altitude.</param>
            <param name="dblMinM">Min M. Custom use.</param>
            <param name="dblMaxM">Max M. Custom use.</param>
            <param name="dtMin">Start time.</param>
            <param name="dtMax">End time.</param>
        </member>
        <member name="M:Franson.Geo.BoundingBox.IsInside(Franson.Geo.TrackPoint)">
            <summary>
            Check if track point is inside bounding box.
            If track point is valid, lon, lat, alt and time is considered.
            If track point is invalid only time is considered.
            </summary>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.IsInside(Franson.Geo.Position,System.DateTime)">
            <summary>
            Returns true if Position and DateTime is inside geo bounding box and time frame.
            </summary>
            <param name="pos">Position to check.</param>
            <param name="dtUTC">Time to check</param>
            <returns>True if inside bounding box</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.IsInside(System.Double,System.Double)">
            <summary>
            Returns true if X, Y is inside the bounding box. Only X and Y are considered.
            </summary>
            <param name="dblX">X value to check.</param>
            <param name="dblY">Y value to check.</param>
            <returns>True if inside.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.IsInside(System.Double,System.Double,System.Double,System.Double,System.DateTime)">
            <summary>
            Returns true if coordinate and time is inside the bounding box.
            </summary>
            <param name="dblX">X value to check.</param>
            <param name="dblY">Y value to check.</param>
            <param name="dblZ">Z value.</param>
            <param name="dblM">M value.</param>
            <param name="dtTime">Time</param>
            <returns>True if inside.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Expand(Franson.Geo.TrackPoint)">
            <summary>
            Expand bounding box with valid or invalid track point.
            An invalid track point will only expand time and not position. A valid position will expand position and time.
            </summary>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Expand(Franson.Geo.Position,System.DateTime)">
            <summary>
            Expand bounding box with Position object nad DateTime.
            </summary>
            <param name="pos"></param>
            <param name="dtUTC"></param>
            <returns>Returns new BoundingBox if expanded, else same box is returned</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Expand(System.Double,System.Double)">
            <summary>
            Returns a new BoundingBox object which includes the arguments. If the arguments are inside the
            bounding box, "this" is returned. Z, M and time is ignored.
            </summary>
            <param name="dblX">X value to expand with.</param>
            <param name="dblY">Y value to expand with</param>
            <returns>New expanded BoundingBox, or "this" if no expansion is made.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Expand(System.Double,System.Double,System.Double,System.Double,System.DateTime)">
            <summary>
            Returns a new BoundingBox object which includes the arguments. If the arguments are inside the
            bounding box, "this" is returned.
            </summary>
            <param name="dblX">X value to expand with.</param>
            <param name="dblY">Y value to expand with</param>
            <param name="dblZ">Z value to expand with.</param>
            <param name="dblM">M value to expand with.</param>
            <param name="dtTime"></param>
            <returns>New expanded BoundingBox, or "this" if no expansion is made.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Equals(System.Object)">
            <summary>
            Returns true if bounding boxes are identical.
            </summary>
            <param name="obj">Box to compare with.</param>
            <returns>True if equal border values.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.GetHashCode">
            <summary>
            Calls base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.ToString">
            <summary>
            String with values that builds up bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinX">
            <summary>
            Minimum X value. Typically Longitude or Easting.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxX">
            <summary>
            Max X value. Typically represents Longitude or Easting.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinY">
            <summary>
            Min Y value. Typically represents Latitude or Northing.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxY">
            <summary>
            Max Y value. Typically represents Latitude or Northing.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinZ">
            <summary>
            Min Z value. Typically represents Altitude.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxZ">
            <summary>
            Max Z value. Typically represents Altitude.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinM">
            <summary>
            Min M value. Custom data.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxM">
            <summary>
            Max M value. Custom data.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinTime">
            <summary>
            Min time. Typically represents when data bound by this box was started in time.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxTime">
            <summary>
            Max time. Typically represents when data bound by this box was ended in time.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.ValidBox">
            <summary>
            
            </summary>
        </member>
        <member name="T:Franson.Geo.GeoArgumentException">
            <summary>
            Invalid argument(s).
            </summary>
        </member>
        <member name="T:Franson.Geo.Location">
            <summary>
            Stores extended information about a place, such as its <see cref="P:Franson.Geo.Location.Position"/>, country name, postal code and address.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Geo.Location.#ctor(Franson.Geo.Position,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a location from the provided values
            </summary>
            <param name="position"></param>
            <param name="strCountryName"></param>
            <param name="strCityName"></param>
            <param name="strPostalCodeNumber"></param>
            <param name="strStreetName"></param>
            <param name="strStreetNumber"></param>
            <param name="strStreetBox"></param>
            <param name="strAddress"></param>
        </member>
        <member name="M:Franson.Geo.Location.Equals(System.Object)">
            <summary>
            Returns true if positions are the same
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Location.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Location.ToString">
            <summary>
            Returns <see cref="P:Franson.Geo.Location.Address"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.Location.Position">
            <summary>
            The <see cref="P:Franson.Geo.Location.Position"/> of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.CountryName">
            <summary>
            The name of the country of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.CityName">
            <summary>
            The name of the city of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.PostalCodeNumber">
            <summary>
            The postal code number of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.StreetBox">
            <summary>
            The box of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.StreetName">
            <summary>
            The name of the street of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.StreetNumber">
            <summary>
            The number of the street of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.Address">
            <summary>
            The address of this <see cref="T:Franson.Geo.Location"/>. This value is often a concatenation of values such as street name, 
            number, postal code, city etc.
            </summary>
        </member>
        <member name="T:Franson.Geo.LocationBuilder">
            <summary>
            Builder for a Location
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Geo.LocationBuilder.#ctor">
            <summary>
            Creates a builder with all fields defaulted to null
            </summary>
        </member>
        <member name="M:Franson.Geo.LocationBuilder.#ctor(Franson.Geo.Location)">
            <summary>
            Creates a builder with the fields to the locations corresponding fields
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Franson.Geo.LocationBuilder.ToLocation">
            <summary>
            Returns a <see cref="T:Franson.Geo.Location"/> from the builder's fields
            </summary>
            <returns>Location from the builder's fields</returns>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.Position">
            <summary>
            The <see cref="P:Franson.Geo.LocationBuilder.Position"/> of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.CountryName">
            <summary>
            The name of the country of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.CityName">
            <summary>
            The name of the city of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.PostalCodeNumber">
            <summary>
            The postal code number of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.StreetBox">
            <summary>
            The box of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.StreetName">
            <summary>
            The name of the street of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.StreetNumber">
            <summary>
            The number of the street of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.Address">
            <summary>
            The address of this <see cref="T:Franson.Geo.LocationBuilder"/>. This value is often a concatenation of values such as street name, 
            number, postal code, city etc.
            </summary>
        </member>
        <member name="T:Franson.Geo.DistanceUnits">
            <summary>
            Use in when converting between different distance units. E.g. meters to yards.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Geo.DistanceUnits.Foot">
            <summary>
            Factor between meter and foot
            </summary>
        </member>
        <member name="F:Franson.Geo.DistanceUnits.Yard">
            <summary>
            Factor between meter and yard
            </summary>
        </member>
        <member name="F:Franson.Geo.DistanceUnits.Mile">
            <summary>
            Factor between meter and mile
            </summary>
        </member>
        <member name="T:Franson.Geo.Position">
            <summary>
            Represents a geographic position. Position is read only and thereby thread safe.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Geo.Position.#ctor">
            <summary>
            Create a Position object with default values.
            Latitude = 0.0 
            Longitude = 0.0
            </summary>
        </member>
        <member name="M:Franson.Geo.Position.#ctor(System.Double,System.Double)">
            <summary>
            Create a Position object from lon/lat in degrees. Latitude must be between -90 and 90.
            Longitude will be "normalized" to a value between -180 and 180. E.g. 730 -&gt; 10 and 270 -&gt; -90
            </summary>
            <param name="dblLongitude">Longitude in decimal degrees</param>
            <param name="dblLatitude">Latitude in decimal degrees</param>
            <exception cref="T:Franson.Geo.GeoArgumentException">If the latitude is less then -90 or greater than 90.</exception>
        </member>
        <member name="M:Franson.Geo.Position.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a Position object from lon/lat/altitude
            </summary>
            <param name="dblLongitude">Longitude in decimal degrees</param>
            <param name="dblLatitude">Latitude in decimal degrees</param>
            <param name="dblAltitude">Altitude in meters</param>
            <exception cref="T:Franson.Geo.GeoArgumentException">Invalid latitude.</exception>
        </member>
        <member name="M:Franson.Geo.Position.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a Position object from lon/lat/altitude
            </summary>
            <param name="dblLongitude">Longitude in decimal degrees</param>
            <param name="dblLatitude">Latitude in decimal degrees</param>
            <param name="dblAltitude">Altitude in meters</param>
            <param name="dblAltitudeUnit">Unit for specified altitude. <see cref="T:Franson.Geo.DistanceUnits"/></param>
            <exception cref="T:Franson.Geo.GeoArgumentException">Invalid latitude.</exception>
        </member>
        <member name="M:Franson.Geo.Position.Move(System.Double,System.Double)">
            <summary>
            Returns a new Position object at a specific distance and heading.
            </summary>
            <param name="dblDistance">Distance in meters to new position.</param>
            <param name="dblBearing">Heading in degrees to new position</param>
            <returns>New Position object.</returns>
        </member>
        <member name="M:Franson.Geo.Position.Bearing(Franson.Geo.Position)">
            <summary>
            Bearing from "this" position object to the position object given as argument.
            </summary>
            <param name="posSecond">Position to calculate bearing to.</param>
            <returns>Bearing in degrees.</returns>
        </member>
        <member name="M:Franson.Geo.Position.DistanceRadians(Franson.Geo.Position)">
            <summary>
            Distance between two position objects in radians.
            Great Circle Distance Calculations are used.
            </summary>
            <param name="posSecond">Position to calculate distance to.</param>
            <returns>Distance in radians</returns>
        </member>
        <member name="M:Franson.Geo.Position.Distance(Franson.Geo.Position)">
            <summary>
            Returns the distance between two <see cref="T:Franson.Geo.Position"/> objects.
            Great Circle Distance is used for the calculation. The returned value is in meters.
            </summary>
            <param name="posSecond">Position to calculate distance to.</param>
            <returns>Distance in meters</returns>
        </member>
        <member name="M:Franson.Geo.Position.m_NormalizeLongitude(System.Double)">
            <summary>
            Take a longitude value in degrees, and returns a value between 180 and -180.
            E.g. -270 returns 90, which is the same longitude on Earth.
            todo: expose in public API (static)
            </summary>
            <param name="dblLongitude">None normalized longitude</param>
            <returns>Normalized longitude</returns>
        </member>
        <member name="M:Franson.Geo.Position.GetAltitudeWithUnit(System.Double)">
            <summary>
            Return altitude in selected unit.
            </summary>
            <param name="dblUnit"><see cref="T:Franson.Geo.DistanceUnits"/></param>
            <returns>Altitude in selected unit</returns>
        </member>
        <member name="M:Franson.Geo.Position.ToString">
            <summary>
            Returns a string in the format longitude, latitude
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Position.Equals(System.Object)">
            <summary>
            Returns true if Position objects are has same values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Position.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Position.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Called when the object is serialized. 
            NOTE: Lon/Lat and Alt will be empty on CF 1. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Franson.Geo.Position.ReadXml(System.Xml.XmlReader)">
            <summary>
            Called when the object is deserialized. 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Franson.Geo.Position.GetSchema">
            <summary>
            Returns null
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.Position.Is3D">
            <summary>
            Returns true if Position object was created with altitude information.
            </summary>
        </member>
        <member name="P:Franson.Geo.Position.Longitude">
            <summary>
            Longitude in decimal degrees
            </summary>
        </member>
        <member name="P:Franson.Geo.Position.Latitude">
            <summary>
            Latitude in decimal degrees
            </summary>
        </member>
        <member name="P:Franson.Geo.Position.Altitude">
            <summary>
            Altitude in meters
            </summary>
        </member>
        <member name="T:Franson.Geo.TrackPoint">
            <summary>
            A TrackPoint contains a position, speed, heading in at a given time.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Geo.TrackPoint.m_bValid">
            <summary>
            Valid by default.
            </summary>
        </member>
        <member name="F:Franson.Geo.TrackPoint.m_longID">
            <summary>
            Database ID. 0 if not used.
            </summary>
        </member>
        <member name="M:Franson.Geo.TrackPoint.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean,System.Int64)">
            <summary>
            Create a TrackPoint object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
            <param name="bValid">True if information is reliable.</param>
            <param name="longID">Database ID for this TrackPoint</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean)">
            <summary>
            Create a TrackPoint object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
            <param name="bValid">True if information is reliable.</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime)">
            <summary>
            Create a TrackPoint object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.#ctor">
            <summary>
            For classes deriving from TrackPoint that want to do some calculation before setting 
            its parameters.
            </summary>
        </member>
        <member name="M:Franson.Geo.TrackPoint.SetTrackPoint(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean)">
            <summary>
            Can be used to populate TrackPoint. Must be called in constructor of deriving class.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
            <param name="bValid">True if the information should be considered to be up to date and reliable</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.SetTrackPoint(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime)">
            <summary>
            Can be used to populate TrackPoint. Must be called in constructor of deriving class.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.IsNullOrEmpty(Franson.Geo.TrackPoint)">
            <summary>
            Returns true if track point is null or has a 0,0 position
            </summary>
        </member>
        <member name="M:Franson.Geo.TrackPoint.ToString">
            <summary>
            String representation of content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.TrackPoint.Equals(System.Object)">
            <summary>
            Returns true if equal.
            </summary>
            <param name="obj">TrackPoint object</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Franson.Geo.TrackPoint.GetHashCode">
            <summary>
            Hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.TrackPoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Called when the object is serialized. 
            NOTE: UTC will be empty on CF 1. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.ReadXml(System.Xml.XmlReader)">
            <summary>
            Called when the object is deserialized. 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.GetSchema">
            <summary>
            Returns null
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.TrackPoint.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:Franson.Geo.TrackPoint.Velocity">
            <summary>
            Speed and heading
            </summary>
        </member>
        <member name="P:Franson.Geo.TrackPoint.UTC">
            <summary>
            Time stamp in UTC
            </summary>
        </member>
        <member name="P:Franson.Geo.TrackPoint.Valid">
            <summary>
            True if track point is valid.
            </summary>
        </member>
        <member name="P:Franson.Geo.TrackPoint.ID">
            <summary>
            Database ID for this TrackPoint. 0 if not relevant or not set.
            </summary>
        </member>
        <member name="T:Franson.Geo.SpeedUnits">
            <summary>
            Use in when converting between different speed units.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Geo.SpeedUnits.Knots">
            <summary>
            Factor between meters per second and knots
            </summary>
        </member>
        <member name="F:Franson.Geo.SpeedUnits.Kph">
            <summary>
            Factor between meters per second and kilometers per hour
            </summary>
        </member>
        <member name="F:Franson.Geo.SpeedUnits.Mph">
            <summary>
            Factor between meters per second and miles per hour
            </summary>
        </member>
        <member name="F:Franson.Geo.SpeedUnits.MetersPerSecond">
            <summary>
            Factor between meters per second and meters per second. That is 1.0
            </summary>
        </member>
        <member name="T:Franson.Geo.Velocity">
            <summary>
            Represents a velocity. This is the same as speed + a three or two dimensional direction. Read only and thread safe.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Geo.Velocity.HeadingDiff(System.Double,System.Double)">
            <summary>
            Takes differece between two Headings and normlizes the result to 0 to 180.
            </summary>
            <param name="dblHeadingOne">Heading one.</param>
            <param name="dblHeadingTwo">Heading two.</param>
            <returns>A value between 0 and 180 which is the shortest angel in degrees beween two headings.</returns>
        </member>
        <member name="M:Franson.Geo.Velocity.#ctor(System.Double,System.Double)">
            <summary>
            Create velocity from ground speed and heading over ground. Speed in meters per seconds.
            </summary>
            <param name="dblGroundSpeed">Speed over ground in meters per second</param>
            <param name="dblHeading">Heading in degrees. Zero is north.</param>
        </member>
        <member name="M:Franson.Geo.Velocity.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a Velocity object.
            </summary>
            <param name="dblGroundSpeed">Ground speed.</param>
            <param name="dblHeading">Heading in degrees. Zero is north.</param>
            <param name="dblUnit">Value from <see cref="T:Franson.Geo.SpeedUnits"/>. 1 m/s equals dblUnit. E.g. 1 m/s equals 3.6 kilometers per hour</param>
        </member>
        <member name="M:Franson.Geo.Velocity.GroundSpeedWithUnit(System.Double)">
            <summary>
            Get ground speed converted to a specific unit.
            </summary>
            <param name="dblUnit">Value from <see cref="T:Franson.Geo.SpeedUnits"/> or a custom value.</param>
            <returns>Speed</returns>
        </member>
        <member name="M:Franson.Geo.Velocity.Equals(System.Object)">
            <summary>
            Returns true if ground speed and heading are the same in both objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Velocity.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Velocity.ToString">
            <summary>
            String representation of velocity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Velocity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Called when the object is serialized. 
            NOTE: Heading and GroundSpeed will be empty on CF 1. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Franson.Geo.Velocity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Called when the object is deserialized. 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Franson.Geo.Velocity.GetSchema">
            <summary>
            Returns null
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.Velocity.GroundSpeed">
            <summary>
            Speed over ground. 3D velocity projected to ground speed. Speed in meter per seconds
            </summary>
        </member>
        <member name="P:Franson.Geo.Velocity.Heading">
            <summary>
            Heading over ground. 3D velocity projected to heading over ground.
            </summary>
        </member>
        <member name="T:Franson.Nmea.ParameterType">
            <summary>
            This enum sets the type of parameters a FRCMD or FRRET sentence have.
            </summary>
        </member>
        <member name="F:Franson.Nmea.ParameterType.Inline">
            <summary>
            Normal comma separated parameters that follow this field as part of the rest of
            the NMEA sentence.
            </summary>
        </member>
        <member name="F:Franson.Nmea.ParameterType.Nmea">
            <summary>
            Nmea sentences which follows this sentence. Next field indicates how many NMEA sentences
            will follow.
            </summary>
        </member>
        <member name="T:Franson.Nmea.CmdBase">
            <summary>
            Represents a $FRCMD or $FRRET sentence. Framework sentence to execute commands remotely.
            Class is thread safe for public access, not protected access.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Franson.Nmea.NmeaBase">
            <summary>
            Base class for all NMEA classes
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.#ctor">
            <summary>
            Should be overridden by the constructor that creates an object from paramters.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Should be overridden by the constructor that creates an object from a Sentence object.
            </summary>
            <param name="sentence">NMEA sentence</param>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.ToSentence">
            <summary>
            Convert to a generic Sentence object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.ToString">
            <summary>
            Convert to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.ToByteArray">
            <summary>
            Convert to a byte array. Useful if you want to send an NMEA object over a stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.Equals(System.Object)">
            <summary>
            Compares to NMEA objects. Returns true if they contains the identical information.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.BuildSentence">
            <summary>
            Called if object was created from parameters. Should be overridden and create a 
            Sentence object from the parameters.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called if object was created from a Sentence object. 
            Should be overridden and extract parameters from the Sentence object
            </summary>
        </member>
        <member name="M:Franson.Nmea.CmdBase.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create from <see cref="T:Franson.Nmea.Sentence"/>.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Create an "Inline" FRCMD or FRRET sentence with comma separated parameters.
            </summary>
            <param name="strNmeaCmd">$FRCMD or $FRRET</param>
            <param name="strUsername">Username which commands orginates from</param>
            <param name="strCommand">Command</param>
            <param name="arrParams">Inline parameters</param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.#ctor(System.String,System.String,System.String,Franson.Nmea.ParameterType,System.Int32,System.String[])">
            <summary>
            Creates combined inline and sentence argument command.
            </summary>
            <param name="strNmeaCmd">$FRCMD or $FRRET</param>
            <param name="strUsername">Username which commands orginates from. Can be null</param>
            <param name="strCommand">Command</param>
            <param name="paramType">Nmea or Inline. For combined use Nmea</param>
            <param name="iSentenceCount">Number of sentence arguments</param>
            <param name="arrParams">Array of inline arguments.</param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Create FRCMD or FRRET sentence with NMEA sentences as extra data following this sentence.
            </summary>
            <param name="strNmeaCmd">$FRCMD or $FRRET</param>
            <param name="strUsername">Username for which this command is executed. Can be null.</param>
            <param name="strCommand">Command</param>
            <param name="iSentenceCount">NUmber of argument sentences.</param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.GetParameter(System.Int32)">
            <summary>
            Get FRCMD/FRRET parameter. <see cref="P:Franson.Nmea.CmdBase.ParameterType"/> must be "Inline". If paramater not exists null is returned.
            </summary>
            <param name="iIndex">Parameter value, or null if out of bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.CmdBase.GetSentenceArgument(System.Int32)">
            <summary>
            Returns sentence argument. Returns null if there is no sentence by specified index.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.CmdBase.ToSentence(System.Int32)">
            <summary>
            Returns all sentences commands is built up from. index 0 returns FRRET or FRCMD, a greater
            index returns any present sentence arguments. If index is out of bounds, null is returned.
            
            If routed command, iIndex = 0 returns ROUTE, iIndex = 1 returns FRRET or FRCMD, and a greater
            index returns any present sentence arguments.
            
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.CmdBase.ToXML(System.Xml.XmlWriter)">
            <summary>
            Writes command as an XML representation to xmlWriter
            </summary>
            <param name="xmlWriter"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.BuildSentence">
            <summary>
            Builds a <see cref="T:Franson.Nmea.Sentence"/> object from the parameters specified in the constructor.
            Can be overridden to change the way the sentence is built.
            </summary>
            <returns>Sentence object</returns>
        </member>
        <member name="M:Franson.Nmea.CmdBase.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses sentence, and sets paramaters.
            Can be overridden to change the way a sentence is parsed.
            </summary>
            <param name="sentence"><see cref="T:Franson.Nmea.Sentence"/> to be parsed.</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Error parsing sentence</exception>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddParameter(System.String)">
            <summary>
            Add paramater.
            </summary>
            <param name="strParam"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddParameter(System.Int32)">
            <summary>
            Calls <see cref="M:Franson.Nmea.CmdBase.AddParameter(System.String)"/>
            </summary>
            <param name="iParam"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddParameter(System.Boolean)">
            <summary>
            Adds "1" for true, and "0" for false as inline paramater.
            </summary>
            <param name="bParam"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddSentence(Franson.Nmea.NmeaBase)">
            <summary>
            Calls <see cref="M:Franson.Nmea.CmdBase.AddSentence(Franson.Nmea.Sentence)"/>
            </summary>
            <param name="typedSentence"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddSentence(Franson.Nmea.Sentence)">
            <summary>
            Call this for each sentence argument.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.SetRoute(Franson.Nmea.ROUTE)">
            <summary>
            Set routing.
            </summary>
            <param name="route"></param>
        </member>
        <member name="P:Franson.Nmea.CmdBase.NmeaCmd">
            <summary>
            $FRCMD or $FRRET
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.Command">
            <summary>
            Command
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.ParameterType">
            <summary>
            ParameterType
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.ParameterCount">
            <summary>
            Number of parameters.
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.SentenceCount">
            <summary>
            Number of NMEA sentences used as arguments that follows this sentence.
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.AddedSentenceCount">
            <summary>
            Number of sentence that has been added using <see cref="M:Franson.Nmea.CmdBase.AddSentence(Franson.Nmea.Sentence)"/>
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.ParamTypeField">
            <summary>
            Override if you don't want "Nmea" or "Inline" to be written as paramater type.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRCMD">
            <summary>
            FRCMD sentence.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRCMD.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRCMD object from <see cref="T:Franson.Nmea.Sentence"/>
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If it isn't a FRCMD sentence.</exception>
        </member>
        <member name="M:Franson.Nmea.FRCMD.#ctor(System.String,System.String,System.String[])">
            <summary>
            Create a FRCMD sentence with comma separated parameters.
            </summary>
            <param name="strUsername">Username which commands orginates from</param>
            <param name="strCommand">Command</param>
            <param name="arrParams">Parameters</param>
        </member>
        <member name="M:Franson.Nmea.FRCMD.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create FRCMD sentence with NMEA sentences as parameters.
            </summary>
            <param name="strUsername">Username for which this command is executed.</param>
            <param name="strCommand">Command name.</param>
            <param name="iSentenceCount">Number of sentence paramaters.</param>
        </member>
        <member name="M:Franson.Nmea.FRCMD.#ctor(System.String,System.String,Franson.Nmea.ParameterType,System.Int32,System.String[])">
            <summary>
            Create FRCMD with both inline paramaters and sentence paramters.
            </summary>
            <param name="strUsername">Username for which this command is executed.</param>
            <param name="strCommand">Command</param>
            <param name="paramType">Paramater type.</param>
            <param name="iSentenceCount">Number of sentence parameters.</param>
            <param name="arrParams">Array of inline paramters.</param>
        </member>
        <member name="M:Franson.Nmea.FRCMD.IsFRCMD(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRCMD sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Nmea.FRERR">
            <summary>
            Represents a $FRERR sentence.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Nmea.FRERR.NoRights">
            <summary>
            User has no right to execute this command. Authorixation error.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRERR.LoginError">
            <summary>
            Error logging in. Authentication error.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRERR.CannotExecute">
            <summary>
            Error code when a command cannot be executed.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRERR.NotSupported">
            <summary>
            Error code when a command isn't supported.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRERR.Pending">
            <summary>
            Error code when a command was queued for execution rather then executed.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRERR.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates an FRERR object from a Sentence object
            </summary>
            <param name="sentence">A $FRERR sentence</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRERR sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRERR.#ctor(System.String,System.String)">
            <summary>
            Creates an FRERR object from its paramaters.
            </summary>
            <param name="strCode">Error code.</param>
            <param name="strMessage">Human readable error message.</param>
        </member>
        <member name="M:Franson.Nmea.FRERR.IsFRERR(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRERR sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns>True if sentence is a FRERR</returns>
        </member>
        <member name="M:Franson.Nmea.FRERR.BuildSentence">
            <summary>
            Override this method if you want to build the Sentence object returned by 
            <see cref="M:Franson.Nmea.NmeaBase.ToSentence"/> in some other way.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRERR.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Override this method if you want to parse the Sentence object passed in the constructor
            in some other way.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRERR.Code">
            <summary>
            Returns the first field in the $FRERR sentence.
            "AuthErr" means authentication error.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRERR.Message">
            <summary>
            Returns the second field in the $FRERR sentence.
            A human readable message that describes the error.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRLIN">
            <summary>
            Represents a $FRLIN sentence. Used to login.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRLIN.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a FRLIN object from a Sentence object.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRLIN sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRLIN.#ctor(System.String,System.String)">
            <summary>
            Creates a FRLIN object from username + password
            </summary>
            <param name="strUsername">Username</param>
            <param name="strPassword">Password</param>
        </member>
        <member name="M:Franson.Nmea.FRLIN.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a FRLIN object from domain + username + password.
            </summary>
            <param name="strDomain">Not used. Set to null.</param>
            <param name="strUsername">Username</param>
            <param name="strPassword">Password</param>
        </member>
        <member name="M:Franson.Nmea.FRLIN.IsFRLIN(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRLIN sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRLIN.BuildSentence">
            <summary>
            Builds a <see cref="T:Franson.Nmea.Sentence"/> object from the parameters specified in the constructor.
            Can be overridden to change the way the sentence is built.
            </summary>
            <returns>Sentence object</returns>
        </member>
        <member name="M:Franson.Nmea.FRLIN.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses sentence, and sets paramaters.
            Can be overridden to change the way a sentence is parsed.
            </summary>
            <param name="sentence"><see cref="T:Franson.Nmea.Sentence"/> to be parsed.</param>
        </member>
        <member name="M:Franson.Nmea.FRLIN.InvertString(System.String)">
            <summary>
            Inverts a string. Used as very simple password scrambler. Not intended for encryption. Only to avoid clear text
            passwords in logs.
            </summary>
            <param name="strToInvert"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.FRLIN.Domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRLIN.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRLIN.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRPOS">
            <summary>
            Represents a NMEA FRPOS sentence. Contains information about position, velocity, time and which username
            it belongs to.
            Used to represent the position, speed and heading at a given moment in time.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRPOS.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a FRPOS object from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRPOS sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRPOS.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.String)">
            <summary>
            Creates a FRPOS object from its parameters
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="dtUTC">Time stamp</param>
            <param name="strUsername">Username</param>
        </member>
        <member name="M:Franson.Nmea.FRPOS.#ctor(Franson.Geo.TrackPoint,System.String)">
            <summary>
            Build FRPOS from TrackPoint.
            </summary>
            <param name="tp"></param>
            <param name="strUsername"></param>
        </member>
        <member name="M:Franson.Nmea.FRPOS.#ctor(Franson.Nmea.RMC,System.String)">
            <summary>
            Create an FRRMC object from RMC + username.
            </summary>
            <param name="rmc">A RMC object</param>
            <param name="strUsername">Username this information belongs to</param>
        </member>
        <member name="M:Franson.Nmea.FRPOS.IsFRPOS(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRPOS sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRPOS.BuildSentence">
            <summary>
            Builds a <see cref="T:Franson.Nmea.Sentence"/> object from the parameters specified in the constructor.
            Can be overridden to change the way the sentence is built.
            </summary>
            <returns>Sentence object</returns>
        </member>
        <member name="M:Franson.Nmea.FRPOS.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses sentence, and sets paramaters.
            Can be overridden to change the way a sentence is parsed.
            </summary>
            <param name="sentence"><see cref="T:Franson.Nmea.Sentence"/> to be parsed.</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence as an invalid format</exception>
        </member>
        <member name="P:Franson.Nmea.FRPOS.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRPOS.Velocity">
            <summary>
            Speed and heading.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRPOS.UTC">
            <summary>
            Time stamp.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRPOS.TrackPoint">
            <summary>
            TrackPoint
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRPOS.Username">
            <summary>
            Username this the information in this object belongs to.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRRDT">
            <summary>
            Represents a $FRRDT sentence. Used to request server to send position data for a specific user.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRRDT.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRRDT object from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRRDT sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRRDT.#ctor(System.String,System.Double)">
            <summary>
            Create a FRRDT object from its paramaters
            </summary>
            <param name="strUsername">Username to request position data from</param>
            <param name="dblInterval">The fastest interval in seconds data should be sent.</param>
            <exception cref="T:System.ArgumentException">If dblInterval is less than zero</exception>
        </member>
        <member name="M:Franson.Nmea.FRRDT.IsFRRDT(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRRDT sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRRDT.BuildSentence">
            <summary>
            Builds a <see cref="T:Franson.Nmea.Sentence"/> object from the parameters specified in the constructor.
            Can be overridden to change the way the sentence is built.
            </summary>
            <returns>Sentence object</returns>
        </member>
        <member name="M:Franson.Nmea.FRRDT.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses sentence, and sets paramaters.
            Can be overridden to change the way a sentence is parsed.
            </summary>
            <param name="sentence"><see cref="T:Franson.Nmea.Sentence"/> to be parsed.</param>
        </member>
        <member name="P:Franson.Nmea.FRRDT.Username">
            <summary>
            Username to stream position information from.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRRDT.Interval">
            <summary>
            Fastest interval in seconds data should be sent from server to client.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRRED">
            <summary>
            Represents a $FRRED sentence. Used to redirect a client to another server.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Nmea.FRRED.m_strServer">
            <summary>
            Server to redirect to
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRRED.m_iPort">
            <summary>
            Port to redirect to.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRRED.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRRED object from <see cref="T:Franson.Nmea.Sentence"/>
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.FRRED.#ctor(System.String,System.Int32)">
            <summary>
            Create from paramaters. Use <see cref="M:Franson.Nmea.NmeaBase.ToSentence"/> to convert to a <see cref="T:Franson.Nmea.Sentence"/> object.
            </summary>
            <param name="strServer">Server address.</param>
            <param name="iPort">Port address</param>
        </member>
        <member name="M:Franson.Nmea.FRRED.IsFRRED(Franson.Nmea.Sentence)">
            <summary>
            Returns true if Sentence is a FRRED sentence.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRRED.BuildSentence">
            <summary>
            Called by NmeaBase to build sentence from paramters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRRED.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase to parse <see cref="T:Franson.Nmea.Sentence"/> spcedified in constructor.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRRED.Server">
            <summary>
            Server address
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRRED.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRRET">
            <summary>
            FRRET sentence.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRRET object from <see cref="T:Franson.Nmea.Sentence"/>
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If it isn't a FRRET sentence</exception>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,System.String,System.String[])">
            <summary>
            Create a FRRET sentence with comma separated parameters.
            </summary>
            <param name="strUsername">Username which commands orginates from</param>
            <param name="strCommand">Command</param>
            <param name="arrParams">Parameters</param>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create FRRET sentence NMEA sentences as parameters.
            </summary>
            <param name="strUsername">Username for which this command was executed.</param>
            <param name="strCommand">Command that was executed.</param>
            <param name="iSentenceCount">Number of sentence paramaters.</param>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,System.String,Franson.Nmea.ParameterType,System.Int32,System.String[])">
            <summary>
            Create FRRET with both inline paramaters and sentence paramaters.
            </summary>
            <param name="strUsername">Username for which this command was executed.</param>
            <param name="strCommand">Command that was executed.</param>
            <param name="paramType">Paramater type. Inline or Nmea.</param>
            <param name="iSize">Number of sentence paramaters.</param>
            <param name="arrParams">Array of inline paramaters.</param>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,System.Exception)">
            <summary>
            Creates error return.
            </summary>
            <param name="strCommand"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,Franson.Nmea.FRERR)">
            <summary>
            Creates error return.
            </summary>
            <param name="strCommand"></param>
            <param name="err"></param>
        </member>
        <member name="M:Franson.Nmea.FRRET.IsFRRET(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRRET sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Nmea.FRROW">
            <summary>
            A row of values.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Nmea.FRROW.m_arrValues">
            <summary>
             Keeps value temporary.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRROW.#ctor(System.Object[])">
            <summary>
            Create from string array. Will make a copy of contant of string array.
            </summary>
            <param name="arrValues"></param>
        </member>
        <member name="M:Franson.Nmea.FRROW.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create typed sentence from genertic sentence.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not an FRROW sentence</exception>
        </member>
        <member name="M:Franson.Nmea.FRROW.#ctor(Franson.Nmea.Sentence,Franson.Nmea.FRSCH,Franson.Nmea.FRSCH)">
            <summary>
            Create a row sentence with schema and column names.
            </summary>
            <param name="sentence">Data</param>
            <param name="schColumnsNames">Names</param>
            <param name="schColumnTypes">Schema</param>
        </member>
        <member name="M:Franson.Nmea.FRROW.IsFRROW(Franson.Nmea.Sentence)">
            <summary>
            Returns true if generic sentence is of type FRROW
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRROW.GetField(System.String)">
            <summary>
            Returns value for a named column. Returns null if column name doesn't exist.
            </summary>
            <param name="strColumnName"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">No FRSCH assigned to this row in constructor.</exception>
        </member>
        <member name="M:Franson.Nmea.FRROW.GetField(System.Int32)">
            <summary>
            Returns value of field. Index 0 is the first value.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRROW.BuildSentence">
            <summary>
            Builds generic sentence
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRROW.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses generic sentence
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not an FRROW sentence</exception>
        </member>
        <member name="P:Franson.Nmea.FRROW.ColumnCount">
            <summary>
            Number of columns with values in row.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRSCHType">
            <summary>
            Defines which type of data a FRSCH sentence contains.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRSCHType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRSCHType.ColumnNames">
            <summary>
            This FRSCH sentence contains column names.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRSCHType.ColumnTypes">
            <summary>
            This FRSCH sentence contains data types.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRSCH">
            <summary>
            Schema information when returning a "record set" over GpsGate Protocol.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Nmea.FRSCH.m_arrNames">
            <summary>
            Holds column names temporary in constructor.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRSCH.m_arrType">
            <summary>
            Holds column types temporary in constructor.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRSCH.#ctor(System.String[])">
            <summary>
            Create FRSCHema sentence from an array of column name
            </summary>
            <param name="arrNames">Columns names</param>
        </member>
        <member name="M:Franson.Nmea.FRSCH.#ctor(System.Type[])">
            <summary>
            Create a data type row.
            </summary>
            <param name="arrTypes"></param>
        </member>
        <member name="M:Franson.Nmea.FRSCH.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create from generic sentence
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException"></exception>
        </member>
        <member name="M:Franson.Nmea.FRSCH.IsFRSCH(Franson.Nmea.Sentence)">
            <summary>
            Returns true if generic sentence is of type FRSCH
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSCH.GetColumnIndex(System.String)">
            <summary>
            Returns column for named column. Returns -1 if not found.
            </summary>
            <param name="strColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSCH.BuildSentence">
            <summary>
            Build generic sentence from paramaters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSCH.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parse generic sentence to typed FRSCH sentence.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not a FRSCH sentence</exception>
        </member>
        <member name="P:Franson.Nmea.FRSCH.FRSCHType">
            <summary>
            Type of FRSCH sentence. Does it contain column names, or column types?
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRSCH.ColumnCount">
            <summary>
            Number of 
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRSES">
            <summary>
            Represents a $FRSES sentence, which holds a session key. Will be returned from server after login.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRSES.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a FRSES object from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRERR sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRSES.#ctor(System.String)">
            <summary>
            Creates a FRSES object from a session key.
            </summary>
            <param name="strSessionKey"></param>
        </member>
        <member name="M:Franson.Nmea.FRSES.IsFRSES(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRSES sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSES.BuildSentence">
            <summary>
            Called by NmeaBase if this object was created from paramters (a session key) and.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSES.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase if this object was created from a Sentence object.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRSES.SessionKey">
            <summary>
            Typically a GUID string that uniquely identifies a session.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRVAL">
            <summary>
            FRVAL sentence. Represents a variable. "name = value"
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToField(System.Boolean)">
            <summary>
            Convert from bool to FRVAL value field.
            </summary>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToField(System.Int32)">
            <summary>
            Convert from int to FRVAL value field.
            </summary>
            <param name="iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToField(System.Double,System.Int32)">
            <summary>
            Convert from double to FRVAL value field.
            </summary>
            <param name="dblValue"></param>
            <param name="iDecimals"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToField(System.DateTime)">
            <summary>
            Converts to GpsGate formated data string "YYYY-MM-DD HH:MM:SS.sss"
            </summary>
            <param name="dtValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToValue(System.String,System.Type)">
            <summary>
            Convert from field (string) to typed object
            </summary>
            <param name="strValue"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.Boolean)">
            <summary>
            Create FRVAL from bool.
            </summary>
            <param name="strName">Key name.</param>
            <param name="bValue"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.Int32)">
            <summary>
            Create FRVAL from integer.
            </summary>
            <param name="strName"></param>
            <param name="iValue"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.Double,System.Int32)">
            <summary>
            Build FRVAL from double,
            </summary>
            <param name="strName">Name of key</param>
            <param name="dblValue">Value</param>
            <param name="iDecimals">NUmber of decimals.</param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.DateTime)">
            <summary>
            Build FRVAL from DateTime
            </summary>
            <param name="strName"></param>
            <param name="dtValue"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.String)">
            <summary>
            Create FRVAL sentence from string value.
            </summary>
            <param name="strName">Name of variable</param>
            <param name="strValue">Value of variable</param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create FRVAL from parameters
            </summary>
            <param name="strName">Name of variable</param>
            <param name="strValue">Value of variable</param>
            <param name="strType"></param>
            <param name="strNamespace"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRVAL from <see cref="T:Franson.Nmea.Sentence"/>
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.IsFRVAL(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRVAL sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.IsName(System.String)">
            <summary>
            Makes a case insensitive compare between <see cref="P:Franson.Nmea.FRVAL.Name"/> and specified name.
            If they are equal, true is returned.
            </summary>
            <param name="strName">string to compare Name to.</param>
            <returns>True if case insensitive compare is equal.</returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.IsValue(System.String)">
            <summary>
            Makes a case insensitive compare between <see cref="P:Franson.Nmea.FRVAL.Value"/> and specified value.
            If equal true is returned.
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ValueAsObject(System.Type)">
            <summary>
            Returns a named value. The value is typed as int, double, string, bool or DateTime.
            To support more types override this method. 
            </summary>
            <param name="oType">Type to convert stringg value to.</param>
            <returns>Object to be cast.</returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.BuildSentence">
            <summary>
            Build sentence from paramters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parse sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRVAL.Name">
            <summary>
            Name of variable
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRVAL.Value">
            <summary>
            Value of variable.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRVAL.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRVAL.Namespace">
            <summary>
            Namespace.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRVER">
            <summary>
            Represents a $FRVER sentence. Used to tell which version of the protocol is supported.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRVER.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create a FRVER object from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
        </member>
        <member name="M:Franson.Nmea.FRVER.#ctor(System.Version,System.String)">
            <summary>
            Create FRVER object from its paramaters.
            </summary>
            <param name="version">Version</param>
            <param name="strAppName">Name of application sending sentence</param>
        </member>
        <member name="M:Franson.Nmea.FRVER.#ctor(System.Int32,System.Int32)">
            <summary>
            Create FRVER object from its paramaters
            </summary>
            <param name="iMajor">Major version (field 1)</param>
            <param name="iMinor">Minor version (field 2)</param>
        </member>
        <member name="M:Franson.Nmea.FRVER.IsFRVER(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRVER sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVER.BuildSentence">
            <summary>
            Called by NmeaBase
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVER.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRVER.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRVER.ApplicationName">
            <summary>
            Name of application sending this FRVER sentence. Here you place the name of the application
            that implements the GpsGate NMEA protocol.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRWDT">
            <summary>
            Represents a $FRWDT sentence. Used to inform server that client wants to write position data.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRWDT.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a FRWDT from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
        </member>
        <member name="M:Franson.Nmea.FRWDT.#ctor(System.String)">
            <summary>
            Creates FRWDT object from its paramaters.
            </summary>
            <param name="strFilter">"ALL" for unfiltered data. "NMEA" for NMEA data.</param>
        </member>
        <member name="M:Franson.Nmea.FRWDT.IsFRWDT(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRWDT sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRWDT.BuildSentence">
            <summary>
            Called by NmeaBase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRWDT.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRWDT.Filter">
            <summary>
            Filter. "ALL" or "NMEA".
            </summary>
        </member>
        <member name="T:Franson.Nmea.GGA">
            <summary>
            Representing an NMEA GGA sentence. Will accept any prefix including "$GP"
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.GGA.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates GGA object from Sentence. Will use the system UTC year/month/day to complement the UTC time in the sentence.
            Date information is missing in GGA.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.GGA.#ctor(Franson.Nmea.Sentence,System.DateTime)">
            <summary>
            Create GGA object from Sentence. Will use year/month/day in dtYearMonthDay to complement the missing date information
            in the GGA sentence.
            </summary>
            <param name="sentence">Sentence to parse.</param>
            <param name="dtYearMonthDay">Yesr/Month/Day to use</param>
        </member>
        <member name="M:Franson.Nmea.GGA.#ctor(Franson.Geo.Position,System.DateTime,System.Boolean,System.Int32,System.Double)">
            <summary>
            Create GGA object from paramaters. Use <see cref="M:Franson.Nmea.NmeaBase.ToSentence"/> to convert to <see cref="T:Franson.Nmea.Sentence"/> object.
            </summary>
            <param name="position">Position</param>
            <param name="dtUTC">UTC time</param>
            <param name="bValid">Valid</param>
            <param name="iSatsInView">Satellites in view</param>
            <param name="dblHDOP">HDOP</param>
        </member>
        <member name="M:Franson.Nmea.GGA.IsGGA(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a GGA sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.GGA.BuildSentence">
            <summary>
            Called by NmeaBase to build sentence from paramters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.GGA.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase to parse <see cref="T:Franson.Nmea.Sentence"/> spcedified in constructor.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.GGA.Position">
            <summary>
            Position. Longitude, latitude and altitude. GGA does currently not support diff between WGS84 and sea level.
            </summary>
        </member>
        <member name="P:Franson.Nmea.GGA.UTC">
            <summary>
            UTC time stamp.
            </summary>
        </member>
        <member name="P:Franson.Nmea.GGA.Valid">
            <summary>
            If position is valid.
            </summary>
        </member>
        <member name="P:Franson.Nmea.GGA.SatellitesInView">
            <summary>
            Satellites in view.
            </summary>
        </member>
        <member name="P:Franson.Nmea.GGA.HDOP">
            <summary>
            HDOP.
            </summary>
        </member>
        <member name="T:Franson.Nmea.MessageBuilder">
            <summary>
            Puts smaller messages into larger messages without breaking up smaller messages.
            The typical usage is device commands sent over SMS split into one or more SMS messages for transport to the device.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.MessageBuilder.#ctor(System.Int32)">
            <summary>
            Create message builder. Set message length to 160 for a SMS builder.
            </summary>
            <param name="iMessageLength"></param>
        </member>
        <member name="M:Franson.Nmea.MessageBuilder.AddSmallMessage(System.String)">
            <summary>
            Add smaller message.
            </summary>
            <param name="strShortMessage"></param>
            <exception cref="T:System.InvalidOperationException">If small message is longer than maximum large message.</exception>
        </member>
        <member name="M:Franson.Nmea.MessageBuilder.NextLargeMessage">
            <summary>
            Parses small messages and returns chucks of upp to larger message length without breaking up smaller messages.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.MessageBuilder.Count">
            <summary>
            Returns number of large messages.
            </summary>
        </member>
        <member name="T:Franson.Nmea.NmeaFormatException">
            <summary>
            The Sentence or string used to create an NmeaBase based object was not of the right format.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaFormatException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage">Description.</param>
        </member>
        <member name="M:Franson.Nmea.NmeaFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="T:Franson.Nmea.NmeaBuildException">
            <summary>
            Could not build Sentence object from the objects paramaters.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaBuildException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage">Description.</param>
        </member>
        <member name="T:Franson.Nmea.NmeaParserException">
            <summary>
            Could not parse NMEA data.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaParserException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:Franson.Nmea.NmeaParserException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="T:Franson.Nmea.Parser">
            <summary>Parses NMEA data. Parser creates <see cref="T:Franson.Nmea.Sentence"/> objects (or objects which derives thereof)
            Then depending on sentence type, more specialized object can be created which derives from <see cref="T:Franson.Nmea.NmeaBase"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Parser.CheckMidnightError(System.DateTime)">
            <summary>
            Should be called for time stamps that does not include date. This will fix any midnight error.
            </summary>
            <param name="dtGPS"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaCoordinate(System.String,System.String)">
            <summary>
            Parse NMEA style DDMM.mmmm format string.
            </summary>
            <param name="strField">A string in the format "DDMM.mmmm"</param>
            <param name="strHemi">Hemisphere. Can be "W" (West), "E" (East), "N" (North) or "S" (South).</param>
            <returns>The value in decimal degrees.</returns>
            <exception cref="T:Franson.Nmea.NmeaFormatException">The input was not in valid DDMM.mmmm format, or the hemisphere 
            value was not valid.</exception>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaDateTime(System.String,System.String)">
            <summary>
            Convert NMEA date and time strings to a UTC DateTime structure
            </summary>
            <param name="strFieldDate">A string with the format "DDMMYY"</param>
            <param name="strFieldTime">A string with the format "HHMMSS.ss"</param>
            <returns>A DateTime variable</returns>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not a valid date or time format</exception>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaDouble(System.String)">
            <summary>
            Parse a string with an NMEA number, and return it as a double. Retruns 0 if field is null or empty.
            </summary>
            <param name="strField">Format "D.ddd"</param>
            <returns>Value as a double</returns>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not a valid number format</exception>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaInt(System.String)">
            <summary>
            Parse a string with a NMEA integer.
            </summary>
            <param name="strField">A string with the format "DD"</param>
            <returns>An integer.</returns>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not a valid integer format</exception>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaHex(System.String)">
            <summary>
            Parse string in hex format
            </summary>
            <param name="strField"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaBool(System.String)">
            <summary>
            Returns true if field equals "1", returns false in all other cases.
            </summary>
            <param name="strField"></param>
            <returns></returns>
        </member>
        <member name="F:Franson.Nmea.Parser.m_cirbuf">
            <summary>
            Raw data to be parsed
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_bPrefixFound">
            <summary>
            Set to true when start of a sentence is found.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_arrEndPattern">
            <summary>
            End pattern of a sentence. Can be customized in constructor
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_iUsedEndPatternIndex">
            <summary>
            Which end pattern was used to match sentence
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_bCustomEndPattern">
            <summary>
            Set to true if custom end pattern is used.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_arrStartPrefix">
            <summary>
            Start prefix of a sentence. Can be customized in constructor
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_bCheckMandatory">
            <summary>
            If there must be a checksum or not.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_bUseUtf8Escape">
            <summary>
            Set to true if a field can be escaped using {len}utf8 text
            </summary>
        </member>
        <member name="M:Franson.Nmea.Parser.#ctor">
            <summary>
            Create new NMEA parser, or NMEA derived parser. UTF8 escaped fields enabled.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Parser.#ctor(System.String)">
            <summary>
            Create Parser with a custom end pattern. Default is "\r\n"
            </summary>
            <param name="strEndPattern">Custom end pattern, that ends each sentence.</param>
        </member>
        <member name="M:Franson.Nmea.Parser.#ctor(System.String[],System.String)">
            <summary>
            Create Parser with custom start and custom end pattern.
            </summary>
            <param name="arrStartPattern">Custom start pattern. If null, default pattern is used.</param>
            <param name="strEndPattern">Custom end pattern. If null, default pattern is used.</param>
        </member>
        <member name="M:Franson.Nmea.Parser.#ctor(System.String[],System.String[])">
            <summary>
            Configures parser to use custom start and end patterns.
            </summary>
            <param name="arrStartPattern">Array of possible start patterns.</param>
            <param name="arrEndPattern">Array of possible end patterns.</param>
        </member>
        <member name="M:Franson.Nmea.Parser.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to parser. Use NextSentence() to retrieve parsed NMEA sentences.
            </summary>
            <param name="arrData">byte array</param>
            <param name="iStartIndex">From which index in array to start writing data.</param>
            <param name="iLength">Number of bytes to write from array</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.Write(System.Byte[])">
            <summary>
            Calls <see cref="M:Franson.Nmea.Parser.Write(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
            <param name="arrData"></param>
            <returns>Bytes written to parser. Will be less that in arrData if internal buffer is full.</returns>
        </member>
        <member name="M:Franson.Nmea.Parser.Write(System.String)">
            <summary>
            Converts string to byte array, interpreted as UTF8 and calls <see cref="M:Franson.Nmea.Parser.Write(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
            <param name="strData">string to write to parser</param>
        </member>
        <member name="M:Franson.Nmea.Parser.NextSentence">
            <summary>
            Returns next parsed NMEA sentence. Returns NULL if there are no more sentences.
            Will accept sentences that both ends with "*XX\r\n" and that ends with the checksum only "*XX"
            This is because many over the air protocols that uses NMEA removes "\r\n" even though it is part 
            of the NMEA standard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.m_IsEscaped(System.Int32)">
            <summary>
            Returns true if iIndex is inside an escaped region.
            </summary>
            <param name="iIndexEscaped"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.Reset">
            <summary>
            Resets parser
            </summary>
        </member>
        <member name="M:Franson.Nmea.Parser.ReadBuffer">
            <summary>
            Returns what is left in parser buffer. The buffer is reset. Returns null if no data in buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.ValidateSentence(System.Byte[])">
            <summary>
            Returns true if arrData is a valid NMEA sentence with a valid checksum.
            </summary>
            <param name="arrData">Array of data that should be validated as an NMEA sentence</param>
            <returns>True if valid NMEA</returns>
        </member>
        <member name="M:Franson.Nmea.Parser.CreateSentence(System.Byte[])">
            <summary>
            Create a Sentence object from parsed data.
            </summary>
            <param name="arrSentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.AsciiHexToByte(System.Byte,System.Byte)">
            <summary>
            Converts two bytes ascii hex value to one byte 8-bit value
            </summary>
            <param name="byteAsciiHi">Hi nibble</param>
            <param name="byteAsciiLo">Low nibble</param>
            <returns>Binary value</returns>
        </member>
        <member name="P:Franson.Nmea.Parser.EmptyLength">
            <summary>
            Returns number of bytes free in buffer
            </summary>
        </member>
        <member name="P:Franson.Nmea.Parser.ChecksumMandatory">
            <summary>
            Set to false if checksum shouldn't be used. Default true.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Parser.NoStartPrefix">
            <summary>
            Override and return true if sentences doesn't have a start prefix. Returns false by default.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Parser.IgnoreRepeatedStartPrefix">
            <summary>
            Set to true if repeated start prefis should be igonred. Typically the case if 
            start prefix is also used as field separator. Default value is false. Override to change.
            </summary>
        </member>
        <member name="T:Franson.Nmea.RMC">
            <summary>
            Represents a NMEA RMC sentence. Will accept any prefix including "$GP".
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a RMC object from a Sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Nmea.Sentence,System.Double)">
            <summary>
            Creates RMC object with extra altitude information which will be used by <see cref="P:Franson.Nmea.RMC.Position"/>
            </summary>
            <param name="sentence">NMEA sentence</param>
            <param name="dblAltitude">Extra altitude information</param>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Geo.TrackPoint)">
            <summary>
            Creates a RMC object from a TrackPoint object.
            </summary>
            <param name="trackPoint">TrackPoint. Contains position, velocity, and time stamp.</param>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean)">
            <summary>
            Creates a RMC object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading.</param>
            <param name="dtUTC">Time stamp in UTC</param>
            <param name="bValid">Valid information or not.</param>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean,System.Double)">
            <summary>
            Creates a RMC object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="dtUTC">Time stamp in UTC</param>
            <param name="bValid">Valid information or not</param>
            <param name="dblMagneticVariation">Magnetic variation.</param>
        </member>
        <member name="M:Franson.Nmea.RMC.IsRMC(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a RMC sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.RMC.BuildSentence">
            <summary>
            Called by NmeaBase.
            </summary>
        </member>
        <member name="M:Franson.Nmea.RMC.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.RMC.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.Velocity">
            <summary>
            Speed and heading.
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.UTC">
            <summary>
            Time stamp in UTC
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.Valid">
            <summary>
            Valid information in this object or not.
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.MagneticVariation">
            <summary>
            Magnetic variation.
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.TrackPoint">
            <summary>
            TrackPoint
            </summary>
        </member>
        <member name="T:Franson.Nmea.ROUTE">
            <summary>
            Represents a $ROUTE sentence
            </summary>
        </member>
        <member name="M:Franson.Nmea.ROUTE.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create ROUTE object from Sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.ROUTE.#ctor(System.String,System.String)">
            <summary>
            Create ROUTE object from parameters.
            </summary>
            <param name="strReceiverType">Type of entity to route to e.g. "device"</param>
            <param name="strReceiverID">ID of receiver.</param>
        </member>
        <member name="M:Franson.Nmea.ROUTE.#ctor(System.String,System.String,System.String)">
            <summary>
            Create ROUTE object from paramaters.
            </summary>
            <param name="strReceiverType">Type of entity to route to e.g. "device"</param>
            <param name="strReceiverID">ID of receiver.</param>
            <param name="strTransport">Recommended transport from server to device. E.g. "sms", "tcp", "udp" or "orbcomm".</param>
        </member>
        <member name="M:Franson.Nmea.ROUTE.IsROUTE(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a ROUTE sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns>True if sentence is a ROUTE</returns>
        </member>
        <member name="M:Franson.Nmea.ROUTE.IsReceiverType(System.String)">
            <summary>
            Makes a case insensitive compare for <see cref="P:Franson.Nmea.ROUTE.ReceiverType"/>
            </summary>
            <param name="strCompareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.ROUTE.IsTransport(System.String)">
            <summary>
            Makes a case insensitive compare for <see cref="P:Franson.Nmea.ROUTE.Transport"/>
            </summary>
            <param name="strCompareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.ROUTE.BuildSentence">
            <summary>
            Override this method if you want to build the Sentence object returned by 
            <see cref="M:Franson.Nmea.NmeaBase.ToSentence"/> in some other way.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.ROUTE.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Override this method if you want to parse the Sentence object passed in the constructor
            in some other way.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.ROUTE.ReceiverType">
            <summary>
            Receiver type e.g. "device", to route a message to a device.
            </summary>
        </member>
        <member name="P:Franson.Nmea.ROUTE.ReceiverID">
            <summary>
            ID of receiving party.
            </summary>
        </member>
        <member name="P:Franson.Nmea.ROUTE.Transport">
            <summary>
            Type of transport. E.g. "sms", "tcp", "udp", "sat", "email", "http"
            </summary>
        </member>
        <member name="T:Franson.Nmea.Sentence">
            <summary>
            Representing an NMEA sentence. Read only and thread safe.
            Use Parser or NmeaBuilder to create Sentence object.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.Sentence.#ctor(System.Byte[])">
            <summary>
            Create Sentence object from NMEA string. No validation of data is made.
            Checksum and syntax is checked by GpsGate.Nmea.Parser
            </summary>
            <param name="arrData">An array building up a valid NMEA sentence.</param>
        </member>
        <member name="M:Franson.Nmea.Sentence.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Called by derived object.
            </summary>
            <param name="arrData">Data that builds up sentence</param>
            <param name="bDummy">Dummy, to differ signature from internal constructor</param>
        </member>
        <member name="M:Franson.Nmea.Sentence.#ctor(System.Byte[],System.Char[],System.String[])">
            <summary>
            Constructor for sentence with custom delimiters
            </summary>
            <param name="arrData">Sentence data</param>
            <param name="arrDelimiters">Array of possible field delimiters. E.g. { " " "\t" } if fields are split by space or tab. Set to null to keep default delimiters which is</param>
            <param name="arrEndPattern">Custom end patter. Set to null to use default "\r" or "*"</param>
        </member>
        <member name="M:Franson.Nmea.Sentence.#ctor(System.Byte[],System.Char[])">
            <summary>
            Same as <see cref="M:Franson.Nmea.Sentence.#ctor(System.Byte[],System.Char[],System.String[])"/>, but uses default end pattern.
            </summary>
            <param name="arrData"></param>
            <param name="arrDelimiters"></param>
        </member>
        <member name="M:Franson.Nmea.Sentence.GetField(System.Int32)">
            <summary>
            Get NMEA field by index. Command field has index 0, first data field index 1, etc.
            Returns null if the index is out of bounds.
            </summary>
            <param name="iIndex">Index of field. Zero for command.</param>
            <returns>The field as a string, and null if the index is out of bounds.</returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.FindField(System.String)">
            <summary>
            <see cref="M:Franson.Nmea.Sentence.FindField(System.String,System.Int32)"/>. Starts searching at index 0.
            </summary>
            <param name="strSearch"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.FindField(System.String,System.Int32)">
            <summary>
            Returns first index of first field that matches argument. The search is case insensitive. If no match found, -1 is returned.
            The whole filed must match, not just a part of it.
            </summary>
            <param name="strSearch">string to search for</param>
            <param name="iStartIndex">Start index</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.GetCommand">
            <summary>
            Same as GetField(0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.GetCommand(System.Int32)">
            <summary>
            Returns the iLength rightmost charachters in the command field.
            If the command field is shorter than iLength, the entire command field is returned.
            </summary>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.MakeFields(System.String)">
            <summary>
            Splits sentence to fields. Override for custom sentence formats.
            </summary>
            <param name="strData"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.ToString">
            <summary>
            Returns whole sentence as a string including trailing \r\n
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.Equals(System.Object)">
            <summary>
            Compares to Sentence objects. Returns true if objects contains the same logical sentence.
            </summary>
            <param name="obj">Sentence object to compare to.</param>
            <returns>True if contains same sentence information</returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.GetHashCode">
            <summary>
            HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.ToByteArray">
            <summary>
            Returns byte array representation of NMEA sentence. A copy is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.Sentence.Item(System.Int32)">
            <summary>
            Same as GetField()
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.Sentence.FieldCount">
            <summary>
            Get number of fields, including command field.
            </summary>
        </member>
        <member name="T:Franson.Nmea.SentenceBuilder">
            <summary>
            Builds Sentence objects
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaCoordinate(System.Double)">
            <summary>
            Converts a double in decimal degree to a string in NMEA format "DDDMM.mmmmm"
            </summary>
            <param name="dblDegrees">Decimal degrees</param>
            <returns>A string in NMEA format "DDDMM.mmmmm"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaCoordinate(System.Double,System.Int32,System.Int32)">
            <summary>
            Converts a double in decimal degree to a string in NMEA format "DDDMM.mmmmm"
            </summary>
            <param name="dblDegrees">Decimal degrees</param>
            <param name="iLeftPadding">Left padding with "0" in returned string.</param>
            <param name="iDecimals">Nmmber of decimals in returned string</param>
            <returns>A string with the format "DDDMM.mmmmm"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaDate(System.DateTime)">
            <summary>
            Build an NMEA date format string from a DateTime variable.
            </summary>
            <param name="dtUTC">DateTime in UTC</param>
            <returns>A string in the format "DDMMYY"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaTime(System.DateTime)">
            <summary>
            Build an NMEA time format string from a DateTime variable.
            </summary>
            <param name="dtUTC">DateTime in UTC</param>
            <returns>A string in the format "HHMMSS.ss"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaDouble(System.Double,System.Int32,System.Int32)">
            <summary>
            Convert a double to a NMEA format numercial string. 
            </summary>
            <param name="dblValue">Value</param>
            <param name="iLeftPadding">Left padding with "0". Set to 0 to disable left padding.</param>
            <param name="iDecimals">Number of decimals</param>
            <returns>Returns a string with the format "D.dddd"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaInt(System.Int32,System.Int32)">
            <summary>
            Convert an integer to a NMEA integer format string.
            </summary>
            <param name="iValue">Integer value</param>
            <param name="iLeftPadding">Left padding with "0"</param>
            <returns>A string with the format "DD" E.g. "045"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaHex(System.Int32,System.Int32)">
            <summary>
            Converts an integer to a hex string.
            </summary>
            <param name="iValue">Integer value</param>
            <param name="iLeftPadding">Left padding with "0"</param>
            <returns>A string with the format "XX" E.g. "0F2"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaBool(System.Boolean)">
            <summary>
            Converts bool to NMEA field. true -> "1", false -> "0"
            </summary>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.ToSentence">
            <summary>
            Returns built sentence as a read only Sentence object.
            </summary>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.ToByteArray">
            <summary>
            Returns built sentence as a byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.ToString">
            <summary>
            Return built sentence as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.SetCommand(System.String)">
            <summary>
            Sets the command. E.g. "$GPRMC"
            </summary>
            <param name="strCommand">Command</param>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.SetField(System.Int32,System.String)">
            <summary>
            Sets the value of a specified field. Use the static SentenceBuilder.BuildXYZ() methods to convert from different data 
            types to NMEA formated strings.
            </summary>
            <param name="iIndex">Field index. The first field has index 1.</param>
            <param name="strValue">Value as a string.</param>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.SetField(System.Int32,System.Int32)">
            <summary>
            Sets the value of a specified field.
            </summary>
            <param name="iIndex">Index of field. The first field has index 1.</param>
            <param name="iValue">Integer value.</param>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.SetLength(System.Int32)">
            <summary>
            Specifies the number of fields in this sentence. If not set, the number of fields will equal 
            the highest index used when calling <see cref="M:Franson.Nmea.SentenceBuilder.SetField(System.Int32,System.String)"/>.
            </summary>
            <param name="iLength"></param>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.Reset">
            <summary>
            Clears all data in sentence
            </summary>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.GetPrefix">
            <summary>
            Prefix. Override to change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.GetPostfix">
            <summary>
            Postfix. Override to change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.GetDelimiter(System.Int32)">
            <summary>
            Field delimiter. Override to change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.HasChecksum">
            <summary>
            Returns true if this sentence has a checksum. Returns true. Override to change behaviour.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.CalcChecksum(System.Byte[])">
            <summary>
            Sentence checksum. Override to change.
            </summary>
            <param name="arrSentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.CreateSentence(System.Byte[])">
            <summary>
            Creates a <see cref="T:Franson.Nmea.Sentence"/> object. Override for sentence builders that creates other kinds of sentences.
            </summary>
            <param name="arrSentence"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.SentenceBuilder.Item(System.Int32)">
            <summary>
            Same as calling SetField()
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.SentenceBuilder.TrimFields">
            <summary>
            Specifies if SentenceBuilder should trim fields or not.
            Returns true by default. Override to change.
            </summary>
        </member>
        <member name="P:Franson.Nmea.SentenceBuilder.EscapeUTF8">
            <summary>
            Return true to escape fields containing UTF charachters.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.ICacheAction">
            <summary>
            Defines action supported over the GpsGate Command Framework
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.ICacheAction.CLEAR">
            <summary>
            Clear cache
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.ICacheAction.REMOVE">
            <summary>
            Remove cache
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.ICache">
            <summary>
            Defines the functionality of a Caching object.
            Implementing this interface will enable remote Cache commands through the GpsGate Server Command Framework.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.ICache.Clear">
            <summary>
            Clear cache when called.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.ICache.Remove(System.String)">
            <summary>
            Remove key from cache when called.
            </summary>
            <param name="strKey"></param>
        </member>
        <member name="T:Franson.Nmea.Command.Cache">
            <summary>
            Command to control cached objects remotely.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.Cache.#ctor(Franson.Nmea.Command.ICache,Franson.Nmea.Command.ICacheAction,System.String)">
            <summary>
            Create cache command.
            </summary>
            <param name="cache"></param>
            <param name="action"></param>
            <param name="strKeyName"></param>
        </member>
        <member name="T:Franson.Nmea.Command.CmdParser">
            <summary>
            Parse incoming NMEA sentences to sequences that builds up GpsGate Commands.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParser.WriteSentence(Franson.Nmea.NmeaBase)">
            <summary>
            Adds sentence to command parser
            </summary>
            <param name="nmeaBase"></param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParser.WriteSentence(Franson.Nmea.Sentence)">
            <summary>
            Adds sentence to command parser.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParser.OnGenericCmdFound(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Called for each complete command found.
            Calls <see cref="E:Franson.Nmea.Command.CmdParser.GenericCmdFound"/> event handler.
            </summary>
            <param name="genCmd"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParser.Reset">
            <summary>
            Reset parser. Starts over.
            </summary>
        </member>
        <member name="E:Franson.Nmea.Command.CmdParser.GenericCmdFound">
            <summary>
            Event when a complete FRCMD or FRRET with argument sentences has been found in stream.
            </summary>
        </member>
        <member name="E:Franson.Nmea.Command.CmdParser.ErrorFound">
            <summary>
            Event when FRERR found in stream.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.CmdParser.GenericCmdFoundHandle">
            <summary>
            Delegate for <see cref="E:Franson.Nmea.Command.CmdParser.GenericCmdFound"/>.
            </summary>
            <param name="parser">Parser generating event.</param>
            <param name="cmd">The command</param>
        </member>
        <member name="T:Franson.Nmea.Command.CmdParser.ErrorFoundHandle">
            <summary>
            Delegate for <see cref="E:Franson.Nmea.Command.CmdParser.ErrorFound"/>
            </summary>
            <param name="parser">Parser generating event.</param>
            <param name="err">The error</param>
        </member>
        <member name="T:Franson.Nmea.Command.CmdParserXML">
            <summary>
            Parse incoming XML that builds up GpsGate Commands
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParserXML.#ctor(System.Xml.XmlReader)">
            <summary>
            Create Cmd parser from XML m_xmlReader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParserXML.Parse">
            <summary>
            Start parsing.
            </summary>
            <exception cref="T:Franson.Nmea.NmeaParserException">Could not parse data.</exception>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParserXML.OnGenericCmdFound(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Adds found generic cmd to internal array to be returned by <see cref="M:Franson.Nmea.Command.CmdParserXML.Parse"/>
            </summary>
            <param name="genCmd"></param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParserXML.WriteSentence(Franson.Nmea.Sentence)">
            <summary>
            Cannot call this method in XML parser
            </summary>
            <param name="sentence"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
        </member>
        <member name="T:Franson.Nmea.Command.CmdQueueResetCmdBuilder">
            <summary>
            Builds a _CmdQueueReset command.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.CmdQueueResetCmdBuilder.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Create command to reset command queue for a specific object, e.g. a "device".
            </summary>
            <param name="strObjectType">E.g. "device"</param>
            <param name="iID">ID of object. E.g. a device ID.</param>
            <param name="bOutgoing">True if outgoing command queue is to be reset.</param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdQueueResetCmdBuilder.#ctor(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Create command to reset the specified queue for a specific object, e.g. a "device".
            </summary>
            <param name="strObjectType">E.g. "device"</param>
            <param name="iID">ID of object. E.g. a device ID.</param>
            <param name="bOutgoing">True if outgoing command queue is to be reset.</param>
            <param name="strQueue">
            Set to null/empty string to get default behavior (reset both Commands and SMS queue).
            Set to "Commands" to only reset Commands queue.
            Set to "SMS" to only reset SMS queue.
            </param>
        </member>
        <member name="T:Franson.Nmea.Command.CmdQueueStatusCmdBuilder">
            <summary>
            Create a _CmdQueueStatus command
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.CmdQueueStatusCmdBuilder.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Create a command to request status for command queue status.
            </summary>
            <param name="strObjectType">E.g. "device"</param>
            <param name="iID">E.g. a device database ID.</param>
            <param name="bOutgoing">True if status of outgoing queue is to be returned.</param>
        </member>
        <member name="T:Franson.Nmea.Command.DisconnectDeviceCmdBuilder">
            <summary>
            Builds _DisconnectDevice command. Will disconnect spcified device.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.DisconnectDeviceCmdBuilder.#ctor(System.Int32)">
            <summary>
            Create _DisconnectDevice command to be sent to server.
            Disconnects a single device
            </summary>
            <param name="iDeviceID">
            Database ID for device to disconnect from NMEA Service.
            </param>
        </member>
        <member name="M:Franson.Nmea.Command.DisconnectDeviceCmdBuilder.#ctor(System.Int32,Franson.Nmea.Command.DisconnectDeviceCmdBuilder.DisconnectType)">
            <summary>
            Create _DisconnectDevice command to be sent to server.
            Disconnects a single device
            </summary>
            <param name="iID">
            Database ID for device to disconnect from NMEA Service or database ID for application to disconnect all devices from.
            </param>
        </member>
        <member name="M:Franson.Nmea.Command.DisconnectDeviceCmdBuilder.#ctor(System.Int32[])">
            <summary>
            Create _DisconnectDevice command to be sent to server.
            Disconnects all devices for users in the array of tag IDs
            </summary>
            <param name="iTagIDs">Disconnects all devices found for users in the given array of tag IDs</param>
        </member>
        <member name="T:Franson.Nmea.Command.GenericCmd">
            <summary>
            Contains a generic GpsGate NMEA command, including argument sentences.
            Thread safe for public access, but not for internal access.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.Command.GenericCmd.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create generic command with start sentence. FRCMD or FRRET as argument.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.Command.GenericCmd.AddArgument(Franson.Nmea.Sentence)">
            <summary>
            Add argument sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.Command.GenericCmd.GetValue(System.String)">
            <summary>
            Returns the value field from a FRVAL sentence with name strName
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.Command.GenericCmd.Completed">
            <summary>
            Returns true if no more argument sentences should be added.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.GprsSettings">
            <summary>
            Command to set GPRS settings for a device.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.GprsSettings.#ctor(Franson.Nmea.ROUTE,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Create GPRS settings command. This command is sent to the server, which in turn sends it to the device.
            </summary>
            <param name="route">Destination.</param>
            <param name="strDeviceImei">Device IMEI. Set to null to use IMEI from ROUTE device ID.</param>
            <param name="strDevicePhoneNumber">Device phone number. Set to null to number from ROUTE device ID.</param>
            <param name="strGprsApn">GPRS APN. Cannot be null.</param>
            <param name="strGprsUsername">GPRS username. Set to null to not use.</param>
            <param name="strGprsPassword">GPRS password. Set to null to not use.</param>
            <param name="strProtocolHostname">GpsGate Server address. Set to null to use default.</param>
            <param name="iProtocolPort">Server port. Set to 0 to port found in "listener" table for device ID in ROUTE.</param>
            <param name="strSmsProxyPhoneNumber">Phone number to SMS proxy. Set to null to resolve number from registered SMS Proxy.</param>
            <exception cref="T:System.InvalidOperationException">If APN or route is null.</exception>
        </member>
        <member name="T:Franson.Nmea.Command.LoginCmdBuilder">
            <summary>
            _Login
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.LoginCmdBuilder.#ctor(System.String,System.String)">
            <summary>
            Command to login to server.
            </summary>
            <param name="strUsername">Username</param>
            <param name="strPW">Password</param>
        </member>
        <member name="M:Franson.Nmea.Command.LoginCmdBuilder.#ctor(System.String)">
            <summary>
            Command to login to server using IMEI
            </summary>
            <param name="strImei"></param>
        </member>
        <member name="T:Franson.Nmea.Command.Ping">
            <summary>
            Ping command, used to verify a connection to a server.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.Ping.#ctor(System.String)">
            <summary>
            TrackerOne _Ping, including IMEI
            </summary>
            <param name="strIMEI"></param>
        </member>
        <member name="M:Franson.Nmea.Command.Ping.#ctor">
            <summary>
            Create ping command.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Command.Ping.ParamTypeField">
            <summary>
            Returns empty string if the TrackerOne constructor is used.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.PlainTextCmdBuilder">
            <summary>
            Builds a _PlainText command.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.PlainTextCmdBuilder.#ctor(Franson.Nmea.ROUTE,System.String)">
            <summary>
            Build plain text message command to be sent.
            </summary>
            <param name="route">Receiver</param>
            <param name="strMessage">The message</param>
        </member>
        <member name="P:Franson.Nmea.Command.PlainTextCmdBuilder.Message">
            <summary>
            Return message. (Which is paramater 0 in inline arguments).
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.PollPosition">
            <summary>
            _PollPosition. Ask device to send one position update.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.PollPosition.#ctor(Franson.Nmea.ROUTE,System.String,System.String)">
            <summary>
            Ask device to send one position update.
            </summary>
            <param name="route">Which device, and how to send this command.</param>
            <param name="strTransport">Which transport should device use. Default "tcp"</param>
            <param name="strTransport2">Which backup transport should device use. Default none.</param>
        </member>
        <member name="T:Franson.Nmea.Command.ProxyMessageCmdBuilder">
            <summary>
            Builds a _ProxyMessage command
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.Command.ProxyMessageCmdBuilder.#ctor(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Create proxy message from generic cmd.
            </summary>
            <param name="genericCmd"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If data in generic command is not a proxy message command.</exception>
        </member>
        <member name="M:Franson.Nmea.Command.ProxyMessageCmdBuilder.#ctor(System.String,System.String)">
            <summary>
            Create proxy message command from parameters. Independent of if this is an incoming or outgoing 
            message ClientAddress is alwasy the address of the device / client.
            </summary>
            <param name="strClientAddress">Client address. E.g. a phone number.</param>
            <param name="strMessage">The message itself.</param>
        </member>
        <member name="M:Franson.Nmea.Command.ProxyMessageCmdBuilder.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Create proxy message command from parameters.
            </summary>
            <param name="strClientAddress">Client address. E.g. a phone number.</param>
            <param name="strMessage">The message itself.</param>
            <param name="dtTimeStamp">UTC when message was original sent.</param>
        </member>
        <member name="M:Franson.Nmea.Command.ProxyMessageCmdBuilder.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Create proxy message command from parameters.
            </summary>
            <param name="strClientAddress">Client address. E.g. a phone number.</param>
            <param name="strMessage">The message itself.</param>
            <param name="dtTimeStamp">UTC when message was original sent.</param>
            <param name="strTransport">Transport e.g. "sms"</param>
        </member>
        <member name="P:Franson.Nmea.Command.ProxyMessageCmdBuilder.ClientAddress">
            <summary>
            ClientAddress field.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Command.ProxyMessageCmdBuilder.Message">
            <summary>
            Message field.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Command.ProxyMessageCmdBuilder.TimeStamp">
            <summary>
            TimeStamp field. MinTime if null
            </summary>
        </member>
        <member name="P:Franson.Nmea.Command.ProxyMessageCmdBuilder.Transport">
            <summary>
            Returns Transport. null if not present.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.RetBuilder">
            <summary>
            Generic builder for answer (FRRET) to commands.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.#ctor(System.String,Franson.Nmea.ParameterType)">
            <summary>
            Create generic builder.
            </summary>
            <param name="strCommandName">Command name.</param>
            <param name="paramType"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetParameter(System.Int32)">
            <summary>
            Add value as inline paramater.
            </summary>
            <param name="iParam"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetParameter(System.String)">
            <summary>
            Add string as inline paramater.
            </summary>
            <param name="strParam"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetParameter(System.Boolean)">
            <summary>
            Add boolean as inline paramater.
            </summary>
            <param name="bParam"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetSentence(Franson.Nmea.Sentence)">
            <summary>
            Add sentence as sentence argument.
            </summary>
            <param name="sentenceGeneric"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetSentence(Franson.Nmea.NmeaBase)">
            <summary>
            Add typed sentence as sentence argument.
            </summary>
            <param name="sentenceTyped"></param>
        </member>
        <member name="T:Franson.Nmea.Command.SendMessage">
            <summary>
            Builds a _SendMessage command.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.#ctor(Franson.Geo.TrackPoint,System.String,System.Boolean)">
            <summary>
            Create a TrackerOne _SendMessage sentence, if bInline is set to true.
            </summary>
            <param name="tp"></param>
            <param name="strIMEI"></param>
            <param name="bInline"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.#ctor(Franson.Geo.TrackPoint)">
            <summary>
            Create _SendMessage command for "GpsGate" namespace.
            </summary>
            <param name="tp">Position and time for message.</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.#ctor(Franson.Geo.TrackPoint,System.String)">
            <summary>
            Create _SendMessage for custom namespace. E.g. "GpsGateDevice" namespace.
            </summary>
            <param name="tp"></param>
            <param name="strNameSpace"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.#ctor(Franson.Geo.TrackPoint,System.String,System.Int32)">
            <summary>
            _SendMessage to custom namesapce and custom track recorder.
            </summary>
            <param name="tp"></param>
            <param name="strNameSpace"></param>
            <param name="iTrackRecorderID"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.String)">
            <summary>
            Add string record.
            </summary>
            <param name="strName">Name of record</param>
            <param name="strValue">Actual value</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.Boolean)">
            <summary>
            Add bool record
            </summary>
            <param name="strName">Name of record</param>
            <param name="bValue">Actual value</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.Int32)">
            <summary>
            Add int record
            </summary>
            <param name="strName">Name of record</param>
            <param name="iValue">Actual value</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.Double,System.Int32)">
            <summary>
            Add double record.
            </summary>
            <param name="strName">Name of record</param>
            <param name="dblValue">Value</param>
            <param name="iDecimals">Number of decimals.</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.DateTime)">
            <summary>
            Add date time value.
            </summary>
            <param name="strName">Name of record.</param>
            <param name="dtUTC">DateTime (use UTC!)</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(Franson.Nmea.FRVAL)">
            <summary>
            Add FRVAL.
            </summary>
            <param name="frval"></param>
        </member>
        <member name="P:Franson.Nmea.Command.SendMessage.ParamTypeField">
            <summary>
            Returns empty string if the TrackerOne/Inline constructor is used.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.SendPositionCmdBuilder">
            <summary>
            Builds _SendPosition command.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.Command.SendPositionCmdBuilder.#ctor(Franson.Geo.TrackPoint)">
            <summary>
            Create _SendPosition command that saves position to "life track".
            </summary>
            <param name="tp"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SendPositionCmdBuilder.#ctor(Franson.Geo.TrackPoint,System.Int32)">
            <summary>
            Create _SendPosition command.
            Set iTrackRecorderID to -2 to only update the current position, and not save history.
            Set iTrackRecorderID to -1 to not save current position nor history. Only route position.
            Set iTrackPositionID to 0 to save to "life track"
            Or set to a ID returned by _CreateTrackRecorder.
            </summary>
            <param name="tp"></param>
            <param name="iTrackRecorderID"></param>
        </member>
        <member name="T:Franson.Nmea.Command.SetTrackRecorderCmdBuilder">
            <summary>
            Builds _SetTrackRecorder command. If the device protocol implements _SetDeviceTrackRecorder the settings can be updated live.
            Otherwise all devices for specified user will be disconnected (and reconnect to get new track recorder values).
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.TimeFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change TimeFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.DistanceFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change DistanceFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.DirectionFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change DirectionFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.DirectionThreshold">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change DirectionThreshold.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.SpeedFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change SpeedFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.RestartTime">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change RestartTime.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.RestartDistance">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change RestartDistance.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.RestartInterval">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change RestartInterval.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.RestartIntervalOffset">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change RestartIntervalOffset.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.SmsTimeFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change SmsTimeFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.Motion">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change Motion.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.#ctor(System.Int32)">
            <summary>
            Create _SetTrackRecorder command to be sent to server.
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)">
            <summary>
            Add a track recorder setting to change.
            </summary>
            <param name="strName"></param>
            <param name="dblValue"></param>
        </member>
        <member name="T:Franson.Nmea.Command.StartTracking">
            <summary>
            Command to start position updates from device. 
            _StartTracking
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.StartTracking.#ctor(Franson.Nmea.ROUTE,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sends a start tracking command to client.
            </summary>
            <param name="route">Which device to route this command to.</param>
            <param name="strTransport">Primary transport device should use. Default "tcp"</param>
            <param name="strTransport2">Secondary transport. E.g. "sms". Defualt none.</param>
            <param name="iTimeFilter">Suggested update interval in seconds. If 0, the value is read from the track recorder.</param>
            <param name="iSmsTimeFilter">Update interval if SMS is used.</param>
            <param name="bMotion">True if device only should send position updates when moving</param>
        </member>
        <member name="M:Franson.Nmea.Command.StartTracking.#ctor(Franson.Nmea.ROUTE,System.String,System.String,System.Int32)">
            <summary>
            Send start tracking command to client.
            </summary>
            <param name="route"></param>
            <param name="strTransport"></param>
            <param name="strTransport2"></param>
            <param name="iTimeFilter"></param>
        </member>
        <member name="T:Franson.Nmea.Command.StopTracking">
            <summary>
            _StopTracking. Ask device to stop sending updates.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.StopTracking.#ctor(Franson.Nmea.ROUTE)">
            <summary>
            Ask device to stop sending position updates.
            </summary>
            <param name="route">Which device.</param>
        </member>
        <member name="T:Franson.Nmea.Command.SupportsProxyMessage">
            <summary>
            Is sent from a client to sercver to indicate that client supports outgoing _ProxyMessage commands from the server.
            Typically used by a SMS, email or satellite proxy to receive and forward out going messages from server.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.SupportsProxyMessage.#ctor(System.String)">
            <summary>
            Create command.
            </summary>
            <param name="strTransport">"sms", "email" or "sat"</param>
        </member>
        <member name="T:Franson.Nmea.Command.TableCmdBuilder">
            <summary>
            Builds a Table that can be sent using GpsGate Protocol.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.TableCmdBuilder.#ctor(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Create table.
            </summary>
            <param name="genericCmd"></param>
        </member>
        <member name="M:Franson.Nmea.Command.TableCmdBuilder.GetRows">
            <summary>
            Returns <see cref="T:Franson.Nmea.FRROW"/> list as a <see cref="T:System.Collections.IList"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Nmea.Command.TemplateCmdBuilder">
            <summary>
            Template command builder
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.TemplateCmdBuilder.#ctor(System.String,Franson.Nmea.ROUTE)">
            <summary>
            Create.
            </summary>
            <param name="strCommandName"></param>
            <param name="route"></param>
        </member>
        <member name="M:Franson.Nmea.Command.TemplateCmdBuilder.AddFRVAL(Franson.Nmea.FRVAL)">
            <summary>
            Add argument sentence.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Franson.Nmea.Command.TemplateCmdBuilder.ParseCommand(System.String,Franson.Nmea.ROUTE)">
            <summary>
            Parses a string of format Command(arg1=value,arg2=value) and returns a command template that can be sent to NMEA Service.
            </summary>
            <param name="strCommand"></param>
            <param name="route"></param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
    </members>
</doc>
