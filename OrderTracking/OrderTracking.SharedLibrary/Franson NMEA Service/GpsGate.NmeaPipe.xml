<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GpsGate.NmeaPipe</name>
    </assembly>
    <members>
        <member name="T:GpsGate.NmeaPipe.AvlPOS">
            <summary>
            AVL POS sentence. Used by UniTraQ
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.NmeaPipe.AvlPOS.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create typed sentence
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Format error.</exception>
        </member>
        <member name="M:GpsGate.NmeaPipe.AvlPOS.IsAvlPOS(Franson.Nmea.Sentence)">
            <summary>
            Returns true for this is a AVL $POS sentence.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.AvlPOS.BuildSentence">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.NmeaPipe.AvlPOS.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parse sentence.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Format error</exception>
        </member>
        <member name="P:GpsGate.NmeaPipe.AvlPOS.TrackPoint">
            <summary>
            TrackPoint.
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.AvlPOS.DeviceID">
            <summary>
            Device ID
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.CommonDeviceDefinition">
            <summary>
            Base class for all SmartPipe device definitions.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.CommonDeviceDefinition.InstallMessageFields(Franson.Message.MessageNamespace)">
            <summary>
            No fields in SmartPipe. Returns null.
            </summary>
            <param name="deviceNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.CommonDeviceDefinition.InstallDefaultMapperEntryFor(Franson.Message.MessageField,Franson.Message.MessageFieldDictionary)">
            <summary>
            Returns null. No default mapper entries for SmartPipe.
            </summary>
            <param name="inField"></param>
            <param name="defaultMapper"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.CommonDeviceDefinition.RegisterCommad(GpsGate.Online.Command.GateCmd)">
            <summary>
            Returns null. No commands available for SmartPipe.
            </summary>
            <param name="gateCommand"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.NmeaPipe.CommonDeviceDefinition.LonLatParserEnabled">
            <summary>
            Should return true if derived device definition enables the liberal lon/lat parser.
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.CommonDeviceDefinition.NamespaceName">
            <summary>
            Returns "SmartPipe"
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.FileLogGroup">
            <summary>
            Group used to log NMEA data to file
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroup.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a group for loggin to file.
            </summary>
            <param name="strRootPath"></param>
            <param name="bLogAll"></param>
            <exception cref="T:System.Exception">Exception <see cref="M:System.IO.Directory.CreateDirectory(System.String)"/> can throw.</exception>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroup.DoAddNmeaConnection(GpsGate.Online.Net.NmeaConnection,Franson.Directory.GroupRights)">
            <summary>
            Called on new authenticated connection
            </summary>
            <param name="nmeaConn"></param>
            <param name="rights"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroup.DoFRRDT(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRRDT,Franson.Directory.GroupRights)">
            <summary>
            Does not support FRRDT
            </summary>
            <param name="nmeaConn"></param>
            <param name="frrdt"></param>
            <param name="rights"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroup.DoFRWDT(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRWDT,Franson.Directory.GroupRights)">
            <summary>
            This connection writes NMEA data.
            </summary>
            <param name="nmeaConn"></param>
            <param name="frwdt"></param>
            <param name="rights"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroup.GetGroupRightsForUser(Franson.Directory.User)">
            <summary>
            Returns group rights for specified user.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroup.DoDisconnect(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Called when connection is closed.
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroup.DoDispose">
            <summary>
            Called when group is disposed.
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.FileLogGroupList">
            <summary>
            List of FileLogGroups
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupList.#ctor(GpsGate.NmeaPipe.FileLogGroup)">
            <summary>
            Create list with one file group.
            </summary>
            <param name="logGroup"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupList.#ctor">
            <summary>
            Create empty list
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupList.GetItemType">
            <summary>
            Returns typeof(FileLogGroup)
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupList.Add(System.Object)">
            <summary>
            Add FileLogGroup
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupList.Clear">
            <summary>
            Clear list
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupList.Contains(System.Object)">
            <summary>
            Returns tru if list contains specified object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupList.IndexOf(System.Object)">
            <summary>
            Return index of specified object if it exists. Else -1
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupList.Insert(System.Int32,System.Object)">
            <summary>
            Insert FileLogGroup object at index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:GpsGate.NmeaPipe.FileLogGroupList.Item(System.Int32)">
            <summary>
            Get indexed FileLogGroup
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.NmeaPipe.FileLogGroupManager">
            <summary>
            A group type that stores incoming NMEA data to a file for each user.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupManager.#ctor">
            <summary>
            Create manager.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogGroupManager.LoadGateGroups(GpsGate.Online.GateUser)">
            <summary>
            Called to load FileLogGroups a user is member of.
            </summary>
            <param name="gateUser"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.NmeaPipe.FileLogWriter">
            <summary>
            Writes received data unchanged to a file.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogWriter.DoSetupSource(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Called when new source set to router. Opens the log file for this user.
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogWriter.DoRawData(GpsGate.Online.Net.NmeaConnection,System.Byte[])">
            <summary>
            Store raw data to file.
            </summary>
            <param name="nmeaConnection"></param>
            <param name="data"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogWriter.DoDisconnectedSource(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Source disconnected, close log file.
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogWriter.m_KeepFile">
            <summary>
            Builds new filename and sets <see cref="F:GpsGate.NmeaPipe.FileLogWriter.m_strFileName"/>. The file name is built from username and time interval.
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.FileLogWriterList">
            <summary>
            Handles a list of <see cref="T:GpsGate.NmeaPipe.FileLogWriter"/>s
            </summary>
            <threadsafty static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.NmeaPipe.FileLogWriterList.DoCreateRouter(System.String)">
            <summary>
            Creates a object to write data to file, rather than the default routing.
            </summary>
            <param name="strUsername"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GpsGate.NmeaPipe.GPLOC" -->
        <member name="M:GpsGate.NmeaPipe.GPLOC.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create GPLOG from generic sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.GPLOC.IsGPLOC(Franson.Nmea.Sentence)">
            <summary>
            Returns true for this is a $GPLOC sentence.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.GPLOC.BuildSentence">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.NmeaPipe.GPLOC.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parse generic sentence.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="P:GpsGate.NmeaPipe.GPLOC.TrackPoint">
            <summary>
            TrackPoint.
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.GPLOC.UnitID">
            <summary>
            Unit ID
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.IMEIParser">
            <summary>
            Will parse a data stream and look for suspected IMEI numbers.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.NmeaPipe.IMEIParser.#ctor">
            <summary>
            Create ImeiParser
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.IMEIParser.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to parser.
            </summary>
            <param name="arrBuf"></param>
            <param name="iStartIndex"></param>
            <param name="iLength"></param>
            <returns>Number of bytes actually written</returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.IMEIParser.Write(System.String)">
            <summary>
            Writes string to parser.
            </summary>
            <param name="strData">Number of bytes actually written.</param>
        </member>
        <member name="M:GpsGate.NmeaPipe.IMEIParser.Reset">
            <summary>
            Reset parser.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.IMEIParser.NextIMEI">
            <summary>
            Parses for next suspected IMEI number. Returns null if nothing found.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.NmeaPipe.IMEIParser.EmptyLength">
            <summary>
            Returns number of bytes free in buffer
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.IMEIParser.AllowUnsafe">
            <summary>
            Set to true if numerical IDs of 8+ digits are allowed. Default false.
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.LonLatParser">
            <summary>
            Looking for NMEA style longitude / latitude information.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:GpsGate.NmeaPipe.LonLatParser.m_strNumber">
            <summary>
            Set if a (NMEA) position coordinate number found in stream
            </summary>
        </member>
        <member name="F:GpsGate.NmeaPipe.LonLatParser.m_strHemi">
            <summary>
            Set if hemisphere info found.
            </summary>
        </member>
        <member name="F:GpsGate.NmeaPipe.LonLatParser.m_strLonLatLabel">
            <summary>
            Lon: Lat: label.
            </summary>
        </member>
        <member name="F:GpsGate.NmeaPipe.LonLatParser.m_bLongitudeFound">
            <summary>
            Set to true if longitude found
            </summary>
        </member>
        <member name="F:GpsGate.NmeaPipe.LonLatParser.m_dblLongitude">
            <summary>
            The actual longitude data.
            </summary>
        </member>
        <member name="F:GpsGate.NmeaPipe.LonLatParser.m_bLatitudeFound">
            <summary>
            Set to true if latitude found.
            </summary>
        </member>
        <member name="F:GpsGate.NmeaPipe.LonLatParser.m_dblLatitude">
            <summary>
            The actual latitude data.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.LonLatParser.#ctor">
            <summary>
            Create parser
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.LonLatParser.NextTrackPoint">
            <summary>
            Parses data written to parser. Returns a <see cref="T:Franson.Geo.TrackPoint"/> object if longitude and latitude information
            found. Velocity is set top null, and UTC to the current UTC.
            If no position information found, null is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.LonLatParser.Reset">
            <summary>
            Rest parser.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.LonLatParser.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to parser.
            </summary>
            <param name="arrBuf"></param>
            <param name="iStartIndex"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.LonLatParser.Write(System.String)">
            <summary>
            Write string to parser.
            </summary>
            <param name="strData"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.NmeaPipe.LonLatParser.EmptyLength">
            <summary>
            Returns number of bytes free in buffer
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.NmeaDeviceDefinition">
            <summary>
            SmartPipe - Requires IMEI + complete NMEA sentences in input stream.
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.NmeaDeviceDefinition.Name">
            <summary>
            Name of the Device Model
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.NmeaDeviceDefinition.Description">
            <summary>
            Device model description
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.NmeaDeviceDefinition.LonLatParserEnabled">
            <summary>
            Returns false. Lon/lat parser is not enabled for this device definition.
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.PipeProtocol">
            <summary>
            Pipe protocol. Does nothing. Will just let data through.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Create Pipe protocol object.
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="P:GpsGate.NmeaPipe.PipeProtocol.StringID">
            <summary>
            Returns "Pipe"
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.PipeSettings">
            <summary>
            Maps ports to usernames. The key is the username, the value is the port number
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeTcpConnection.CreateProtocol">
            <summary>
            Create <see cref="T:GpsGate.NmeaPipe.PipeProtocol"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.NmeaPipe.PipeTcpListener">
            <summary>
            Handles generic TCP/IP connections that are authenticated by which port number they connect to.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeTcpListener.#ctor(System.Net.IPAddress,System.Int32,System.String)">
            <summary>
            Create a listener. Call <see cref="!:Start"/>
            </summary>
            <param name="ipAddress">Bind to this IP address. Set to <see cref="T:System.Net.IPAddress"/> if unsure</param>
            <param name="iPort">Port to listen to.</param>
            <param name="strUsername">User that is associated with this port number / address</param>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeTcpListener.CreateTcpConnection(System.Net.Sockets.Socket)">
            <summary>
            Returns a <see cref="T:GpsGate.NmeaPipe.PipeTcpConnection"/> object
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeTcpListener.RegisterPipeListeners(GpsGate.NmeaPipe.PipeSettings,GpsGate.Online.GateApplication,System.Net.IPAddress)">
            <summary>
            Registers one listener per entry in settings
            </summary>
            <param name="settings">Specifies listeners</param>
            <param name="application">Application to register listeners in.</param>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeTcpListener.RegisterPipeListeners(GpsGate.Online.GateApplication,System.Net.IPAddress)">
            <summary>
            Reads configuration data from PipeSettings.xml in local directory, and registers all listeners
            </summary>
            <param name="application">Application to register listeners to.</param>
        </member>
        <member name="P:GpsGate.NmeaPipe.PipeTcpListener.ProtocolID">
            <summary>
            Returns "NmeaPipe"
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeUdpConnection.CreateProtocol">
            <summary>
            Create <see cref="T:GpsGate.NmeaPipe.PipeProtocol"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.NmeaPipe.PipeUdpListener">
            <summary>
            Handles unauthorized UDP datagrams which contains NMEA data.
            Each port is assigned to one specific user. The mapping is made in "PipeUdpSettings.xml"
            </summary>
        </member>
        <member name="F:GpsGate.NmeaPipe.PipeUdpListener.m_strUsername">
            <summary>
            Username this pipe is mapped to.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeUdpListener.#ctor(System.Net.IPAddress,System.Int32,System.String)">
            <summary>
            Starts listening for UDP datagrams on specified address + port. One port is mapped to
            one specific username in "PipeUdpSettings.xml"
            </summary>
            <param name="ipAddressToBind">IP Address to bind UDP listener to</param>
            <param name="iPort">Port to listen to</param>
            <param name="strUsername">Username that maps to this port.</param>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeUdpListener.CreateUdpConnection(GpsGate.Online.Net.Udp.UdpClientWrapper)">
            <summary>
            Returns a <see cref="T:GpsGate.NmeaPipe.PipeUdpConnection"/> for each new UDP connection.
            </summary>
            <param name="wrapper"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeUdpListener.RegisterPipeListeners(GpsGate.NmeaPipe.PipeSettings,GpsGate.Online.GateApplication,System.Net.IPAddress)">
            <summary>
            Registers one UDP listener per entry in settings
            </summary>
            <param name="settings">Specifies listeners</param>
            <param name="application">Application to register listeners in.</param>
            <param name="ipAddress"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.PipeUdpListener.RegisterPipeListeners(GpsGate.Online.GateApplication,System.Net.IPAddress)">
            <summary>
            Reads configuration data from PipeUdpSettings.xml in local directory, and registers all UDP listeners
            </summary>
            <param name="application">Application to register listeners to.</param>
            <param name="ipAddress"></param>
        </member>
        <member name="P:GpsGate.NmeaPipe.PipeUdpListener.ProtocolID">
            <summary>
            Returns "NmeaPipe"
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.RmcParser">
            <summary>
            Parses data for embedded RMC sentences like which starts with "GPRMC" rather than "$GPRMC", and doesn't necessarily end with CR\LF
            </summary>
        </member>
        <member name="F:GpsGate.NmeaPipe.RmcParser.m_rmc">
            <summary>
            Last valid GPRMC sentence
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.RmcParser.ValidateSentence(System.Byte[])">
            <summary>
            Returns true if this is a GPRMC sentence
            </summary>
            <param name="arrData"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.NmeaPipe.SmartParser">
            <summary>
            Combines a set of generic browsing methods to find IMEI number, longitude, latitude, and/or NMEA data.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartParser.NextIMEI">
            <summary>
            Returns next IMEI number.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartParser.NextSentence">
            <summary>
            Returns next NMEA Sentence found. If there is no NMEA data, but something from where the parser
            extracts position information, RMC sentences will be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartParser.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to parser, returns number of bytes actually written.
            </summary>
            <param name="arrByte"></param>
            <param name="iStartOffset"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartParser.Write(System.String)">
            <summary>
            Writes string to parser.
            </summary>
            <param name="strData">Number of bytes actually written.</param>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartParser.Reset">
            <summary>
            Resets browsers. Starts all over again.
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartParser.LonLatParserEnabled">
            <summary>
            Set to false to enable more strict NMEA only input. true by default.
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartParser.IMEIParserEnabled">
            <summary>
            Set to false to disable IMEI parser.
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartParser.UnsafeAuthentication">
            <summary>
            Set to true to allow 8+ digit authentication. Default false.
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartParser.EmptyLength">
            <summary>
            Returns minimum empty length left in parser.
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.SmartPipeDeviceDefinition">
            <summary>
            Defines the capabilities of a SmartPipe device such as MessageFields, Default Mapper and Command support
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartPipeDeviceDefinition.Name">
            <summary>
            Name of the Device Model
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartPipeDeviceDefinition.Description">
            <summary>
            Device model description
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartPipeDeviceDefinition.LonLatParserEnabled">
            <summary>
            Returns true. Lon/lat parser IS enabled for this device definition.
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.SmartPipeProtocol">
            <summary>
            Handles SmartPipe protocol
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Create SmartPipe protocol object.
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeProtocol.TranslateFromDevice(Franson.Message.ProviderMessage)">
            <summary>
            SMS
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeProtocol.TranslateFromDevice(System.Byte[],System.Int32,System.Int32)">
            <summary>
            UDP and TCP
            </summary>
            <param name="arrData"></param>
            <param name="iStart"></param>
            <param name="iLength"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeProtocol.m_ConfigParser">
            <summary>
            Set strictness.
            </summary>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartPipeProtocol.StringID">
            <summary>
            Returns "SmartPipe"
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.SmartPipeSmsConnection">
            <summary>
            Handles an incoming SMS SmartPipe connection.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeSmsConnection.#ctor(Franson.Message.MSISDN)">
            <summary>
            Create connection.
            </summary>
            <param name="numDevice">Device's phone number.</param>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeSmsConnection.CreateProtocol">
            <summary>
            Returns a <see cref="T:GpsGate.NmeaPipe.SmartPipeProtocol"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.NmeaPipe.SmartPipeSmsListener">
            <summary>
            Listener that understands most NMEA derived protocols sent over SMS.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeSmsListener.CreateSmsConnection(Franson.Message.MSISDN)">
            <summary>
            Returns a <see cref="T:GpsGate.NmeaPipe.SmartPipeSmsConnection"/> object.
            </summary>
            <param name="msisdn"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartPipeSmsListener.ProtocolID">
            <summary>
            Returns "SmartPipe"
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.SmartPipeTcpConnection">
            <summary>
            Handles connection to generic "GPS/GPRS" device that implements a NMEA derived protocol of some sort.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeTcpConnection.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Create SmartPipe
            </summary>
            <param name="socket">Socket.</param>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeTcpConnection.CreateProtocol">
            <summary>
            Returns <see cref="!:SmartPipeeProtcol"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.NmeaPipe.SmartPipeTcpListener">
            <summary>
            Protocol listener that understands most NMEA dereived protocols sent by GPS/GPRS devices over TCP/IP
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeTcpListener.OnStart">
            <summary>
            Installs NmeaPipe protocol, and starts listener
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeTcpListener.CreateTcpConnection(System.Net.Sockets.Socket)">
            <summary>
            Returns a <see cref="T:GpsGate.NmeaPipe.SmartPipeTcpConnection"/> object.
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeTcpListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Called when listener type is installed.
            Sets default server port to 30176
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeTcpListener.Upgrade(Franson.Reflection.LoadableType)">
            <summary>
            First start after upgrading GpsGate Server.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartPipeTcpListener.ProtocolID">
            <summary>
            Returns "SmartPipe"
            </summary>
        </member>
        <member name="T:GpsGate.NmeaPipe.SmartPipeUdpConnection">
            <summary>
            Handles connection to generic "GPS/GPRS" device that implements a NMEA derived protocol of some sort.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeUdpConnection.#ctor(GpsGate.Online.Net.Udp.UdpClientWrapper)">
            <summary>
            Create SmartPipe
            </summary>
            <param name="wrapper"></param>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeUdpConnection.CreateProtocol">
            <summary>
            Returns <see cref="!:SmartPipeeProtcol"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeUdpListener.OnStart">
            <summary>
            Called when listener is started.
            </summary>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeUdpListener.CreateUdpConnection(GpsGate.Online.Net.Udp.UdpClientWrapper)">
            <summary>
            Return a <see cref="T:GpsGate.NmeaPipe.SmartPipeUdpConnection"/> object
            </summary>
            <param name="wrapper"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.NmeaPipe.SmartPipeUdpListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Called when listener type is installed.
            Sets default server port to 30176
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.NmeaPipe.SmartPipeUdpListener.ProtocolID">
            <summary>
            Returns "SmartPipe"
            </summary>
        </member>
    </members>
</doc>
