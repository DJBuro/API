<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GpsGate.SignUp</name>
    </assembly>
    <members>
        <member name="T:GpsGate.SignUp.Application.SignUpApplication">
            <summary>
            SignUp Application business object.
            </summary>
        </member>
        <member name="M:GpsGate.SignUp.Application.SignUpApplication.CreateNewApplication">
            <summary>
            Create a new SignUpApplication.
            
            Override base to set "AdminGroup.IsPublic = true" to enabe Cross Site Script calls authenticating
            against the Administrator Group.
            </summary>
        </member>
        <member name="M:GpsGate.SignUp.Application.SignUpApplication.ToggleDisableDevices(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.Boolean}})">
            <summary>
            Toggle disable / enable a list of <see cref="!:DeviceDefinitions"/>.
            </summary>
            <param name="kvDeviceDefinitionDisable">List of KeyvaluePairs with DeviceDefinitionID and bool disable.</param>
        </member>
        <member name="M:GpsGate.SignUp.Application.SignUpApplication.CheckDeviceDisabledSettings(System.Int32)">
            <summary>
            Check if the current <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/> is disabled for this application.
            </summary>
            <param name="iDeviceDefinitionID">ID of the <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/></param>
            <returns>true if disabled.</returns>
        </member>
        <member name="M:GpsGate.SignUp.Application.SignUpApplication.CommitSignUp(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
             <summary>
             Commit the Application signup.
             
             1. Check s If strUsername, strEmail, strIMEI and strMSISDN are valid.
             2. Create a <see cref="T:GpsGate.Online.GateUser"/> with the provided username.
             3. Create a <see cref="T:GpsGate.Online.Directory.Device"/> for the user with the provided IMIE, MSISDN and protocol.
             4. Create a new <see cref="N:GpsGate.SignUp.Application"/> instance and set the user as Administrator.
             5. Sends an E-Mail to the provided Email address with login and device information.
             6. Commit changes if all OK.
             7. Sends a configuration SMS to the device. 
             </summary>
             <param name="strUsername">Username of the administrator user to create</param>
             <param name="strEmail">E-Mail address to send complete sign up mail to.</param>
             <param name="iDeviceDefinitionID"><see cref="T:GpsGate.Online.Directory.DeviceDefinition"/>ID.</param>
             <param name="strIMEI">IMEI to the device. </param>
             <param name="strMSISDN">The phone number of the device. Format as +46701112233</param>
             <param name="strAPN">Mobile Operator APN. E.g online.telia.com</param>
             <param name="strGPRSUname">Mobile operator GPRS username. E.g "guest". Allow null or blank</param>
             <param name="strGPRSPwd">Mobile operator GPRS password E.g "guest". Allow null or blank</param>
             <param name="strServerUrl">base Url to Server web sites. E.g. http://apps.gpsgate.com or http://myserver.com/GpsGateServer</param> 
             <returns>
             Returns a list with <see cref="T:GpsGate.SignUp.Application.SignUpApplication"/> errors.
            </returns>
        </member>
        <member name="M:GpsGate.SignUp.Application.SignUpApplication.m_DoRollback(Franson.Directory.Application)">
            <summary>
            Remove all created business objects.
            
            Used to rollback created business when CommitSignUp fails in one of the late stages (Sending Config command or sebnding Email)
            Removing Application will remove user which in turn removes the device.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:GpsGate.SignUp.Application.SignUpApplication.m_SendCommand(Franson.Nmea.FRCMD)">
            <summary>
            Sends a FRCMD to server using port and address from db.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="P:GpsGate.SignUp.Application.SignUpApplication.Settings">
            <summary>
            Get the application <see cref="T:Franson.Directory.ApplicationSettings"/> object.
            </summary>
        </member>
        <member name="P:GpsGate.SignUp.Application.SignUpApplication.SupportedDevices">
            <summary>
            Returns the device protocols this application has enabled.
            </summary>
        </member>
        <member name="T:GpsGate.SignUp.Application.SignUpErrorCode">
            <summary>
            Struct with error codes which the CommitSignUp can return.
            
            Those errors are used to be able to serialize errors through web service.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.UNKNOWN_ERROR">
            <summary>
            Used for unexpected errors.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.INVALID_EMAIL_FORMAT">
            <summary>
            E-mail not valid.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.INVALID_USERNAME_FORMAT">
            <summary>
            Username is not valid.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.INVALID_IMEI_FORMAT">
            <summary>
            IMEI not valid. E.g checksum error.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.INVALID_MSISDN_FORMAT">
            <summary>
            Phone number is not in a valid format.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.USER_EXIST">
            <summary>
            User already present in database.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.DEVICE_EXIST">
            <summary>
            Device already present in database.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.PHONENUMBER_EXIST">
            <summary>
            Phone number already present in database.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.EMAIL_EXIST">
            <summary>
            Email already present in database.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.DEVICE_CONFIG_UNSUCCESSFUL">
            <summary>
            Device configuration was unsuccessful.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.EMAIL_COULD_NOT_BE_SENT">
            <summary>
            Email was not successfully delivered.
            </summary>
        </member>
        <member name="F:GpsGate.SignUp.Application.SignUpErrorCode.PROTOCOL_COLULD_NOT_BE_FOUND">
            <summary>
            Protocol for the choosen device was not found.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GpsGate.SignUp.Application.SignUpException" -->
        <member name="F:GpsGate.SignUp.Application.SignUpException.m_strErrorCode">
            <summary>
            Error code. Set from <see cref="T:GpsGate.SignUp.Application.SignUpErrorCode"/>
            </summary>
        </member>
        <member name="M:GpsGate.SignUp.Application.SignUpException.#ctor(System.String,System.String)">
            <summary>
            Constructor without InnerExceptoin.
            
            InnerException will be set to null.
            </summary>
            <param name="strErrorCode">Error code from <see cref="T:GpsGate.SignUp.Application.SignUpErrorCode"/>. Used when the exception is serialized through web services.</param>
            <param name="strMessage">Human readable message.</param>
        </member>
        <member name="M:GpsGate.SignUp.Application.SignUpException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor taking InnerException.
            </summary>
            <param name="strErrorCode">Error code from <see cref="T:GpsGate.SignUp.Application.SignUpErrorCode"/>. Used when the exception is serialized through web services.</param>
            <param name="strMessage">Human readable message.</param>
            <param name="innerException">The original exception.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GpsGate.SignUp.Application.SignUpException.ErrorCode" -->
        <member name="M:GpsGate.SignUp.Web.SignUpWebApplication.LogOut">
            <summary>
            Kills the session and redirect the user to start page.
            </summary>
        </member>
        <member name="P:GpsGate.SignUp.Web.SignUpWebApplication.FransonApplication">
            <summary>
            Returns the current "typed" <see cref="T:Franson.Directory.Application"/>
            </summary>
        </member>
    </members>
</doc>
