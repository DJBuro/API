<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Franson</name>
    </assembly>
    <members>
        <member name="T:Franson.Install.DB.DAO.InstallDBDAOFactory">
            <summary>
            The DataFactory class creates DataAccess objects that corresponds 
            to classes in the business tier. 
            </summary>
        </member>
        <member name="T:Franson.DAO.DAOFactory">
            <summary>
            Base class for all DAO factories.
            Manages the common DB connection.
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOFactory.m_dtLastUsage">
            <summary>
            Time stamp for last time connection was used.
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOFactory.m_tsTimeout">
            <summary>
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOFactory.m_listConnPool">
            <summary>
            List pooled DB connections.
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOFactory.m_listConnInUse">
            <summary>
            Keep track of active connection in thread.
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOFactory.m_rwLockConn">
            <summary>
            Loack for pooled and active connections
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOFactory.m_dicRoundTrip">
            <summary>
            Roundtrip resources.
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOFactory.m_iMaxConnections">
            <summary>
            Max 5 connections at the same time. 
            Controlled by MaxDatabaseConnections in App.Config
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOFactory.m_iBusyInterval">
            <summary>
            For how many ms a thread will wait for a connection to DB to be free until 
            DataBaseVeryBusy state is set to true. Default 5 seconds.
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOFactory.m_CreateDbConnector">
            <summary>
            Creates a DB Connector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOFactory.StartRoundTrip">
            <summary>
            Reserves a connection for a thread.  A call to <see cref="M:Franson.DAO.DAOFactory.EndRoundTrip(System.String)"/> releases the connection.
            This will limit the need for a thread processing an ASP page or a report/command from a
            device to compete for a connection each time a database access needs to be made.
            The connection should only be reserved for a short period of time, typically to process a one report form a device.
            The connection shoult NOT be reserved during a device connection life span.
            This means a RoundTrip is shorter than a NmeaConnection session. A roundtrip can contain several database transactions.
            </summary>
            <exception cref="T:Franson.DAO.ConnectionException">Could not get a free connection. Or thread already has roundtrip assigned.</exception>
            <exception cref="T:Franson.Threading.LockTimeoutException">Dead lock.</exception>
        </member>
        <member name="M:Franson.DAO.DAOFactory.EndRoundTrip(System.String)">
            <summary>
            Release round trip resources.
            </summary>
            <param name="strLabel">Label used for logging.</param>
            <exception cref="T:System.InvalidOperationException">Programming error.</exception>
        </member>
        <member name="M:Franson.DAO.DAOFactory.ResolveConnection">
            <summary>
            Re-opens DB connection if closed. Creates one more DB connection to the same database, if
            current DB connection is in use. 
            The returned connection is locked. <see cref="M:Franson.DAO.DAOFactory.ReleaseConnection(Franson.DAO.DAOConnector)"/> must be called on the returned connection after 
            finish using it. The interval between calling ResolveConnection, executing the SQL command, and calling
            ReleaseConnection should be kept as short as possible. Under no circumstances may a connection 
            returned from ResolveConnection be cached in an object for later use without calling ReleaseConenction first.
            Doing that will halt the system.
            </summary>
            <returns>An open connection ready to be used. The connection is locked. ReleaseConnection must be 
            called after executed command.</returns>
            <exception cref="T:Franson.DAO.ConnectionException">If thread needed to wait longer that <see cref="P:Franson.DAO.DAOFactory.BusyTimeInterval"/></exception>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock</exception>
        </member>
        <member name="M:Franson.DAO.DAOFactory.ReleaseConnection(Franson.DAO.DAOConnector)">
            <summary>
            Must be called after <see cref="M:Franson.DAO.DAOFactory.ResolveConnection"/> has been called, and the conn object is not longer needed.
            </summary>
            <param name="daoConn"></param>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock</exception>
            <exception cref="T:System.InvalidOperationException">Programming error.</exception>
        </member>
        <member name="M:Franson.DAO.DAOFactory.m_GetFromPool">
            <summary>
            Get a a connection from pool.
            </summary>
            <returns></returns>
            <exception cref="T:Franson.DAO.ConnectionException">On timeout</exception>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock</exception>
        </member>
        <member name="M:Franson.DAO.DAOFactory.ResetConnectionPool">
            <summary>
            Remove all connections from pool. Close and dispose all connections.
            </summary>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock</exception>
        </member>
        <member name="P:Franson.DAO.DAOFactory.MaxConnections">
            <summary>
            Maximum number of DB connections that will be used at the same time for one database.
            Controlled by "MaxDatabaseConnections" in App.config
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOFactory.BusyTimeInterval">
            <summary>
            For how many milliseconds a thread will wait for a connection to DB to be free until 
            DataBaseVeryBusy state is set to true. And an exception is thrown for the thread that got to wait this long
            The default value is 3000 milliseconds.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOFactory.DataBaseVeryBusy">
            <summary>
            Returns true if some thread failed to aquire a database connection less than 1 second ago.
            Unimportaint web service requests should return a "busy" message to client when this flag is set 
            to true. And similar to all non importaint database updates.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOFactory.DatabaseType">
            <summary>
            Get the database type from config file. E.g. "MySQL" or "MSSQL"
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOFactory.DatabaseOnline">
            <summary>
            Returns true if database is online. Returns false if database isn't online.
            This property can be useful when rebooting a computer for example, the database service can typically be slow to start.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">If config file is missing connection string.</exception>
        </member>
        <member name="P:Franson.DAO.DAOFactory.ConnectionLockCountForThread">
            <summary>
            Returns how many (recursive) locks a thread has on a connection.
            Used for debugging purposes. When a thread goes out of scope for example this value should be 0.
            </summary>
        </member>
        <member name="F:Franson.Install.DB.DAO.InstallDBDAOFactory.m_daoFactory">
            <summary>
            Dao factory object. 
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.InstallDBDAOFactory.GetModuleDAO">
            <summary>
            Abstract method to get a ModuleDAO object.
            </summary>
            <returns>A DBMangerDAO object.</returns>
        </member>
        <member name="M:Franson.Install.DB.DAO.InstallDBDAOFactory.GetAssemblyVersionCollectionDAO">
            <summary>
            Abstract method to get a AssemblyVersionCollectionDAOSQL object.
            </summary>
            <returns>A AssemblyVersionCollectionDAOSQL object.</returns>
        </member>
        <member name="F:Franson.Install.DB.DAO.InstallDBDAOFactory.m_nlog">
            <summary>
            The NLog object used for logging. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Install.DB.DAO.InstallDBDAOFactory.GetDAOFactory" -->
        <member name="P:Franson.Install.DB.DAO.InstallDBDAOFactory.Logger">
            <summary>
            Get the NLog object. 
            </summary>
        </member>
        <member name="T:Franson.Install.DB.DAO.InstallDBMSSQLDAOFactory">
            <summary>
            MSSQL DAO factory for Franson.Install
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.InstallDBMSSQLDAOFactory.GetModuleDAO">
            <summary>
            Returns <see cref="T:Franson.Install.DB.DAO.ModuleDAOMSSQL"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Install.DB.DAO.InstallDBMSSQLDAOFactory.GetAssemblyVersionCollectionDAO">
            <summary>
            Returns <see cref="T:Franson.Install.DB.DAO.ServerVersionCollectionDAOMSSQL"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Install.DB.DAO.InstallDBMySQLDAOFactory">
            <summary>
            MySQL DAO factory for Franson.Install
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.InstallDBMySQLDAOFactory.GetModuleDAO">
            <summary>
            Returns <see cref="T:Franson.Install.DB.DAO.ModuleDAOMySQL"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Install.DB.DAO.InstallDBMySQLDAOFactory.GetAssemblyVersionCollectionDAO">
            <summary>
            Returns <see cref="T:Franson.Install.DB.DAO.ServerVersionCollectionDAOMySQL"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Install.DB.DAO.ModuleDAOMSSQL">
            <summary>
            MSSQL DAO for Module.
            </summary>
        </member>
        <member name="T:Franson.Install.DB.DAO.ModuleDAOSQL">
            <summary>
            Module DAO
            </summary>
        </member>
        <member name="T:Franson.DAO.DAOItem">
            <summary>
            All single row DAO classes inherits from this calss.
            </summary>
        </member>
        <member name="T:Franson.DAO.DAOBase">
            <summary>
            Base class for most DAO classes.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Franson.DAO.DAOBase.m_bRemoved">
            <summary>
            True if this object has been removed. 
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOBase.m_daoConn">
            <summary>
            Will be set during call to Update
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOBase.m_listNewDataRows">
            <summary>
            Contains list of new rows for base table + derived tables.
            Created on demand
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOBase.#ctor(System.String)">
            <summary>
            All DAO classes, derives from this base class.
            </summary>
            <param name="strBaseTableName">Name of table that derived class uses for data storage. 
            Can be null and added later with <see cref="!:AddView"/> or <see cref="M:Franson.DAO.DAOBase.AddTable(System.String)"/>.</param>
        </member>
        <member name="M:Franson.DAO.DAOBase.BeginTransaction">
            <summary>
            Initiate a DB transaction. 
            All database operations in this thread will be part of this transaction until a commit or rollback is done.
            Only one transaction can be active per thread.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">If BeginException is called twice in the same thread.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">If no free connection to DB could be found in <see cref="P:Franson.DAO.DAOFactory.BusyTimeInterval"/> milliseconds</exception>
        </member>
        <member name="M:Franson.DAO.DAOBase.OnDataConcurrency(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Called if a concurrency problem occurs, so callers can decide how to handle the problem
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns>Returns true if problem is handled</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.Update">
            <summary>
            Writes changes to database.
            </summary>
            <exception cref="T:Franson.DAO.UpdateDBException">Error updating database</exception>
            <exception cref="T:Franson.DAO.ConnectionException">If no free connection to DB could be found in <see cref="P:Franson.DAO.DAOFactory.BusyTimeInterval"/> milliseconds</exception>
        </member>
        <member name="M:Franson.DAO.DAOBase.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Called when a new DataRow is inserted into DB
            Can typically be overriden by second order derived DAO objects who needs the ID
            to its help table. Check the name of the table e.Row.Table.TableName to determine
            which table the updated row belongs to.
            By default OnRowInserted() will catch an auto incremented ID from the DB.
            If the table has multiple primary keys, not an auto incremented integer as primary key, 
            or the primary key is not in the first column, then this method must be overridden.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.ExecuteNonQuery(System.String)">
            <summary>
            Execute non-query command. 
            </summary>
            <param name="strCommand">The command to execute.</param>
            <returns>Number of affected rows.</returns>
            <exception cref="T:Franson.DAO.ExecuteDBException">Error executing query.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">If no free connection to DB could be found in <see cref="P:Franson.DAO.DAOFactory.BusyTimeInterval"/> milliseconds</exception>
        </member>
        <member name="M:Franson.DAO.DAOBase.ExecuteScalar(System.String)">
            <summary>
            Executes a query and returns the value of the first column in the first row.
            </summary>
            <param name="strSQL">Query to be executed</param>
            <returns>Value of first column in first row of returned result.</returns>
            <exception cref="T:Franson.DAO.ExecuteDBException">Error executing query.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">If no free connection to DB could be found in <see cref="P:Franson.DAO.DAOFactory.BusyTimeInterval"/> milliseconds</exception>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetUpdateAdapter(System.String,Franson.DAO.DAOConnector)">
            <summary>
            Returns a new adapter configured to update named table.
            </summary>
            <param name="strTable">Name of table to update.</param>
            <returns>A new adapter object.</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.DerivedDataRow(System.String)">
            <summary>
            Returns first DataRow in derive-table of derived class. 
            Will also return DataRow for base class table.
            </summary>
            <param name="strTableName">Name of table that belongs to class</param>
            <returns>DataRow object</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.AddTable(System.String)">
            <summary>
            Add a new table to DataSet handled. If table is already added no action is taken.
            </summary>
            <param name="strTableName"></param>
            <returns>Returns the new tale with the strTableName</returns>
            <exception cref="T:Franson.DAO.ConnectionException">If no free connection to DB could be found in <see cref="P:Franson.DAO.DAOFactory.BusyTimeInterval"/> milliseconds</exception>
        </member>
        <member name="M:Franson.DAO.DAOBase.IsDerivedTableEmpty(System.String)">
            <summary>
            Reruns true if there is no data in specified help data row
            </summary>
            <param name="strTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.OnLoaded(System.String)">
            <summary>
            Called after Fill has been executed. By overriding OnLoaded() a derived DAO can typically
            implement all its data base access in one single "m_LoadByID()" method.
            A derived DAO typically loads its "help table" here.
            Or a DAO object cleared any cached data.
            </summary>
            <param name="strTableName"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.Fill(System.String)">
            <summary>
            Load data from database. Called by LoadBy...() and Search...() methods to execute SQL SELECT queries.
            Loads data into <see cref="P:Franson.DAO.DAOBase.BaseTable"/>
            </summary>
            <param name="strSelect">SQL query as a string</param>
            <exception cref="T:Franson.DAO.FillException"></exception>
        </member>
        <member name="M:Franson.DAO.DAOBase.Fill(System.String,System.String)">
            <summary>
            Load data from database. Called by LoadBy...() and Search...() methods to execute SQL SELECT queries.
            </summary>
            <param name="strSelect">SQL query as a string</param>
            <param name="strTableName">Table to fill</param>
            <exception cref="T:Franson.DAO.FillException">Could not execute SELECT statement</exception>
            <exception cref="T:Franson.DAO.ConnectionException">If no free connection to DB could be found in <see cref="P:Franson.DAO.DAOFactory.BusyTimeInterval"/> milliseconds</exception>
            <exception cref="T:System.InvalidOperationException">Programming error.</exception>
            <exception cref="!:LockTimeoutException">Dead lock.</exception>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetBoundingBox(System.Data.DataRow)">
            <summary>
            Gets data from data row and returns as bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetBoundingBox">
            <summary>
            Gets data from data record and returns as bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetBoundingBox(Franson.Geo.BoundingBox)">
            <summary>
            Set bounding box data to current row.
            </summary>
            <param name="bbBag"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetBoundingBox(System.Data.DataRow,Franson.Geo.BoundingBox)">
            <summary>
            Set bounding box to specified row.
            </summary>
            <param name="row"></param>
            <param name="bbBag"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetTrackPoint">
            <summary>
            Creates a <see cref="T:Franson.Geo.TrackPoint"/> object from fields in data row.
            The fields should be named "longitude" (double, degrees), "latitude" (double, degrees), 
            "altitude" (double, meters), "ground_speed" (double, m/s), "heading" (double, degrees), 
            "time_stamp" (datetime, UTC), optional "milliseconds" (int, milliseconds),
            optional "valid"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetTrackPoint(System.Data.DataRow)">
            <summary>
            Gets data from data record and returns as track point.
            </summary>
            <param name="dataRow"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetTrackPoint(System.Data.DataRow,Franson.Geo.TrackPoint)">
            <summary>
            See <see cref="M:Franson.DAO.DAOBase.GetTrackPoint"/> for field definitions.
            </summary>
            <param name="row"></param>
            <param name="tp"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetVersion">
            <summary>
            Returns a <see cref="T:System.Version"/> object from "major_version" and "minor_version" field.
            </summary>
            <returns>Version information as a <see cref="T:System.Version"/> object</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetVersion(System.Version)">
            <summary>
            Sets "major_version" and "minor_version" in DB row.
            </summary>
            <param name="ver"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetDouble(System.String,System.String)">
            <summary>
            Return value of field as double
            </summary>
            <param name="strTableName">Name of table</param>
            <param name="strFieldName">Name of field</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetDouble(System.String)">
            <summary>
            Return field from base table as double
            </summary>
            <param name="strFieldName">Name of field to return</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetDouble(System.String,System.Data.DataRow)">
            <summary>
            Return a field from a <see cref="!:DateRow"/> as double.
            </summary>
            <param name="strFiledName">Name of field</param>
            <param name="row"><see cref="T:System.Data.DataRow"/></param>
            <returns>Value</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.m_GetDouble(System.Object)">
            <summary>
            Converts item to double
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetDouble(System.String,System.String,System.Double)">
            <summary>
            Set field in DB to a double.
            </summary>
            <param name="strTableName">Table</param>
            <param name="strFieldName">Field name</param>
            <param name="dblValue">Value to set field to.</param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetDouble(System.String,System.Double)">
            <summary>
            Set field in DB to a double.
            </summary>
            <param name="strFieldName">Field name</param>
            <param name="dblValue">Value to set field to.</param>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetUtcDateTimeWithMilliSeconds(System.String,System.String,System.String)">
            <summary>
            Get DB datetime as .NET DateTime. Milliseconds is fetched from a separate field since MySQL 4.1 does not support
            milliseconds in its internal datetime type.
            </summary>
            <param name="strTableName">Table name.</param>
            <param name="strFieldName">Field with datetime value</param>
            <param name="strMilliSecondsFiledName">Field with milliseconds</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetUtcDateTimeWithMilliSeconds(System.String,System.String,System.Data.DataRow)">
            <summary>
            Get DB datetime as .NET DateTime. Milliseconds is fetched from a separate field since MySQL 4.1 does not support
            milliseconds in its internal datetime type.
            </summary>
            <param name="strFieldName">Field with datetime value</param>
            <param name="strMilliSecondsFiledName">Field with milliseconds</param>
            <param name="row">Row to get field from</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetUtcDateTimeWithMilliSeconds(System.String,System.String)">
            <summary>
            Get DB datetime as .NET DateTime. Milliseconds is fetched from a separate field since MySQL 4.1 does not support
            milliseconds in its internal datetime type.
            </summary>
            <param name="strFieldName">Field with datetime value</param>
            <param name="strMilliSecondsFiledName">Field with milliseconds</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetUtcDateTime(System.String,System.String)">
            <summary>
            Get DB datetime as .NET DateTime. Note MySQL 4.1 does not support milliseconds!
            </summary>
            <param name="strTableName">Table name.</param>
            <param name="strFieldName">Field name</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetUtcDateTime(System.String)">
            <summary>
            Get DB datetime as .NET DateTime. Note MySQL 4.1 does not support milliseconds!
            </summary>
            <param name="strFieldName">Field name in base table.</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetUtcDateTime(System.String,System.Data.DataRow)">
            <summary>
            Get DB datetime as .NET DateTime. Note MySQL 4.1 does not support milliseconds!
            </summary>
            <param name="strFieldName">Field name</param>
            <param name="row">Row to get field from</param>
            <returns>.NET DateTime</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.m_GetUtcDateTime(System.Object,System.Object)">
            <summary>
            Returns a DB time as a .NET UTC DateTime
            </summary>
            <param name="item">Database object to be converted to a .NET DateTime structure</param>
            <returns>A DateTime structure with DateTimeKind set to UTC</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetUtcDateTimeWithMilliseconds(System.Data.DataRow,System.String,System.String,System.DateTime)">
            <summary>
            Sets .NET DateTime value to DB. Since MySQL 4.1 doesn't support milliseconds, it is stored in a separate field.
            </summary>
            <param name="row"><see cref="T:System.Data.DataRow"/> to set field in</param>
            <param name="strFieldName">Field for datetime value</param>
            <param name="strMillisecondsFieldName">Field for milliseconds</param>
            <param name="dtValue"><see cref="T:System.DateTime"/></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetUtcDateTimeWithMilliseconds(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Sets .NET DateTime value to DB. Since MySQL 4.1 doesn't support milliseconds, it is stored in a separate field.
            </summary>
            <param name="strTableName">Table</param>
            <param name="strFieldName">Field for datetime value</param>
            <param name="strMillisecondsFieldName">Field for milliseconds</param>
            <param name="dtValue"><see cref="T:System.DateTime"/></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetUtcDateTimeWithMilliseconds(System.String,System.String,System.DateTime)">
            <summary>
            Sets .NET DateTime value to DB. Since MySQL 4.1 doesn't support milliseconds, it is stored in a separate field.
            </summary>
            <param name="strFieldName">Field for datetime value</param>
            <param name="strMillisecondsFieldName">Field for milliseconds</param>
            <param name="dtValue"><see cref="T:System.DateTime"/></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetUtcDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Saves UTC value of dtValue
            </summary>
            <param name="strTableName"></param>
            <param name="strFieldName"></param>
            <param name="dtValue"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetUtcDateTime(System.String,System.DateTime)">
            <summary>
            Sets UTC value of dtValue
            </summary>
            <param name="strFieldName"></param>
            <param name="dtValue"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetUtcDateTime(System.Data.DataRow,System.String,System.DateTime)">
            <summary>
            Sets UTC value of dtValue
            </summary>
            <param name="strFieldName"></param>
            <param name="dtValue"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetString(System.String,System.String)">
            <summary>
            Get field from specified table as string.
            </summary>
            <param name="strTableName">Table name</param>
            <param name="strFieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetString(System.String)">
            <summary>
            Get field from base table as string.
            </summary>
            <param name="strFieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetString(System.String,System.Data.DataRow)">
            <summary>
            Get field from row as string.
            </summary>
            <param name="strFieldName">Field name</param>
            <param name="row">Data row</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetString(System.Data.DataRow,System.String,System.String)">
            <summary>
            Trims string and sets value to specified row/field.
            </summary>
            <param name="row"></param>
            <param name="strFieldName"></param>
            <param name="strValue"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetString(System.String,System.String,System.String)">
            <summary>
            Trims string and sets field in specified table as string.
            </summary>
            <param name="strTableName">Table name.</param>
            <param name="strFieldName">Field name.</param>
            <param name="strValue">Value</param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetString(System.String,System.String)">
            <summary>
            Trims string and sets specified field in <see cref="P:Franson.DAO.DAOBase.BaseDataRow"/>
            </summary>
            <param name="strFieldName"></param>
            <param name="strValue"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetInteger(System.String,System.Data.DataRow)">
            <summary>
            Return specified field as integer. Can cast from int16, int32 and int64
            </summary>
            <param name="strFieldName"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetIntegerNull(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            Set integer value to specified row/field. If value is zero, null will be set in the database.
            </summary>
            <param name="row"></param>
            <param name="strFiledName"></param>
            <param name="iValue"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetIntegerNull(System.String,System.String,System.Int32)">
            <summary>
            Sets integer to field in first row of specified table. Sets null if value is zero.
            </summary>
            <param name="strTableName"></param>
            <param name="strFieldName"></param>
            <param name="iValue"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetIntegerNull(System.String,System.Int32)">
            <summary>
            Sets integer to specified field in base table. Sets null if value is zero.
            </summary>
            <param name="strFieldName"></param>
            <param name="iValue"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetInteger(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            Set integer value to specified row/field.
            </summary>
            <param name="row"></param>
            <param name="strFieldName"></param>
            <param name="iValue"></param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetInteger(System.String,System.String,System.Int32)">
            <summary>
            Sets integer value in named table and field.
            </summary>
            <param name="strTableName">Table to set value in.</param>
            <param name="strFieldName">Name of field</param>
            <param name="iValue">Integer value</param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetInteger(System.String,System.Int32)">
            <summary>
            Set named field in base table to a integer value.
            </summary>
            <param name="strFieldName">Name of field</param>
            <param name="iValue">Integer value</param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetValueDataAndType(System.Object,System.String,System.String)">
            <summary>
            Saves value and type to DB. The string representation of the value may not be more than 255 characters.
            int, string, double, bool and <see cref="T:System.DateTime"/> (UTC) are supported. Override this method if you 
            want to support more types. DateTime will always be converted to UTC before it is stored in DB.
            </summary>
            <param name="oValue">Value to write to DB</param>
            <param name="strValueColumn">Name of the varchar column containgin the value. If null 'value_data' is used.</param>
            <param name="strTypeColumn">Name of column containgin the Type. If null 'value_type' is used.</param>
        </member>
        <member name="M:Franson.DAO.DAOBase.SetValueDataAndType(System.Data.DataRow,System.Object,System.String,System.String)">
            <summary>
            Saves value and type to DB. The string representation of the value may not be more than 255 characters.
            int, string, double, bool and <see cref="T:System.DateTime"/> (UTC) are supported. Override this method if you 
            want to support more types. DateTime will always be converted to UTC before it is stored in DB.
            </summary>
            <param name="row">DataRow holding data. "value_data" contains a sting representation, and "value_type" the type data.</param>
            <param name="oValue">Value to write to DB</param>
            <param name="strValueColumn">Name of the varchar column containgin the value. If null 'value_data' is used.</param>
            <param name="strTypeColumn">Name of column containgin the Type. If null 'value_type' is used.</param>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetValueData(System.Type,System.String,System.String)">
            <summary>
            Returns a typed value as int, double, string, bool or DateTime.
            To support more types override this method. 
            </summary>
            <param name="strCastType">Cast returned value to this type. null to keep type from database.</param>
            <param name="strValueColumn">Name of the varchar column containgin the value. If null 'value_data' is used.</param>
            <param name="strTypeColumn">Name of column containgin the Type. If null 'value_type' is used.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.GetValueData(System.Data.DataRow,System.Type,System.String,System.String)">
            <summary>
            Returns a typed value as int, double, string, bool or DateTime.
            To support more types override this method. 
            </summary>
            <param name="row">Row containg data</param>
            <param name="strCastType">Cast returned value to this type. null to keep type from database.</param>
            <param name="strValueColumn">Name of the varchar column containgin the value. If null 'value_data' is used.</param>
            <param name="strTypeColumn">Name of column containgin the Type. If null 'value_type' is used.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.IsFieldNull(System.Data.DataRow,System.String)">
            <summary>
            Returns true if the field is null
            </summary>
            <param name="row">DataRow</param>
            <param name="strFieldName">Field to check</param>
            <returns>true if field is null.</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.EscapeString(System.String)">
            <summary>
            Should be used by all string that are used in WHERE = 'something' statements
            Will escape ' to ''.
            DAO classes for DB-engines that needs more of different escaping must override this method
            todo: ? exactly same method exists in DAOReaderBase (should extract and put in separate module)
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.EscapeLikeString(System.String)">
            <summary>
            Will use \ as an escape characters in LIKE strings.
            Must be overridden if LIKE escape needs to be handled in some other way.
            </summary>
            <param name="strValue">String to escape</param>
            <returns>Escaped string</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.EncryptID(System.Int32)">
            <summary>
            Encrypts an integer ID to a string. This string can typically be returned to a 
            public environment like a browser. Or a URL in an email.
            Use <see cref="M:Franson.DAO.DAOBase.DecryptID(System.String)"/> to convert the string back to an integer ID again.
            </summary>
            <param name="iID">ID to be encrypted.</param>
            <returns>Resulting string</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.DecryptID(System.String)">
            <summary>
            Takes a string generated by <see cref="M:Franson.DAO.DAOBase.EncryptID(System.Int32)"/> and decrypts it back to an integer
            </summary>
            <param name="strIdCode">Encrypted string.</param>
            <returns>Decrypted ID</returns>
            <exception cref="T:Franson.DAO.IdDecryptException"></exception>
        </member>
        <member name="M:Franson.DAO.DAOBase.BuildWhereInSQLString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Method to build SQL syntax string of an array of vales. E.g. "(1,2,3,4)". string values will be escaped.
            </summary>
            <param name="iArr"></param>
            <returns>string in format like (1,2,3,4)</returns>
        </member>
        <member name="M:Franson.DAO.DAOBase.BuildDateTimeString(System.DateTime)">
            <summary>
            Returns a string in the format 'YYYY-MM-DD HH:MM:SS'. Note that the single quotes are included.
            </summary>
            <param name="dtUTC"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.DAO.DAOBase.IsBaseRemoved">
            <summary>
            True if this object has been removed. The property is set after a call to <see cref="M:Franson.DAO.DAOBase.Update"/>
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOBase.ConcurrencyOption">
            <summary>
            How to handle update conflicts in database.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOBase.DataSet">
            <summary>
            DataSet for all tables in this DAO object.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOBase.BaseTable">
            <summary>
            The DataTable for the first base table of this DAO object
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOBase.BaseTableName">
            <summary>
            Name of first base table of this DAO object
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOBase.BaseDataRow">
            <summary>
            First row in base table of this DAO object
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOBase.DataTableUpdateOrder">
            <summary>
            Specifies in which order tables should be updated
            
            If not all tables in DataSet specified here, we will update in the order tables are added by the AddTable method
            </summary>
            <param name="table"></param>
            <param name="iPrio"></param>
        </member>
        <member name="P:Franson.DAO.DAOBase.IsBaseNew">
            <summary>
            Returns true if row from base table doesn't exist in the database (yet)
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOBase.IsBaseEmpty">
            <summary>
            Returns true if the DataTable for the base table doesn't contain any rows
            </summary>
        </member>
        <member name="E:Franson.DAO.DAOBase.Loaded">
            <summary>
            This event is intended for BO's that wants to track when a DAO has (re)loaded its values from the database.
            Event is fired after a DAO.LoadBy() or DAO.Search() method has finished executing successfully, as part of DAOBase.OnReload().
            A derived BO who wants to know if any of its base classes' LoadBy() methods has been called, and
            needs to clean up any cached variables.
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOItem.#ctor(System.String)">
            <summary>
            Create DAOItem
            </summary>
            <param name="strDefaultTableName"></param>
        </member>
        <member name="M:Franson.DAO.DAOItem.LoadByID(System.Int32)">
            <summary>
            All DAO classes must implement LoadByID(). This loads an object from the database by its primary ID
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:Franson.DAO.DAOItem.Remove">
            <summary>
            Flag item for removal. Will be removed on <see cref="!:Update"/>
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOItem.FindRow(System.String,System.Predicate{System.Data.DataRow})">
            <summary>
            Finds a row.
            </summary>
            <param name="strTableName"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.DAO.DAOItem.ID">
            <summary>
            The ID of this object. You need to override this method if ID is not found at the first column in the DB
            Or if it isn't an integer.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOItem.BOType">
            <summary>
            The type of the base object.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOItem.IsBaseDataRowDeleted">
            <summary>
            Returns true if BaseDateRow has row state 'Deleted'
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.#ctor">
            <summary>
            Create Module DAO
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.CreateVersionTable">
            <summary>
            Override to create version table.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.IsInstalled(Franson.Install.DB.ModuleVersion)">
            <summary>
            Checks if specified ModuleVersion is installed in DB.
            </summary>
            <param name="modVer">ModuleVersion to check</param>
            <returns>True if installed.</returns>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.Fill(System.String,System.String)">
            <summary>
            Fills table and makes sure "version" table is created.
            </summary>
            <param name="strSelect"></param>
            <param name="strTableName"></param>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.Update">
            <summary>
            Saves module information to version table. Creates version table if it does not exist.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.GetModuleVersions">
            <summary>
            Returns all installed modules as an array. Information read from "version" table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.AddModuleToDatabase(Franson.Install.DB.ModuleVersion)">
            <summary>
            Saves information about installed module to database version table.
            </summary>
            <param name="moduleVersion">Module that has been installed.</param>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.AddTable(System.String)">
            <summary>
            Tries to create version table if there is an exception when adding it.
            </summary>
            <param name="strTableName">Name of table to add</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.GetStringFromRow(System.Object)">
            <summary>
            Get the string from a row object. 
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            This table does not have any auto increament column.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOMSSQL.CreateVersionTable">
            <summary>
            Creates "version" table.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOMSSQL.LoadByID(System.Int32)">
            <summary>
            Throws expection.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="T:Franson.Install.DB.DAO.ModuleDAOMySQL">
            <summary>
            MySQLO DAO object for Module.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOMySQL.CreateVersionTable">
            <summary>
            Creates "version" table.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ModuleDAOMySQL.LoadByID(System.Int32)">
            <summary>
            Not implemented.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="T:Franson.Install.DB.DAO.ServerVersionCollectionDAOMSSQL">
            <summary>
            MSSQL version
            </summary>
        </member>
        <member name="T:Franson.Install.DB.DAO.ServerVersionCollectionDAOSQL">
            <summary>
            ServerVersionCollection DAO
            </summary>
        </member>
        <member name="T:Franson.DAO.DAOList">
            <summary>
            Base class for all DAO list/collection classes
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOList.m_listDAOItems">
            <summary>
            Dictionary of cached DAOItems created by this[]
            </summary>
        </member>
        <member name="F:Franson.DAO.DAOList.m_arrBOTypeFilter">
            <summary>
            Can be set to the item bo_type of derived collections. E.g. "GpsGate.Online.VehicleGroup"
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOList.#ctor(System.String)">
            <summary>
            Create DAOList
            </summary>
            <param name="concurrencyOption"></param>
            <param name="connSQL"></param>
            <param name="strDefaultTableName"></param>
        </member>
        <member name="M:Franson.DAO.DAOList.CacheEmpty">
            <summary>
            Returns true if the cache is created and it has been flushed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOList.GetItemType">
            <summary>
            Must be overridden by and return the type of the class that is contained in this collection.
            E.g. GroupCollectionDAOMySQL returns typeof(GroupDAOMySQL)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOList.CreateCollection(System.Data.DataRow[])">
            <summary>
            override this method to implement it. Throws an exception by default.
            </summary>
            <param name="dataRows"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Franson.DAO.DAOList.SetBOTypeFilter(System.String[])">
            <summary>
            Sets an array of bo_types all queries should be restricted to.
            </summary>
            <param name="arrBOType">Array of bo_types</param>
        </member>
        <member name="M:Franson.DAO.DAOList.BuildSQLfromBOfilter(System.String)">
            <summary>
            Builds a condition that should be set in the WHERE part of the SQL query to constrain the query to
            a specific list of BO types.
            </summary>
            <param name="strPrefix">Will append this string as a prefix.</param>
            <returns></returns>
        </member>
        <member name="P:Franson.DAO.DAOList.BOTypeObject">
            <summary>
            Returns the .NET <see cref="T:System.Type"/> for the BOList.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ServerVersionCollectionDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ServerVersionCollectionDAOSQL.LoadAll">
            <summary>
            Load all contant from "server_version"
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ServerVersionCollectionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Install.DB.DAO.ServerVersionCollectionDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DAO.ServerVersionCollectionDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Install.DB.DBViewer">
            <summary>
            Used for simple checks of database schema.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.DBViewer.#ctor">
            <summary>
            Create new object.
            </summary>
        </member>
        <member name="P:Franson.Install.DB.DBViewer.UserTableExists">
            <summary>
            Checks if the "users" table exists in the database.
            </summary>
        </member>
        <member name="T:Franson.Install.DB.InstallException">
            <summary>
            Base class for all install exceptions.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.InstallException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="M:Franson.Install.DB.InstallException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="T:Franson.Install.DB.ModuleException">
            <summary>
            Base class for all module releated install exceptions.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.ModuleException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="M:Franson.Install.DB.ModuleException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="T:Franson.Install.DB.MissingDependentModuleException">
            <summary>
            Module could not be installed because dependency was missing.
            This is an error in the install XML files.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.MissingDependentModuleException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="M:Franson.Install.DB.MissingDependentModuleException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="T:Franson.Install.DB.ModuleExecutionException">
            <summary>
            Error when trying to execute module installation. 
            Probably an error in the database setup or SQL install scripts.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.ModuleExecutionException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="M:Franson.Install.DB.ModuleExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="T:Franson.Install.DB.ModuleNotFoundException">
            <summary>
            This exception is thrown if the a specified module cannot be found. 
            </summary>
        </member>
        <member name="M:Franson.Install.DB.ModuleNotFoundException.#ctor(System.String)">
            <summary>
            Create exeption
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Install.DB.ModuleParseErrorException">
            <summary>
            This class is thrown if there is a parsing error reading the .xml-file. 
            </summary>
        </member>
        <member name="T:Franson.Install.DB.PackageException">
            <summary>
            Base class for exceptions that relates to installing a package.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.PackageException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="M:Franson.Install.DB.PackageException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="T:Franson.Install.DB.PackageNotFoundException">
            <summary>
            This package is thrown if the package file is not found. 
            </summary>
        </member>
        <member name="T:Franson.Install.DB.Module">
            <summary>
            Handles install of one module.
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Module.m_bForce">
            If true the installation will be forced, i.e. this version
            will be installed even if there is a newer version installed.
            This module are allowed to contain drop commands.
        </member>
        <member name="F:Franson.Install.DB.Module.m_DBModuleDAO">
            <summary>
            The DAO object that do all database access. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Module.m_strModuleFilename">
            <summary>
            The filename of the module. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Module.m_nlog">
            <summary>
            The NLog object used for logging. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Module.m_strTargetDB">
            <summary>
            The target db. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Module.m_strPath">
            <summary>
            The path to the package file. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Install.DB.Module.#ctor(System.String,System.Boolean,System.String)" -->
        <member name="F:Franson.Install.DB.Module.m_bIsInstalled">
            <summary>
            Set to true when we know this module is installed.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.Module.Install(System.Boolean)">
            <summary>
            Executes a .sql-module. 
            </summary>
            <exception cref="T:Franson.Install.DB.MissingDependentModuleException">Dependency error.</exception>
            <exception cref="T:Franson.Install.DB.ModuleExecutionException">Error when executing install script.</exception>
            <exception cref="T:Franson.Install.DB.PackageException">Error in package syntax, or missing SQL file.</exception>
        </member>
        <member name="M:Franson.Install.DB.Module.CheckDependencies(Franson.Install.DB.ModuleVersion[])">
            <summary>
            Check the dependencies relative to the modules in packageModules
            plus the modules registered in the database. 
            </summary>
            <param name="packageModules"></param>
            <returns>Returns true if dependency requirements are met.</returns>
        </member>
        <member name="M:Franson.Install.DB.Module.CheckDependencies">
            <summary>
            Check the dependencies.
            The versions found in the database must be equal to
            or higher then the dependencies of this module. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Install.DB.Module.m_readModuleVersionFromElement(System.String)">
            <summary>
            Read the install element of the xml-file
            </summary>
            <param name="strScriptName"></param>
            <returns>A <see cref="T:Franson.Install.DB.ModuleVersion"/> object. </returns>
            <exception cref="!: ">ArgumentException.</exception>
        </member>
        <member name="P:Franson.Install.DB.Module.IsInstalled">
            <summary>
            Checks if this module already is installed in the database
            </summary>
            <returns>Returns true if already installed.</returns>
        </member>
        <member name="P:Franson.Install.DB.Module.Version">
            <summary>
            Get the version if this module. 
            </summary>
        </member>
        <member name="T:Franson.Install.DB.ModuleVersion">
            <summary>
            The module version describes the module and is stored in .xml-file and in the database .
            </summary>
        </member>
        <member name="F:Franson.Install.DB.ModuleVersion.m_version">
            <summary>
            The version of the module.
            </summary>
        </member>
        <member name="F:Franson.Install.DB.ModuleVersion.m_strModuleName">
            <summary>
            The name of the module. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.ModuleVersion.m_nlog">
            <summary>
            The NLog object used for logging. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.ModuleVersion.m_strDescription">
            <summary>
            A text describing the module. 
            </summary>
        </member>
        <member name="M:Franson.Install.DB.ModuleVersion.SQLFileName(System.String)">
            <summary>
            Gte name of SQL file name which contains install statements for specified database target.
            </summary>
            <param name="strTargetDB">Target database. E.g. "MSSQL" or "MySQL"</param>
        </member>
        <member name="M:Franson.Install.DB.ModuleVersion.CompareTo(Franson.Install.DB.ModuleVersion)">
            <summary>
            Compares this instance with obj. 
            </summary>
            <param name="obj"></param>
            <returns>Returns 0 if equal. -1 if obj if of wrong type or ModuleName differ. Compares version if module name are equal.</returns>
        </member>
        <member name="M:Franson.Install.DB.ModuleVersion.Equals(System.Object)">
            <summary>
            Determines wheatear obj equals this. 
            </summary>
            <param name="obj"></param>
            <returns>Returns true if version and module name are equal.</returns>
        </member>
        <member name="M:Franson.Install.DB.ModuleVersion.GetHashCode">
            <summary>
            Get a hash code based on the version and module name. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Install.DB.ModuleVersion.LoadFromXmlNode(System.Xml.XmlNode)">
            <summary>
            Extract the ModuleVersion from a node. 
            </summary>
            <param name="node">An XmlNode.</param>
            <returns>The extracted ModuleVersion.</returns>
        </member>
        <member name="P:Franson.Install.DB.ModuleVersion.Description">
            <summary>
             A text describing the module. 
            </summary>
        </member>
        <member name="P:Franson.Install.DB.ModuleVersion.ModuleName">
            <summary>
            The name of the module. 
            </summary>
        </member>
        <member name="P:Franson.Install.DB.ModuleVersion.Version">
            <summary>
            The version of the module. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.ModuleVersionCollection.m_DBModuleDAO">
            <summary>
            The DAO object that do all database access. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.ModuleVersionCollection.m_list">
            <summary>
            An ArrayList that contains the Mo
            </summary>
        </member>
        <member name="F:Franson.Install.DB.ModuleVersionCollection.m_nlog">
            <summary>
            The NLog object used for logging. 
            </summary>
        </member>
        <member name="M:Franson.Install.DB.ModuleVersionCollection.#ctor">
            <summary>
            Create a new module engine. 
            </summary>
            <param name="bDropAllowed">If true, the module is allowed to contain statements.</param>
        </member>
        <member name="M:Franson.Install.DB.ModuleVersionCollection.LoadAllVersion">
            <summary>
            Load all registered version from the database. 
            </summary>
        </member>
        <member name="M:Franson.Install.DB.ModuleVersionCollection.LoadLatestUniqueVersions">
            <summary>
            Load the 
            </summary>
        </member>
        <member name="M:Franson.Install.DB.ModuleVersionCollection.ToDataSet">
            <summary>
            Returns the dataset representation of this object. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Install.DB.Package">
            <summary>
            Handles installation of a package.
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Package.m_strPackageFileName">
            <summary>
            The path where the package resides.
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Package.m_strPkgName">
            <summary>
            The name of the package. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Package.m_strPath">
            <summary>
            The path to the package file. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Package.m_nlog">
            <summary>
            The NLog object used for logging. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Package.m_strTargetDB">
            <summary>
            The target db. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.Package.m_strDescription">
            <summary>
            A text describing the module. 
            </summary>
        </member>
        <member name="M:Franson.Install.DB.Package.#ctor(System.String,System.String)">
            <summary>
            Create a package object. 
            </summary>
            <param name="strPackageFileName">The file name with full patch of the package file.</param>
            <param name="strTargetDB">Database type.</param>
            <exception cref="!: ">ArgumentException. This exception is thrown if a empty strPackageFileName is give.</exception>
        </member>
        <member name="F:Franson.Install.DB.Package.m_bDependenciesOK">
            <summary>
            Set to true when we know this package can be installed.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.Package.CheckDependencies">
            <summary>
            Check if this package can be installed. It checks previously installed modules to see if this
            package's dependencies are met.
            </summary>
            <returns>Returns true if package can be installed.</returns>
        </member>
        <member name="M:Franson.Install.DB.Package.GetPackageModules">
            <summary>
            Get the modules for a given package file. The modules may or may not be installed.
            And they may or may not be installable.
            </summary>
            <param name="strPackageFile">The package file.</param>
            <returns>A string array with modules.</returns>
        </member>
        <member name="F:Franson.Install.DB.Package.m_bIsInstalled">
            <summary>
            Set to true when we know this package is installed.
            </summary>
        </member>
        <member name="M:Franson.Install.DB.Package.Install(System.Boolean)">
            <summary>
            Installs the selected package. 
            </summary>
        </member>
        <member name="M:Franson.Install.DB.Package.ToString">
            <summary>
            Returns name of package.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Install.DB.Package.Description">
            <summary>
             A text describing the module. 
            </summary>
        </member>
        <member name="P:Franson.Install.DB.Package.Name">
            <summary>
            The name of the package. 
            </summary>
        </member>
        <member name="P:Franson.Install.DB.Package.IsInstalled">
            <summary>
            Checks if this package already is installed.
            </summary>
            <returns>Returns true if package is installed.</returns>
        </member>
        <member name="T:Franson.Install.DB.PackageManager">
            <summary>
            Handles a set of Packages
            </summary>
        </member>
        <member name="F:Franson.Install.DB.PackageManager.m_strPath">
            <summary>
            The path where to look for packages. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.PackageManager.m_nlog">
            <summary>
            The NLog object used for logging. 
            </summary>
        </member>
        <member name="F:Franson.Install.DB.PackageManager.m_strTargetDB">
            <summary>
            The target db. 
            </summary>
        </member>
        <member name="M:Franson.Install.DB.PackageManager.#ctor(System.String,System.String)">
            <summary>
            Create packet manager.
            </summary>
            <param name="strPath">Path to folder containing packets</param>
            <param name="strTargetDB">Traget database. E.g. "MySQL" or "MSSQL". Same as "targetDB" value in "script" tag
            in module XML file.</param>
        </member>
        <member name="M:Franson.Install.DB.PackageManager.InstallPackages(System.String)">
            <summary>
            Installs all not yet installed packages in path.
            To install one package at a time and get a progress bar use <see cref="M:Franson.Install.DB.PackageManager.GetAvailablePackages"/>
            </summary>
            <param name="strPath"></param>
            <exception cref="T:Franson.Install.DB.PackageException"></exception>
        </member>
        <member name="M:Franson.Install.DB.PackageManager.GetUnavailablePackages">
            <summary>
            Returns an array of packets that are found on disk, but cannot yet be installed because
            other packets needs to be installed first to resolve dependencies.
            </summary>
            <returns>Array of packets to be installed later.</returns>
            <exception cref="T:Franson.Install.DB.PackageNotFoundException"></exception>
            <exception cref="T:Franson.Install.DB.PackageException"></exception>
        </member>
        <member name="M:Franson.Install.DB.PackageManager.GetAvailablePackages">
            <summary>
            Returns an array of all packages that can be installed (are available.
            <see cref="M:Franson.Install.DB.PackageManager.GetUnavailablePackages"/> returns an array of all packets that cannot be installed
            due to dependencies.
            </summary>
            <returns>Array of installable packets</returns>
            <exception cref="T:Franson.Install.DB.PackageNotFoundException"></exception>
            <exception cref="T:Franson.Install.DB.PackageException"></exception>
        </member>
        <member name="T:Franson.Install.DB.ServerVersionCollection">
            <summary>
            Manage server_version table.
            List and add new versions
            </summary>
        </member>
        <member name="T:Franson.DAO.BOList">
            <summary>
            Base class for all collection BO classes.
            </summary>
        </member>
        <member name="T:Franson.DAO.BOBase">
            <summary>
            Base class for objects stored in database.
            </summary>
            <threadsafety instance="false" static="true"/>
        </member>
        <member name="T:Franson.DAO.BOType">
            <summary>
            A class that inherits from this class can be created from a type string using <see cref="!:BOItem.CreateObject"/>
            </summary>
        </member>
        <member name="F:Franson.DAO.BOBase.DefaultConcurrencyOption">
            <summary>
            Default mode for how database conflicts are handled
            </summary>
        </member>
        <member name="F:Franson.DAO.BOBase.m_nlog">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="F:Franson.DAO.BOBase.m_dicRegisteredBOTypes">
            <summary>
            Registered BOTypes
            </summary>
        </member>
        <member name="M:Franson.DAO.BOBase.Update">
            <summary>
            Updates the DAO. Will create a record(s) in the database if new, update the record if changes are made
            to an existing dataset, and deleted from the DB if the BO was deleted.
            </summary>
            <exception cref="T:Franson.DAO.UpdateDBException">Error updating database</exception>
        </member>
        <member name="M:Franson.DAO.BOBase.BeginTransaction">
            <summary>
            All database operations in this thread will be part of this transaction until a commit or rollback is done.
            Only one transaction can be active per thread.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Franson.DAO.BOBase.m_bScanDone">
            <summary>
            Set to true if we have scanned for types.
            </summary>
        </member>
        <member name="M:Franson.DAO.BOBase.m_ScanTypes">
            <summary>
            Scan folder and sub folders to map bo_type column in database to real .NET types.
            </summary>
        </member>
        <member name="M:Franson.DAO.BOBase.m_FindBoTypes(System.String)">
            <summary>
            Find all non abstract classes that inherits from <see cref="T:Franson.DAO.BOType"/>.
            </summary>
            <param name="strSearchPath"></param>
        </member>
        <member name="M:Franson.DAO.BOBase.m_FindFiles(System.String,System.String,System.Boolean)">
            <summary>
            Method traversing files on the disk.
            </summary>
            <param name="dir">Start path</param>
            <param name="match">Search pattern E.g *.dll</param>
            <param name="bRecursive">Recursive or not.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.BOBase.CreateObject(System.String)">
            <summary>
            Create object from string without constructor. Object must inherit from <see cref="T:Franson.DAO.BOType"/>
            </summary>
            <param name="strBOType"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.BOBase.CreateObject(System.String,System.Object[])">
            <summary>
            Creates from a specified type string. This type string is usually read from the bo_field in a database table.
            </summary>
            <param name="strBOType">Name of type to create</param>
            <param name="arrArguments">Arguments to constructor.</param>
            <returns>New instance of the specified type</returns>
            <exception cref="T:Franson.DAO.NotFoundException">The type was not registered.</exception>
        </member>
        <member name="M:Franson.DAO.BOBase.RegisterBOType(System.Type)">
            <summary>
            Register Types which CreateObject can instantiate
            </summary>
            <param name="BOType"></param>
            <exception cref="T:System.NullReferenceException">Argument is null</exception>
        </member>
        <member name="M:Franson.DAO.BOBase.IsRegistered(System.Type)">
            <summary>
            Check if the type is registered
            </summary>
            <param name="BOType"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.BOBase.IsRegistered(System.String)">
            <summary>
            Check if the type is registered
            </summary>
            <param name="BOType">Type to check</param>
            <returns>Returns true if type is registered</returns>
        </member>
        <member name="M:Franson.DAO.BOBase.ClearRegisteredTypes">
            <summary>
            Clear the list of registered type
            </summary>
        </member>
        <member name="M:Franson.DAO.BOBase.SetDaoObject(Franson.DAO.DAOBase)">
            <summary>
            Sets the DAO object for this BO. This is always done in the BO constructor.
            </summary>
            <param name="daoObject"></param>
        </member>
        <member name="M:Franson.DAO.BOBase.SetDaoObjectInternal(Franson.DAO.DAOBase)">
            <summary>
            Used by BOList, in this[]
            </summary>
            <param name="daoObject"></param>
        </member>
        <member name="P:Franson.DAO.BOBase.ConcurrencyOption">
            <summary>
            How to handle update conflicts in database.
            </summary>
        </member>
        <member name="P:Franson.DAO.BOBase.DaoBaseObject">
            <summary>
            The Data Access Object (DAO) linked to this Business Object (BO)
            </summary>
        </member>
        <member name="M:Franson.DAO.BOList.SetDaoObject(Franson.DAO.DAOBase)">
            <summary>
            Should be called by constructor to set DAO object.
            </summary>
            <param name="daoObject"></param>
        </member>
        <member name="M:Franson.DAO.BOList.GetItemType">
            <summary>
            Must be overridden by and return the type of the class that is contained in this collection.
            E.g. GroupCollection returns typeof(Group)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.BOList.CreateCopy(Franson.DAO.DAOList)">
            <summary>
            Should create a copy. override to 
            </summary>
            <param name="daoList"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="M:Franson.DAO.BOList.Sort(System.String,System.String)">
            <summary>
            Returns a sorted copy.
            </summary>
            <param name="strFilterExpression"></param>
            <param name="strSortExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.BOList.Add(System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Will always be thrown</exception>
        </member>
        <member name="M:Franson.DAO.BOList.Clear">
            <summary>
            Clears collection. The objects are not removed from the database.
            </summary>
        </member>
        <member name="M:Franson.DAO.BOList.Contains(System.Object)">
            <summary>
            Returns true of object with the same ID is in this collection.
            </summary>
            <param name="value">Object deriving from BOItem</param>
            <returns>True if object with matching ID found.</returns>
            <exception cref="T:System.InvalidCastException">Not an object deriving from BOItem</exception>
        </member>
        <member name="M:Franson.DAO.BOList.IndexOf(System.Object)">
            <summary>
            Returns index of object in this collection.
            </summary>
            <param name="value">Object derived from BOItem</param>
            <returns>True if object with matching ID found.</returns>
            <exception cref="T:System.InvalidCastException">Not an object deriving from BOItem</exception>
        </member>
        <member name="M:Franson.DAO.BOList.Insert(System.Int32,System.Object)">
            <summary>
            override to implement
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.NotImplementedException">Always thrown</exception>
        </member>
        <member name="M:Franson.DAO.BOList.Remove(System.Object)">
            <summary>
            override to implement.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.NotImplementedException">Always thrown</exception>
        </member>
        <member name="M:Franson.DAO.BOList.RemoveAt(System.Int32)">
            <summary>
            override to implement.
            </summary>
            <param name="index"></param>
            <exception cref="T:System.NotImplementedException">Always thrown</exception>
        </member>
        <member name="P:Franson.DAO.BOList.DAOList">
            <summary>
            Gets the DaoBaseObject casted to DAOList. 
            </summary>
        </member>
        <member name="P:Franson.DAO.BOList.Item(System.Int32)">
            <summary>
            Returns index object.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Install.DB.ServerVersionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Franson.Install.DB.ServerVersionCollection.LoadAll">
            <summary>
            Load all <see cref="!:AssemblyVersion"/> in version table
            </summary>
        </member>
        <member name="M:Franson.Install.DB.ServerVersionCollection.AddVersion(Franson.Install.DB.ServerVersion)">
            <summary>
            Adds a new <see cref="!:AssemblyVersion"/> to the database.
            Version must be unique, if not an <see cref="!:InvalidOprtationException"/> will be thrown.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Franson.Install.DB.ServerVersionCollection.Contains(System.Object)">
            <summary>
            Returns true if specified <see cref="T:Franson.Install.DB.ServerVersion"/> object is in the collection.
            </summary>
            <param name="value">A <see cref="T:Franson.Install.DB.ServerVersion"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Install.DB.ServerVersionCollection.GetItemType">
            <summary>
            Note! Not implemented
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Install.DB.ServerVersionCollection.Item(System.Int32)">
            <summary>
            Iterates the collection of <see cref="!:AssemblyVersion"/>.
            Note Set property is not implemented and will throw.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Algorithm.IndexOfFirstDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
             <summary>
             Index the of first difference.
             Perhaps most useful for strings, but implemented like this it will work on all enumerables and in conjunction with Franson.View
            
             note: could be based on a LexicographicalCompare (should rather create a lexi-cmp that returns signed index!)
             todo: support taking a BinaryPredicate also?
             </summary>
             <typeparam name="T"></typeparam>
             <param name="range0">first range</param>
             <param name="range1">second range</param>
             <param name="cmp">The comparator to use.</param>
             <returns>-1 if equal. (two empty ranges are also considered equal)</returns>
        </member>
        <member name="M:Franson.Algorithm.IndexOfFirstDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Index the of first difference.
            
            overload. uses the default comparator for T. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="range0">first range</param>
            <param name="range1">second range</param>
            <returns>-1 if equal. (two empty ranges are also considered equal)</returns>
        </member>
        <member name="M:Franson.View.NumElements(System.Collections.IEnumerable)">
            <summary>
            counts the number of elements in range
            note: O(N) performance. Use only if no other option exists!
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.View.Circular``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            note: the returned enumerable will (by definition) never terminate!
            could be called 'Cycle' also?
            </summary>
            <typeparam name="T"></typeparam>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.View.Unique``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            filters out adjacent equal element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.View.Unique``1(System.Collections.Generic.IEnumerable{``0},Franson.Functional.BinaryPredicate{``0,``0})">
            <summary>
            filters out adjacent equal elements
            </summary>
            <param name="range"></param>
            <param name="cmp">Equality comparison predicate</param>
            <returns></returns>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Franson.View.Peek``2(System.Collections.Generic.IEnumerable{``0},Franson.Functional.UnaryFunction{``0,``1})">
            pass-through view that simply lets an "inspector" see each object during traversal
            (As MapView but with forced/default forwarding of the initial argument)
            (thus the return value of inspector is ignored)
            could perhaps be called ForeachView?
        </member>
        <member name="M:Franson.View.Permutation``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            note: its the number of remapIndices that determines the length of the output
            rename indexedView?
            </summary>
            <param name="list"></param>
            <param name="remapIndices"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.IWork">
            <summary>
            Defines a work.
            </summary>
        </member>
        <member name="M:Franson.IWork.Execute">
            <summary>
            Execute the work.
            </summary>
        </member>
        <member name="T:Franson.WorkQueue">
            <summary>
            Manage execution of <see cref="T:Franson.IWork">tasks</see>.
            Loadbalanced and resource aware.
            </summary>
        </member>
        <member name="M:Franson.WorkQueue.GetWorkQueue">
            <summary>
            Get singletone workqueue
            </summary>
        </member>
        <member name="M:Franson.WorkQueue.#ctor">
            <summary>
            Creates a new work queue.
            </summary>
        </member>
        <member name="M:Franson.WorkQueue.#ctor(System.Int32)">
            <summary>
            Creates a new work queue.
            </summary>
            <param name="iMaxThreads">Max concurrent threads.</param>
        </member>
        <member name="M:Franson.WorkQueue.EnqueueWork(Franson.IWork)">
            <summary>
            Enqueue a work.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Franson.WorkQueue.m_ProcessWorks(System.Object)">
            <summary>
            Process queued works.
            </summary>
        </member>
        <member name="M:Franson.WorkQueue.m_ExecuteWork(System.Object)">
            <summary>
            Execute the IWork.
            </summary>
            <param name="state"></param>
        </member>
        <member name="E:Franson.WorkQueue.BeginExecute">
            <summary>
            Called before execution is started.
            </summary>
        </member>
        <member name="E:Franson.WorkQueue.EndExecute">
            <summary>
            Called when execution is done. Note. Not called upon error.
            </summary>
        </member>
        <member name="E:Franson.WorkQueue.Failure">
            <summary>
            Called when execution fails.
            </summary>
        </member>
        <member name="T:Franson.WorkQueue.ExecuteHandler">
            <summary>
            Handler for WorkQueue events.
            </summary>
            <param name="sender"></param>
            <param name="context"></param>
        </member>
        <member name="T:Franson.Text.ITemplateResolver">
            <summary>
            An ITemplateResolver can resolve variables and describe which variables it can resolve.
            </summary>
        </member>
        <member name="M:Franson.Text.ITemplateResolver.Resolve(Franson.Text.TemplateParser,System.String)">
            <summary>
            Resolves the value of a variable. The Resolve method has the signature of the 
            <see cref="T:Franson.Text.TemplateParser.ResolveVariableHandle"/> delegate, so an object that implements ITemplateResolver 
            can be used as delegate by a TemplateParser. Typically, the Resolve method of the ITemplateResolver at the 
            top of a hierachy of ITemplateResolver's will initially be called as a delegate by a TemplateParser and any 
            child ITemplateResolvers Parse methods will be called as method invocations if the template variable in 
            question is among its SupportedVariables.
            </summary>
            <param name="p">A reference to the TemplateParser used to parse a template</param>
            <param name="strVariable">The name of the variable being resolved. This is typically (but not always) a key 
            for a signal in a lang file.</param>
            <returns>The resolved template variable</returns>
        </member>
        <member name="P:Franson.Text.ITemplateResolver.SupportedVariables">
            <summary>
            Returns a list of template variables that can be resolved.
            </summary>
        </member>
        <member name="T:Franson.Text.TemplateParser">
            <summary>
            Parses a template command and returns a populated command.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Franson.Text.TemplateParser.m_lstResolvedVariables">
            <summary>
            Used for the representation of a variable (its key, the resolved value, the value type and description).
            </summary>
        </member>
        <member name="M:Franson.Text.TemplateParser.Parse(System.String)">
            <summary>
            Parse template and return populated string. Each [variable] is resolved by a call to 
            the event <see cref="E:Franson.Text.TemplateParser.ResolveVariable"/>.
            </summary>
            <param name="strTemplate"></param>
            <returns>Populated template with resolved variables</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Franson.Text.TemplateParser.OnResolveVariable(Franson.Text.TemplateParser,System.String)">
            <summary>
            Calls the ResolveVariable event.
            </summary>
            <param name="sender"></param>
            <param name="strVariable"></param>
            <returns></returns>
        </member>
        <member name="E:Franson.Text.TemplateParser.ResolveVariable">
            <summary>
            Called to resolve variables found in template. 
            </summary>
        </member>
        <member name="P:Franson.Text.TemplateParser.ResolvedVariables">
            <summary>
            The list of resolved template variables
            </summary>
        </member>
        <member name="P:Franson.Text.TemplateParser.UnresolvedVariables">
            <summary>
            The list of unresolved template variables
            </summary>
        </member>
        <member name="T:Franson.Text.TemplateParser.ResolveVariableHandle">
            <summary>
            Delegate for <see cref="E:Franson.Text.TemplateParser.ResolveVariable"/>
            </summary>
            <param name="parser"></param>
            <param name="strVariable">Variable to be resolved. Always in lower case.</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Text.TemplateVariable">
            <summary>
            Represents a variable that can be resolved when parsing a template (see <see cref="T:Franson.Text.TemplateParser"/> and <see cref="T:Franson.Text.ITemplateResolver"/> for its usage).
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Text.TemplateVariable.#ctor(System.String,System.String,System.Type)">
            <summary>
            Creates a TemplateVariable using the provided key, value and value type.
            </summary>
            <param name="strKey">The Key of this TemplateVariable. The Key is typically the same as a signal key found in the VehicleTracker lang and measure file.</param>
            <param name="strValue">The value of this variable (e.g. 6.1) </param>
            <param name="tValueType">The type of variable value (e.g. double)</param>
            <exception cref="T:System.ArgumentException">When any of strKey, strValue or tValueType are null.</exception>
        </member>
        <member name="M:Franson.Text.TemplateVariable.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            Creates a TemplateVariable using the provided key, value, value type and description.
            </summary>
            <param name="strKey">The Key of this TemplateVariable. The Key is typically the same as a signal key found in the VehicleTracker lang and measure file.</param>
            <param name="strValue"></param>
            <param name="tValueType"></param>
            <param name="strDescription"></param>
            <exception cref="T:System.ArgumentException">When any of strKey, strValue or tValueType are null.</exception>
        </member>
        <member name="M:Franson.Text.TemplateVariable.ToFRVALValueString">
            <summary>
            Gets the FRVAL serialized string of this template variable (e.g. "1.4, System.Double").
            </summary>
            <returns>The serialized string of this TemplateVariable</returns>
        </member>
        <member name="M:Franson.Text.TemplateVariable.FromFRVALValueString(System.String,System.String)">
            <summary>
            Creates a new TemplateVariable populated with the provided key and FRVAL value string
            </summary>
            <param name="strKey">The key for the new TemplateVariable</param>
            <param name="strFRVALValueString">The FRVAL value string used to populate the template variable with value and type</param>
            <returns>TemplateVariable populated with the provided key and FRVAL value string.</returns>
            <exception cref="T:System.ArgumentException">If strKey or strFRVALValueString is null. If strFRVALValueString cannot be parsed correctly.</exception>
            <exception cref="T:System.TypeLoadException">If type in strFRVALValueString has wrong format or value.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">If type in strFRVALValueString has wrong format or value.</exception>
        </member>
        <member name="M:Franson.Text.TemplateVariable.Equals(System.Object)">
            <summary>
            TemplateVariables are equal if their Key, Value, ValueType and Description are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Text.TemplateVariable.Key">
            <summary>
            The key of this template variable.
            </summary>
        </member>
        <member name="P:Franson.Text.TemplateVariable.Value">
            <summary>
            The value of this template variable.
            </summary>
        </member>
        <member name="P:Franson.Text.TemplateVariable.ValueType">
            <summary>
            The type of the value of this template variable.
            </summary>
        </member>
        <member name="P:Franson.Text.TemplateVariable.Description">
            <summary>
            The description of this template variable. Not serialized to FRVAL value string.
            </summary>
        </member>
        <member name="M:Franson.Collections.Factory.MakePair``2(``0,``1)">
            <summary>
            factory functionality to avoid having to specify full type
            (let compiler deduce types for us)
            </summary>
            <typeparam name="T0"></typeparam>
            <typeparam name="T1"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Collections.Enumerable.GetEnumeration``1(``0)">
            <summary>
            Helper method to enumerate a enum.
            e.x. foreach(MyEnumType enVal in GetEnumeration&lt;MyEnumType&gt;(MyEnum) {}
            
            </summary>
            <typeparam name="T">Enum type to enumerate</typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Collections.Pair`2">
            <summary>
            tries to resemble the (C++) std::pair and somewhat boost::tuple
            TODO: would be nice if possible to implement boost::tie functionality also somehow(?)
            TODO: generalize to a complete Tuple implementation.
            TODO: conversion to/from KeyValuePair?
            </summary>
            <typeparam name="T0">First type</typeparam>
            <typeparam name="T1">Second type</typeparam>
        </member>
        <member name="M:Franson.Collections.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Pair&lt;T0, T1&gt;"/> class.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Franson.Collections.Pair`2.#ctor(Franson.Collections.Pair{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Pair&lt;T0, T1&gt;"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Franson.Collections.Pair`2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Franson.Collections.Pair`2.CompareTo(Franson.Collections.Pair{`0,`1})">
            <summary>
            Compares the current object with another object of the same type.
            Lexicographical ordering of the Pair
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Franson.Collections.Pair`2.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception>
        </member>
        <member name="M:Franson.Collections.Pair`2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Franson.Collections.Pair`2.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            <see cref="T:System.String">containing a fully qualified type name.</see>
            </returns>
        </member>
        <member name="T:Franson.Collections.PriorityQueue`1">
            <summary>
            PriorityQueue implemented as a binary heap
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.#ctor">
            <summary>
            Creates a new PriorityQueue
            </summary>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new PriorityQueue with initial values
            </summary>
            <param name="collection">initial collection</param>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new PriorityQueue with custom compararer.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new PriorityQueue with initial collection and custom comparer.
            </summary>
            <param name="collection"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Private constructor
            </summary>
            <param name="heap">Internal heap list</param>
            <param name="comparer">Comparer of use</param>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueue an item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.Dequeue">
            <summary>
            Dequeue an item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.Peek">
            <summary>
            Get the item with highest priority without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.Clear">
            <summary>
            Clears the PriorityQueue
            </summary>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether an element is pressent.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.ToArray">
            <summary>
            Get the elements as an Array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Collections.PriorityQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the elements to a Array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Franson.Collections.PriorityQueue`1.Comparer">
            <summary>
            Get the comparer
            </summary>
        </member>
        <member name="P:Franson.Collections.PriorityQueue`1.Capacity">
            <summary>
            Gets or sets the total number of element the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.IScheduledTask">
            <summary>
            Defines a task that can be scheduled.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.IScheduledTask.Execute(Franson.Scheduling.ITaskExecutionContext)">
            <summary>
            Called when <see cref="T:Franson.Scheduling.IScheduleTrigger"/> for this task is triggered.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Franson.Scheduling.IScheduler">
            <summary>
            Defining a Scheduler.
            
            A scheduler maintaince a registry of <see cref="T:Franson.Scheduling.ITaskDescription">ITaskDescription's</see> and <see cref="T:Franson.Scheduling.IScheduleTrigger">IScheduleTrigger's</see>.
            Once a <see cref="T:Franson.Scheduling.ITaskDescription">ITaskDescription</see> is registered with an <see cref="T:Franson.Scheduling.IScheduleTrigger">IScheduleTrigger</see> the scheduler is responible for executing the
            <see cref="T:Franson.Scheduling.IScheduledTask"/> defined by the <see cref="T:Franson.Scheduling.ITaskDescription"/> at the time defined by <see cref="T:Franson.Scheduling.IScheduleTrigger"/>.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.IScheduler.Schedule(Franson.Scheduling.ITaskDescription,Franson.Scheduling.IScheduleTrigger)">
            <summary>
            Schedule a <see cref="T:Franson.Scheduling.IScheduledTask">task</see> at the time and intervall specified by the <see cref="T:Franson.Scheduling.IScheduleTrigger">trigger</see>
            The Task will be repeated according to the <see cref="T:Franson.Scheduling.IScheduleTrigger"/> of use.
            </summary>
            <param name="task">Task description to schedule.</param>
            <param name="trigger">Trigger defining when the task will be executed.</param>
        </member>
        <member name="M:Franson.Scheduling.IScheduler.Cancel(Franson.Scheduling.ITaskDescription)">
            <summary>
            Cancel a running task and reschedule to next time defined by the trigger associated to the task.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Franson.Scheduling.IScheduler.RemoveTask(Franson.Scheduling.ITaskDescription)">
            <summary>
            Removes a task from the schedule.
            </summary>
            <param name="task">Task to remove</param>
        </member>
        <member name="M:Franson.Scheduling.IScheduler.RemoveAllTasks">
            <summary>
            Removes all registered tasks.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.IScheduler.Start">
            <summary>
            Starts the scheduler and start processing tasks.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.IScheduler.Stop">
            <summary>
            Stops the scheduler.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.IScheduler.GetTask(System.String)">
            <summary>
            Get a task identified by TaskID.
            </summary>
            <param name="strTaskID"></param>
            <returns></returns>
            
        </member>
        <member name="M:Franson.Scheduling.IScheduler.GetTasks(System.String)">
            <summary>
            Get all tasks for the given group.
            </summary>
            <param name="strGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.IScheduler.GetTrigger(System.String)">
            <summary>
            Get the trigger for the given task.
            </summary>
            <param name="strTaskID"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.IScheduler.Name">
            <summary>
            Get the name of the Scheduler.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.IScheduler.IsRunning">
            <summary>
            Returns wheter the scheduler is running.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.IScheduler.Tasks">
            <summary>
            Get all <see cref="T:Franson.Scheduling.ITaskDescription">tasks</see>
            </summary>
        </member>
        <member name="P:Franson.Scheduling.IScheduler.IsDisposed">
            <summary>
            Get if Scheduler is disposed.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.IScheduleTrigger">
            <summary>
            Defines a trigger used to trigger a task at a specified time or interval.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.IScheduleTrigger.Next">
            <summary>
            Get next period.
            E.g. A daily trigger will return a new daily trigger for next day.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.IScheduleTrigger.TriggerTime">
            <summary>
            Time when the rtigger triggers.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.IScheduleTrigger.Repeat">
            <summary>
            Returns whether the trigger should be repeated after fired.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.ITaskDescription">
            <summary>
            Task description is an object holding information of a <see cref="T:Franson.Scheduling.IScheduledTask">task.</see>
            </summary>
        </member>
        <member name="M:Franson.Scheduling.ITaskDescription.GetParameter(System.String)">
            <summary>
            Get the given parameter.
            </summary>
            <param name="strKey"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.ITaskDescription.GetParameters">
            <summary>
            Get all task parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.ITaskDescription.CreateTaskInstance">
            <summary>
            Creates an instance of the TaskType.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.ITaskDescription.TaskID">
            <summary>
            ID of task. This should be unique.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.ITaskDescription.Group">
            <summary>
            Get the group of this task.
            
            This is used to identify logical grouped tasks.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.ITaskDescription.ExecutionCount">
            <summary>
            Number of total executions. Including failing ones.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.ITaskDescription.State">
            <summary>
            Current state of the task.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.ITaskDescription.LastExecuted">
            <summary>
            Date and time when the task where last successfully executed.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.ITaskDescription.TaskType">
            <summary>
            Type of the class implementing the <see cref="T:Franson.Scheduling.IScheduledTask"/> interface.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.ITaskExecutionContext">
            <summary>
            Defines the executing context. Holding information about the executing state and environment of a <see cref="T:Franson.Scheduling.IScheduledTask"/>.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.ITaskExecutionContext.Scheduler">
            <summary>
            The scheduler instance maintaining execution of the task.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.ITaskExecutionContext.TaskDescription">
            <summary>
            Description and state of the executing task.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.ITaskExecutionContext.Trigger">
            <summary>
            The trigger that triggered the execution.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.ITaskParameter">
            <summary>
            Defines a task parameter.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.ITaskParameter.IsPersitent">
            <summary>
            Get wether the parameter values can be persisted. 
            </summary>
        </member>
        <member name="T:Franson.Scheduling.Scheduler">
            <summary>
            Schedules maintaince a registry of <see cref="T:Franson.Scheduling.ITaskDescription">ITaskDescription's</see> and <see cref="T:Franson.Scheduling.IScheduleTrigger">IScheduleTrigger's</see>.
            Once a <see cref="T:Franson.Scheduling.ITaskDescription">ITaskDescription</see> is registered with an <see cref="T:Franson.Scheduling.IScheduleTrigger">IScheduleTrigger</see> the scheduler is responible for executing the
            <see cref="T:Franson.Scheduling.IScheduledTask"/> defined by the <see cref="T:Franson.Scheduling.ITaskDescription"/> at the time defined by <see cref="T:Franson.Scheduling.IScheduleTrigger"/>.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Scheduling.Scheduler.m_strName">
            <summary>
            Name of the scheduler.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.Scheduler.m_bIsRunning">
            <summary>
            Scheduler is running flag.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.Scheduler.m_WorkerQueue">
            <summary>
            General worker queue wherethe tasks are put when iots time for them to execure.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.Scheduler.m_TaskQueue">
            <summary>
            Priority Queue where all tasks are put in waie for execution. 
            </summary>
        </member>
        <member name="F:Franson.Scheduling.Scheduler.m_observer">
            <summary>
            Observer instance. Note, this is not mandatory and can be null.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.Scheduler.m_MainTimer">
            <summary>
            One timer per scheduler. We do not want multiple timers e.g one for each scheduled task to get the number of threads down.
            We lose precission slightley when two tasks are scheduled to exactley the same time though. Note that worker queue never blocks so 
            the pression losses is minimal.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.Scheduler.m_rwLock">
            <summary>
            Lock used for synchronization of m_TaskQueue operations.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.Scheduler.m_bIsDisposed">
            <summary>
            Is disposed.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.#ctor(System.String)">
            <summary>
            Creates a new scheduler.
            </summary>
            <param name="strName">Name of the scheduler.</param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.#ctor(System.String,Franson.Scheduling.ISchedulerObserver)">
            <summary>
            Creates a new scheduler.
            </summary>
            <param name="strName">Name of the scheduler.</param>
            <param name="observer">Object observing changes of the scheduler. Often used for persistence or logging.</param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.Timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Called when the next job in Queue should be executed.
            The timer is scheduled according to the first item in the priority queue.
            Only use one timer/scheduler, we want to reduce number of threads.
            We will lose some precission when two tasks are scheduled to exactley the same time though. 
            Note that worker queue never blocks so the pression losses is minimal.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.OnBeginExecuteTask(System.Object,Franson.IWork)">
            <summary>
            Fired just before the <see cref="T:Franson.Scheduling.IScheduledTask"/> have been created and executed.
            </summary>
            <param name="sender">The object that fired the event. Typically the <see cref="T:Franson.WorkQueue"/></param>
            <param name="task">Task beeing executed.</param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.OnEndExecuteTask(System.Object,Franson.IWork)">
            <summary>
            Fired after a <see cref="T:Franson.Scheduling.IScheduledTask"/> have been executed successfully.
            Note this method will not be called if the task failed!
            </summary>
            <param name="sender">The object that fired the event. Typically the <see cref="!:TaskPool"/></param>
            <param name="context">Infoarmation bout the current execution.</param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.Schedule(Franson.Scheduling.ITaskDescription,Franson.Scheduling.IScheduleTrigger)">
            <summary>
            Schedule a <see cref="T:Franson.Scheduling.ITaskDescription">task</see> at the time and intervall specified by the <see cref="T:Franson.Scheduling.IScheduleTrigger">trigger</see>
            The Task will be repeated according to the <see cref="T:Franson.Scheduling.IScheduleTrigger"/> of use.
            
            When scheduling a task that already is scheduled the it will be rescheduled. I.E it will be replaced with the nbew specifications.
            </summary>
            <param name="task">Task description to schedule.</param>
            <param name="trigger">Trigger defining when the task will be executed.</param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.DoSchedule(Franson.Scheduling.ITaskDescription,Franson.Scheduling.IScheduleTrigger)">
            <summary>
            Adds a <see cref="T:Franson.Scheduling.ITaskDescription"/> associated with <see cref="!:IScheduletrigger"/> to the scheduler.
            </summary>
            <param name="task">The task description.</param>
            <param name="trigger">The trigger</param>
            <param name="bRepeat">Repeat after execution. Yes to reschedule the task to <see cref="!:IScheduletrigger.Next()"/></param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.Cancel(Franson.Scheduling.ITaskDescription)">
            <summary>
            Sets the task.state to canceled
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.RemoveTask(Franson.Scheduling.ITaskDescription)">
            <summary>
            Removes a task from the schedule.
            Note. Tasks are identified by the TaskID property.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.RemoveAllTasks">
            <summary>
            Removes all registered tasks.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.GetTask(System.String)">
            <summary>
            Get a task identified by TaskID.
            </summary>
            <param name="strTaskID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.GetTasks(System.String)">
            <summary>
            Get a tasks for the given logical group.
            </summary>
            <param name="strGroup">The logical group</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.GetTrigger(System.String)">
            <summary>
            Get the <see cref="T:Franson.Scheduling.IScheduleTrigger"/> for the given task ID.
            </summary>
            <param name="strTaskID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.Start">
            <summary>
            Starts the scheduler and start processing tasks.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.Stop">
            <summary>
            Stops the scheduler.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.RescheduleTimer">
            <summary>
            Set the timer object to next task in Queue trigger time.
            Note! This method is not thread safe.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.GetNextInterval">
            <summary>
            Get the time span in milliseconds to next task execution time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.NotifyObserverUpdate(Franson.Scheduling.ITaskExecutionContext)">
            <summary>
            Notifie task state changed
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.NotifyObserverRemove(Franson.Scheduling.ITaskDescription)">
            <summary>
            Notifie Task removed
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.NotifyObserverAdd(Franson.Scheduling.ITaskDescription,Franson.Scheduling.IScheduleTrigger)">
            <summary>
            Notifie task added.
            </summary>
            <param name="task"></param>
            <param name="trigger"></param>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.Dispose">
            <summary>
            Disposes the Scheduler.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Scheduler.ToString">
            <summary>
            Retuns the name of scheduler.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.Scheduler.Name">
            <summary>
            Get the name of the Scheduler.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Scheduler.Tasks">
            <summary>
            Get all <see cref="T:Franson.Scheduling.ITaskDescription">tasks</see>
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Scheduler.IsRunning">
            <summary>
            Returns whether the scheduler is running.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Scheduler.IsDisposed">
            <summary>
            Get if scheduler is disposed.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.TaskDescription">
            <summary>
            Task description is an object holding information of a <see cref="T:Franson.Scheduling.IScheduledTask">task.</see>
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Scheduling.TaskDescription.#ctor(System.String,System.String,System.Type)">
            <summary>
            Creates a new TaskDescription.
            </summary>
            <param name="strTaskID">ID of the task. This must be unique for each task in the scheduler.</param>
            <param name="strGroup">Name of the logical group of this task.</param>
            <param name="taskType">
            Type of the class implementing the <see cref="T:Franson.Scheduling.IScheduledTask"/> interface. 
            The task will be instanciated at the time specified by <see cref="T:Franson.Scheduling.IScheduleTrigger"/>.
            </param>
        </member>
        <member name="M:Franson.Scheduling.TaskDescription.#ctor(System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,Franson.Scheduling.ITaskParameter})">
            <summary>
            Creates a new TaskDescription.
            </summary>
            <param name="strTaskID">ID of the task. This must be unique for each task in the scheduler.</param>
            <param name="strGroup">Name of the logical group of this task.</param>
            <param name="taskType">
            Type of the class implementing the <see cref="T:Franson.Scheduling.IScheduledTask"/> interface. 
            The task will be instanciated at the time specified by <see cref="T:Franson.Scheduling.IScheduleTrigger"/>.
            </param>
            <param name="parameters">
            Parameters to pass to <see cref="T:Franson.Scheduling.IScheduledTask"/> upon execution.
            </param>
        </member>
        <member name="M:Franson.Scheduling.TaskDescription.GetParameter(System.String)">
            <summary>
            Get the parameter identified by key.
            </summary>
            <param name="strKey">Name of parameter.</param>
            <returns>The ITaskParameter if found, otherwise null.</returns>
        </member>
        <member name="M:Franson.Scheduling.TaskDescription.GetParameters">
            <summary>
            Get all parameters associated to the task.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.TaskDescription.CreateTaskInstance">
            <summary>
            Creates an instance of the TaskType.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.TaskDescription.ToString">
            <summary>
            Return a string representation of the TaskDescription object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.TaskDescription.Equals(System.Object)">
            <summary>
            Compare if this task is equal other task.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.TaskDescription.GetHashCode">
            <summary>
            Get HashCode based on TaskID
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.TaskDescription.TaskID">
            <summary>
            ID of task. This should be unique.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.TaskDescription.Group">
            <summary>
            Get the group of this task.
            
            This is used to identify logical grouped tasks.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.TaskDescription.ExecutionCount">
            <summary>
            Number of total executions. Including failing ones.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.TaskDescription.State">
            <summary>
            Current state of the task.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.TaskDescription.LastExecuted">
            <summary>
            Date and time when the task where last successfully executed.
            Returns DateTime.MinValue if never executeds.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.TaskDescription.NextExecution">
            <summary>
            Date and time when the task will be executed next time.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.TaskDescription.TaskType">
            <summary>
            Type of the class implementing the <see cref="T:Franson.Scheduling.IScheduledTask"/> interface.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.TaskExecutionContext">
            <summary>
            Executing context. Holding information about the executing state and environment of a <see cref="T:Franson.Scheduling.IScheduledTask"/>.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Scheduling.TaskExecutionContext.#ctor(Franson.Scheduling.IScheduler,Franson.Scheduling.ITaskDescription,Franson.Scheduling.IScheduleTrigger)">
            <summary>
            Create a new TaskExecutionContext object.
            </summary>
            <param name="scheduler"></param>
            <param name="taskDescription"></param>
            <param name="trigger"></param>
        </member>
        <member name="M:Franson.Scheduling.TaskExecutionContext.CompareTo(Franson.Scheduling.ITaskExecutionContext)">
            <summary>
            Compare the Trigger.TriggerAt date time.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.TaskExecutionContext.Execute">
            <summary>
            Creates the IScheduleTask instance and call Execute.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.TaskExecutionContext.ToString">
            <summary>
            Return the Scheduler.ToString + TaskDescription.ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.TaskExecutionContext.Scheduler">
            <summary>
            The scheduler instance maintaining execution of the task.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.TaskExecutionContext.TaskDescription">
            <summary>
            Description and state of the executing task.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.TaskExecutionContext.Trigger">
            <summary>
            The trigger that triggered the execution.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.TaskState">
            <summary>
            State of the task.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.TaskState.Virgin">
            <summary>
            Never executed.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.TaskState.Scheduled">
            <summary>
            Has been executed and rescheduled.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.TaskState.Executing">
            <summary>
            Executing now.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.TaskState.Failure">
            <summary>
            Failed during execution.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.TaskState.Canceled">
            <summary>
            Task is canceled. Will not be executed again until state changes.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.TaskState.Queued">
            <summary>
            Task added to queue and waiting to be executed.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.Triggers.CronTrigger">
            <summary>
            Base class for cron like triggers.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Triggers.CronTrigger.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a new Trigger.
            </summary>
            <param name="iPeriodOffset">Period offset.</param>
            <param name="bRepeat">Repeating trigger.</param>
        </member>
        <member name="M:Franson.Scheduling.Triggers.CronTrigger.Next">
            <summary>
            Get next period. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.Triggers.CronTrigger.AddPeriod(System.Int32)">
            <summary>
            Implement by concrete classes to offset the period.
            E.g: DailyTrigger will add one day if iOffset = 1.
            </summary>
            <param name="iOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.Triggers.CronTrigger.CompareTo(Franson.Scheduling.IScheduleTrigger)">
            <summary>
            Compares the TriggerTime.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.Triggers.CronTrigger.ToString">
            <summary>
            Return the Type.Name@TriggerTime
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.Triggers.CronTrigger.Offset">
            <summary>
            Period offset from initial period.
            E.g: If DailyPeriod initial date is 2009-01-01 12:00:00 an offset of +1 will result in 2009-01-02 12:00:00
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Triggers.CronTrigger.Repeat">
            <summary>
            Whether the trigger is a repeating trigger.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Triggers.CronTrigger.TriggerTime">
            <summary>
            Time when the trigger will trigger.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.Triggers.DailyTrigger">
            <summary>
            Daily trigger.
            Triggers at a given time each day.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Triggers.DailyTrigger.#ctor">
            <summary>
            Create a new empty daily parameter.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Triggers.DailyTrigger.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new DailyTrigger.
            </summary>
            <param name="tsTrigger">Time of day to trigger.</param>
            <param name="iPeriodOffset">Number of days from now to start.</param>
            <param name="bRepeat">Repeat each day or trigger only once.</param>
        </member>
        <member name="M:Franson.Scheduling.Triggers.DailyTrigger.AddPeriod(System.Int32)">
            <summary>
            Adds the periodical offset and return a new trigger.
            </summary>
            <param name="iOffset"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.Triggers.DailyTrigger.TriggerTime">
            <summary>
            Next triggering time.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Triggers.DailyTrigger.Hours">
            <summary>
            Houre of day in 24 houre format.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Triggers.DailyTrigger.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Triggers.DailyTrigger.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="T:Franson.Scheduling.Triggers.IntervalTrigger">
            <summary>
            Trigger on interval.
            E.g every 10 seconds.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.Triggers.IntervalTrigger.m_dtTrigger">
            <summary>
            This is for serialization purpose only! Do not use externally!
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Triggers.IntervalTrigger.#ctor(System.Int32,System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Creates a new Interval based trigger.
            </summary>
            <param name="iInterval">Intervall in milliseconds.</param>
            <param name="dtStartAt">Startding date time.</param>
            <param name="iPeriodOffset">Offset. 0 interval will be from now. 2 = iInterval * 2</param>
            <param name="bRepeat">If this trigger should repeat after one trigger.</param>
        </member>
        <member name="M:Franson.Scheduling.Triggers.IntervalTrigger.AddPeriod(System.Int32)">
            <summary>
            Adds the periodical offset and return a new trigger.
            </summary>
            <param name="iOffset"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.Triggers.IntervalTrigger.TriggerTime">
            <summary>
            Next triggering time.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Triggers.IntervalTrigger.Interval">
            <summary>
            Interval between trigger.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.Triggers.WeeklySchemaTrigger">
            <summary>
            Trigger for a weekly schema.
            <remarks>
            A weekly schema is an ordered array of UTC datetime objects indicating start times treated as dayofweek/timeofday
            A start time is a time point when a task should be executed.
            Accessing the property TriggerTime will get the next dayofweek/timeofday of the schema compared to UTC Now (the 
            moment of accessing the property).
            </remarks>
            <example>
            A WeeklySchemaTrigger is provided an array of three UTC datetimes: [Monday 15:00, Monday 19:00, Tuesday 10:00]
            Accessing the property TriggerTime at UTC Monday 9.15 will return a trigger for Monday 15:00.
            Accessing the property TriggerTime at UTC Monday 15.10 will return a trigger for Monday 19:00.
            Accessing the property TriggerTime at UTC Monday 20:00 will return a trigger for Tuesday 10:00.
            Accessing the property TriggerTime at UTC Tuesday 12:00 will return a trigger for Monday 15:00 next week.
            and so on...
            </example>
            </summary>
        </member>
        <member name="F:Franson.Scheduling.Triggers.WeeklySchemaTrigger.m_lstSortedWeeklySchemaStartTimes">
            <summary>
            A list of datetimes, ordered ascendingly, to be treated as dayofweek/timeofday
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Triggers.WeeklySchemaTrigger.#ctor">
            <summary>
            Needed for XML serialization
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Triggers.WeeklySchemaTrigger.#ctor(System.Collections.Generic.List{System.DateTime})">
            <summary>
            Creates a weekly schema trigger using the provided list of starttimes
            Internally, the list is kept sorted ascending by dayofweek/timeofday.
            </summary>
            <param name="lstWeeklySchemaStartTimes">A list of datetimes (treated as dayofweek/timeofday)</param>
            <remarks>Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6</remarks>
        </member>
        <member name="P:Franson.Scheduling.Triggers.WeeklySchemaTrigger.WeeklySchema">
            <summary>
            Gets and sets the weekly schema
            </summary>
        </member>
        <member name="T:Franson.Scheduling.Triggers.WeeklySchemaTrigger.DayOfWeekTimeOfDayComparer">
            <summary>
            Compares DateTime objects by day of week / time of day
            </summary>
        </member>
        <member name="T:Franson.Scheduling.Parameters.ArrayParameter">
             <summary>
             Parameter handling store and restore of array like data.
            
             The value must be xml serializable to be persistent.
             </summary>
        </member>
        <member name="M:Franson.Scheduling.Parameters.ArrayParameter.#ctor">
            <summary>
            Create a new empty Array Parameter.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Parameters.ArrayParameter.#ctor(System.Object[])">
            <summary>
            Create a new Array parameter with a initialize value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Franson.Scheduling.Parameters.ArrayParameter.#ctor(System.Object[],System.Boolean)">
            <summary>
            Create a new Array parameter with initial value and specifie wether it is persistable.
            </summary>
            <param name="value"></param>
            <param name="bPersistent">Wether the parameter is persistable. IE the values can be XML serialized.</param>
        </member>
        <member name="M:Franson.Scheduling.Parameters.ArrayParameter.ToList``1">
            <summary>
            Convert the Value to a typed list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Franson.Scheduling.Parameters.ArrayParameter.Value">
            <summary>
            Get or Set parameter value.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Parameters.ArrayParameter.IsPersitent">
            <summary>
            Returns true if parameter can be persisted. 
            All parameters can be persistent if the value is XML serializable.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.Parameters.GenericParameter">
            <summary>
            Parameter handling store and restore of simple data like 
            string, integers, boolean, DateTimes and other XML serializable objects, primitives and structures.
            
            The value must be XML serializable to be persistent.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Parameters.GenericParameter.#ctor">
            <summary>
            Create a new Generic Parameter.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Parameters.GenericParameter.#ctor(System.Object)">
            <summary>
            Create a new Generic parameter with a initialize value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Franson.Scheduling.Parameters.GenericParameter.#ctor(System.Object,System.Boolean)">
            <summary>
            Create a new Generic Parameter.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Parameters.GenericParameter.Value">
            <summary>
            Get or Set parameter value.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.Parameters.GenericParameter.IsPersitent">
            <summary>
            Returns true if parameter can be persisted to database.
            </summary>
        </member>
        <member name="T:Franson.Buffer.BitParser">
            <summary>
            Used to parse bit streams
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Buffer.BitParser.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create bit parser.
            </summary>
            <param name="iSizeInBytes"></param>
        </member>
        <member name="M:Franson.Buffer.BitParser.WriteData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to buffer.
            </summary>
            <param name="arrData"></param>
            <param name="iStart"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.BitParser.ReadInt1">
            <summary>
            Parses one more bit in buffer and returns value. 1, 0 or -1 if buffer is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.BitParser.ReadInt8">
            <summary>
            Returns next byte taking bit index into account. Returns -1 if buffer empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.BitParser.ReadInt32">
            <summary>
            Returns 4 int32. Takes bit order, bit index and endian into account. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.BitParser.ReadIntX(System.Int32)">
            <summary>
            Reads iCount bits from buffer and returns it as an int.
            Returns -1 if buffer does not contain iCount bits.
            </summary>
            <param name="iCount">Number of bits to read. Max 31</param>
            <returns></returns>
        </member>
        <member name="P:Franson.Buffer.BitParser.BitsInBuffer">
            <summary>
            Bits left in buffer.
            </summary>
        </member>
        <member name="T:Franson.Buffer.Circular">
            <summary>
            Circular buffer
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Franson.Buffer.Circular.m_buffer">
            <summary>
            Actual data stroed in circular buffer.
            </summary>
        </member>
        <member name="F:Franson.Buffer.Circular.m_iEndIndex">
            <summary>
            End index in buffer. This value should be taken mod m_iLength when reading and writing data 
            from m_buffer. m_iEndIndex is always greater than m_iStartIndex
            </summary>
        </member>
        <member name="F:Franson.Buffer.Circular.m_iStartIndex">
            <summary>
            Start index in buffer. See m_iEndIndex for more info
            </summary>
        </member>
        <member name="F:Franson.Buffer.Circular.m_iLength">
            <summary>
            Length of buffer.
            </summary>
        </member>
        <member name="M:Franson.Buffer.Circular.#ctor(System.Int32)">
            <summary>
            Creates a new circular buffer
            </summary>
            <param name="iLength">Size of buffer</param>
        </member>
        <member name="M:Franson.Buffer.Circular.Reset">
            <summary>
            Empty buffer.
            </summary>
        </member>
        <member name="M:Franson.Buffer.Circular.Clear">
            <summary>
            Empties buffer. Same as Reset()
            </summary>
        </member>
        <member name="M:Franson.Buffer.Circular.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes new data to buffer
            </summary>
            <param name="arrData">Array to write</param>
            <param name="iStartIndex">Where from arrData to start writing data</param>
            <param name="iLength">Number of bytes to write</param>
            <returns>Number of bytes actually written</returns>
            <exception cref="T:System.NullReferenceException">If arrData is null</exception>
        </member>
        <member name="M:Franson.Buffer.Circular.Write(System.Byte[])">
            <summary>
            Writes data to buffer
            </summary>
            <param name="arrData">Array of data to write</param>
            <returns>Number of bytes written</returns>
            <exception cref="T:System.NullReferenceException">If arrData is null</exception>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadAndAppend(System.Int32,System.Byte[])">
            <summary>
            Reads data from buffer and appends "arrAppend" at end of returned byte array.
            </summary>
            <param name="iLength">Number of bytes to read</param>
            <param name="arrAppend">Array to append at end of read data.</param>
            <returns>Data from buffer + arrAppend</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadAndAppend(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Reads data from buffer and appends "arrAppend" at end of returned byte array.
            </summary>
            <param name="iLength">Number of bytes to read</param>
            <param name="arrAppend">Array to append at end of read data.</param>
            <param name="bPeek">If true returned data will not be removed from buffer.</param>
            <returns>Data from buffer + arrAppend</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Read(System.Int32)">
            <summary>
            Read data from buffer
            </summary>
            <param name="iLength">Number of bytes to read</param>
            <returns>An array of data. Can never exceed the length of this circular buffer.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Read(System.Int32,System.Boolean)">
            <summary>
            Read data from buffer.
            </summary>
            <param name="iLength">Number of bytes to read</param>
            <param name="bPeek">If true returned data will not be removed from buffer.</param>
            <returns>An array of data. Can never exceed the length of this circular buffer.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from buffer and copies it to arrData
            </summary>
            <param name="arrData">Buffer to read data to</param>
            <param name="iOffset">Offset in arrData to start from</param>
            <param name="iLength">Number of bytes to read</param>
            <returns>Number of bytes read from buffer</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Read(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads data from buffer and copies it to arrData
            </summary>
            <param name="arrData">Buffer to read data to</param>
            <param name="iOffset">Offset in arrData to start from</param>
            <param name="iLength">Number of bytes to read</param>
            <param name="bPeek">If true returned data will not be removed from buffer.</param>
            <returns>Number of bytes read from buffer</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadInteger(System.Boolean)">
            <summary>
            Returns next 4 bytes as an integer.
            </summary>
            <param name="bBigEndian">True if Most significant byte is first in buffer == big endian.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">If less then 4 bytes are left in buffer</exception>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadShort(System.Boolean)">
            <summary>
            Returns next 2 bytes as an integer.
            </summary>
            <param name="bBigEndian">True if Most significant byte is first in buffer == big endian.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">If less then 4 bytes are left in buffer</exception>
        </member>
        <member name="M:Franson.Buffer.Circular.ReadByte">
            <summary>
            Returns next byte in buffer. Returns -1 if there is no data in buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.Circular.PeekByte">
            <summary>
            Returns next byte in buffer without moving index. Returns -1 if there is no data in buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Peek(System.Int32,System.Int32)">
            <summary>
            Returns byte array without moving index. Returns null if interval is outside buffer.
            </summary>
            <param name="iStartIndex"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.Circular.Seek(System.Int32)">
            <summary>
            Skip data in buffer.
            </summary>
            <param name="iOffset">Number of bytes to skip</param>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[][])">
            <summary>
            Returns index of the first occurance of any of the patterns in the array of byte[].
            Returns -1 if not found.
            </summary>
            <param name="arrPatternList">Array of patterns to search for.</param>
            <returns>Index of first occurance of pattern, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[][],System.Int32)">
            <summary>
            Returns index of the first occurance of any of the patterns in the array of byte[].
            Returns -1 if not found.
            </summary>
            <param name="arrPatternList">Array of patterns to search for.</param>
            <param name="iOffset">Offset in buffer where search starts.</param>
            <returns>Index of first occurance of pattern, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte)">
            <summary>
            Returns index of next occurance if bytePattern. Returns -1 if not found
            </summary>
            <param name="bytePattern">Byte to search for.</param>
            <returns>Index of first found byte, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte,System.Int32)">
            <summary>
            Returns index of next occurance if bytePattern. Returns -1 if not found
            </summary>
            <param name="bytePattern">Byte to search for.</param>
            <param name="iOffset">Offset where to start search</param>
            <returns>Index of first found byte, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[],System.Boolean)">
            <summary>
            Returns the index of found data.
            </summary>
            <param name="arrData">Data to search for</param>
            <param name="bFindAny">Searches for the first occurance of any of the bytes in arrData if true, and to the sequence if false.</param>
            <returns>Index of found data. Returns -1 if no match found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Returns the index of found data.
            </summary>
            <param name="arrData">Data to search for</param>
            <param name="bFindAny">Searches for the first occurance of any of the bytes in arrData if true, and to the sequence if false.</param>
            <param name="iOffset">Offset where to start search</param>
            <returns>Index of found data. Returns -1 if no match found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[])">
            <summary>
            Returns index of start of arrPattern. Returns -1 if not found
            </summary>
            <param name="arrPattern">Pattern to find.</param>
            <returns>Index of found data, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.FindData(System.Byte[],System.Int32)">
            <summary>
            Returns index of start of arrPattern. Returns -1 if not found
            </summary>
            <param name="arrPattern">Pattern to find.</param>
            <param name="iOffset">Offset where to start search</param>
            <returns>Index of found data, or -1 if not found.</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.CopyArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy a byte array
            </summary>
            <param name="arrSource">byte array to be copied</param>
            <param name="iStartIndex">Start index</param>
            <param name="iLenght">Length</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.Circular.StringToByteArray(System.String)">
            <summary>
            Converts a string to a byte array
            </summary>
            <param name="strData">String to convert</param>
            <returns>Created byte array</returns>
        </member>
        <member name="M:Franson.Buffer.Circular.ToString">
            <summary>
            Returns "UsedLenth: X". Useful for logging and debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Buffer.Circular.UsedLength">
            <summary>
            Number of bytes used in buffer
            </summary>
        </member>
        <member name="P:Franson.Buffer.Circular.EmptyLength">
            <summary>
            Number of bytes free in buffer
            </summary>
        </member>
        <member name="P:Franson.Buffer.Circular.Length">
            <summary>
            Total buffer size
            </summary>
        </member>
        <member name="T:Franson.Buffer.CRC.Crc">
            <summary>
            Base class for Crc calculation.
            </summary>
        </member>
        <member name="M:Franson.Buffer.CRC.Crc.ShortToByteArray(System.UInt16)">
            <summary>
            Convert ushort to big endian byte array. E.g 0x3344 converts to 0x33, 0x44
            </summary>
            <param name="usCrc"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Buffer.CRC.Crc.Calc(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calc CRC
            </summary>
            <param name="arrData"></param>
            <param name="iStart"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Buffer.CRC.Crc16">
            <summary>
            Calculates CRC16 checksum.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Buffer.CRC.Crc16.#ctor">
            <summary>
            Create CRC16 calculator
            </summary>
        </member>
        <member name="M:Franson.Buffer.CRC.Crc16.Calc(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculate checksum from byte array.
            </summary>
            <param name="arrData"></param>
            <param name="iStart"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Buffer.CRC.CrcCCITT">
            <summary>
            CRC CCITT
            </summary>
        </member>
        <member name="M:Franson.Buffer.CRC.CrcCCITT.#ctor">
            <summary>
            Create CRC CCITT calculator.
            </summary>
            <param name="usPolynomial"></param>
        </member>
        <member name="M:Franson.Buffer.CRC.CrcCCITT.Calc(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculate checksum from byte array.
            </summary>
            <param name="arrData"></param>
            <param name="iStart"></param>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.ApplicationInformation">
            <exclude />
        </member>
        <member name="T:Franson.Geo.BoundingBox">
            <summary>
            Handles a bounding box in up to 5 dimensions (including time).
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Geo.BoundingBox.#ctor(Franson.Geo.TrackPoint)">
            <summary>
            Create bounding box from valid or invalid TrackPoint.
            </summary>
            <param name="tp"></param>
        </member>
        <member name="M:Franson.Geo.BoundingBox.#ctor(Franson.Geo.Position,System.DateTime)">
            <summary>
            Create nounding box in 3D from position object and date time object.
            </summary>
            <param name="pos"></param>
            <param name="dtUTC"></param>
        </member>
        <member name="M:Franson.Geo.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates bounding box in two dimensions.
            </summary>
            <param name="dblMinX">Min X. Typically used for Longitude or Easting.</param>
            <param name="dblMaxX">Max X. Typically used for Longitude or Easting.</param>
            <param name="dblMinY">Min Y. Typically used for Latitude or Easting.</param>
            <param name="dblMaxY">Max Y. Typically used for Latitude or Easting.</param>
        </member>
        <member name="M:Franson.Geo.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.DateTime,System.DateTime)">
            <summary>
            Creates bounding box in 5 dimensions.
            </summary>
            <param name="dblMinX">Min X. Typically used for Longitude or Easting.</param>
            <param name="dblMaxX">Max X. Typically used for Longitude or Easting.</param>
            <param name="dblMinY">Min Y. Typically used for Latitude or Easting.</param>
            <param name="dblMaxY">Max Y. Typically used for Latitude or Easting.</param>
            <param name="dblMinZ">Min Z. Typically used for Altitude.</param>
            <param name="dblMaxZ">Max Z. Typically used for Altitude.</param>
            <param name="dblMinM">Min M. Custom use.</param>
            <param name="dblMaxM">Max M. Custom use.</param>
            <param name="dtMin">Start time.</param>
            <param name="dtMax">End time.</param>
        </member>
        <member name="M:Franson.Geo.BoundingBox.IsInside(Franson.Geo.TrackPoint)">
            <summary>
            Check if track point is inside bounding box.
            If track point is valid, lon, lat, alt and time is considered.
            If track point is invalid only time is considered.
            </summary>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.IsInside(Franson.Geo.Position,System.DateTime)">
            <summary>
            Returns true if Position and DateTime is inside geo bounding box and time frame.
            </summary>
            <param name="pos">Position to check.</param>
            <param name="dtUTC">Time to check</param>
            <returns>True if inside bounding box</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.IsInside(System.Double,System.Double)">
            <summary>
            Returns true if X, Y is inside the bounding box. Only X and Y are considered.
            </summary>
            <param name="dblX">X value to check.</param>
            <param name="dblY">Y value to check.</param>
            <returns>True if inside.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.IsInside(System.Double,System.Double,System.Double,System.Double,System.DateTime)">
            <summary>
            Returns true if coordinate and time is inside the bounding box.
            </summary>
            <param name="dblX">X value to check.</param>
            <param name="dblY">Y value to check.</param>
            <param name="dblZ">Z value.</param>
            <param name="dblM">M value.</param>
            <param name="dtTime">Time</param>
            <returns>True if inside.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Expand(Franson.Geo.TrackPoint)">
            <summary>
            Expand bounding box with valid or invalid track point.
            An invalid track point will only expand time and not position. A valid position will expand position and time.
            </summary>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Expand(Franson.Geo.Position,System.DateTime)">
            <summary>
            Expand bounding box with Position object nad DateTime.
            </summary>
            <param name="pos"></param>
            <param name="dtUTC"></param>
            <returns>Returns new BoundingBox if expanded, else same box is returned</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Expand(System.Double,System.Double)">
            <summary>
            Returns a new BoundingBox object which includes the arguments. If the arguments are inside the
            bounding box, "this" is returned. Z, M and time is ignored.
            </summary>
            <param name="dblX">X value to expand with.</param>
            <param name="dblY">Y value to expand with</param>
            <returns>New expanded BoundingBox, or "this" if no expansion is made.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Expand(System.Double,System.Double,System.Double,System.Double,System.DateTime)">
            <summary>
            Returns a new BoundingBox object which includes the arguments. If the arguments are inside the
            bounding box, "this" is returned.
            </summary>
            <param name="dblX">X value to expand with.</param>
            <param name="dblY">Y value to expand with</param>
            <param name="dblZ">Z value to expand with.</param>
            <param name="dblM">M value to expand with.</param>
            <param name="dtTime"></param>
            <returns>New expanded BoundingBox, or "this" if no expansion is made.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.Equals(System.Object)">
            <summary>
            Returns true if bounding boxes are identical.
            </summary>
            <param name="obj">Box to compare with.</param>
            <returns>True if equal border values.</returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.GetHashCode">
            <summary>
            Calls base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.BoundingBox.ToString">
            <summary>
            String with values that builds up bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinX">
            <summary>
            Minimum X value. Typically Longitude or Easting.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxX">
            <summary>
            Max X value. Typically represents Longitude or Easting.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinY">
            <summary>
            Min Y value. Typically represents Latitude or Northing.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxY">
            <summary>
            Max Y value. Typically represents Latitude or Northing.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinZ">
            <summary>
            Min Z value. Typically represents Altitude.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxZ">
            <summary>
            Max Z value. Typically represents Altitude.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinM">
            <summary>
            Min M value. Custom data.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxM">
            <summary>
            Max M value. Custom data.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MinTime">
            <summary>
            Min time. Typically represents when data bound by this box was started in time.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.MaxTime">
            <summary>
            Max time. Typically represents when data bound by this box was ended in time.
            </summary>
        </member>
        <member name="P:Franson.Geo.BoundingBox.ValidBox">
            <summary>
            
            </summary>
        </member>
        <member name="T:Franson.Geo.GeoArgumentException">
            <summary>
            Invalid argument(s).
            </summary>
        </member>
        <member name="T:Franson.Geo.Location">
            <summary>
            Stores extended information about a place, such as its <see cref="P:Franson.Geo.Location.Position"/>, country name, postal code and address.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Geo.Location.#ctor(Franson.Geo.Position,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a location from the provided values
            </summary>
            <param name="position"></param>
            <param name="strCountryName"></param>
            <param name="strCityName"></param>
            <param name="strPostalCodeNumber"></param>
            <param name="strStreetName"></param>
            <param name="strStreetNumber"></param>
            <param name="strStreetBox"></param>
            <param name="strAddress"></param>
        </member>
        <member name="M:Franson.Geo.Location.Equals(System.Object)">
            <summary>
            Returns true if positions are the same
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Location.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.Location.Position">
            <summary>
            The <see cref="P:Franson.Geo.Location.Position"/> of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.CountryName">
            <summary>
            The name of the country of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.CityName">
            <summary>
            The name of the city of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.PostalCodeNumber">
            <summary>
            The postal code number of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.StreetBox">
            <summary>
            The box of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.StreetName">
            <summary>
            The name of the street of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.StreetNumber">
            <summary>
            The number of the street of this <see cref="T:Franson.Geo.Location"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.Location.Address">
            <summary>
            The address of this <see cref="T:Franson.Geo.Location"/>. This value is often a concatenation of values such as street name, 
            number, postal code, city etc.
            </summary>
        </member>
        <member name="T:Franson.Geo.LocationBuilder">
            <summary>
            Builder for a Location
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Geo.LocationBuilder.#ctor">
            <summary>
            Creates a builder with all fields defaulted to null
            </summary>
        </member>
        <member name="M:Franson.Geo.LocationBuilder.#ctor(Franson.Geo.Location)">
            <summary>
            Creates a builder with the fields to the locations corresponding fields
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Franson.Geo.LocationBuilder.ToLocation">
            <summary>
            Returns a <see cref="T:Franson.Geo.Location"/> from the builder's fields
            </summary>
            <returns>Location from the builder's fields</returns>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.Position">
            <summary>
            The <see cref="P:Franson.Geo.LocationBuilder.Position"/> of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.CountryName">
            <summary>
            The name of the country of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.CityName">
            <summary>
            The name of the city of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.PostalCodeNumber">
            <summary>
            The postal code number of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.StreetBox">
            <summary>
            The box of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.StreetName">
            <summary>
            The name of the street of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.StreetNumber">
            <summary>
            The number of the street of this <see cref="T:Franson.Geo.LocationBuilder"/>
            </summary>
        </member>
        <member name="P:Franson.Geo.LocationBuilder.Address">
            <summary>
            The address of this <see cref="T:Franson.Geo.LocationBuilder"/>. This value is often a concatenation of values such as street name, 
            number, postal code, city etc.
            </summary>
        </member>
        <member name="T:Franson.Geo.DistanceUnits">
            <summary>
            Use in when converting between different distance units. E.g. meters to yards.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Geo.DistanceUnits.Foot">
            <summary>
            Factor between meter and foot
            </summary>
        </member>
        <member name="F:Franson.Geo.DistanceUnits.Yard">
            <summary>
            Factor between meter and yard
            </summary>
        </member>
        <member name="F:Franson.Geo.DistanceUnits.Mile">
            <summary>
            Factor between meter and mile
            </summary>
        </member>
        <member name="T:Franson.Geo.Position">
            <summary>
            Represents a geographic position. Position is read only and thereby thread safe.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Geo.Position.#ctor">
            <summary>
            Create a Position object with default values.
            Latitude = 0.0 
            Longitude = 0.0
            </summary>
        </member>
        <member name="M:Franson.Geo.Position.#ctor(System.Double,System.Double)">
            <summary>
            Create a Position object from lon/lat in degrees. Latitude must be between -90 and 90.
            Longitude will be "normalized" to a value between -180 and 180. E.g. 730 -&gt; 10 and 270 -&gt; -90
            </summary>
            <param name="dblLongitude">Longitude in decimal degrees</param>
            <param name="dblLatitude">Latitude in decimal degrees</param>
            <exception cref="T:Franson.Geo.GeoArgumentException">If the latitude is less then -90 or greater than 90.</exception>
        </member>
        <member name="M:Franson.Geo.Position.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a Position object from lon/lat/altitude
            </summary>
            <param name="dblLongitude">Longitude in decimal degrees</param>
            <param name="dblLatitude">Latitude in decimal degrees</param>
            <param name="dblAltitude">Altitude in meters</param>
            <exception cref="T:Franson.Geo.GeoArgumentException">Invalid latitude.</exception>
        </member>
        <member name="M:Franson.Geo.Position.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a Position object from lon/lat/altitude
            </summary>
            <param name="dblLongitude">Longitude in decimal degrees</param>
            <param name="dblLatitude">Latitude in decimal degrees</param>
            <param name="dblAltitude">Altitude in meters</param>
            <param name="dblAltitudeUnit">Unit for specified altitude. <see cref="T:Franson.Geo.DistanceUnits"/></param>
            <exception cref="T:Franson.Geo.GeoArgumentException">Invalid latitude.</exception>
        </member>
        <member name="M:Franson.Geo.Position.Move(System.Double,System.Double)">
            <summary>
            Returns a new Position object at a specific distance and heading.
            </summary>
            <param name="dblDistance">Distance in meters to new position.</param>
            <param name="dblBearing">Heading in degrees to new position</param>
            <returns>New Position object.</returns>
        </member>
        <member name="M:Franson.Geo.Position.Bearing(Franson.Geo.Position)">
            <summary>
            Bearing from "this" position object to the position object given as argument.
            </summary>
            <param name="posSecond">Position to calculate bearing to.</param>
            <returns>Bearing in degrees.</returns>
        </member>
        <member name="M:Franson.Geo.Position.DistanceRadians(Franson.Geo.Position)">
            <summary>
            Distance between two position objects in radians.
            Great Circle Distance Calculations are used.
            </summary>
            <param name="posSecond">Position to calculate distance to.</param>
            <returns>Distance in radians</returns>
        </member>
        <member name="M:Franson.Geo.Position.Distance(Franson.Geo.Position)">
            <summary>
            Returns the distance between two <see cref="T:Franson.Geo.Position"/> objects.
            Great Circle Distance is used for the calculation. The returned value is in meters.
            </summary>
            <param name="posSecond">Position to calculate distance to.</param>
            <returns>Distance in meters</returns>
        </member>
        <member name="M:Franson.Geo.Position.m_NormalizeLongitude(System.Double)">
            <summary>
            Take a longitude value in degrees, and returns a value between 180 and -180.
            E.g. -270 returns 90, which is the same longitude on Earth.
            todo: expose in public API (static)
            </summary>
            <param name="dblLongitude">None normalized longitude</param>
            <returns>Normalized longitude</returns>
        </member>
        <member name="M:Franson.Geo.Position.GetAltitudeWithUnit(System.Double)">
            <summary>
            Return altitude in selected unit.
            </summary>
            <param name="dblUnit"><see cref="T:Franson.Geo.DistanceUnits"/></param>
            <returns>Altitude in selected unit</returns>
        </member>
        <member name="M:Franson.Geo.Position.ToString">
            <summary>
            Returns a string in the format longitude, latitude
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Position.Equals(System.Object)">
            <summary>
            Returns true if Position objects are has same values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Position.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Position.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Called when the object is serialized. 
            NOTE: Lon/Lat and Alt will be empty on CF 1. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Franson.Geo.Position.ReadXml(System.Xml.XmlReader)">
            <summary>
            Called when the object is deserialized. 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Franson.Geo.Position.GetSchema">
            <summary>
            Returns null
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.Position.Is3D">
            <summary>
            Returns true if Position object was created with altitude information.
            </summary>
        </member>
        <member name="P:Franson.Geo.Position.Longitude">
            <summary>
            Longitude in decimal degrees
            </summary>
        </member>
        <member name="P:Franson.Geo.Position.Latitude">
            <summary>
            Latitude in decimal degrees
            </summary>
        </member>
        <member name="P:Franson.Geo.Position.Altitude">
            <summary>
            Altitude in meters
            </summary>
        </member>
        <member name="T:Franson.Geo.TrackPoint">
            <summary>
            A TrackPoint contains a position, speed, heading in at a given time.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Geo.TrackPoint.m_bValid">
            <summary>
            Valid by default.
            </summary>
        </member>
        <member name="F:Franson.Geo.TrackPoint.m_longID">
            <summary>
            Database ID. 0 if not used.
            </summary>
        </member>
        <member name="M:Franson.Geo.TrackPoint.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean,System.Int64)">
            <summary>
            Create a TrackPoint object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
            <param name="bValid">True if information is reliable.</param>
            <param name="longID">Database ID for this TrackPoint</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean)">
            <summary>
            Create a TrackPoint object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
            <param name="bValid">True if information is reliable.</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime)">
            <summary>
            Create a TrackPoint object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.#ctor">
            <summary>
            For classes deriving from TrackPoint that want to do some calculation before setting 
            its parameters.
            </summary>
        </member>
        <member name="M:Franson.Geo.TrackPoint.SetTrackPoint(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean)">
            <summary>
            Can be used to populate TrackPoint. Must be called in constructor of deriving class.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
            <param name="bValid">True if the information should be considered to be up to date and reliable</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.SetTrackPoint(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime)">
            <summary>
            Can be used to populate TrackPoint. Must be called in constructor of deriving class.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="utc">Time stamp in UTC</param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.IsNullOrEmpty(Franson.Geo.TrackPoint)">
            <summary>
            Returns true if track point is null or has a 0,0 position
            </summary>
        </member>
        <member name="M:Franson.Geo.TrackPoint.ToString">
            <summary>
            String representation of content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.TrackPoint.Equals(System.Object)">
            <summary>
            Returns true if equal.
            </summary>
            <param name="obj">TrackPoint object</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Franson.Geo.TrackPoint.GetHashCode">
            <summary>
            Hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.TrackPoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Called when the object is serialized. 
            NOTE: UTC will be empty on CF 1. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.ReadXml(System.Xml.XmlReader)">
            <summary>
            Called when the object is deserialized. 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Franson.Geo.TrackPoint.GetSchema">
            <summary>
            Returns null
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.TrackPoint.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:Franson.Geo.TrackPoint.Velocity">
            <summary>
            Speed and heading
            </summary>
        </member>
        <member name="P:Franson.Geo.TrackPoint.UTC">
            <summary>
            Time stamp in UTC
            </summary>
        </member>
        <member name="P:Franson.Geo.TrackPoint.Valid">
            <summary>
            True if track point is valid.
            </summary>
        </member>
        <member name="P:Franson.Geo.TrackPoint.ID">
            <summary>
            Database ID for this TrackPoint. 0 if not relevant or not set.
            </summary>
        </member>
        <member name="T:Franson.Geo.SpeedUnits">
            <summary>
            Use in when converting between different speed units.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Geo.SpeedUnits.Knots">
            <summary>
            Factor between meters per second and knots
            </summary>
        </member>
        <member name="F:Franson.Geo.SpeedUnits.Kph">
            <summary>
            Factor between meters per second and kilometers per hour
            </summary>
        </member>
        <member name="F:Franson.Geo.SpeedUnits.Mph">
            <summary>
            Factor between meters per second and miles per hour
            </summary>
        </member>
        <member name="F:Franson.Geo.SpeedUnits.MetersPerSecond">
            <summary>
            Factor between meters per second and meters per second. That is 1.0
            </summary>
        </member>
        <member name="T:Franson.Geo.Velocity">
            <summary>
            Represents a velocity. This is the same as speed + a three or two dimensional direction. Read only and thread safe.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Geo.Velocity.HeadingDiff(System.Double,System.Double)">
            <summary>
            Takes differece between two Headings and normlizes the result to 0 to 180.
            </summary>
            <param name="dblHeadingOne">Heading one.</param>
            <param name="dblHeadingTwo">Heading two.</param>
            <returns>A value between 0 and 180 which is the shortest angel in degrees beween two headings.</returns>
        </member>
        <member name="M:Franson.Geo.Velocity.#ctor(System.Double,System.Double)">
            <summary>
            Create velocity from ground speed and heading over ground. Speed in meters per seconds.
            </summary>
            <param name="dblGroundSpeed">Speed over ground in meters per second</param>
            <param name="dblHeading">Heading in degrees. Zero is north.</param>
        </member>
        <member name="M:Franson.Geo.Velocity.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a Velocity object.
            </summary>
            <param name="dblGroundSpeed">Ground speed.</param>
            <param name="dblHeading">Heading in degrees. Zero is north.</param>
            <param name="dblUnit">Value from <see cref="T:Franson.Geo.SpeedUnits"/>. 1 m/s equals dblUnit. E.g. 1 m/s equals 3.6 kilometers per hour</param>
        </member>
        <member name="M:Franson.Geo.Velocity.GroundSpeedWithUnit(System.Double)">
            <summary>
            Get ground speed converted to a specific unit.
            </summary>
            <param name="dblUnit">Value from <see cref="T:Franson.Geo.SpeedUnits"/> or a custom value.</param>
            <returns>Speed</returns>
        </member>
        <member name="M:Franson.Geo.Velocity.Equals(System.Object)">
            <summary>
            Returns true if ground speed and heading are the same in both objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Velocity.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Velocity.ToString">
            <summary>
            String representation of velocity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Velocity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Called when the object is serialized. 
            NOTE: Heading and GroundSpeed will be empty on CF 1. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Franson.Geo.Velocity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Called when the object is deserialized. 
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Franson.Geo.Velocity.GetSchema">
            <summary>
            Returns null
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Geo.Velocity.GroundSpeed">
            <summary>
            Speed over ground. 3D velocity projected to ground speed. Speed in meter per seconds
            </summary>
        </member>
        <member name="P:Franson.Geo.Velocity.Heading">
            <summary>
            Heading over ground. 3D velocity projected to heading over ground.
            </summary>
        </member>
        <member name="T:Franson.Nmea.ParameterType">
            <summary>
            This enum sets the type of parameters a FRCMD or FRRET sentence have.
            </summary>
        </member>
        <member name="F:Franson.Nmea.ParameterType.Inline">
            <summary>
            Normal comma separated parameters that follow this field as part of the rest of
            the NMEA sentence.
            </summary>
        </member>
        <member name="F:Franson.Nmea.ParameterType.Nmea">
            <summary>
            Nmea sentences which follows this sentence. Next field indicates how many NMEA sentences
            will follow.
            </summary>
        </member>
        <member name="T:Franson.Nmea.CmdBase">
            <summary>
            Represents a $FRCMD or $FRRET sentence. Framework sentence to execute commands remotely.
            Class is thread safe for public access, not protected access.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Franson.Nmea.NmeaBase">
            <summary>
            Base class for all NMEA classes
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.#ctor">
            <summary>
            Should be overridden by the constructor that creates an object from paramters.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Should be overridden by the constructor that creates an object from a Sentence object.
            </summary>
            <param name="sentence">NMEA sentence</param>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.ToSentence">
            <summary>
            Convert to a generic Sentence object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.ToString">
            <summary>
            Convert to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.ToByteArray">
            <summary>
            Convert to a byte array. Useful if you want to send an NMEA object over a stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.Equals(System.Object)">
            <summary>
            Compares to NMEA objects. Returns true if they contains the identical information.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.BuildSentence">
            <summary>
            Called if object was created from parameters. Should be overridden and create a 
            Sentence object from the parameters.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaBase.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called if object was created from a Sentence object. 
            Should be overridden and extract parameters from the Sentence object
            </summary>
        </member>
        <member name="M:Franson.Nmea.CmdBase.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create from <see cref="T:Franson.Nmea.Sentence"/>.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Create an "Inline" FRCMD or FRRET sentence with comma separated parameters.
            </summary>
            <param name="strNmeaCmd">$FRCMD or $FRRET</param>
            <param name="strUsername">Username which commands orginates from</param>
            <param name="strCommand">Command</param>
            <param name="arrParams">Inline parameters</param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.#ctor(System.String,System.String,System.String,Franson.Nmea.ParameterType,System.Int32,System.String[])">
            <summary>
            Creates combined inline and sentence argument command.
            </summary>
            <param name="strNmeaCmd">$FRCMD or $FRRET</param>
            <param name="strUsername">Username which commands orginates from. Can be null</param>
            <param name="strCommand">Command</param>
            <param name="paramType">Nmea or Inline. For combined use Nmea</param>
            <param name="iSentenceCount">Number of sentence arguments</param>
            <param name="arrParams">Array of inline arguments.</param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Create FRCMD or FRRET sentence with NMEA sentences as extra data following this sentence.
            </summary>
            <param name="strNmeaCmd">$FRCMD or $FRRET</param>
            <param name="strUsername">Username for which this command is executed. Can be null.</param>
            <param name="strCommand">Command</param>
            <param name="iSentenceCount">NUmber of argument sentences.</param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.GetParameter(System.Int32)">
            <summary>
            Get FRCMD/FRRET parameter. <see cref="P:Franson.Nmea.CmdBase.ParameterType"/> must be "Inline". If paramater not exists null is returned.
            </summary>
            <param name="iIndex">Parameter value, or null if out of bounds.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.CmdBase.GetSentenceArgument(System.Int32)">
            <summary>
            Returns sentence argument. Returns null if there is no sentence by specified index.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.CmdBase.ToSentence(System.Int32)">
            <summary>
            Returns all sentences commands is built up from. index 0 returns FRRET or FRCMD, a greater
            index returns any present sentence arguments. If index is out of bounds, null is returned.
            
            If routed command, iIndex = 0 returns ROUTE, iIndex = 1 returns FRRET or FRCMD, and a greater
            index returns any present sentence arguments.
            
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.CmdBase.ToXML(System.Xml.XmlWriter)">
            <summary>
            Writes command as an XML representation to xmlWriter
            </summary>
            <param name="xmlWriter"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.BuildSentence">
            <summary>
            Builds a <see cref="T:Franson.Nmea.Sentence"/> object from the parameters specified in the constructor.
            Can be overridden to change the way the sentence is built.
            </summary>
            <returns>Sentence object</returns>
        </member>
        <member name="M:Franson.Nmea.CmdBase.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses sentence, and sets paramaters.
            Can be overridden to change the way a sentence is parsed.
            </summary>
            <param name="sentence"><see cref="T:Franson.Nmea.Sentence"/> to be parsed.</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Error parsing sentence</exception>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddParameter(System.String)">
            <summary>
            Add paramater.
            </summary>
            <param name="strParam"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddParameter(System.Int32)">
            <summary>
            Calls <see cref="M:Franson.Nmea.CmdBase.AddParameter(System.String)"/>
            </summary>
            <param name="iParam"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddParameter(System.Boolean)">
            <summary>
            Adds "1" for true, and "0" for false as inline paramater.
            </summary>
            <param name="bParam"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddSentence(Franson.Nmea.NmeaBase)">
            <summary>
            Calls <see cref="M:Franson.Nmea.CmdBase.AddSentence(Franson.Nmea.Sentence)"/>
            </summary>
            <param name="typedSentence"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.AddSentence(Franson.Nmea.Sentence)">
            <summary>
            Call this for each sentence argument.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.CmdBase.SetRoute(Franson.Nmea.ROUTE)">
            <summary>
            Set routing.
            </summary>
            <param name="route"></param>
        </member>
        <member name="P:Franson.Nmea.CmdBase.NmeaCmd">
            <summary>
            $FRCMD or $FRRET
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.Command">
            <summary>
            Command
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.ParameterType">
            <summary>
            ParameterType
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.ParameterCount">
            <summary>
            Number of parameters.
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.SentenceCount">
            <summary>
            Number of NMEA sentences used as arguments that follows this sentence.
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.AddedSentenceCount">
            <summary>
            Number of sentence that has been added using <see cref="M:Franson.Nmea.CmdBase.AddSentence(Franson.Nmea.Sentence)"/>
            </summary>
        </member>
        <member name="P:Franson.Nmea.CmdBase.ParamTypeField">
            <summary>
            Override if you don't want "Nmea" or "Inline" to be written as paramater type.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRCMD">
            <summary>
            FRCMD sentence.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRCMD.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRCMD object from <see cref="T:Franson.Nmea.Sentence"/>
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If it isn't a FRCMD sentence.</exception>
        </member>
        <member name="M:Franson.Nmea.FRCMD.#ctor(System.String,System.String,System.String[])">
            <summary>
            Create a FRCMD sentence with comma separated parameters.
            </summary>
            <param name="strUsername">Username which commands orginates from</param>
            <param name="strCommand">Command</param>
            <param name="arrParams">Parameters</param>
        </member>
        <member name="M:Franson.Nmea.FRCMD.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create FRCMD sentence with NMEA sentences as parameters.
            </summary>
            <param name="strUsername">Username for which this command is executed.</param>
            <param name="strCommand">Command name.</param>
            <param name="iSentenceCount">Number of sentence paramaters.</param>
        </member>
        <member name="M:Franson.Nmea.FRCMD.#ctor(System.String,System.String,Franson.Nmea.ParameterType,System.Int32,System.String[])">
            <summary>
            Create FRCMD with both inline paramaters and sentence paramters.
            </summary>
            <param name="strUsername">Username for which this command is executed.</param>
            <param name="strCommand">Command</param>
            <param name="paramType">Paramater type.</param>
            <param name="iSentenceCount">Number of sentence parameters.</param>
            <param name="arrParams">Array of inline paramters.</param>
        </member>
        <member name="M:Franson.Nmea.FRCMD.IsFRCMD(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRCMD sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Nmea.FRERR">
            <summary>
            Represents a $FRERR sentence.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Nmea.FRERR.NoRights">
            <summary>
            User has no right to execute this command. Authorixation error.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRERR.LoginError">
            <summary>
            Error logging in. Authentication error.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRERR.CannotExecute">
            <summary>
            Error code when a command cannot be executed.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRERR.NotSupported">
            <summary>
            Error code when a command isn't supported.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRERR.Pending">
            <summary>
            Error code when a command was queued for execution rather then executed.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRERR.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates an FRERR object from a Sentence object
            </summary>
            <param name="sentence">A $FRERR sentence</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRERR sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRERR.#ctor(System.String,System.String)">
            <summary>
            Creates an FRERR object from its paramaters.
            </summary>
            <param name="strCode">Error code.</param>
            <param name="strMessage">Human readable error message.</param>
        </member>
        <member name="M:Franson.Nmea.FRERR.IsFRERR(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRERR sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns>True if sentence is a FRERR</returns>
        </member>
        <member name="M:Franson.Nmea.FRERR.BuildSentence">
            <summary>
            Override this method if you want to build the Sentence object returned by 
            <see cref="M:Franson.Nmea.NmeaBase.ToSentence"/> in some other way.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRERR.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Override this method if you want to parse the Sentence object passed in the constructor
            in some other way.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRERR.Code">
            <summary>
            Returns the first field in the $FRERR sentence.
            "AuthErr" means authentication error.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRERR.Message">
            <summary>
            Returns the second field in the $FRERR sentence.
            A human readable message that describes the error.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRLIN">
            <summary>
            Represents a $FRLIN sentence. Used to login.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRLIN.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a FRLIN object from a Sentence object.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRLIN sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRLIN.#ctor(System.String,System.String)">
            <summary>
            Creates a FRLIN object from username + password
            </summary>
            <param name="strUsername">Username</param>
            <param name="strPassword">Password</param>
        </member>
        <member name="M:Franson.Nmea.FRLIN.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a FRLIN object from domain + username + password.
            </summary>
            <param name="strDomain">Not used. Set to null.</param>
            <param name="strUsername">Username</param>
            <param name="strPassword">Password</param>
        </member>
        <member name="M:Franson.Nmea.FRLIN.IsFRLIN(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRLIN sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRLIN.BuildSentence">
            <summary>
            Builds a <see cref="T:Franson.Nmea.Sentence"/> object from the parameters specified in the constructor.
            Can be overridden to change the way the sentence is built.
            </summary>
            <returns>Sentence object</returns>
        </member>
        <member name="M:Franson.Nmea.FRLIN.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses sentence, and sets paramaters.
            Can be overridden to change the way a sentence is parsed.
            </summary>
            <param name="sentence"><see cref="T:Franson.Nmea.Sentence"/> to be parsed.</param>
        </member>
        <member name="M:Franson.Nmea.FRLIN.InvertString(System.String)">
            <summary>
            Inverts a string. Used as very simple password scrambler. Not intended for encryption. Only to avoid clear text
            passwords in logs.
            </summary>
            <param name="strToInvert"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.FRLIN.Domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRLIN.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRLIN.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRPOS">
            <summary>
            Represents a NMEA FRPOS sentence. Contains information about position, velocity, time and which username
            it belongs to.
            Used to represent the position, speed and heading at a given moment in time.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRPOS.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a FRPOS object from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRPOS sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRPOS.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.String)">
            <summary>
            Creates a FRPOS object from its parameters
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="dtUTC">Time stamp</param>
            <param name="strUsername">Username</param>
        </member>
        <member name="M:Franson.Nmea.FRPOS.#ctor(Franson.Geo.TrackPoint,System.String)">
            <summary>
            Build FRPOS from TrackPoint.
            </summary>
            <param name="tp"></param>
            <param name="strUsername"></param>
        </member>
        <member name="M:Franson.Nmea.FRPOS.#ctor(Franson.Nmea.RMC,System.String)">
            <summary>
            Create an FRRMC object from RMC + username.
            </summary>
            <param name="rmc">A RMC object</param>
            <param name="strUsername">Username this information belongs to</param>
        </member>
        <member name="M:Franson.Nmea.FRPOS.IsFRPOS(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRPOS sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRPOS.BuildSentence">
            <summary>
            Builds a <see cref="T:Franson.Nmea.Sentence"/> object from the parameters specified in the constructor.
            Can be overridden to change the way the sentence is built.
            </summary>
            <returns>Sentence object</returns>
        </member>
        <member name="M:Franson.Nmea.FRPOS.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses sentence, and sets paramaters.
            Can be overridden to change the way a sentence is parsed.
            </summary>
            <param name="sentence"><see cref="T:Franson.Nmea.Sentence"/> to be parsed.</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence as an invalid format</exception>
        </member>
        <member name="P:Franson.Nmea.FRPOS.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRPOS.Velocity">
            <summary>
            Speed and heading.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRPOS.UTC">
            <summary>
            Time stamp.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRPOS.TrackPoint">
            <summary>
            TrackPoint
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRPOS.Username">
            <summary>
            Username this the information in this object belongs to.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRRDT">
            <summary>
            Represents a $FRRDT sentence. Used to request server to send position data for a specific user.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRRDT.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRRDT object from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRRDT sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRRDT.#ctor(System.String,System.Double)">
            <summary>
            Create a FRRDT object from its paramaters
            </summary>
            <param name="strUsername">Username to request position data from</param>
            <param name="dblInterval">The fastest interval in seconds data should be sent.</param>
            <exception cref="T:System.ArgumentException">If dblInterval is less than zero</exception>
        </member>
        <member name="M:Franson.Nmea.FRRDT.IsFRRDT(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRRDT sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRRDT.BuildSentence">
            <summary>
            Builds a <see cref="T:Franson.Nmea.Sentence"/> object from the parameters specified in the constructor.
            Can be overridden to change the way the sentence is built.
            </summary>
            <returns>Sentence object</returns>
        </member>
        <member name="M:Franson.Nmea.FRRDT.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses sentence, and sets paramaters.
            Can be overridden to change the way a sentence is parsed.
            </summary>
            <param name="sentence"><see cref="T:Franson.Nmea.Sentence"/> to be parsed.</param>
        </member>
        <member name="P:Franson.Nmea.FRRDT.Username">
            <summary>
            Username to stream position information from.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRRDT.Interval">
            <summary>
            Fastest interval in seconds data should be sent from server to client.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRRED">
            <summary>
            Represents a $FRRED sentence. Used to redirect a client to another server.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Nmea.FRRED.m_strServer">
            <summary>
            Server to redirect to
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRRED.m_iPort">
            <summary>
            Port to redirect to.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRRED.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRRED object from <see cref="T:Franson.Nmea.Sentence"/>
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.FRRED.#ctor(System.String,System.Int32)">
            <summary>
            Create from paramaters. Use <see cref="M:Franson.Nmea.NmeaBase.ToSentence"/> to convert to a <see cref="T:Franson.Nmea.Sentence"/> object.
            </summary>
            <param name="strServer">Server address.</param>
            <param name="iPort">Port address</param>
        </member>
        <member name="M:Franson.Nmea.FRRED.IsFRRED(Franson.Nmea.Sentence)">
            <summary>
            Returns true if Sentence is a FRRED sentence.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRRED.BuildSentence">
            <summary>
            Called by NmeaBase to build sentence from paramters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRRED.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase to parse <see cref="T:Franson.Nmea.Sentence"/> spcedified in constructor.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRRED.Server">
            <summary>
            Server address
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRRED.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRRET">
            <summary>
            FRRET sentence.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRRET object from <see cref="T:Franson.Nmea.Sentence"/>
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If it isn't a FRRET sentence</exception>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,System.String,System.String[])">
            <summary>
            Create a FRRET sentence with comma separated parameters.
            </summary>
            <param name="strUsername">Username which commands orginates from</param>
            <param name="strCommand">Command</param>
            <param name="arrParams">Parameters</param>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create FRRET sentence NMEA sentences as parameters.
            </summary>
            <param name="strUsername">Username for which this command was executed.</param>
            <param name="strCommand">Command that was executed.</param>
            <param name="iSentenceCount">Number of sentence paramaters.</param>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,System.String,Franson.Nmea.ParameterType,System.Int32,System.String[])">
            <summary>
            Create FRRET with both inline paramaters and sentence paramaters.
            </summary>
            <param name="strUsername">Username for which this command was executed.</param>
            <param name="strCommand">Command that was executed.</param>
            <param name="paramType">Paramater type. Inline or Nmea.</param>
            <param name="iSize">Number of sentence paramaters.</param>
            <param name="arrParams">Array of inline paramaters.</param>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,System.Exception)">
            <summary>
            Creates error return.
            </summary>
            <param name="strCommand"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Franson.Nmea.FRRET.#ctor(System.String,Franson.Nmea.FRERR)">
            <summary>
            Creates error return.
            </summary>
            <param name="strCommand"></param>
            <param name="err"></param>
        </member>
        <member name="M:Franson.Nmea.FRRET.IsFRRET(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRRET sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Nmea.FRROW">
            <summary>
            A row of values.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Nmea.FRROW.m_arrValues">
            <summary>
             Keeps value temporary.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRROW.#ctor(System.Object[])">
            <summary>
            Create from string array. Will make a copy of contant of string array.
            </summary>
            <param name="arrValues"></param>
        </member>
        <member name="M:Franson.Nmea.FRROW.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create typed sentence from genertic sentence.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not an FRROW sentence</exception>
        </member>
        <member name="M:Franson.Nmea.FRROW.#ctor(Franson.Nmea.Sentence,Franson.Nmea.FRSCH,Franson.Nmea.FRSCH)">
            <summary>
            Create a row sentence with schema and column names.
            </summary>
            <param name="sentence">Data</param>
            <param name="schColumnsNames">Names</param>
            <param name="schColumnTypes">Schema</param>
        </member>
        <member name="M:Franson.Nmea.FRROW.IsFRROW(Franson.Nmea.Sentence)">
            <summary>
            Returns true if generic sentence is of type FRROW
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRROW.GetField(System.String)">
            <summary>
            Returns value for a named column. Returns null if column name doesn't exist.
            </summary>
            <param name="strColumnName"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">No FRSCH assigned to this row in constructor.</exception>
        </member>
        <member name="M:Franson.Nmea.FRROW.GetField(System.Int32)">
            <summary>
            Returns value of field. Index 0 is the first value.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRROW.BuildSentence">
            <summary>
            Builds generic sentence
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRROW.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parses generic sentence
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not an FRROW sentence</exception>
        </member>
        <member name="P:Franson.Nmea.FRROW.ColumnCount">
            <summary>
            Number of columns with values in row.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRSCHType">
            <summary>
            Defines which type of data a FRSCH sentence contains.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRSCHType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRSCHType.ColumnNames">
            <summary>
            This FRSCH sentence contains column names.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRSCHType.ColumnTypes">
            <summary>
            This FRSCH sentence contains data types.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRSCH">
            <summary>
            Schema information when returning a "record set" over GpsGate Protocol.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Nmea.FRSCH.m_arrNames">
            <summary>
            Holds column names temporary in constructor.
            </summary>
        </member>
        <member name="F:Franson.Nmea.FRSCH.m_arrType">
            <summary>
            Holds column types temporary in constructor.
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRSCH.#ctor(System.String[])">
            <summary>
            Create FRSCHema sentence from an array of column name
            </summary>
            <param name="arrNames">Columns names</param>
        </member>
        <member name="M:Franson.Nmea.FRSCH.#ctor(System.Type[])">
            <summary>
            Create a data type row.
            </summary>
            <param name="arrTypes"></param>
        </member>
        <member name="M:Franson.Nmea.FRSCH.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create from generic sentence
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException"></exception>
        </member>
        <member name="M:Franson.Nmea.FRSCH.IsFRSCH(Franson.Nmea.Sentence)">
            <summary>
            Returns true if generic sentence is of type FRSCH
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSCH.GetColumnIndex(System.String)">
            <summary>
            Returns column for named column. Returns -1 if not found.
            </summary>
            <param name="strColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSCH.BuildSentence">
            <summary>
            Build generic sentence from paramaters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSCH.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parse generic sentence to typed FRSCH sentence.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not a FRSCH sentence</exception>
        </member>
        <member name="P:Franson.Nmea.FRSCH.FRSCHType">
            <summary>
            Type of FRSCH sentence. Does it contain column names, or column types?
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRSCH.ColumnCount">
            <summary>
            Number of 
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRSES">
            <summary>
            Represents a $FRSES sentence, which holds a session key. Will be returned from server after login.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRSES.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a FRSES object from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If sentence isn't a $FRERR sentence.</exception>
            <exception cref="T:System.ArgumentNullException">sentence is null</exception>
        </member>
        <member name="M:Franson.Nmea.FRSES.#ctor(System.String)">
            <summary>
            Creates a FRSES object from a session key.
            </summary>
            <param name="strSessionKey"></param>
        </member>
        <member name="M:Franson.Nmea.FRSES.IsFRSES(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRSES sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSES.BuildSentence">
            <summary>
            Called by NmeaBase if this object was created from paramters (a session key) and.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRSES.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase if this object was created from a Sentence object.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRSES.SessionKey">
            <summary>
            Typically a GUID string that uniquely identifies a session.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRVAL">
            <summary>
            FRVAL sentence. Represents a variable. "name = value"
            </summary>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToField(System.Boolean)">
            <summary>
            Convert from bool to FRVAL value field.
            </summary>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToField(System.Int32)">
            <summary>
            Convert from int to FRVAL value field.
            </summary>
            <param name="iValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToField(System.Double,System.Int32)">
            <summary>
            Convert from double to FRVAL value field.
            </summary>
            <param name="dblValue"></param>
            <param name="iDecimals"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToField(System.DateTime)">
            <summary>
            Converts to GpsGate formated data string "YYYY-MM-DD HH:MM:SS.sss"
            </summary>
            <param name="dtValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ToValue(System.String,System.Type)">
            <summary>
            Convert from field (string) to typed object
            </summary>
            <param name="strValue"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.Boolean)">
            <summary>
            Create FRVAL from bool.
            </summary>
            <param name="strName">Key name.</param>
            <param name="bValue"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.Int32)">
            <summary>
            Create FRVAL from integer.
            </summary>
            <param name="strName"></param>
            <param name="iValue"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.Double,System.Int32)">
            <summary>
            Build FRVAL from double,
            </summary>
            <param name="strName">Name of key</param>
            <param name="dblValue">Value</param>
            <param name="iDecimals">NUmber of decimals.</param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.DateTime)">
            <summary>
            Build FRVAL from DateTime
            </summary>
            <param name="strName"></param>
            <param name="dtValue"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.String)">
            <summary>
            Create FRVAL sentence from string value.
            </summary>
            <param name="strName">Name of variable</param>
            <param name="strValue">Value of variable</param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create FRVAL from parameters
            </summary>
            <param name="strName">Name of variable</param>
            <param name="strValue">Value of variable</param>
            <param name="strType"></param>
            <param name="strNamespace"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create FRVAL from <see cref="T:Franson.Nmea.Sentence"/>
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.FRVAL.IsFRVAL(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRVAL sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.IsName(System.String)">
            <summary>
            Makes a case insensitive compare between <see cref="P:Franson.Nmea.FRVAL.Name"/> and specified name.
            If they are equal, true is returned.
            </summary>
            <param name="strName">string to compare Name to.</param>
            <returns>True if case insensitive compare is equal.</returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.IsValue(System.String)">
            <summary>
            Makes a case insensitive compare between <see cref="P:Franson.Nmea.FRVAL.Value"/> and specified value.
            If equal true is returned.
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ValueAsObject(System.Type)">
            <summary>
            Returns a named value. The value is typed as int, double, string, bool or DateTime.
            To support more types override this method. 
            </summary>
            <param name="oType">Type to convert stringg value to.</param>
            <returns>Object to be cast.</returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.BuildSentence">
            <summary>
            Build sentence from paramters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVAL.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parse sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRVAL.Name">
            <summary>
            Name of variable
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRVAL.Value">
            <summary>
            Value of variable.
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRVAL.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRVAL.Namespace">
            <summary>
            Namespace.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRVER">
            <summary>
            Represents a $FRVER sentence. Used to tell which version of the protocol is supported.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRVER.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create a FRVER object from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
        </member>
        <member name="M:Franson.Nmea.FRVER.#ctor(System.Version,System.String)">
            <summary>
            Create FRVER object from its paramaters.
            </summary>
            <param name="version">Version</param>
            <param name="strAppName">Name of application sending sentence</param>
        </member>
        <member name="M:Franson.Nmea.FRVER.#ctor(System.Int32,System.Int32)">
            <summary>
            Create FRVER object from its paramaters
            </summary>
            <param name="iMajor">Major version (field 1)</param>
            <param name="iMinor">Minor version (field 2)</param>
        </member>
        <member name="M:Franson.Nmea.FRVER.IsFRVER(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRVER sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVER.BuildSentence">
            <summary>
            Called by NmeaBase
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRVER.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRVER.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Franson.Nmea.FRVER.ApplicationName">
            <summary>
            Name of application sending this FRVER sentence. Here you place the name of the application
            that implements the GpsGate NMEA protocol.
            </summary>
        </member>
        <member name="T:Franson.Nmea.FRWDT">
            <summary>
            Represents a $FRWDT sentence. Used to inform server that client wants to write position data.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.FRWDT.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a FRWDT from a Sentence object.
            </summary>
            <param name="sentence">NMEA Sentence</param>
        </member>
        <member name="M:Franson.Nmea.FRWDT.#ctor(System.String)">
            <summary>
            Creates FRWDT object from its paramaters.
            </summary>
            <param name="strFilter">"ALL" for unfiltered data. "NMEA" for NMEA data.</param>
        </member>
        <member name="M:Franson.Nmea.FRWDT.IsFRWDT(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a FRWDT sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRWDT.BuildSentence">
            <summary>
            Called by NmeaBase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.FRWDT.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.FRWDT.Filter">
            <summary>
            Filter. "ALL" or "NMEA".
            </summary>
        </member>
        <member name="T:Franson.Nmea.GGA">
            <summary>
            Representing an NMEA GGA sentence. Will accept any prefix including "$GP"
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.GGA.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates GGA object from Sentence. Will use the system UTC year/month/day to complement the UTC time in the sentence.
            Date information is missing in GGA.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.GGA.#ctor(Franson.Nmea.Sentence,System.DateTime)">
            <summary>
            Create GGA object from Sentence. Will use year/month/day in dtYearMonthDay to complement the missing date information
            in the GGA sentence.
            </summary>
            <param name="sentence">Sentence to parse.</param>
            <param name="dtYearMonthDay">Yesr/Month/Day to use</param>
        </member>
        <member name="M:Franson.Nmea.GGA.#ctor(Franson.Geo.Position,System.DateTime,System.Boolean,System.Int32,System.Double)">
            <summary>
            Create GGA object from paramaters. Use <see cref="M:Franson.Nmea.NmeaBase.ToSentence"/> to convert to <see cref="T:Franson.Nmea.Sentence"/> object.
            </summary>
            <param name="position">Position</param>
            <param name="dtUTC">UTC time</param>
            <param name="bValid">Valid</param>
            <param name="iSatsInView">Satellites in view</param>
            <param name="dblHDOP">HDOP</param>
        </member>
        <member name="M:Franson.Nmea.GGA.IsGGA(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a GGA sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.GGA.BuildSentence">
            <summary>
            Called by NmeaBase to build sentence from paramters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.GGA.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase to parse <see cref="T:Franson.Nmea.Sentence"/> spcedified in constructor.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.GGA.Position">
            <summary>
            Position. Longitude, latitude and altitude. GGA does currently not support diff between WGS84 and sea level.
            </summary>
        </member>
        <member name="P:Franson.Nmea.GGA.UTC">
            <summary>
            UTC time stamp.
            </summary>
        </member>
        <member name="P:Franson.Nmea.GGA.Valid">
            <summary>
            If position is valid.
            </summary>
        </member>
        <member name="P:Franson.Nmea.GGA.SatellitesInView">
            <summary>
            Satellites in view.
            </summary>
        </member>
        <member name="P:Franson.Nmea.GGA.HDOP">
            <summary>
            HDOP.
            </summary>
        </member>
        <member name="T:Franson.Nmea.MessageBuilder">
            <summary>
            Puts smaller messages into larger messages without breaking up smaller messages.
            The typical usage is device commands sent over SMS split into one or more SMS messages for transport to the device.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.MessageBuilder.#ctor(System.Int32)">
            <summary>
            Create message builder. Set message length to 160 for a SMS builder.
            </summary>
            <param name="iMessageLength"></param>
        </member>
        <member name="M:Franson.Nmea.MessageBuilder.AddSmallMessage(System.String)">
            <summary>
            Add smaller message.
            </summary>
            <param name="strShortMessage"></param>
            <exception cref="T:System.InvalidOperationException">If small message is longer than maximum large message.</exception>
        </member>
        <member name="M:Franson.Nmea.MessageBuilder.NextLargeMessage">
            <summary>
            Parses small messages and returns chucks of upp to larger message length without breaking up smaller messages.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.MessageBuilder.Count">
            <summary>
            Returns number of large messages.
            </summary>
        </member>
        <member name="T:Franson.Nmea.NmeaFormatException">
            <summary>
            The Sentence or string used to create an NmeaBase based object was not of the right format.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaFormatException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage">Description.</param>
        </member>
        <member name="M:Franson.Nmea.NmeaFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="T:Franson.Nmea.NmeaBuildException">
            <summary>
            Could not build Sentence object from the objects paramaters.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaBuildException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage">Description.</param>
        </member>
        <member name="T:Franson.Nmea.NmeaParserException">
            <summary>
            Could not parse NMEA data.
            </summary>
        </member>
        <member name="M:Franson.Nmea.NmeaParserException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:Franson.Nmea.NmeaParserException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="T:Franson.Nmea.Parser">
            <summary>Parses NMEA data. Parser creates <see cref="T:Franson.Nmea.Sentence"/> objects (or objects which derives thereof)
            Then depending on sentence type, more specialized object can be created which derives from <see cref="T:Franson.Nmea.NmeaBase"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Parser.CheckMidnightError(System.DateTime)">
            <summary>
            Should be called for time stamps that does not include date. This will fix any midnight error.
            </summary>
            <param name="dtGPS"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaCoordinate(System.String,System.String)">
            <summary>
            Parse NMEA style DDMM.mmmm format string.
            </summary>
            <param name="strField">A string in the format "DDMM.mmmm"</param>
            <param name="strHemi">Hemisphere. Can be "W" (West), "E" (East), "N" (North) or "S" (South).</param>
            <returns>The value in decimal degrees.</returns>
            <exception cref="T:Franson.Nmea.NmeaFormatException">The input was not in valid DDMM.mmmm format, or the hemisphere 
            value was not valid.</exception>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaDateTime(System.String,System.String)">
            <summary>
            Convert NMEA date and time strings to a UTC DateTime structure
            </summary>
            <param name="strFieldDate">A string with the format "DDMMYY"</param>
            <param name="strFieldTime">A string with the format "HHMMSS.ss"</param>
            <returns>A DateTime variable</returns>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not a valid date or time format</exception>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaDouble(System.String)">
            <summary>
            Parse a string with an NMEA number, and return it as a double. Retruns 0 if field is null or empty.
            </summary>
            <param name="strField">Format "D.ddd"</param>
            <returns>Value as a double</returns>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not a valid number format</exception>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaInt(System.String)">
            <summary>
            Parse a string with a NMEA integer.
            </summary>
            <param name="strField">A string with the format "DD"</param>
            <returns>An integer.</returns>
            <exception cref="T:Franson.Nmea.NmeaFormatException">Not a valid integer format</exception>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaHex(System.String)">
            <summary>
            Parse string in hex format
            </summary>
            <param name="strField"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.ParseNmeaBool(System.String)">
            <summary>
            Returns true if field equals "1", returns false in all other cases.
            </summary>
            <param name="strField"></param>
            <returns></returns>
        </member>
        <member name="F:Franson.Nmea.Parser.m_cirbuf">
            <summary>
            Raw data to be parsed
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_bPrefixFound">
            <summary>
            Set to true when start of a sentence is found.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_arrEndPattern">
            <summary>
            End pattern of a sentence. Can be customized in constructor
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_iUsedEndPatternIndex">
            <summary>
            Which end pattern was used to match sentence
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_bCustomEndPattern">
            <summary>
            Set to true if custom end pattern is used.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_arrStartPrefix">
            <summary>
            Start prefix of a sentence. Can be customized in constructor
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_bCheckMandatory">
            <summary>
            If there must be a checksum or not.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Parser.m_bUseUtf8Escape">
            <summary>
            Set to true if a field can be escaped using {len}utf8 text
            </summary>
        </member>
        <member name="M:Franson.Nmea.Parser.#ctor">
            <summary>
            Create new NMEA parser, or NMEA derived parser. UTF8 escaped fields enabled.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Parser.#ctor(System.String)">
            <summary>
            Create Parser with a custom end pattern. Default is "\r\n"
            </summary>
            <param name="strEndPattern">Custom end pattern, that ends each sentence.</param>
        </member>
        <member name="M:Franson.Nmea.Parser.#ctor(System.String[],System.String)">
            <summary>
            Create Parser with custom start and custom end pattern.
            </summary>
            <param name="arrStartPattern">Custom start pattern. If null, default pattern is used.</param>
            <param name="strEndPattern">Custom end pattern. If null, default pattern is used.</param>
        </member>
        <member name="M:Franson.Nmea.Parser.#ctor(System.String[],System.String[])">
            <summary>
            Configures parser to use custom start and end patterns.
            </summary>
            <param name="arrStartPattern">Array of possible start patterns.</param>
            <param name="arrEndPattern">Array of possible end patterns.</param>
        </member>
        <member name="M:Franson.Nmea.Parser.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to parser. Use NextSentence() to retrieve parsed NMEA sentences.
            </summary>
            <param name="arrData">byte array</param>
            <param name="iStartIndex">From which index in array to start writing data.</param>
            <param name="iLength">Number of bytes to write from array</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.Write(System.Byte[])">
            <summary>
            Calls <see cref="M:Franson.Nmea.Parser.Write(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
            <param name="arrData"></param>
            <returns>Bytes written to parser. Will be less that in arrData if internal buffer is full.</returns>
        </member>
        <member name="M:Franson.Nmea.Parser.Write(System.String)">
            <summary>
            Converts string to byte array, interpreted as UTF8 and calls <see cref="M:Franson.Nmea.Parser.Write(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
            <param name="strData">string to write to parser</param>
        </member>
        <member name="M:Franson.Nmea.Parser.NextSentence">
            <summary>
            Returns next parsed NMEA sentence. Returns NULL if there are no more sentences.
            Will accept sentences that both ends with "*XX\r\n" and that ends with the checksum only "*XX"
            This is because many over the air protocols that uses NMEA removes "\r\n" even though it is part 
            of the NMEA standard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.m_IsEscaped(System.Int32)">
            <summary>
            Returns true if iIndex is inside an escaped region.
            </summary>
            <param name="iIndexEscaped"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.Reset">
            <summary>
            Resets parser
            </summary>
        </member>
        <member name="M:Franson.Nmea.Parser.ReadBuffer">
            <summary>
            Returns what is left in parser buffer. The buffer is reset. Returns null if no data in buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.ValidateSentence(System.Byte[])">
            <summary>
            Returns true if arrData is a valid NMEA sentence with a valid checksum.
            </summary>
            <param name="arrData">Array of data that should be validated as an NMEA sentence</param>
            <returns>True if valid NMEA</returns>
        </member>
        <member name="M:Franson.Nmea.Parser.CreateSentence(System.Byte[])">
            <summary>
            Create a Sentence object from parsed data.
            </summary>
            <param name="arrSentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Parser.AsciiHexToByte(System.Byte,System.Byte)">
            <summary>
            Converts two bytes ascii hex value to one byte 8-bit value
            </summary>
            <param name="byteAsciiHi">Hi nibble</param>
            <param name="byteAsciiLo">Low nibble</param>
            <returns>Binary value</returns>
        </member>
        <member name="P:Franson.Nmea.Parser.EmptyLength">
            <summary>
            Returns number of bytes free in buffer
            </summary>
        </member>
        <member name="P:Franson.Nmea.Parser.ChecksumMandatory">
            <summary>
            Set to false if checksum shouldn't be used. Default true.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Parser.NoStartPrefix">
            <summary>
            Override and return true if sentences doesn't have a start prefix. Returns false by default.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Parser.IgnoreRepeatedStartPrefix">
            <summary>
            Set to true if repeated start prefis should be igonred. Typically the case if 
            start prefix is also used as field separator. Default value is false. Override to change.
            </summary>
        </member>
        <member name="T:Franson.Nmea.RMC">
            <summary>
            Represents a NMEA RMC sentence. Will accept any prefix including "$GP".
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Creates a RMC object from a Sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Nmea.Sentence,System.Double)">
            <summary>
            Creates RMC object with extra altitude information which will be used by <see cref="P:Franson.Nmea.RMC.Position"/>
            </summary>
            <param name="sentence">NMEA sentence</param>
            <param name="dblAltitude">Extra altitude information</param>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Geo.TrackPoint)">
            <summary>
            Creates a RMC object from a TrackPoint object.
            </summary>
            <param name="trackPoint">TrackPoint. Contains position, velocity, and time stamp.</param>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean)">
            <summary>
            Creates a RMC object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading.</param>
            <param name="dtUTC">Time stamp in UTC</param>
            <param name="bValid">Valid information or not.</param>
        </member>
        <member name="M:Franson.Nmea.RMC.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.Boolean,System.Double)">
            <summary>
            Creates a RMC object.
            </summary>
            <param name="position">Position</param>
            <param name="velocity">Speed and heading</param>
            <param name="dtUTC">Time stamp in UTC</param>
            <param name="bValid">Valid information or not</param>
            <param name="dblMagneticVariation">Magnetic variation.</param>
        </member>
        <member name="M:Franson.Nmea.RMC.IsRMC(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a RMC sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.RMC.BuildSentence">
            <summary>
            Called by NmeaBase.
            </summary>
        </member>
        <member name="M:Franson.Nmea.RMC.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Called by NmeaBase
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.RMC.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.Velocity">
            <summary>
            Speed and heading.
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.UTC">
            <summary>
            Time stamp in UTC
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.Valid">
            <summary>
            Valid information in this object or not.
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.MagneticVariation">
            <summary>
            Magnetic variation.
            </summary>
        </member>
        <member name="P:Franson.Nmea.RMC.TrackPoint">
            <summary>
            TrackPoint
            </summary>
        </member>
        <member name="T:Franson.Nmea.ROUTE">
            <summary>
            Represents a $ROUTE sentence
            </summary>
        </member>
        <member name="M:Franson.Nmea.ROUTE.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create ROUTE object from Sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.ROUTE.#ctor(System.String,System.String)">
            <summary>
            Create ROUTE object from parameters.
            </summary>
            <param name="strReceiverType">Type of entity to route to e.g. "device"</param>
            <param name="strReceiverID">ID of receiver.</param>
        </member>
        <member name="M:Franson.Nmea.ROUTE.#ctor(System.String,System.String,System.String)">
            <summary>
            Create ROUTE object from paramaters.
            </summary>
            <param name="strReceiverType">Type of entity to route to e.g. "device"</param>
            <param name="strReceiverID">ID of receiver.</param>
            <param name="strTransport">Recommended transport from server to device. E.g. "sms", "tcp", "udp" or "orbcomm".</param>
        </member>
        <member name="M:Franson.Nmea.ROUTE.IsROUTE(Franson.Nmea.Sentence)">
            <summary>
            Returns true if sentence is a ROUTE sentence.
            </summary>
            <param name="sentence">Sentence to check</param>
            <returns>True if sentence is a ROUTE</returns>
        </member>
        <member name="M:Franson.Nmea.ROUTE.IsReceiverType(System.String)">
            <summary>
            Makes a case insensitive compare for <see cref="P:Franson.Nmea.ROUTE.ReceiverType"/>
            </summary>
            <param name="strCompareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.ROUTE.IsTransport(System.String)">
            <summary>
            Makes a case insensitive compare for <see cref="P:Franson.Nmea.ROUTE.Transport"/>
            </summary>
            <param name="strCompareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.ROUTE.BuildSentence">
            <summary>
            Override this method if you want to build the Sentence object returned by 
            <see cref="M:Franson.Nmea.NmeaBase.ToSentence"/> in some other way.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.ROUTE.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Override this method if you want to parse the Sentence object passed in the constructor
            in some other way.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Nmea.ROUTE.ReceiverType">
            <summary>
            Receiver type e.g. "device", to route a message to a device.
            </summary>
        </member>
        <member name="P:Franson.Nmea.ROUTE.ReceiverID">
            <summary>
            ID of receiving party.
            </summary>
        </member>
        <member name="P:Franson.Nmea.ROUTE.Transport">
            <summary>
            Type of transport. E.g. "sms", "tcp", "udp", "sat", "email", "http"
            </summary>
        </member>
        <member name="T:Franson.Nmea.Sentence">
            <summary>
            Representing an NMEA sentence. Read only and thread safe.
            Use Parser or NmeaBuilder to create Sentence object.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.Sentence.#ctor(System.Byte[])">
            <summary>
            Create Sentence object from NMEA string. No validation of data is made.
            Checksum and syntax is checked by GpsGate.Nmea.Parser
            </summary>
            <param name="arrData">An array building up a valid NMEA sentence.</param>
        </member>
        <member name="M:Franson.Nmea.Sentence.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Called by derived object.
            </summary>
            <param name="arrData">Data that builds up sentence</param>
            <param name="bDummy">Dummy, to differ signature from internal constructor</param>
        </member>
        <member name="M:Franson.Nmea.Sentence.#ctor(System.Byte[],System.Char[],System.String[])">
            <summary>
            Constructor for sentence with custom delimiters
            </summary>
            <param name="arrData">Sentence data</param>
            <param name="arrDelimiters">Array of possible field delimiters. E.g. { " " "\t" } if fields are split by space or tab. Set to null to keep default delimiters which is</param>
            <param name="arrEndPattern">Custom end patter. Set to null to use default "\r" or "*"</param>
        </member>
        <member name="M:Franson.Nmea.Sentence.#ctor(System.Byte[],System.Char[])">
            <summary>
            Same as <see cref="M:Franson.Nmea.Sentence.#ctor(System.Byte[],System.Char[],System.String[])"/>, but uses default end pattern.
            </summary>
            <param name="arrData"></param>
            <param name="arrDelimiters"></param>
        </member>
        <member name="M:Franson.Nmea.Sentence.GetField(System.Int32)">
            <summary>
            Get NMEA field by index. Command field has index 0, first data field index 1, etc.
            Returns null if the index is out of bounds.
            </summary>
            <param name="iIndex">Index of field. Zero for command.</param>
            <returns>The field as a string, and null if the index is out of bounds.</returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.FindField(System.String)">
            <summary>
            <see cref="M:Franson.Nmea.Sentence.FindField(System.String,System.Int32)"/>. Starts searching at index 0.
            </summary>
            <param name="strSearch"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.FindField(System.String,System.Int32)">
            <summary>
            Returns first index of first field that matches argument. The search is case insensitive. If no match found, -1 is returned.
            The whole filed must match, not just a part of it.
            </summary>
            <param name="strSearch">string to search for</param>
            <param name="iStartIndex">Start index</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.GetCommand">
            <summary>
            Same as GetField(0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.GetCommand(System.Int32)">
            <summary>
            Returns the iLength rightmost charachters in the command field.
            If the command field is shorter than iLength, the entire command field is returned.
            </summary>
            <param name="iLength"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.MakeFields(System.String)">
            <summary>
            Splits sentence to fields. Override for custom sentence formats.
            </summary>
            <param name="strData"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.ToString">
            <summary>
            Returns whole sentence as a string including trailing \r\n
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.Equals(System.Object)">
            <summary>
            Compares to Sentence objects. Returns true if objects contains the same logical sentence.
            </summary>
            <param name="obj">Sentence object to compare to.</param>
            <returns>True if contains same sentence information</returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.GetHashCode">
            <summary>
            HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Sentence.ToByteArray">
            <summary>
            Returns byte array representation of NMEA sentence. A copy is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.Sentence.Item(System.Int32)">
            <summary>
            Same as GetField()
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.Sentence.FieldCount">
            <summary>
            Get number of fields, including command field.
            </summary>
        </member>
        <member name="T:Franson.Nmea.SentenceBuilder">
            <summary>
            Builds Sentence objects
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaCoordinate(System.Double)">
            <summary>
            Converts a double in decimal degree to a string in NMEA format "DDDMM.mmmmm"
            </summary>
            <param name="dblDegrees">Decimal degrees</param>
            <returns>A string in NMEA format "DDDMM.mmmmm"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaCoordinate(System.Double,System.Int32,System.Int32)">
            <summary>
            Converts a double in decimal degree to a string in NMEA format "DDDMM.mmmmm"
            </summary>
            <param name="dblDegrees">Decimal degrees</param>
            <param name="iLeftPadding">Left padding with "0" in returned string.</param>
            <param name="iDecimals">Nmmber of decimals in returned string</param>
            <returns>A string with the format "DDDMM.mmmmm"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaDate(System.DateTime)">
            <summary>
            Build an NMEA date format string from a DateTime variable.
            </summary>
            <param name="dtUTC">DateTime in UTC</param>
            <returns>A string in the format "DDMMYY"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaTime(System.DateTime)">
            <summary>
            Build an NMEA time format string from a DateTime variable.
            </summary>
            <param name="dtUTC">DateTime in UTC</param>
            <returns>A string in the format "HHMMSS.ss"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaDouble(System.Double,System.Int32,System.Int32)">
            <summary>
            Convert a double to a NMEA format numercial string. 
            </summary>
            <param name="dblValue">Value</param>
            <param name="iLeftPadding">Left padding with "0". Set to 0 to disable left padding.</param>
            <param name="iDecimals">Number of decimals</param>
            <returns>Returns a string with the format "D.dddd"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaInt(System.Int32,System.Int32)">
            <summary>
            Convert an integer to a NMEA integer format string.
            </summary>
            <param name="iValue">Integer value</param>
            <param name="iLeftPadding">Left padding with "0"</param>
            <returns>A string with the format "DD" E.g. "045"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaHex(System.Int32,System.Int32)">
            <summary>
            Converts an integer to a hex string.
            </summary>
            <param name="iValue">Integer value</param>
            <param name="iLeftPadding">Left padding with "0"</param>
            <returns>A string with the format "XX" E.g. "0F2"</returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.BuildNmeaBool(System.Boolean)">
            <summary>
            Converts bool to NMEA field. true -> "1", false -> "0"
            </summary>
            <param name="bValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.ToSentence">
            <summary>
            Returns built sentence as a read only Sentence object.
            </summary>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.ToByteArray">
            <summary>
            Returns built sentence as a byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.ToString">
            <summary>
            Return built sentence as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.SetCommand(System.String)">
            <summary>
            Sets the command. E.g. "$GPRMC"
            </summary>
            <param name="strCommand">Command</param>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.SetField(System.Int32,System.String)">
            <summary>
            Sets the value of a specified field. Use the static SentenceBuilder.BuildXYZ() methods to convert from different data 
            types to NMEA formated strings.
            </summary>
            <param name="iIndex">Field index. The first field has index 1.</param>
            <param name="strValue">Value as a string.</param>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.SetField(System.Int32,System.Int32)">
            <summary>
            Sets the value of a specified field.
            </summary>
            <param name="iIndex">Index of field. The first field has index 1.</param>
            <param name="iValue">Integer value.</param>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.SetLength(System.Int32)">
            <summary>
            Specifies the number of fields in this sentence. If not set, the number of fields will equal 
            the highest index used when calling <see cref="M:Franson.Nmea.SentenceBuilder.SetField(System.Int32,System.String)"/>.
            </summary>
            <param name="iLength"></param>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.Reset">
            <summary>
            Clears all data in sentence
            </summary>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.GetPrefix">
            <summary>
            Prefix. Override to change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.GetPostfix">
            <summary>
            Postfix. Override to change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.GetDelimiter(System.Int32)">
            <summary>
            Field delimiter. Override to change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.HasChecksum">
            <summary>
            Returns true if this sentence has a checksum. Returns true. Override to change behaviour.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.CalcChecksum(System.Byte[])">
            <summary>
            Sentence checksum. Override to change.
            </summary>
            <param name="arrSentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.SentenceBuilder.CreateSentence(System.Byte[])">
            <summary>
            Creates a <see cref="T:Franson.Nmea.Sentence"/> object. Override for sentence builders that creates other kinds of sentences.
            </summary>
            <param name="arrSentence"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.SentenceBuilder.Item(System.Int32)">
            <summary>
            Same as calling SetField()
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.SentenceBuilder.TrimFields">
            <summary>
            Specifies if SentenceBuilder should trim fields or not.
            Returns true by default. Override to change.
            </summary>
        </member>
        <member name="P:Franson.Nmea.SentenceBuilder.EscapeUTF8">
            <summary>
            Return true to escape fields containing UTF charachters.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.ICacheAction">
            <summary>
            Defines action supported over the GpsGate Command Framework
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.ICacheAction.CLEAR">
            <summary>
            Clear cache
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.ICacheAction.REMOVE">
            <summary>
            Remove cache
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.ICache">
            <summary>
            Defines the functionality of a Caching object.
            Implementing this interface will enable remote Cache commands through the GpsGate Server Command Framework.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.ICache.Clear">
            <summary>
            Clear cache when called.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.ICache.Remove(System.String)">
            <summary>
            Remove key from cache when called.
            </summary>
            <param name="strKey"></param>
        </member>
        <member name="T:Franson.Nmea.Command.Cache">
            <summary>
            Command to control cached objects remotely.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.Cache.#ctor(Franson.Nmea.Command.ICache,Franson.Nmea.Command.ICacheAction,System.String)">
            <summary>
            Create cache command.
            </summary>
            <param name="cache"></param>
            <param name="action"></param>
            <param name="strKeyName"></param>
        </member>
        <member name="T:Franson.Nmea.Command.CmdParser">
            <summary>
            Parse incoming NMEA sentences to sequences that builds up GpsGate Commands.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParser.WriteSentence(Franson.Nmea.NmeaBase)">
            <summary>
            Adds sentence to command parser
            </summary>
            <param name="nmeaBase"></param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParser.WriteSentence(Franson.Nmea.Sentence)">
            <summary>
            Adds sentence to command parser.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParser.OnGenericCmdFound(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Called for each complete command found.
            Calls <see cref="E:Franson.Nmea.Command.CmdParser.GenericCmdFound"/> event handler.
            </summary>
            <param name="genCmd"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParser.Reset">
            <summary>
            Reset parser. Starts over.
            </summary>
        </member>
        <member name="E:Franson.Nmea.Command.CmdParser.GenericCmdFound">
            <summary>
            Event when a complete FRCMD or FRRET with argument sentences has been found in stream.
            </summary>
        </member>
        <member name="E:Franson.Nmea.Command.CmdParser.ErrorFound">
            <summary>
            Event when FRERR found in stream.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.CmdParser.GenericCmdFoundHandle">
            <summary>
            Delegate for <see cref="E:Franson.Nmea.Command.CmdParser.GenericCmdFound"/>.
            </summary>
            <param name="parser">Parser generating event.</param>
            <param name="cmd">The command</param>
        </member>
        <member name="T:Franson.Nmea.Command.CmdParser.ErrorFoundHandle">
            <summary>
            Delegate for <see cref="E:Franson.Nmea.Command.CmdParser.ErrorFound"/>
            </summary>
            <param name="parser">Parser generating event.</param>
            <param name="err">The error</param>
        </member>
        <member name="T:Franson.Nmea.Command.CmdParserXML">
            <summary>
            Parse incoming XML that builds up GpsGate Commands
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParserXML.#ctor(System.Xml.XmlReader)">
            <summary>
            Create Cmd parser from XML m_xmlReader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParserXML.Parse">
            <summary>
            Start parsing.
            </summary>
            <exception cref="T:Franson.Nmea.NmeaParserException">Could not parse data.</exception>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParserXML.OnGenericCmdFound(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Adds found generic cmd to internal array to be returned by <see cref="M:Franson.Nmea.Command.CmdParserXML.Parse"/>
            </summary>
            <param name="genCmd"></param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdParserXML.WriteSentence(Franson.Nmea.Sentence)">
            <summary>
            Cannot call this method in XML parser
            </summary>
            <param name="sentence"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
        </member>
        <member name="T:Franson.Nmea.Command.CmdQueueResetCmdBuilder">
            <summary>
            Builds a _CmdQueueReset command.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.CmdQueueResetCmdBuilder.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Create command to reset command queue for a specific object, e.g. a "device".
            </summary>
            <param name="strObjectType">E.g. "device"</param>
            <param name="iID">ID of object. E.g. a device ID.</param>
            <param name="bOutgoing">True if outgoing command queue is to be reset.</param>
        </member>
        <member name="M:Franson.Nmea.Command.CmdQueueResetCmdBuilder.#ctor(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Create command to reset the specified queue for a specific object, e.g. a "device".
            </summary>
            <param name="strObjectType">E.g. "device"</param>
            <param name="iID">ID of object. E.g. a device ID.</param>
            <param name="bOutgoing">True if outgoing command queue is to be reset.</param>
            <param name="strQueue">
            Set to null/empty string to get default behavior (reset both Commands and SMS queue).
            Set to "Commands" to only reset Commands queue.
            Set to "SMS" to only reset SMS queue.
            </param>
        </member>
        <member name="T:Franson.Nmea.Command.CmdQueueStatusCmdBuilder">
            <summary>
            Create a _CmdQueueStatus command
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.CmdQueueStatusCmdBuilder.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Create a command to request status for command queue status.
            </summary>
            <param name="strObjectType">E.g. "device"</param>
            <param name="iID">E.g. a device database ID.</param>
            <param name="bOutgoing">True if status of outgoing queue is to be returned.</param>
        </member>
        <member name="T:Franson.Nmea.Command.DisconnectDeviceCmdBuilder">
            <summary>
            Builds _DisconnectDevice command. Will disconnect spcified device.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.DisconnectDeviceCmdBuilder.#ctor(System.Int32)">
            <summary>
            Create _DisconnectDevice command to be sent to server.
            Disconnects a single device
            </summary>
            <param name="iDeviceID">
            Database ID for device to disconnect from NMEA Service.
            </param>
        </member>
        <member name="M:Franson.Nmea.Command.DisconnectDeviceCmdBuilder.#ctor(System.Int32,Franson.Nmea.Command.DisconnectDeviceCmdBuilder.DisconnectType)">
            <summary>
            Create _DisconnectDevice command to be sent to server.
            Disconnects a single device
            </summary>
            <param name="iID">
            Database ID for device to disconnect from NMEA Service or database ID for application to disconnect all devices from.
            </param>
        </member>
        <member name="M:Franson.Nmea.Command.DisconnectDeviceCmdBuilder.#ctor(System.Int32[])">
            <summary>
            Create _DisconnectDevice command to be sent to server.
            Disconnects all devices for users in the array of tag IDs
            </summary>
            <param name="iTagIDs">Disconnects all devices found for users in the given array of tag IDs</param>
        </member>
        <member name="T:Franson.Nmea.Command.GenericCmd">
            <summary>
            Contains a generic GpsGate NMEA command, including argument sentences.
            Thread safe for public access, but not for internal access.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.Command.GenericCmd.#ctor(Franson.Nmea.Sentence)">
            <summary>
            Create generic command with start sentence. FRCMD or FRRET as argument.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.Command.GenericCmd.AddArgument(Franson.Nmea.Sentence)">
            <summary>
            Add argument sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Nmea.Command.GenericCmd.GetValue(System.String)">
            <summary>
            Returns the value field from a FRVAL sentence with name strName
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Nmea.Command.GenericCmd.Completed">
            <summary>
            Returns true if no more argument sentences should be added.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.GprsSettings">
            <summary>
            Command to set GPRS settings for a device.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.GprsSettings.#ctor(Franson.Nmea.ROUTE,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Create GPRS settings command. This command is sent to the server, which in turn sends it to the device.
            </summary>
            <param name="route">Destination.</param>
            <param name="strDeviceImei">Device IMEI. Set to null to use IMEI from ROUTE device ID.</param>
            <param name="strDevicePhoneNumber">Device phone number. Set to null to number from ROUTE device ID.</param>
            <param name="strGprsApn">GPRS APN. Cannot be null.</param>
            <param name="strGprsUsername">GPRS username. Set to null to not use.</param>
            <param name="strGprsPassword">GPRS password. Set to null to not use.</param>
            <param name="strProtocolHostname">GpsGate Server address. Set to null to use default.</param>
            <param name="iProtocolPort">Server port. Set to 0 to port found in "listener" table for device ID in ROUTE.</param>
            <param name="strSmsProxyPhoneNumber">Phone number to SMS proxy. Set to null to resolve number from registered SMS Proxy.</param>
            <exception cref="T:System.InvalidOperationException">If APN or route is null.</exception>
        </member>
        <member name="T:Franson.Nmea.Command.LoginCmdBuilder">
            <summary>
            _Login
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.LoginCmdBuilder.#ctor(System.String,System.String)">
            <summary>
            Command to login to server.
            </summary>
            <param name="strUsername">Username</param>
            <param name="strPW">Password</param>
        </member>
        <member name="M:Franson.Nmea.Command.LoginCmdBuilder.#ctor(System.String)">
            <summary>
            Command to login to server using IMEI
            </summary>
            <param name="strImei"></param>
        </member>
        <member name="T:Franson.Nmea.Command.Ping">
            <summary>
            Ping command, used to verify a connection to a server.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.Ping.#ctor(System.String)">
            <summary>
            TrackerOne _Ping, including IMEI
            </summary>
            <param name="strIMEI"></param>
        </member>
        <member name="M:Franson.Nmea.Command.Ping.#ctor">
            <summary>
            Create ping command.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Command.Ping.ParamTypeField">
            <summary>
            Returns empty string if the TrackerOne constructor is used.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.PlainTextCmdBuilder">
            <summary>
            Builds a _PlainText command.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.PlainTextCmdBuilder.#ctor(Franson.Nmea.ROUTE,System.String)">
            <summary>
            Build plain text message command to be sent.
            </summary>
            <param name="route">Receiver</param>
            <param name="strMessage">The message</param>
        </member>
        <member name="P:Franson.Nmea.Command.PlainTextCmdBuilder.Message">
            <summary>
            Return message. (Which is paramater 0 in inline arguments).
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.PollPosition">
            <summary>
            _PollPosition. Ask device to send one position update.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.PollPosition.#ctor(Franson.Nmea.ROUTE,System.String,System.String)">
            <summary>
            Ask device to send one position update.
            </summary>
            <param name="route">Which device, and how to send this command.</param>
            <param name="strTransport">Which transport should device use. Default "tcp"</param>
            <param name="strTransport2">Which backup transport should device use. Default none.</param>
        </member>
        <member name="T:Franson.Nmea.Command.ProxyMessageCmdBuilder">
            <summary>
            Builds a _ProxyMessage command
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.Command.ProxyMessageCmdBuilder.#ctor(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Create proxy message from generic cmd.
            </summary>
            <param name="genericCmd"></param>
            <exception cref="T:Franson.Nmea.NmeaFormatException">If data in generic command is not a proxy message command.</exception>
        </member>
        <member name="M:Franson.Nmea.Command.ProxyMessageCmdBuilder.#ctor(System.String,System.String)">
            <summary>
            Create proxy message command from parameters. Independent of if this is an incoming or outgoing 
            message ClientAddress is alwasy the address of the device / client.
            </summary>
            <param name="strClientAddress">Client address. E.g. a phone number.</param>
            <param name="strMessage">The message itself.</param>
        </member>
        <member name="M:Franson.Nmea.Command.ProxyMessageCmdBuilder.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Create proxy message command from parameters.
            </summary>
            <param name="strClientAddress">Client address. E.g. a phone number.</param>
            <param name="strMessage">The message itself.</param>
            <param name="dtTimeStamp">UTC when message was original sent.</param>
        </member>
        <member name="M:Franson.Nmea.Command.ProxyMessageCmdBuilder.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Create proxy message command from parameters.
            </summary>
            <param name="strClientAddress">Client address. E.g. a phone number.</param>
            <param name="strMessage">The message itself.</param>
            <param name="dtTimeStamp">UTC when message was original sent.</param>
            <param name="strTransport">Transport e.g. "sms"</param>
        </member>
        <member name="P:Franson.Nmea.Command.ProxyMessageCmdBuilder.ClientAddress">
            <summary>
            ClientAddress field.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Command.ProxyMessageCmdBuilder.Message">
            <summary>
            Message field.
            </summary>
        </member>
        <member name="P:Franson.Nmea.Command.ProxyMessageCmdBuilder.TimeStamp">
            <summary>
            TimeStamp field. MinTime if null
            </summary>
        </member>
        <member name="P:Franson.Nmea.Command.ProxyMessageCmdBuilder.Transport">
            <summary>
            Returns Transport. null if not present.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.RetBuilder">
            <summary>
            Generic builder for answer (FRRET) to commands.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.#ctor(System.String,Franson.Nmea.ParameterType)">
            <summary>
            Create generic builder.
            </summary>
            <param name="strCommandName">Command name.</param>
            <param name="paramType"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetParameter(System.Int32)">
            <summary>
            Add value as inline paramater.
            </summary>
            <param name="iParam"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetParameter(System.String)">
            <summary>
            Add string as inline paramater.
            </summary>
            <param name="strParam"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetParameter(System.Boolean)">
            <summary>
            Add boolean as inline paramater.
            </summary>
            <param name="bParam"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetSentence(Franson.Nmea.Sentence)">
            <summary>
            Add sentence as sentence argument.
            </summary>
            <param name="sentenceGeneric"></param>
        </member>
        <member name="M:Franson.Nmea.Command.RetBuilder.AddRetSentence(Franson.Nmea.NmeaBase)">
            <summary>
            Add typed sentence as sentence argument.
            </summary>
            <param name="sentenceTyped"></param>
        </member>
        <member name="T:Franson.Nmea.Command.SendMessage">
            <summary>
            Builds a _SendMessage command.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.#ctor(Franson.Geo.TrackPoint,System.String,System.Boolean)">
            <summary>
            Create a TrackerOne _SendMessage sentence, if bInline is set to true.
            </summary>
            <param name="tp"></param>
            <param name="strIMEI"></param>
            <param name="bInline"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.#ctor(Franson.Geo.TrackPoint)">
            <summary>
            Create _SendMessage command for "GpsGate" namespace.
            </summary>
            <param name="tp">Position and time for message.</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.#ctor(Franson.Geo.TrackPoint,System.String)">
            <summary>
            Create _SendMessage for custom namespace. E.g. "GpsGateDevice" namespace.
            </summary>
            <param name="tp"></param>
            <param name="strNameSpace"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.#ctor(Franson.Geo.TrackPoint,System.String,System.Int32)">
            <summary>
            _SendMessage to custom namesapce and custom track recorder.
            </summary>
            <param name="tp"></param>
            <param name="strNameSpace"></param>
            <param name="iTrackRecorderID"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.String)">
            <summary>
            Add string record.
            </summary>
            <param name="strName">Name of record</param>
            <param name="strValue">Actual value</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.Boolean)">
            <summary>
            Add bool record
            </summary>
            <param name="strName">Name of record</param>
            <param name="bValue">Actual value</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.Int32)">
            <summary>
            Add int record
            </summary>
            <param name="strName">Name of record</param>
            <param name="iValue">Actual value</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.Double,System.Int32)">
            <summary>
            Add double record.
            </summary>
            <param name="strName">Name of record</param>
            <param name="dblValue">Value</param>
            <param name="iDecimals">Number of decimals.</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(System.String,System.DateTime)">
            <summary>
            Add date time value.
            </summary>
            <param name="strName">Name of record.</param>
            <param name="dtUTC">DateTime (use UTC!)</param>
        </member>
        <member name="M:Franson.Nmea.Command.SendMessage.AddMessageRecord(Franson.Nmea.FRVAL)">
            <summary>
            Add FRVAL.
            </summary>
            <param name="frval"></param>
        </member>
        <member name="P:Franson.Nmea.Command.SendMessage.ParamTypeField">
            <summary>
            Returns empty string if the TrackerOne/Inline constructor is used.
            </summary>
        </member>
        <member name="T:Franson.Nmea.Command.SendPositionCmdBuilder">
            <summary>
            Builds _SendPosition command.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Nmea.Command.SendPositionCmdBuilder.#ctor(Franson.Geo.TrackPoint)">
            <summary>
            Create _SendPosition command that saves position to "life track".
            </summary>
            <param name="tp"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SendPositionCmdBuilder.#ctor(Franson.Geo.TrackPoint,System.Int32)">
            <summary>
            Create _SendPosition command.
            Set iTrackRecorderID to -2 to only update the current position, and not save history.
            Set iTrackRecorderID to -1 to not save current position nor history. Only route position.
            Set iTrackPositionID to 0 to save to "life track"
            Or set to a ID returned by _CreateTrackRecorder.
            </summary>
            <param name="tp"></param>
            <param name="iTrackRecorderID"></param>
        </member>
        <member name="T:Franson.Nmea.Command.SetTrackRecorderCmdBuilder">
            <summary>
            Builds _SetTrackRecorder command. If the device protocol implements _SetDeviceTrackRecorder the settings can be updated live.
            Otherwise all devices for specified user will be disconnected (and reconnect to get new track recorder values).
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.TimeFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change TimeFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.DistanceFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change DistanceFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.DirectionFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change DirectionFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.DirectionThreshold">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change DirectionThreshold.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.SpeedFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change SpeedFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.RestartTime">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change RestartTime.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.RestartDistance">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change RestartDistance.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.RestartInterval">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change RestartInterval.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.RestartIntervalOffset">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change RestartIntervalOffset.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.SmsTimeFilter">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change SmsTimeFilter.
            </summary>
        </member>
        <member name="F:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.Motion">
            <summary>
            Use as argument in <see cref="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)"/> to change Motion.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.#ctor(System.Int32)">
            <summary>
            Create _SetTrackRecorder command to be sent to server.
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:Franson.Nmea.Command.SetTrackRecorderCmdBuilder.NewSetting(System.String,System.Double)">
            <summary>
            Add a track recorder setting to change.
            </summary>
            <param name="strName"></param>
            <param name="dblValue"></param>
        </member>
        <member name="T:Franson.Nmea.Command.StartTracking">
            <summary>
            Command to start position updates from device. 
            _StartTracking
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.StartTracking.#ctor(Franson.Nmea.ROUTE,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sends a start tracking command to client.
            </summary>
            <param name="route">Which device to route this command to.</param>
            <param name="strTransport">Primary transport device should use. Default "tcp"</param>
            <param name="strTransport2">Secondary transport. E.g. "sms". Defualt none.</param>
            <param name="iTimeFilter">Suggested update interval in seconds. If 0, the value is read from the track recorder.</param>
            <param name="iSmsTimeFilter">Update interval if SMS is used.</param>
            <param name="bMotion">True if device only should send position updates when moving</param>
        </member>
        <member name="M:Franson.Nmea.Command.StartTracking.#ctor(Franson.Nmea.ROUTE,System.String,System.String,System.Int32)">
            <summary>
            Send start tracking command to client.
            </summary>
            <param name="route"></param>
            <param name="strTransport"></param>
            <param name="strTransport2"></param>
            <param name="iTimeFilter"></param>
        </member>
        <member name="T:Franson.Nmea.Command.StopTracking">
            <summary>
            _StopTracking. Ask device to stop sending updates.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.StopTracking.#ctor(Franson.Nmea.ROUTE)">
            <summary>
            Ask device to stop sending position updates.
            </summary>
            <param name="route">Which device.</param>
        </member>
        <member name="T:Franson.Nmea.Command.SupportsProxyMessage">
            <summary>
            Is sent from a client to sercver to indicate that client supports outgoing _ProxyMessage commands from the server.
            Typically used by a SMS, email or satellite proxy to receive and forward out going messages from server.
            </summary>
        </member>
        <member name="M:Franson.Nmea.Command.SupportsProxyMessage.#ctor(System.String)">
            <summary>
            Create command.
            </summary>
            <param name="strTransport">"sms", "email" or "sat"</param>
        </member>
        <member name="T:Franson.Nmea.Command.TableCmdBuilder">
            <summary>
            Builds a Table that can be sent using GpsGate Protocol.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.TableCmdBuilder.#ctor(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Create table.
            </summary>
            <param name="genericCmd"></param>
        </member>
        <member name="M:Franson.Nmea.Command.TableCmdBuilder.GetRows">
            <summary>
            Returns <see cref="T:Franson.Nmea.FRROW"/> list as a <see cref="T:System.Collections.IList"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Nmea.Command.TemplateCmdBuilder">
            <summary>
            Template command builder
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Nmea.Command.TemplateCmdBuilder.#ctor(System.String,Franson.Nmea.ROUTE)">
            <summary>
            Create.
            </summary>
            <param name="strCommandName"></param>
            <param name="route"></param>
        </member>
        <member name="M:Franson.Nmea.Command.TemplateCmdBuilder.AddFRVAL(Franson.Nmea.FRVAL)">
            <summary>
            Add argument sentence.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Franson.Nmea.Command.TemplateCmdBuilder.ParseCommand(System.String,Franson.Nmea.ROUTE)">
            <summary>
            Parses a string of format Command(arg1=value,arg2=value) and returns a command template that can be sent to NMEA Service.
            </summary>
            <param name="strCommand"></param>
            <param name="route"></param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:Franson.DAO.BOItem">
            <summary>
            A BO that stores its data in one row in one table should derive from this class.
            </summary>
        </member>
        <member name="M:Franson.DAO.BOItem.CreateObjectAsBOType">
            <summary>
            Creates an instance of the top type specified in BOType (in the database this is the bo_type field)
            e.g If an User.BOType = "Some.Namespace.DerivedUser" this method will return an
            object of type "Some.Namespace.DerivedUser"
            </summary>
            <returns>The object as the BOType</returns>
        </member>
        <member name="M:Franson.DAO.BOItem.CreateBoItem(System.String,System.String,System.Int32)">
            <summary>
            Creates and loads an object using the bo_type field. Table name and database ID identifies the object.
            </summary>
            <param name="strTableName">Table to load object from</param>
            <param name="strPrimaryField">Name of column with primary key. Set to null to use table name + "_id"</param>
            <param name="iID">Database ID for object</param>
            <returns>Created object.</returns>
            <exception cref="T:Franson.DAO.NotFoundException">Object not found in database.</exception>
            <exception cref="T:Franson.DAO.FillException">Database error</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The type does not exist.</exception>
        </member>
        <member name="M:Franson.DAO.BOItem.CreateBoItem(System.String,System.String,System.String)">
            <summary>
            Creates and loads an object using the bo_type field. Table name and database ID identifies the object.
            </summary>
            <param name="strTableName">Table to load object from</param>
            <param name="strPrimaryField">Name of column with primary key. Set to null to use table name + "_id"</param>
            <param name="strID">Database ID for object</param>
            <returns>Created object.</returns>
            <exception cref="T:Franson.DAO.NotFoundException">Object not found in database.</exception>
            <exception cref="T:Franson.DAO.FillException">Database error</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The type does not exist.</exception>
        </member>
        <member name="M:Franson.DAO.BOItem.Update">
            <summary>
            Update database. Will save type information to bo_type is new.
            </summary>
        </member>
        <member name="M:Franson.DAO.BOItem.Remove">
            <summary>
            Flags BO for removal from database. Will be deleted at next Update()
            </summary>
        </member>
        <member name="M:Franson.DAO.BOItem.LoadByID(System.Int32)">
            <summary>
            Load a BO by its ID. All BO's can be loaded this way.
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">Database ID not found.</exception>
        </member>
        <member name="M:Franson.DAO.BOItem.LoadByID(System.String)">
            <summary>
            Override if BO item has a string ID
            </summary>
            <param name="strID"></param>
            <exception cref="T:System.NotImplementedException">Always thrown</exception>
        </member>
        <member name="M:Franson.DAO.BOItem.Equals(System.Object)">
            <summary>
            Determines if this instance is equal with the specified instance based on their hash code. 
            </summary>
            <param name="obj">An instance to compare with.</param>
            <returns>True if the hash code of the objects are the same..</returns>
        </member>
        <member name="M:Franson.DAO.BOItem.GetHashCode">
            <summary>
            Generates a hash code based on the type and the ID.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="P:Franson.DAO.BOItem.BOType">
            <summary>
            The type of the base object
            </summary>
        </member>
        <member name="P:Franson.DAO.BOItem.DAOItem">
            <summary>
            Gets the DaoBaseObject casted as a DaoItem. 
            </summary>
        </member>
        <member name="P:Franson.DAO.BOItem.IsNew">
            <summary>
            Returns true if this BO doesn't exist in the database. It is new.
            </summary>
        </member>
        <member name="P:Franson.DAO.BOItem.IsRemoved">
            <summary>
            Returns true if item is flagged for removal from database at next <see cref="M:Franson.DAO.BOItem.Update"/>
            </summary>
        </member>
        <member name="P:Franson.DAO.BOItem.IsMarkedForRemoval">
            <summary>
            Returns true if item has been marked for removal from database at next <see cref="M:Franson.DAO.BOItem.Update"/>
            </summary>
        </member>
        <member name="P:Franson.DAO.BOItem.ID">
            <summary>
            The ID of this object. All BO's have this property.
            </summary>
        </member>
        <member name="T:Franson.DAO.BOReaderBase">
            <summary>
            Base class for all BO objects that are based on a forward read only DB access.
            </summary>
        </member>
        <member name="P:Franson.DAO.BOReaderBase.DaoBaseObject">
            <summary>
            The Data Access Object (DAO) linked to this Business Object (BO)
            </summary>
        </member>
        <member name="T:Franson.DAO.BOSearch">
            <summary>
            DEBUG: Do not use for new classes.
            </summary>
        </member>
        <member name="P:Franson.DAO.BOSearch.Count">
            <summary>
            Number of records loaded by last query.
            </summary>
        </member>
        <member name="T:Franson.DAO.ConcurrencyOption">
            <summary>
            Concurrency option for database updates.
            </summary>
        </member>
        <member name="F:Franson.DAO.ConcurrencyOption.LastUpdateWins">
            <summary>
            Let last update to database be written.
            </summary>
        </member>
        <member name="F:Franson.DAO.ConcurrencyOption.Optimistic">
            <summary>
            Throw exception if data is changed between SELECT and UPDATE.
            </summary>
        </member>
        <member name="T:Franson.DAO.DAOCache">
            <summary>
            Used to cache schemas for <see cref="T:System.Data.DataTable"/>s. Mainly used by <see cref="T:Franson.DAO.DAOBase"/>
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.DAO.DAOCache.Clear">
            <summary>
            Clear cache. Removes all cheched tables.
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOCache.GetDataTableClone(System.String)">
            <summary>
            Returns a cloned <see cref="T:System.Data.DataTable"/> if it has been cached before using <see cref="M:Franson.DAO.DAOCache.CacheDataTable(System.Data.DataTable,System.String)"/>
            If it doesn't exist in cache null is returned.
            </summary>
            <param name="strTableName">Name of table</param>
            <returns>Cloned table or null</returns>
        </member>
        <member name="M:Franson.DAO.DAOCache.CacheDataTable(System.Data.DataTable,System.String)">
            <summary>
            Adds a table to cache. If a table with same name already exists no operation is taken.
            </summary>
            <param name="table"><see cref="T:System.Data.DataTable"/> to add</param>
            <param name="strTableName">Name of table.</param>
        </member>
        <member name="T:Franson.DAO.DAOConnector">
            <summary>
            All database connectors inherit from this class.
            </summary>
            <threadsafety instance="false" static="true"/>
        </member>
        <member name="M:Franson.DAO.DAOConnector.#ctor(System.String)">
            <summary>
            Create DB connection object.
            </summary>
            <param name="strConn"></param>
        </member>
        <member name="M:Franson.DAO.DAOConnector.SetConnectionString(System.String)">
            <summary>
            Can be called by sub class constructor.
            </summary>
            <param name="strConn"></param>
        </member>
        <member name="M:Franson.DAO.DAOConnector.ResetConnection">
            <summary>
            Will create a new DB connection next time it is used. Can be called by <see cref="M:Franson.DAO.DAOConnector.CheckReconnect(System.Exception)"/>
            to reset the connection in an attempt to reconnect to database.
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOConnector.Lock">
            <summary>
            Called to increase lock count.
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOConnector.Unlock">
            <summary>
            Decrease lock count.
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOConnector.AddUpdatingEvent(System.Data.Common.DbDataAdapter,Franson.DAO.DAOConnector.RowUpdatingEventHandler)">
            <summary>
            Override to implement data adapter event handling.
            </summary>
            <param name="adapter"></param>
            <param name="funcUpdating"></param>
        </member>
        <member name="M:Franson.DAO.DAOConnector.RemoveUpdatingEvent(System.Data.Common.DbDataAdapter,Franson.DAO.DAOConnector.RowUpdatingEventHandler)">
            <summary>
            Override to implement data adapter event handling.
            </summary>
            <param name="adapter"></param>
            <param name="funcUpdating"></param>
        </member>
        <member name="M:Franson.DAO.DAOConnector.AddUpdatedEvent(System.Data.Common.DbDataAdapter,Franson.DAO.DAOConnector.RowUpdatedEventHandler)">
            <summary>
            Override to implement data adapter event handling.
            </summary>
            <param name="adapter"></param>
            <param name="funcUpdating"></param>
        </member>
        <member name="M:Franson.DAO.DAOConnector.RemoveUpdatedEvent(System.Data.Common.DbDataAdapter,Franson.DAO.DAOConnector.RowUpdatedEventHandler)">
            <summary>
            Override to implement data adapter event handling.
            </summary>
            <param name="adapter"></param>
            <param name="funcUpdating"></param>
        </member>
        <member name="M:Franson.DAO.DAOConnector.CreateConnection">
            <summary>
            Override to create native db conenction.
            </summary>
            <param name="strConn"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOConnector.CreateDataAdapter">
            <summary>
            Override and return native data adapter object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOConnector.CreateCommand">
            <summary>
            Override and return native command object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOConnector.CreateCommandBuilder">
            <summary>
            Override and return native command builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOConnector.SelectLastInsertedID">
            <summary>
            Override and return SQL command to return ID for last created row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOConnector.RetryConnect(System.Exception,System.Boolean)">
            <summary>
            Checks if connection problems could be worth a reconnection attempt to database.
            A reconnection will not be made if a transaction is active.
            If a reconnection could not be made, the exception that is argument to the method is thrown again.
            </summary>
            <param name="ex"></param>
            <param name="bThrow">If true no retry is made, and exception is thrown.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Thrown if reconnection to database could not be made.</exception>
        </member>
        <member name="M:Franson.DAO.DAOConnector.CheckReconnect(System.Exception)">
            <summary>
            Override if DAO connector want to add more reasons to try to reconnect to a database.
            Returns false by default.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.DAO.DAOConnector.Connection">
            <summary>
            Returns native DB conneciton.
            </summary>
            <param name="strConn"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.DAO.DAOConnector.MarsOperation">
            <summary>
            If set to true additional usage of the connector requires the underlying DB connection to support MARS.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOConnector.LockCount">
            <summary>
            Number of times connector has been locked by current thread.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOConnector.ThreadID">
            <summary>
            ID of thread using this connector.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Franson.DAO.DAOConnector.SupportsMars" -->
        <member name="T:Franson.DAO.DAOException">
            <summary>
            Base execption for all DAO exceptions.
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOException.#ctor(System.String,System.String)">
            <summary>
            Create with message and Language code to enable translation of messages
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Franson.DAO.DAOException.#ctor(System.String)">
            <summary>
            Create with message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Franson.DAO.DAOException.#ctor(System.String,System.Exception)">
            <summary>
            Create with message and inner exception
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Franson.DAO.FillException">
            <summary>
            Thrown if there was an error during <see cref="!:Fill"/>. Inner exception contains native error.
            </summary>
        </member>
        <member name="T:Franson.DAO.UpdateDBException">
            <summary>
            Thrown if any error during database update.
            </summary>
        </member>
        <member name="M:Franson.DAO.UpdateDBException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="T:Franson.DAO.ExecuteDBException">
            <summary>
            Thrown when a command or scalar query fails to execute.
            </summary>
        </member>
        <member name="M:Franson.DAO.ExecuteDBException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="T:Franson.DAO.ReaderDBException">
            <summary>
            Thrown when there is an error in a database reader.
            </summary>
        </member>
        <member name="M:Franson.DAO.ReaderDBException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="M:Franson.DAO.ReaderDBException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.DAO.CommitException">
            <summary>
            Commit failed.
            </summary>
        </member>
        <member name="M:Franson.DAO.CommitException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="M:Franson.DAO.CommitException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.DAO.RollbackException">
            <summary>
            Rollback failed (very serious error, since changes were not restored in database after initial commit error.)
            </summary>
        </member>
        <member name="M:Franson.DAO.RollbackException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="M:Franson.DAO.RollbackException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="T:Franson.DAO.PendingRollbackException">
            <summary>
            Is thrown by <see cref="M:Franson.DAO.Transaction.Rollback"/> if a recursive transaction fails.
            All parties that called <see cref="M:Franson.DAO.BOBase.BeginTransaction"/> must call Rollback().
            The last call will do the actual database rollback.
            </summary>
        </member>
        <member name="M:Franson.DAO.PendingRollbackException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:Franson.DAO.PendingRollbackException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="T:Franson.DAO.NotFoundException">
            <summary>
            Thrown when an item wasn't found in database.
            </summary>
        </member>
        <member name="M:Franson.DAO.NotFoundException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="M:Franson.DAO.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception from message and inner exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="T:Franson.DAO.DatabaseException">
            <summary>
            General database exception
            </summary>
        </member>
        <member name="M:Franson.DAO.DatabaseException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Franson.DAO.DatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="message">Message</param>
            <param name="ex">Original exception</param>
        </member>
        <member name="T:Franson.DAO.ConnectionException">
            <summary>
            Thrown if DAO cannot get a free connection to database.
            </summary>
        </member>
        <member name="M:Franson.DAO.ConnectionException.#ctor(System.String)">
            <summary>
            Create with message
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.DAO.BOTypeRegistrationException">
            <summary>
            Thrown if there was problems to register BO types.
            </summary>
        </member>
        <member name="M:Franson.DAO.BOTypeRegistrationException.#ctor(System.String)">
            <summary>
            Create with message.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.DAO.IdDecryptException">
            <summary>
            Failed to decrypt an encrypted ID.
            </summary>
        </member>
        <member name="M:Franson.DAO.IdDecryptException.#ctor(System.String)">
            <summary>
            Create from message.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.DAO.IsNewException">
            <summary>
            This exception is thrown if IsNew property is true when certain methods
            are called on the object. 
            </summary>
        </member>
        <member name="T:Franson.DAO.DAORoundTrip">
            <summary>
            DAO RoundTrip state
            </summary>
        </member>
        <member name="F:Franson.DAO.DAORoundTrip.m_dtStarted">
            <summary>
            When RoundTrip was started
            </summary>
        </member>
        <member name="P:Franson.DAO.DAORoundTrip.DAOConnector">
            <summary>
            Connector in this session.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAORoundTrip.StartTime">
            <summary>
            Time stamp when session started.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAORoundTrip.DbAccessCount">
            <summary>
            Number of database accesses in this RoundTrip
            </summary>
        </member>
        <member name="T:Franson.DAO.DAOReaderBase">
            <summary>
            Base class for forward read only DAO classes.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.#ctor">
            <summary>
            Creates a reader that will be outside any active transactions.
            </summary>
            <param name="connection"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.#ctor(System.Boolean)">
            <summary>
            Creates a reader that can be part of active transactions.
            </summary>
            <param name="connection"></param>
            <param name="cmd"></param>
            <param name="bUseTransaction">true if reader should be part of active transaction.</param>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.Execute">
            <summary>
            Execute SQL statment and return a forward read only result, which is accessed with foreach.
            Typically called by deriving DAO object. Returns a <see cref="T:System.Data.IDataReader"/> object, once per row.
            </summary>
            <param name="strSQL">SQL statement to be executed</param>
            <returns><see cref="T:System.Data.IDataReader"/> once per row.</returns>
            <exception cref="T:System.InvalidOperationException">Command object not set</exception>
            <exception cref="T:Franson.DAO.ReaderDBException">Error reading from database.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">Failed to get a connection to database.</exception>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetSqlCommand">
            <summary>
            Returns SQL command to be executed by <see cref="M:Franson.DAO.DAOReaderBase.Execute"/>.
            Derived DAO object should override this abstract method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetBoundingBox">
            <summary>
            Gets data from data row and returns as bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetTrackPoint(System.Data.IDataReader,System.String)">
            <summary>
            Get TrackPoint from database record. See <see cref="!:DAOBAse.GetTrackPoint(void)"/> for detailed field description.
            </summary>
            <param name="reader"></param>
            <param name="strPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetTrackPoint">
            <summary>
            Gets data from data record and returns as track point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetTrackPoint(System.String)">
            <summary>
            Gets data from data record and returns as track point where the trackPoint field are prefixed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetDouble(System.String)">
            <summary>
            Return a field from a <see cref="!:DateRow"/> as double. If the field is null, 0 (zero is returned).
            </summary>
            <param name="strFiledName">Name of field</param>
            <returns>Value</returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetDouble(System.Data.IDataReader,System.String)">
            <summary>
            Returns field in reader as double.
            </summary>
            <param name="reader"></param>
            <param name="strFieldName">Field name.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetUtcDateTimeWithMilliSeconds(System.String,System.String)">
            <summary>
            Get DB datetime as .NET DateTime. Milliseconds is fetched from a separate field since MySQL 4.1 does not support
            milliseconds in its internal datetime type.
            </summary>
            <param name="strFieldName">Field with datetime value</param>
            <param name="strMilliSecondsFiledName">Field with milliseconds</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetUTCDateTimeWithMilliSeconds(System.Data.IDataReader,System.String,System.String)">
            <summary>
            Get DB datetime as .NET data time. Millisecond is handled in a separate field.
            </summary>
            <param name="reader"></param>
            <param name="strFieldName"></param>
            <param name="strMilliSecondsFiledName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetUtcDateTime(System.String)">
            <summary>
            Get DB datetime as .NET DateTime. Note MySQL 4.1 does not support milliseconds!
            </summary>
            <param name="strFieldName">Field name in base table.</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.m_GetUtcDateTime(System.Object,System.Object)">
            <summary>
            Returns a DB time as a .NET UTC DateTime
            </summary>
            <param name="item">Database object to be converted to a .NET DateTime structure</param>
            <returns>A DateTime structure with DateTimeKind set to UTC</returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.ContainColumn(System.String)">
            <summary>
            Returns true if this column name exists in result set.
            </summary>
            <param name="strColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetString(System.String)">
            <summary>
            Get field from base table as string.
            </summary>
            <param name="strFieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetString(System.Data.IDataReader,System.String)">
            <summary>
            Get field from base table as string.
            </summary>
            <param name="strFieldName">Field name</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetBool(System.String)">
            <summary>
            Returns true if field is true. For MySQL this is a small int that is set to 1.
            If the field is null or another data type, false is returned.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetBool(System.Data.IDataReader,System.String)">
            <summary>
            Returns true if field is true. For MySQL this is a small int that is set to 1.
            If the field is null or another data type, false is returned.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetInteger(System.String)">
            <summary>
            Returns field as int. If the field is null or another data type, 0 (zero) is returned.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetInteger(System.Data.IDataReader,System.String)">
            <summary>
            Returns field as int. If the field is null or another data type, 0 (zero) is returned.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetLong(System.String)">
            <summary>
            Returns field as long. If the field is null or another data type, 0 (zero) is returned.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetLong(System.Data.IDataReader,System.String)">
            <summary>
            Returns field as long. If the field is null or another data type, 0 (zero) is returned.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetSystemType(System.String)">
            <summary>
            Returns field as a System.Type object. If the type does not exist null is returned.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetSystemType(System.Data.IDataReader,System.String)">
            <summary>
            Returns field as a System.Type object. If the type does not exist null is returned.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetValueData(System.String,System.String)">
            <summary>
            Returns a typed value as int, double, string, bool or DateTime.
            To support more types override this method. 
            </summary>
            <param name="strValueColumn">Name of the varchar column containgin the value. If null 'value_data' is used.</param>
            <param name="strTypeColumn">Name of column containgin the Type. If null 'value_type' is used.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.GetValueData(System.Data.IDataReader,System.String,System.String)">
            <summary>
            Returns a typed value as int, double, string, bool or DateTime.
            To support more types override this method. 
            </summary>
            <param name="reader">Reader containg data</param>
            <param name="strValueColumn">Name of the varchar column containgin the value. If null 'value_data' is used.</param>
            <param name="strTypeColumn">Name of column containgin the Type. If null 'value_type' is used.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.IsDBNull(System.String)">
            <summary>
            Returns true if field is null.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.IsDBNull(System.Data.IDataReader,System.String)">
            <summary>
            Returns true if field is null.
            </summary>
            <param name="strFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderBase.EscapeString(System.String)">
            <summary>
            Should be used by all string that are used in WHERE = 'something' statements
            Will escape ' to ''.
            DAO classes for DB-engines that needs more of different escaping must override this method (todo: ? this method has never been virtual?)
            todo: why not make this public in an SQL-helper module?
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.DAO.ConnContainer">
            <summary>
            Used to make sure a connection is released after a "using" statement
            </summary>
        </member>
        <member name="M:Franson.DAO.ConnContainer.#ctor(Franson.DAO.DAOConnector,System.Data.Common.DbDataReader)">
            <summary>
            Releases lock on connection at Dispose()
            </summary>
            <param name="daoConn">Connection to be released.</param>
            <param name="dbReader">Will be closed when this is disposed.</param>
            <param name="strLabel">Label for debugging.</param>
        </member>
        <member name="M:Franson.DAO.ConnContainer.Dispose">
            <summary>
            Will call DAOFactory.ReleaseConnection()
            </summary>
        </member>
        <member name="T:Franson.DAO.DAOReaderCache">
            <summary>
            Derive from this class rather than directly from <see cref="T:Franson.DAO.DAOReaderBase"/> when the result set is
            small. DAOReaderCache will read and cache the result at once, and not keep a connection opened.
            
            For larger result sets derive from <see cref="T:Franson.DAO.DAOReaderBase"/> directly or there will be performance and memory issues,
            but in those cases you need to keep the reading outside any transaction.
            
            ODBC will not allow several result sets over one connection. Using this cached reader for small result sets
            works around this limitation, since the connection isn't opened when iterating through the result.
            
            This DAOReaderCache will be part of a current transaction, using active connection for thread. 
            If deriving directly from DAOReaderBase, a new connection 
            will always be used, and the read is outside any active transaction for current thread.
            
            NOTE! MSSQL over ODBC will lock if using DAOReaderBase directly and there is an active transaction. MySQL can handle this.
            
            If there is no active transaction, nested calls to both DAOReaderBase and DAOReaderCache are possible.
            When no active transaction DAOReaderBase will always use a new connection, and DAOReaderCache will use current connection.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.DAO.DAOReaderCache.#ctor">
            <summary>
            Create reader that takes part in active transactions, and does not keep connection open when iterating the result
            NOTE! This base class cannot be used when returning large results. Say 500 records.
            </summary>
            <param name="connection"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:Franson.DAO.DAOReaderCache.CreateBag(System.Data.IDataReader)">
            <summary>
            Override this method to convert a row from the data reader to a bag object.
            The bag objects will be put in the returned IEnumerable from <see cref="M:Franson.DAO.DAOReaderCache.Execute"/> or <see cref="M:Franson.DAO.DAOReaderCache.SafeExecute"/>.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderCache.Execute">
            <summary>
            Returns cached result. Will not not keep the connection open to the database while iterating through result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.DAOReaderCache.SafeExecute">
            <summary>
            Returns cached result in thread safe container.
            The call to this method is not thread safe, but the returned enumarator is threadsafe.
            It is of type <see cref="T:Franson.Threading.DynamicIterator"/>
            </summary>
            <returns>Cached result wrapped in <see cref="T:Franson.Threading.DynamicIterator"/></returns>
        </member>
        <member name="T:Franson.DAO.DAOSearch">
            <summary>
            Read only DAO classes that has JOINs and complex SQL queries should derive from DAOSearch
            </summary>
        </member>
        <member name="M:Franson.DAO.DAOSearch.#ctor">
            <summary>
            Loads query results into the BaseTable named "QueryTable"
            </summary>
            <param name="concurrencyOption"></param>
            <param name="connSQL"></param>
        </member>
        <member name="M:Franson.DAO.DAOSearch.#ctor(System.String)">
            <summary>
            Loads query results into the BaseTable with custom name.
            </summary>
            <param name="concurrencyOption"></param>
            <param name="connSQL"></param>
            <param name="strTableName">Custom name of base table</param>
        </member>
        <member name="M:Franson.DAO.DAOSearch.Update">
            <summary>
            Not supported for objects deriving from DAOSearch
            </summary>
            <exception cref="T:System.NotSupportedException">Will always be thrown</exception>
        </member>
        <member name="M:Franson.DAO.DAOSearch.GetEnumerator">
            <summary>
            Roes enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.DAO.DAOSearch.IsBaseRemoved">
            <summary>
            Not supported for objects deriving from DAOSearch
            </summary>
            <exception cref="T:System.NotSupportedException">Will always be thrown</exception>
        </member>
        <member name="P:Franson.DAO.DAOSearch.QueryTable">
            <summary>
            Same as <see cref="!:BaseTable"/>.
            </summary>
        </member>
        <member name="P:Franson.DAO.DAOSearch.Count">
            <summary>
            NUmber of rows in resultset
            </summary>
        </member>
        <member name="T:Franson.DAO.MSSQLConnector">
            <summary>
            Connector to MSSQL database.
            </summary>
            <threadsafety instance="false" static="true"/>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.#ctor(System.String)">
            <summary>
            Create MSSQL connector. Will translate a ODBC DSN to a native .NET connection string.
            </summary>
            <param name="strConn"></param>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.CreateConnection">
            <summary>
            Returns new <see cref="T:System.Data.SqlClient.SqlConnection"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.CreateDataAdapter">
            <summary>
            Returns new <see cref="T:System.Data.SqlClient.SqlDataAdapter"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.CreateCommand">
            <summary>
            Returns new <see cref="T:System.Data.SqlClient.SqlDataAdapter"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.CreateCommandBuilder">
            <summary>
            Returns new <see cref="T:System.Data.SqlClient.SqlCommandBuilder"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.SelectLastInsertedID">
            <summary>
            Returns "SELECT @@IDENTITY"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.AddUpdatingEvent(System.Data.Common.DbDataAdapter,Franson.DAO.DAOConnector.RowUpdatingEventHandler)">
            <summary>
            Add event handler to data adapter
            </summary>
            <param name="adapter"></param>
            <param name="funcUpdating"></param>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.AddUpdatedEvent(System.Data.Common.DbDataAdapter,Franson.DAO.DAOConnector.RowUpdatedEventHandler)">
            <summary>
            Add event handler to data adpater
            </summary>
            <param name="adapter"></param>
            <param name="funcUpdated"></param>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.RemoveUpdatingEvent(System.Data.Common.DbDataAdapter,Franson.DAO.DAOConnector.RowUpdatingEventHandler)">
            <summary>
            Remove event handler
            </summary>
            <param name="adapter"></param>
            <param name="funcUpdating"></param>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.RemoveUpdatedEvent(System.Data.Common.DbDataAdapter,Franson.DAO.DAOConnector.RowUpdatedEventHandler)">
            <summary>
            Remove event handler
            </summary>
            <param name="adapter"></param>
            <param name="funcUpdated"></param>
        </member>
        <member name="M:Franson.DAO.MSSQLConnector.m_AnalyzeConnectionString(System.String)">
            <summary>
            Convert ODBC DSN connection string to native .NET connection string.
            </summary>
            <param name="strConn"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.DAO.MSSQLConnector.SupportsMars">
            <summary>
            MSSQL 2005 supports Mars
            </summary>
        </member>
        <member name="T:Franson.DAO.MySQLOdbcConnector">
            <summary>
            DB connection for ODBC
            </summary>
            <threadsafety instance="false" static="true"/>
        </member>
        <member name="T:Franson.DAO.OdbcConnector">
            <summary>
            DB connection for ODBC
            </summary>
        </member>
        <member name="M:Franson.DAO.OdbcConnector.#ctor(System.String)">
            <summary>
            Create ODBC database connector.
            </summary>
            <param name="strConn"></param>
        </member>
        <member name="M:Franson.DAO.OdbcConnector.CreateConnection">
            <summary>
            Returns a <see cref="T:System.Data.Odbc.OdbcConnection"/> object.
            </summary>
            <param name="strConn"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.OdbcConnector.CreateDataAdapter">
            <summary>
            Returns a new <see cref="T:System.Data.Odbc.OdbcDataAdapter"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.OdbcConnector.CreateCommand">
            <summary>
            Returns new <see cref="T:System.Data.Odbc.OdbcCommand"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.OdbcConnector.CreateCommandBuilder">
            <summary>
            Returns new <see cref="T:System.Data.Odbc.OdbcCommandBuilder"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.MySQLOdbcConnector.#ctor(System.String)">
            <summary>
            Create ODBC database connector.
            </summary>
            <param name="strConn"></param>
        </member>
        <member name="M:Franson.DAO.MySQLOdbcConnector.SelectLastInsertedID">
            <summary>
            Returns "SELECT LAST_INSERT_ID()"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.MySQLOdbcConnector.CheckReconnect(System.Exception)">
            <summary>
            Checks for specific ODBC errors that can be worth a reconnection attempt.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.DAO.MySQLOdbcConnector.SupportsMars">
            <summary>
            MySQL emulates MARS by opening an additional connection insiode the ODBC driver.
            </summary>
        </member>
        <member name="T:Franson.DAO.ObjectLoader">
            <summary>
            Loads one object from the database. Using table name, data base ID and bo_type field.
            </summary>
        </member>
        <member name="M:Franson.DAO.ObjectLoader.#ctor(System.String,System.String)">
            <summary>
            Creates object loader for specified table.
            </summary>
            <param name="strTable">Table to load bo_field from</param>
            <param name="iID">Database ID of record</param>
            <param name="strField">Name of primary ID field. Set to null to append "_id" to table name.</param>
        </member>
        <member name="M:Franson.DAO.ObjectLoader.LoadByID(System.Int32)">
            <summary>
            Loads bo_type information from database. Result is returned in <see cref="P:Franson.DAO.ObjectLoader.bo_type"/>
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">Object not found in database.</exception>
            <exception cref="T:Franson.DAO.FillException">Database error</exception>
        </member>
        <member name="M:Franson.DAO.ObjectLoader.LoadByID(System.String)">
            <summary>
            Loads bo_type information from database. Result is returned in <see cref="P:Franson.DAO.ObjectLoader.bo_type"/>
            </summary>
            <param name="strID">Database ID</param>
            <exception cref="T:Franson.DAO.NotFoundException">Object not found in database.</exception>
            <exception cref="T:Franson.DAO.FillException">Database error</exception>
        </member>
        <member name="P:Franson.DAO.ObjectLoader.bo_type">
            <summary>
            Returns value of bo_type field.
            </summary>
        </member>
        <member name="T:Franson.DAO.SoapExceptionFactory">
            <summary>
            This SoapFactory will create a well formed SoapException based on the custom exception classes in the business tiers. 
            This will in a structure way complete the SoapException with a custom FaultCode and pass in the original exception message
            to this SoapException. In this manner we will be able to get the type of the error at the client side in a more
            robust and well formed way that can be understood of both java and .NET clients. Just set set the SoapFaultCodeAttribute attribute to 
            the custom business tier exception. 
            
            Another way to accomplish this is to 
            </summary>
        </member>
        <member name="T:Franson.DAO.Transaction">
            <summary>
            Container for one database transaction. Returned by BeginTransaction.
            Only one transaction per thread can be active at once.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Franson.DAO.Transaction.m_iUseCount">
            <summary>
            Stack level.
            </summary>
        </member>
        <member name="F:Franson.DAO.Transaction.m_dicThreadTrans">
            <summary>
            Maps a thread to a transaction. There can only be one on going transaction in one thread.
            </summary>
        </member>
        <member name="M:Franson.DAO.Transaction.#ctor(System.Data.Common.DbTransaction,Franson.DAO.DAOConnector)">
            <summary>
            Create transaction object.
            </summary>
            <param name="trans"></param>
            <exception cref="T:System.ArgumentException">Some argument is null.</exception>
        </member>
        <member name="M:Franson.DAO.Transaction.Begin">
            <summary>
            Call if there is recursion goes one step deepter. Called by <see cref="M:Franson.DAO.DAOBase.BeginTransaction"/>
            if there is already an ongoing transaction in thread.
            </summary>
        </member>
        <member name="M:Franson.DAO.Transaction.Commit">
            <summary>
            Call to commit changes to database. After successfull commit the event <see cref="E:Franson.DAO.Transaction.TransactionDone"/> is called.
            Each call to <see cref="M:Franson.DAO.BOBase.BeginTransaction"/> should be followed by a call to Commit().
            </summary>
            <exception cref="T:Franson.DAO.CommitException">There was an error during commit</exception>
        </member>
        <member name="M:Franson.DAO.Transaction.Rollback">
            <summary>
            Call to undo changes to database.
            After successfull rollback the event <see cref="E:Franson.DAO.Transaction.TransactionDone"/> is called.
            </summary>
            <exception cref="T:Franson.DAO.RollbackException"></exception>
            <exception cref="T:Franson.DAO.PendingRollbackException">Recursive transaction failed. All parties must call Rollback.</exception>
        </member>
        <member name="M:Franson.DAO.Transaction.Rollback(System.Exception)">
            <summary>
            Call to undo changes to database.
            After successfull rollback the event <see cref="E:Franson.DAO.Transaction.TransactionDone"/> is called.
            </summary>
            <param name="exInner">reason for rollback.</param>
            <exception cref="T:Franson.DAO.RollbackException">Database rollback failed.</exception>
            <exception cref="T:Franson.DAO.PendingRollbackException">Recursive transaction failed. All parties must call Rollback.</exception>
        </member>
        <member name="M:Franson.DAO.Transaction.GetThreadTransaction">
            <summary>
            Returns the current transaction for this thread. Returns null if there is no transaction.
            </summary>
            <return></return>
        </member>
        <member name="M:Franson.DAO.Transaction.WashException(System.Exception)">
            <summary>
            Returns the first inner exception that is not a <see cref="T:Franson.DAO.PendingRollbackException"/>.
            If ex is not a PendingRollbackException, ex is returned.
            If ex is null, null is returned.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.DAO.Transaction.ToString">
            <summary>
            Returns "Transaction " + recursion level.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Franson.DAO.Transaction.TransactionDone">
            <summary>
            Called after a call to <see cref="M:Franson.DAO.Transaction.Commit"/> or <see cref="M:Franson.DAO.Transaction.Rollback"/> has been successfully executed.
            </summary>
        </member>
        <member name="P:Franson.DAO.Transaction.NativeTransaction">
            <summary>
            The native ADO.NET transaction object.
            </summary>
        </member>
        <member name="P:Franson.DAO.Transaction.DAOConnector">
            <summary>
            DAO connector associated to this transaction.
            </summary>
        </member>
        <member name="T:Franson.DAO.Transaction.TransactionDoneHandler">
            <summary>
            Deletegate for <see cref="!:CommitDone"/>
            </summary>
            <param name="trans"></param>
        </member>
        <member name="T:Franson.Crypto.AESCrypto">
            <summary>
            This class uses a symmetric key algorithm (Rijndael/AES) to encrypt and 
            decrypt data. As long as encryption and decryption routines use the same
            parameters to generate the keys, the keys are guaranteed to be the same.
            </summary>
        </member>
        <member name="M:Franson.Crypto.AESCrypto.Encrypt(System.String,System.String)">
            <summary>
            Encrypt specified cipher text using Rijndael symmetric key algorithm.
            Using default values
            </summary>
            <param name="strPlainText"></param>
            <param name="strPassPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Crypto.AESCrypto.Encrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Encrypts specified plaintext using Rijndael symmetric key algorithm
            and returns a base64-encoded result.
            </summary>
            <param name="strPlainText">
            Text to be encrypted.
            </param>
            <param name="strPassPhrase">
            Passphrase from which a pseudo-random password will be derived. 
            </param>
            <param name="strSaltValue">
            Salt value used along with passphrase to generate password.
            </param>
            <param name="strHashAlgorithm">
            Hash algorithm used to generate password. Supported values: "MD5" or "SHA1". 
            </param>
            <param name="iPasswordIterations">
            Number of iterations used to generate password.
            </param>
            <param name="strInitVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be 
            exactly 16 ASCII characters long.
            </param>
            <param name="iKeySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256. 
            </param>
            <returns>
            Encrypted value formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Franson.Crypto.AESCrypto.Decrypt(System.String,System.String)">
            <summary>
            Decrypts specified cipher text using Rijndael symmetric key algorithm.
            Using default values
            </summary>
            <param name="strCipherText"></param>
            <param name="strPassPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Crypto.AESCrypto.Decrypt(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Decrypts specified ciphertext using Rijndael symmetric key algorithm.
            </summary>
            <param name="strCipherText">
            Base64-formatted ciphertext value.
            </param>
            <param name="strPassPhrase">
            Passphrase from which a pseudo-random password will be derived. 
            </param>
            <param name="strSaltValue">
            Salt value used along with passphrase to generate password.
            </param>
            <param name="strHashAlgorithm">
            Hash algorithm used to generate password. Supported values: "MD5" or "SHA1". 
            </param>
            <param name="iPasswordIterations">
            Number of iterations used to generate password.
            </param>
            <param name="strInitVector">
            Initialization vector (or IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be 
            exactly 16 ASCII characters long.
            </param>
            <param name="iKeySize">
            Size of encryption key in bits. Allowed values are: 128, 192, and 256. 
            </param>
            <returns>
            Decrypted string value.
            </returns>
            <remarks>
            Most of the logic in this function is similar to the Encrypt
            logic. In order for decryption to work, all parameters of this function
            - except cipherText value - must match the corresponding parameters of
            the Encrypt function which was called to generate the
            ciphertext.
            </remarks>
        </member>
        <member name="M:Franson.Crypto.RSACrypto.#ctor">
            <summary>
            RSACrypto is a helper class that uses the RSA crypto 
            to encrypt and decrypt strings. 
            </summary>
        </member>
        <member name="M:Franson.Crypto.RSACrypto.Sign(System.Byte[],System.String)">
            <summary>
            Signed hashed data. 
            </summary>
            <param name="hasheDdata">Hashed data to sign.</param>
            <param name="algorithName">The name of the hash algorithm.</param>
            <returns>A signature sign with the senders private key.</returns>
        </member>
        <member name="M:Franson.Crypto.RSACrypto.Verify(System.String,System.Byte[],System.String)">
            <summary>
            Verify the signature. 
            </summary>
            <param name="rsaParams"></param>
            <param name="signedData"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Crypto.RSACrypto.Encrypt(System.String)">
            <summary>
            Encrypts the plain text using the receiver's public key. 
            </summary>
            <param name="strPlain"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Crypto.RSACrypto.Decrypt(System.String)">
            <summary>
            Decrypt an encrypted string using the receivers private string. 
            </summary>
            <param name="strEncryptet"></param>
            <returns>The decrypted string (if key is correct). </returns>
        </member>
        <member name="P:Franson.Crypto.RSACrypto.ReceiverPublicKeyXml">
            <summary>
            Gets the receiver's public keys as xml. 
            
            </summary>
        </member>
        <member name="P:Franson.Crypto.RSACrypto.ReceiverKeyPair">
            <summary>
            Gets the receiver's public/private key pair as xml
            </summary>
        </member>
        <member name="P:Franson.Crypto.RSACrypto.SenderPublicKeyXml">
            <summary>
            Gets the senders's public keys as xml. 
            
            </summary>
        </member>
        <member name="P:Franson.Crypto.RSACrypto.SenderKeyPair">
            <summary>
            Gets the senders's public/private key pair as xml
            </summary>
        </member>
        <member name="T:Franson.License.License">
            <summary>
            Handles one license key.
            </summary>
        </member>
        <member name="F:Franson.License.License.m_strPubKey">
            <summary>
            The public key used to verify the signature. 
            </summary>
        </member>
        <member name="F:Franson.License.License.m_nlog">
            <summary>
            The NLog object used for logging. 
            </summary>
        </member>
        <member name="F:Franson.License.License.m_rsaCrypto">
            <summary>
            An instance of the RSACrypto helper class. 
            </summary>
        </member>
        <member name="M:Franson.License.License.GenerateKey">
            <summary>
            Generates a new public/private key. 
            </summary>
        </member>
        <member name="M:Franson.License.License.ReadKey(System.String)">
            <summary>
            Saves the public/private key to an xml-ffile. 
            </summary>
            <param name="filePath">The path to the xml-file to save.</param>
        </member>
        <member name="M:Franson.License.License.SaveKeyPair(System.String)">
            <summary>
            Saves the public/private key to an xml-ffile. 
            </summary>
            <param name="filePath">The path to the xml-file to save.</param>
            <exception cref="T:Franson.License.KeyFileErrorException">Thrown if thre is an error saving the file.</exception>
            <exception cref="T:Franson.License.KeyNotSetException">Thrown if the key is not set.</exception>
        </member>
        <member name="M:Franson.License.License.SavePublicKey(System.String)">
            <summary>
            Saves the public key to an xml-file. 
            </summary>
            <param name="filePath">The path to the xml-file to save.</param>
            <exception cref="T:Franson.License.KeyFileErrorException">Thrown if there is an error saving the file.</exception>
            <exception cref="T:Franson.License.KeyNotSetException">Thrown if the key is not set.</exception>
        </member>
        <member name="M:Franson.License.License.Sign">
            <summary>
            Sign the license using the private key. 
            </summary>
        </member>
        <member name="M:Franson.License.License.SetInternalKey">
            <summary>
            Use the internal key. 
            </summary>
        </member>
        <member name="M:Franson.License.License.ToXml">
            <summary>
            Gets the Xml-representation of this license. 
            </summary>
        </member>
        <member name="M:Franson.License.License.FromXml(System.String)">
            <summary>
            Sets this license from an Xml-representation. 
            </summary>
        </member>
        <member name="M:Franson.License.License.m_readFile(System.String)">
            <summary>
            Reads a text file and returns it as a string. 
            </summary>
            <param name="strFilePath">The path to the file to read.</param>
            <returns>The file as a stirng.</returns>
        </member>
        <member name="M:Franson.License.License.m_saveFile(System.String,System.String)">
            <summary>
            Saves a text file and returns it as a string. 
            </summary>
            <param name="strFilePath">The path to the file to read.</param>
            <returns>The file as a stirng.</returns>
        </member>
        <member name="P:Franson.License.License.RSACrypto">
            <summary>
            Gets the RSACrypto instance. 
            </summary>
        </member>
        <member name="P:Franson.License.License.ClassType">
            <summary>
            Gets the ClassType. 
            The class type is used to determine if this class needs to call the update. 
            </summary>
        </member>
        <member name="P:Franson.License.License.IsValid">
            <summary>
            Gets a bool telling if this license is valid. 
            </summary>
        </member>
        <member name="P:Franson.License.License.PropertyString">
            <summary>
            A string containing the property values. Used for hash calculation. 
            </summary>
        </member>
        <member name="P:Franson.License.License.Signature">
            <summary>
            The signature of this license. 
            </summary>
        </member>
        <member name="P:Franson.License.License.PublicKey">
            <summary>
            Gets the public key as Xml. 
            </summary>
        </member>
        <member name="P:Franson.License.License.KeyPair">
            <summary>
            Gets the public/private key pair.  
            </summary>
        </member>
        <member name="T:Franson.License.LicenseCollection">
            <summary>
            Collection of user object.
            Extends ArrayList with a ToDataSet() method.
            </summary>
        </member>
        <member name="T:Franson.License.LicenseException">
            <summary>
            Base class for license exceptions
            </summary>
        </member>
        <member name="T:Franson.License.KeyFileErrorException">
            <summary>
            Invalid license key.
            </summary>
        </member>
        <member name="T:Franson.License.ParseErrorException">
            <summary>
            Cannot parse license key.
            </summary>
        </member>
        <member name="T:Franson.License.MaxAllowedUsersException">
            <summary>
            Maximum number of users reached.
            </summary>
        </member>
        <member name="T:Franson.License.KeyNotSetException">
            <summary>
            No license key set.
            </summary>
        </member>
        <member name="T:Franson.License.LicenseInUseException">
            <summary>
            License key is already in use.
            </summary>
        </member>
        <member name="T:Franson.License.InvalidLicenseException">
            <summary>
            The license key is not valid.
            </summary>
        </member>
        <member name="T:Franson.License.LicenseManager">
            <summary>
            Vailidates licenses on a server.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Franson.License.LicenseManager.m_bIsExpress">
            <summary>
            True if this server has an Express key which allows two users per applications without
            consuming server licenses.
            </summary>
        </member>
        <member name="F:Franson.License.LicenseManager.m_bValid">
            <summary>
            True fi this server has a valid license.
            </summary>
        </member>
        <member name="F:Franson.License.LicenseManager.m_iMaxUsers">
            <summary>
            Max users allowed on server.
            </summary>
        </member>
        <member name="F:Franson.License.LicenseManager.m_iRegUser">
            <summary>
            Number of registered users on server.
            </summary>
        </member>
        <member name="F:Franson.License.LicenseManager.m_dtFirstUserCreated">
            <summary>
            UTC when first user was created.
            </summary>
        </member>
        <member name="F:Franson.License.LicenseManager.m_nlog">
            <summary>
            The NLog object used for logging. 
            </summary>
        </member>
        <member name="F:Franson.License.LicenseManager.m_tsTrialPeriod">
            <summary>
            By default a trial period of 30 days is allowed
            </summary>
        </member>
        <member name="F:Franson.License.LicenseManager.m_iTrialUsers">
            <summary>
            By default 5 trial users are allowed.
            </summary>
        </member>
        <member name="F:Franson.License.LicenseManager.m_bTrialExpiredAndNoLicense">
            <summary>
            Set to true if the trial period is expired and no more purchased licenses are installed.
            </summary>
        </member>
        <member name="M:Franson.License.LicenseManager.#ctor">
            <summary>
            Create a license manager
            </summary>
        </member>
        <member name="M:Franson.License.LicenseManager.Reload">
            <summary>
            Loads license keys from database.
            This method is thread safe. (Nothing will break), but the propeties of this class may be temporary
            inconstistant while this method is called.
            </summary>
        </member>
        <member name="P:Franson.License.LicenseManager.IsExpress">
            <summary>
            Returns true if an Express key is installed on this server.
            </summary>
        </member>
        <member name="P:Franson.License.LicenseManager.TrailExpieredAndNoLicense">
            <summary>
            Returns true if trial is expired and no license is purchased.
            </summary>
        </member>
        <member name="P:Franson.License.LicenseManager.IsValid">
            <summary>
            Tells if this instance of GpsGate Server has a valid license. 
            </summary>
        </member>
        <member name="P:Franson.License.LicenseManager.MaximumAllowedUsers">
            <summary>
            Returns maximum number of users license permits.
            </summary>
        </member>
        <member name="P:Franson.License.LicenseManager.NoMoreUserAllowed">
            <summary>
            Will return true if adding a new user will cause an exception.
            </summary>
        </member>
        <member name="P:Franson.License.LicenseManager.UsersThatRequiresLicense">
            <summary>
            Returns number of users that requires a license on server.
            </summary>
        </member>
        <member name="T:Franson.License.ServerLicense">
            <summary>
            Handles one license key installed on the server.
            </summary>
        </member>
        <member name="T:Franson.License.ServerLicenseNoDB">
            <summary>
            Parses and validates a server license.
            </summary>
        </member>
        <member name="M:Franson.License.ServerLicenseNoDB.FromXml(System.String)">
            <summary>
            Sets this license from an Xml-representation. 
            </summary>
        </member>
        <member name="M:Franson.License.ServerLicenseNoDB.ToXml">
            <summary>
            Gets the license key, licenseID, customerID and desription as xml. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicenseNoDB.Signature">
            <summary>
            The signature of this license. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicenseNoDB.LicenseID">
            <summary>
            The license ID guid. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicenseNoDB.CustomerID">
            <summary>
            The customer id guid. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicenseNoDB.Description">
            <summary>
            Gets or sets a description of this licesen, i.e. to whom it was submitted etc.  
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicenseNoDB.Email">
            <summary>
            Gets or sets a description of this licesen, i.e. to whom it was submitted etc.  
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicenseNoDB.LicensedUsers">
            <summary>
            Gets the number of licensed users the license holds. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicenseNoDB.PropertyString">
            <summary>
            Returns CustomerID + LicenseID + Description + LicensedUsers as a string. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicense.m_serverLicenseDaoObject">
            <summary>
            Private method to cast the DaoItem to a serverLicenceDaoObject. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicense.Signature">
            <summary>
            The signature of this license. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicense.LicenseID">
            <summary>
            The license ID guid. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicense.CustomerID">
            <summary>
            The customer id guid. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicense.Description">
            <summary>
            Gets or sets a description of this licesen, i.e. to whom it was submitted etc.  
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicense.Email">
            <summary>
            Gets or sets a description of this licesen, i.e. to whom it was submitted etc.  
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicense.LicensedUsers">
            <summary>
            Gets the number of licensed users this license holds. 
            </summary>
        </member>
        <member name="P:Franson.License.ServerLicense.RegisteredUsers">
            <summary>
            Get the number of active users in the database. Users that should have a license.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.AdminRightsDAOSQL.LoadByID(System.Int32)">
            <summary>
            
            </summary>
            <exception cref="T:Franson.Directory.DAO.GroupRightsNotFoundException">This exception is thrown if the GroupRights was not found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.AdminRightsDAOSQL.LoadByName(Franson.Directory.DAO.AdminRight)">
            <summary>
            Load AdminRights by ID from database. 
            </summary>
            <exception cref="T:Franson.Directory.DAO.GroupRightsNotFoundException">This exception is thrown if the GroupRights was not found.</exception>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationDAOSQL">
            <summary>
            Application DAO. "application" table.
            </summary>
        </member>
        <member name="F:Franson.Directory.DAO.ApplicationDAOSQL.m_strTableName">
            <summary>
            The name of DB table. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationDAOSQL.#ctor(System.Data.DataRow)">
            <summary>
            Create from data row.
            </summary>
            <param name="dataRow"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load a AppInstanceDAO by its ID.
            </summary>
            <param name="iID">The ID of the Application to load.</param>
            <exception cref="!:AppInstanceNotFoundException">This exception is thrown if the item is not found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationDAOSQL.IsInApplication(System.Int32)">
            <summary>
            Check if a user exist in this application
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationDAOSQL.IsInApplication(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Checks if the given users is in application.
            </summary>
            <param name="arrUserIDs">Array of users to check</param>
            <param name="bAll">Set to true all must be in application. Set to false any must be in application</param>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.DAO.ApplicationDAOSQL.Name">
            <summary>
            application.name
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.ApplicationDAOSQL.Description">
            <summary>
            application.description
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.ApplicationDAOSQL.ApplicationTemplateID">
            <summary>
            application.app_template_id 
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.ApplicationDAOSQL.MaxUsers">
            <summary>
            Max allowed users in the application.
            Set to 0 to disable. 
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.ApplicationDAOSQL.Expire">
            <summary>
            Time stamp when application expires.
            
            Set to null to disable
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.ApplicationDAOSQL.UserCount">
            <summary>
            Returns the number of users in this application
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationDAOMySQL.#ctor(System.Data.DataRow)">
            <summary>
            Create new DOA from collection
            </summary>
            <param name="dataRow"></param>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationDAOMSSQL.#ctor(System.Data.DataRow)">
            <summary>
            Create new DOA from collection
            </summary>
            <param name="dataRow"></param>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationSearchDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationSearchDAOSQL">
            <summary>
            ApplicationSearch DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOSQL.LoadApplications">
            <summary>
            See <see cref="!:Franson.Directory.LoadApplications"/>
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOSQL.LoadApplicationsByUser(System.Int32)">
            <summary>
            See <see cref="!:Franson.Directory.LoadApplicationsByUser"/>
            </summary>
            <param name="iUserId"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOSQL.LoadApplicationsByBoType(System.String)">
            <summary>
            Loads all application for the given BO Type.
            </summary>
            <param name="strBoType"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOSQL.LoadApplicationsByBoType(System.String[])">
            <summary>
            Loads all application for the given array of BO types. Applications are ordered in alpabethical order.
            </summary>
            <param name="strBoType"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOSQL.LoadAssignedApplicationsByMapLib(System.Int32)">
            <summary>
            See <see cref="!:Franson.Directory.LoadAssignedApplicationsByMapLib"/>
            </summary>
            <param name="iMapLibId"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOSQL.LoadUnassignedApplicationsByMapLib(System.Int32)">
            <summary>
            See <see cref="!:Franson.Directory.LoadUnassignedApplicationsByMapLib"/>
            </summary>
            <param name="iMapLibId"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOSQL.CreateApplicationDAO(System.Data.DataRow)">
            <summary>
            Create an Application DAO of right database kind. Used by <see cref="!:ApplicationDAO"/> when returning the loaded result.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.DAO.ApplicationSearchDAOSQL.ApplicationsDAO">
            <summary>
            Returns all loaded application objects.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOMySQL.CreateApplicationDAO(System.Data.DataRow)">
            <summary>
            Return new MySQL Application DAO populated from "row"
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationSearchDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSearchDAOMSSQL.CreateApplicationDAO(System.Data.DataRow)">
            <summary>
            Return new MSSQL Application DAO populated from "row"
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationSettingsDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationSettingsDAOSQL">
            <summary>
            Handles database access for application settings.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.SettingsDAOSQL">
            <summary>
            DAO for Settings class
            </summary>
        </member>
        <member name="F:Franson.Directory.DAO.SettingsDAOSQL.m_strTableName">
            <summary>
            The name of DB table. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.SettingsDAOSQL.#ctor">
            <summary>
            DAO for Settings.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.SettingsDAOSQL.SetValue(System.String,System.Object,System.String)">
            <summary>
            Set new value, returns a negative ID if this was a new value. Otherwise a positive ID is returned.
            The negative ID should be used to link help tables using DataSet.Relations.
            </summary>
            <param name="strValueName">Name of value.</param>
            <param name="oValue">Value</param>
            <param name="strDescription">Value description. Null to keep unchanged.</param>
            <returns>ID in DB. Negative means new value.</returns>
        </member>
        <member name="M:Franson.Directory.DAO.SettingsDAOSQL.GetValue(System.String,System.String,System.Type,System.Object)">
            <summary>
            Returns a named value. The value is typed as int, double, string, bool or DateTime.
            To support more types override this method. 
            </summary>
            <param name="strValueName">Key.</param>
            <param name="strBOType">BO Type for this setting.</param>
            <param name="strCastType">Cast returned value to this type. null to keep type from database.</param>
            <param name="oDefault">Default value if key not found</param>
            <returns>Object to be cast.</returns>
        </member>
        <member name="M:Franson.Directory.DAO.SettingsDAOSQL.NewValue(System.Int32)">
            <summary>
            Called by SetValue if a new record was created. Should be overridden by deriving class to set ID in 
            help table. The ID is typically a temporary negative ID that will be resolved when <see cref="!:Update"/>
            is called. It is therefor necessary to use DataSet.Relations to link the help tables setting_id to
            settings.setting_id
            </summary>
            <param name="iTmpID">Temporary ID for new value.</param>
        </member>
        <member name="M:Franson.Directory.DAO.SettingsDAOSQL.RemoveValue(System.String)">
            <summary>
            Flags a loaded value for removal. The value must have been saved to the DB first.
            The removal is made when <see cref="!:Update"/> is called.
            </summary>
            <param name="strValueName">Name of value to remove.</param>
        </member>
        <member name="M:Franson.Directory.DAO.SettingsDAOSQL.ContainsValueName(System.String)">
            <summary>
            Returns true if value name (key) exists in loaded settings.
            </summary>
            <param name="strValueName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.SettingsDAOSQL.FindRow(System.String,System.String)">
            <summary>
            Returns the first <see cref="T:System.Data.DataRow"/> a named value can be found in.
            </summary>
            <param name="strValueName"></param>
            <param name="strBoType">BO type. Set to null if not used.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.SettingsDAOSQL.GetItemType">
            <summary>
            Not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.SettingsDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Derived tables should set their primary key to settings.setting_id
            This should be resolved with DataSet.Relations
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Franson.Directory.DAO.SettingsDAOSQL.Namespace">
            <summary>
            Name space for values loaded.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.SettingsDAOSQL.Item(System.Int32)">
            <summary>
            Returns settings avlue as a <see cref="T:Franson.Directory.SettingsItem"/> struct.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSettingsDAOSQL.#ctor">
            <summary>
            Create new DAO object.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSettingsDAOSQL.NewValue(System.Int32)">
            <summary>
            Called when new value is inserted into DataTable.
            </summary>
            <param name="m_iTempId"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSettingsDAOSQL.LoadByNamespaceAndApplicationID(System.String,System.Int32)">
            <summary>
            Load all settings for specified namespace and application ID.
            </summary>
            <param name="strNamespace"></param>
            <param name="iAppID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSettingsDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationSettingsDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationSettingsDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.AppTemplateDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.AppTemplateDAOSQL">
            <summary>
            DAO for AppTemplate class
            </summary>
        </member>
        <member name="F:Franson.Directory.DAO.AppTemplateDAOSQL.m_strTableName">
            <summary>
            The name of DB table. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.AppTemplateDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.AppTemplateDAOSQL.#ctor(System.Data.DataRow)">
            <summary>
            Create DAO from collection
            </summary>
            <param name="dataRow"></param>
        </member>
        <member name="M:Franson.Directory.DAO.AppTemplateDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load a by database ID.
            </summary>
            <param name="iID">The ID of the app_template to load.</param>
            <exception cref="T:Franson.Directory.DAO.AppTemplateNotFoundException">This exception is thrown if the item is not found.</exception>
        </member>
        <member name="P:Franson.Directory.DAO.AppTemplateDAOSQL.Name">
            <summary>
            app_template.name
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.AppTemplateDAOSQL.Description">
            <summary>
            app_template.description
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.AppTemplateDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.AppTemplateDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.AppTemplateDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.AttributeReaderDAO">
            <summary>
            Abstract base class for reading Attributes from db.
            See <see cref="T:Franson.Directory.UserAttributeReader"/> for implementation examples.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.AttributeReaderDAO.#ctor">
            <summary>
            Default Constructor
            </summary>
            <param name="connection"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Directory.DAO.AttributeReaderDAO.ExecuteAttributeReader" -->
        <member name="M:Franson.Directory.DAO.AttributeReaderDAO.CreateAttributeFromReader(System.Data.IDataReader)">
            <summary>
            Creates a "typed" Attribute from a data reader.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.AttributeReaderDAO.CreateAttribute``1(System.Int32,System.String,``0)">
            <summary>
            Instantiate a new attribute as correct type.
            </summary>
            <typeparam name="T">Type of the value of the attribute. Supported int, double, string, bool</typeparam>
            <param name="iID">ID of the attribute</param>
            <param name="strName">name of the attribute</param>
            <param name="tValue">the value of the attribute</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DAO.AttributeWriterDAO">
            <summary>
            Abstract base class used to write attributes to database.
            See <see cref="T:Franson.Directory.DAO.UserAttributeWriterDAOSQL"/> for implementation
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.AttributeWriterDAO.#ctor">
            <summary>
            Default constructor
            Adds tables and set up rellations.
            </summary>
            <param name="connetion"></param>
        </member>
        <member name="M:Franson.Directory.DAO.AttributeWriterDAO.LoadByID(System.Int32)">
            <summary>
            Loads records from attribute table for where references exist in user_attribute for the given user id
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.AttributeWriterDAO.LoadByName(System.String)">
            <summary>
            Loads records from attribute table for the given attribute name.
            </summary>
            <param name="strName"></param>
        </member>
        <member name="M:Franson.Directory.DAO.AttributeWriterDAO.SetValue``1(System.Data.DataRow,Franson.Directory.Attribute{``0})">
            <summary>
            Set the db field according to the attribute type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="attr"></param>
            <returns>True if fields set ok. If no matching type false.</returns>
        </member>
        <member name="P:Franson.Directory.DAO.AttributeWriterDAO.ChildTableName">
            <summary>
            Return the link table name. 
            E.g user_attribute where a reference to attribute_id must exist.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.AttributeWriterDAO.SelectorIDColumn">
            <summary>
            Return the column in child table for where the ID passed in LoadBYXYZ method should bee matched against.
            E.g "user_id"
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.ApplicationNotFoundException">
            <summary>
            Application not found in database.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.ApplicationNotFoundException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Directory.DAO.AppTemplateNotFoundException">
            <summary>
            Application template not found in database.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.AppTemplateNotFoundException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Directory.DAO.GroupNotFoundException">
            <summary>
            Group not found in database.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupNotFoundException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Directory.DAO.UserNotFoundException">
            <summary>
            User not found in database.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserNotFoundException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Directory.DAO.UserAlreadyExistsException">
            <summary>
            User already exists in database.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.RoleNotFoundException">
            <summary>
            Role not found in database.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.InvalidFactoryException">
            <summary>
            The exception is thrown if a factory returns objects of wrong type
            or null (illegal cast). 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.InvalidFactoryException.#ctor(System.String)">
            <summary>
            Create a new exception with a string message. 
            </summary>
            <param name="message">The string message.</param>
        </member>
        <member name="T:Franson.Directory.DAO.GroupRightsNotFoundException">
            <summary>
            Group rights not found in database.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsNotFoundException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Directory.DAO.AdminRightsNotFoundException">
            <summary>
            Admin rights not found in database.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.AdminRightsNotFoundException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Directory.DAO.DirDAOFactory">
            <summary>
            The DataFactory class creates DataAccess objects that corresponds 
            to classes in the business tier. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetGroupSettingsDAO">
            <summary>
            Abstract method to get GroupSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetApplicationSettingsDAO">
            <summary>
            Abstract method to get ApplicationSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetUserSettingsDAO">
            <summary>
            Abstract method to get UserSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetSiteSettingsDAO">
            <summary>
            Abstract method to get SiteSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetApplicationDAO">
            <summary>
            Abstract method to get Application DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetAppTemplateDAO">
            <summary>
            Abstract method to get AppTemplate DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetApplicationSearchDAO">
            <summary>
            Abstract method to get ApplicationSearch DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetUserDAO">
            <summary>
            Abstract method to get User DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetSessionDAO">
            <summary>
            Abstract method to get Session DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetUserCollectionDAO">
            <summary>
            Abstract method to get UserCollection DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetGroupDAO">
            <summary>
            Abstract method to get Group DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetGroupCollectionDAO">
            <summary>
            Abstract method to get GroupCollection DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetGroupRightsCollectionDAO">
            <summary>
            Abstract method to get GroupRightsCollection DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetGroupRightsDAO">
            <summary>
            Abstract method to get GroupRights DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetAdminRightsDAO">
            <summary>
            Abstract method to get AdminRights DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetStatDAOSQL">
            <summary>
            Abstract method to get Stat DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetGroupReferrersDAO">
            <summary>
            Abstract method to get GroupReferrers DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetGroupReferrersLogDAO">
            <summary>
            Abstract method to get GroupReferrersLog DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetUserAttributeWriterDAO">
            <summary>
            Abstract method to get UserAttributeWriterDAOSQL DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetUserAttributeReaderDAO">
            <summary>
            Abstract method to get UserAttributeReaderDAOSQL DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetPrivilegeReaderDAO">
            <summary>
            Abstract method to get PrivilegeReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetTemporaryCredentialsDAO">
            <summary>
            Abstract method to get Temporary Credentials DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirDAOFactory.GetDAOFactory">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="T:Franson.Directory.DAO.DirMSSQLDAOFactory">
            <summary>
            MSSQL DAO factory for Franson.Directory
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetAdminRightsDAO">
            <summary>
            MSSQL version of AdminRights DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetUserDAO">
            <summary>
            MSSQL version of User DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetSessionDAO">
            <summary>
            MSSQL version of Session DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetGroupDAO">
            <summary>
            MSSQL version of Group DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetGroupCollectionDAO">
            <summary>
            Returns MSSQL version of GroupCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetUserCollectionDAO">
            <summary>
            Returns MSSQL version of UserCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetGroupRightsCollectionDAO">
            <summary>
            Returns MSSQL version of GroupRightsCollection
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetGroupRightsDAO">
            <summary>
            Returns MSSQL version of GroupRights DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetStatDAOSQL">
            <summary>
            Returns MSSQL version of Stat DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetApplicationDAO">
            <summary>
            Returns MSSQL version of Application DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetAppTemplateDAO">
            <summary>
            Returns MSSQL version of AppTemplate DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetGroupSettingsDAO">
            <summary>
            Returns MSSQL version of GroupSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetApplicationSearchDAO">
            <summary>
            Returns MSSQL version of ApplicationSearch
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetApplicationSettingsDAO">
            <summary>
            Returns MSSQL version of ApplicationSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetUserSettingsDAO">
            <summary>
            Create MSSQL version of UserSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetSiteSettingsDAO">
            <summary>
            Creates MSSQL version of SiteSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetGroupReferrersDAO">
            <summary>
            Creates MSSQL version of GroupReferers DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetGroupReferrersLogDAO">
            <summary>
            Create MSSQL version of GroupReferrersLog DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetUserAttributeWriterDAO">
            <summary>
            Create MSSQL version of UserAttributeWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetUserAttributeReaderDAO">
            <summary>
            Create MSSQL version of UserAttributeReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetPrivilegeReaderDAO">
            <summary>
            Create MSSQL version of PrivilegeReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMSSQLDAOFactory.GetTemporaryCredentialsDAO">
            <summary>
            Create MySQL version of TemporaryCredential DAO
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DAO.DirMySQLDAOFactory">
            <summary>
            The MySQLDAOFactory class creates DataAccess objects that corresponds 
            to classes in the business tier.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetUserDAO">
            <summary>
            Creates MySQL version of User DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetSessionDAO">
            <summary>
            Creates MySQL version of Session DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetUserCollectionDAO">
            <summary>
            Creates MySQL version of UserCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetGroupRightsCollectionDAO">
            <summary>
            Creates MySQL version of GroupRightsCollection
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetGroupDAO">
            <summary>
            Creates MySQL version of Group DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetGroupCollectionDAO">
            <summary>
            Creates MySQL version of GroupCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetGroupRightsDAO">
            <summary>
            Creates MySQL version of GroupRights DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetStatDAOSQL">
            <summary>
            Creates MySQL version of Stat DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetApplicationDAO">
            <summary>
            Creates MySQL version of Application DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetAppTemplateDAO">
            <summary>
            Creates MySQL version of AppTemplate DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetAdminRightsDAO">
            <summary>
            Creates MySQL version of AdminRights DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetGroupSettingsDAO">
            <summary>
            Creates MySQL version of GroupSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetApplicationSettingsDAO">
            <summary>
            Creates MySQL version of ApplicationSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetUserSettingsDAO">
            <summary>
            Creates MySQL version of UserSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetSiteSettingsDAO">
            <summary>
            Creates MySQL version of SiteSettings DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetApplicationSearchDAO">
            <summary>
            Creates MySQL version of ApplicationSearch DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetGroupReferrersDAO">
            <summary>
            Creates MySQL version of GroupReferrers DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetGroupReferrersLogDAO">
            <summary>
            Creates MySQL version of GroupReferrersLog DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetUserAttributeWriterDAO">
            <summary>
            Create MSSQL version of UserAttributeWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetUserAttributeReaderDAO">
            <summary>
            Create MSSQL version of UserAttributeReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetPrivilegeReaderDAO">
            <summary>
            Create MSSQL version of PrivilegeReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.DirMySQLDAOFactory.GetTemporaryCredentialsDAO">
            <summary>
            Create MSSQL version of TemporaryCredential DAO
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DAO.GroupCollectionDAOMSSQL">
            <summary>
            This class contains MS SQL dependent queries for the GroupManagerDAO.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupCollectionDAOSQL">
            <summary>
            DAO for GroupCollection
            </summary>
        </member>
        <member name="F:Franson.Directory.DAO.GroupCollectionDAOSQL.m_strTableName">
            <summary>
            The name of DB table. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.LoadByUser(System.Int32)">
            <summary>
            Load all groups that user has a relation to.
            </summary>
            <param name="iUserID">DB ID for user.</param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.LoadByBOType(System.String)">
            <summary>
            Load all groups with a specific bo_type.
            </summary>
            <param name="strBOType">The string returned by GetType() on a BO object.</param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.LoadByBOTypeAndApplication(System.String,System.Int32)">
            <summary>
            Load all groups with a specific bo_type in application.
            </summary>
            <param name="strBOType"></param>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.LoadByApplication(System.Int32)">
            <summary>
            Load all groups in an application.
            </summary>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.LoadByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Load all groups in an application.
            </summary>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.LoadAll">
            <summary>
            Load all groups in the system.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.LoadByUserAndGroupRights(System.Int32,System.Int32)">
            <summary>
            Load all groups for a user with specific group_rights (Data access rights).
            </summary>
            <param name="iUserID">User</param>
            <param name="iGroupRightsID">Data access rights</param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.LoadByUserAndRights(System.Int32,System.Int32,System.Int32)">
            <summary>
            Load all groups for a user with specific data access and admin rights.
            </summary>
            <param name="iUserID">User</param>
            <param name="iGroupRightsID">Data access rights</param>
            <param name="iAdminRightsID">Admin rights</param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.LoadByUserAndRightsAndApplication(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Load all groups for a user with specific data access and admin rights.
            </summary>
            <param name="iUserID">User</param>
            <param name="iGroupRightsID">Data access rights</param>
            <param name="iAdminRightsID">Admin rights</param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOSQL.CreateCollection(System.Data.DataRow[])">
            <summary>
            Create a GroupCollectionDAOSQL from a DataRow array.
            </summary>
            <param name="dataRows"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="conn"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupCollectionDAOMSSQL.GetItemType">
            <summary>
            Returns typeof(GroupDAOMSSQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DAO.GroupCollectionDAOMySQL">
            <summary>
            This class contains MySQL dependent queries for GroupManagerDAO.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupDAOMSSQL">
            <summary>
            This class contains MS SQL dependent queries for the GroupDAOMSSQL.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupDAOSQL">
            <summary>
            Group DAO
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Franson.Directory.DAO.GroupDAOSQL.m_strTableName">
            <summary>
            The name of DB table. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load a GroupDAO by its ID.
            </summary>
            <param name="groupID">The ID of the group to load.</param>
            <exception cref="T:Franson.Directory.DAO.GroupNotFoundException">This exception is thrown if the Group is not found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.GroupDAOSQL.LoadByName(System.String)">
            <summary>
            Load a Groups by its name. 
            </summary>
            <param name="strGroupName">The name of the group to load.</param>
            <exception cref="T:Franson.Directory.DAO.GroupNotFoundException">Is thrown if group is not found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.GroupDAOSQL.LoadByNameAndApplication(System.String,System.Int32)">
            <summary>
            See <see cref="!:Franson.Directory.LoadByNameAndApplication"/>
            </summary>
            <param name="strGroupName">The name of the group to load.</param>
            <exception cref="T:Franson.Directory.DAO.GroupNotFoundException">Is thrown if group is not found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.GroupDAOSQL.AddUser(System.Int32,System.Int32)">
            <summary>
            Adds a User to the group by its ID. 
            Make sure the user exists before adding it, hence 
            there is no check that users exists but it will still be
            added.
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupDAOSQL.SetGroupRightsToUser(System.Int32,System.Int32)">
            <summary>
            Sets the GroupRights for a User in this group
            </summary>
            <param name="iUserID"></param>
            <param name="iGroupRightID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupDAOSQL.SetRightsToUser(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Rights for a User in this group
            </summary>
            <param name="iUserID"></param>
            <param name="iGroupRightID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupDAOSQL.RemoveUserFromGroup(System.Int32)">
            <summary>
            Remove user from this group
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupDAOSQL.m_loadUserGroups">
            <summary>
            Will load user_groups data for this group. Call on demand!
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.GroupDAOSQL.Name">
            <summary>
            The name of the group. 
            The group name is case in-sensitive. 
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.GroupDAOSQL.ApplicationId">
            <summary>
            The id of the application this group belongs to
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.GroupDAOSQL.IsPublic">
            <summary>
            bool if group is publi or not
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.GroupDAOSQL.Description">
            <summary>
            Group description. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="connMySQL"></param>
        </member>
        <member name="P:Franson.Directory.DAO.GroupDAOMSSQL.IsPublic">
            <summary>
            group.public_flag (Not that this field is named "public" for MySQL, and "public_flag" for MSSQL.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupDAOMySQL">
            <summary>
            This class contains MySQL dependent queries for GroupDAOMySQL.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupReferrersDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupReferrersDAOSQL">
            <summary>
            GroupReferrers DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupReferrersDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupReferrersLogDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupReferrersLogDAOSQL">
            <summary>
            DAO for GroupReferrersLog
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersLogDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersLogDAOSQL.LoadGroupId(System.Int32)">
            <summary>
            See <see cref="!:Franson.ServiceSecurity.LoadGroupId"/>
            </summary>
            <param name="iGroupId"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersLogDAOSQL.LoadByGroupNameAndAppId(System.String,System.Int32)">
            <summary>
            See <see cref="!:Franson.ServiceSecurity.LoadByGroupNameAndAppId"/>
            </summary>
            <param name="iGroupId"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersLogDAOSQL.LogUrl(System.Int32,System.Uri)">
            <summary>
            See <see cref="!:Franson.ServiceSecurity.LogUrl"/>
            </summary>
            <param name="iGroupId"></param>
            <param name="uri"></param>
        </member>
        <member name="P:Franson.Directory.DAO.GroupReferrersLogDAOSQL.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:Franson.Directory.DAO.ReferrerLogInfo"/> object.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.DAO.GroupReferrersLogDAOSQL.ReferrerInfo">
            <summary>
            Iterates through loaded data set.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersLogDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersLogDAOMySQL.GetItemType">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="T:Franson.Directory.DAO.GroupReferrersLogDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersLogDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupReferrersLogDAOMSSQL.GetItemType">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="T:Franson.Directory.DAO.GroupRightsCollectionDAOMySQL">
            <summary>
            This class contains MySQL dependent queries 
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupRightsCollectionDAOSQL">
            <summary>
            SQL DAO for GroupRightsCollection
            </summary>
        </member>
        <member name="F:Franson.Directory.DAO.GroupRightsCollectionDAOSQL.m_strGroupRightsTableName">
            <summary>
            The name of the GroupRihgts table. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsCollectionDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsCollectionDAOSQL.LoadAll">
            <summary>
            Load all available group rights.
            </summary>
            <returns>A collection of groups.</returns>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsCollectionDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="connMySQL"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsCollectionDAOMySQL.GetItemType">
            <summary>
            Returns typeof(GroupRightsDAOMySQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DAO.GroupRightsCollectionDAOMSSQL">
            <summary>
            This class contains MSSQL dependent queries 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsCollectionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="connMySQL"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsCollectionDAOMSSQL.GetItemType">
            <summary>
            Returns typeof(GroupRightsDAOMSSQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DAO.GroupRightsDAOMySQL">
            <summary>
            This class contains MySQL dependent queries
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupRightsDAOSQL">
            <summary>
            GroupRights DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsDAOSQL.#ctor(System.Data.DataRow)">
            <summary>
            Create DAO from collection item.
            </summary>
            <param name="dataRow"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsDAOSQL.LoadByUserAndGroup(System.Int32,System.Int32)">
            <summary>
            Load the rights for one specified user in one specified group.
            </summary>
            <param name="iUserID"></param>
            <param name="iGroupID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load by Name form the database. 
            </summary>
            <exception cref="T:Franson.Directory.DAO.GroupRightsNotFoundException">This exception is thrown if the GroupRights was not found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsDAOSQL.LoadByName(System.String)">
            <summary>
            Load GroupRights by ID from database. 
            </summary>
            <exception cref="T:Franson.Directory.DAO.GroupRightsNotFoundException">This exception is thrown if the GroupRights was not found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsDAOSQL.AddToUserInGroup(System.Int32,System.Int32)">
            <summary>
            Add a GroupRights to a user in a group.
            </summary>
            <param name="user">The user to add the GroupRights to.</param>
            <param name="groupRights">The GroupRights to add. </param>
        </member>
        <member name="P:Franson.Directory.DAO.GroupRightsDAOSQL.Name">
            <summary>
            Database filed "group_right_name"
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.GroupRightsDAOSQL.Namespace">
            <summary>
            Database field "namespace"
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.GroupRightsDAOSQL.TrackPrivacy">
            <summary>
            Database field "enable_public_tracks"
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="connMySQL"></param>
        </member>
        <member name="T:Franson.Directory.DAO.GroupRightsDAOMSSQL">
            <summary>
            This class contains MSSQL dependent queries
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupRightsDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="connMySQL"></param>
        </member>
        <member name="T:Franson.Directory.DAO.GroupSettingsDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupSettingsDAOSQL">
            <summary>
            Handles database access for group settings.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupSettingsDAOSQL.#ctor">
            <summary>
            Create DAO for GroupSettings.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupSettingsDAOSQL.LoadByNamespaceAndGroupID(System.String,System.Int32)">
            <summary>
            Populate settings by namespace and group ID.
            </summary>
            <param name="strNamespace"></param>
            <param name="iGroupID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupSettingsDAOSQL.NewValue(System.Int32)">
            <summary>
            Takes temp ID from new value and stores it into help table that links 
            groups and settings together.
            </summary>
            <param name="iTmpID"></param>
        </member>
        <member name="M:Franson.Directory.DAO.GroupSettingsDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.GroupSettingsDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.GroupSettingsDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.SessionDAOMSSQL">
            <summary>
            This class contains MS SQL dependent queries for SessionDAO.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.SessionDAOSQL">
            <summary>
            The SessionDAOSQL class represents the Data Access Object (MS SQL) of the User class 
            in the business tier. 
            </summary>
        </member>
        <member name="F:Franson.Directory.DAO.SessionDAOSQL.m_strSessionTableName">
            <summary>
            The name of the session table. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.SessionDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.SessionDAOSQL.LoadByID(System.Int32)">
            <summary>
            Loads a session by the session id.
            </summary>
            <param name="iSessionID">The id of the session</param>
        </member>
        <member name="P:Franson.Directory.DAO.SessionDAOSQL.Expires">
            <summary>
            sessions.expire
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.SessionDAOSQL.UserID">
            <summary>
            sessions.user_id
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.SessionDAOSQL.Created">
            <summary>
            sessions.created
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.SessionDAOSQL.SourceAddress">
            <summary>
            sessions.ipaddress
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.SessionDAOSQL.TimeStamp">
            <summary>
            sessions.timestamp
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.SessionDAOSQL.DeviceID">
            <summary>
            session.device_id
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.SessionDAOMSSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="conn"></param>
        </member>
        <member name="T:Franson.Directory.DAO.SessionDAOMySQL">
            <summary>
            This class contains MySQL dependent queries for SessionDAO.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.SiteSettingsDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.SiteSettingsDAOSQL">
            <summary>
            DAO for SiteSettings
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.SiteSettingsDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.SiteSettingsDAOSQL.NewValue(System.Int32)">
            <summary>
            Called when new setting is added. Adds values to "site_settings" table.
            </summary>
            <param name="m_iTempId"></param>
        </member>
        <member name="M:Franson.Directory.DAO.SiteSettingsDAOSQL.LoadByNamespace(System.String)">
            <summary>
            See <see cref="!:Franson.Directory.LoadByNamespace"/>
            </summary>
            <param name="strNamespace"></param>
        </member>
        <member name="M:Franson.Directory.DAO.SiteSettingsDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.SiteSettingsDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.SiteSettingsDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.StatDAOMSSQL">
            <summary>
            MSSQL specifics.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.StatDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.StatDAOMySQL">
            <summary>
            MySQL specifics
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.StatDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="conn"></param>
        </member>
        <member name="T:Franson.Directory.DAO.TemporaryCredentialsDAOMySQL">
            <summary>
            MySQL version of TemporaryCredentials data access object
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.TemporaryCredentialsDAOSQL">
            <summary>
            Base SQL dataccess object for TemporaryCredentials
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.TemporaryCredentialsDAOSQL.#ctor">
            <summary>
            Creates a new TemporaryCredential object
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.TemporaryCredentialsDAOMSSQL">
            <summary>
            MSSQL version of TemporaryCredentials data access object
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Franson.Directory.DAO.UserAttributeReaderDAOSQL" -->
        <member name="T:Franson.Directory.DAO.UserAttributeWriterDAOMySQL">
            <summary>
            MSSQL DataAccessObject for writing attributes to user
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserAttributeWriterDAOSQL">
            <summary>
            Base DataAccessObject for writing attributes to a user
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserAttributeWriterDAOSQL.#ctor">
            <summary>
            Default Constructor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="P:Franson.Directory.DAO.UserAttributeWriterDAOSQL.ChildTableName">
            <summary>
            Returns "user_attributes" which links users to attributes.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.UserAttributeWriterDAOSQL.SelectorIDColumn">
            <summary>
            returns "user_id" the column to select the user from.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserAttributeWriterDAOMSSQL">
            <summary>
            MySQL DataAccessObject for writing attributes to user
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserCollectionDAOMSSQL">
            <summary>
            This class contains MS SQL dependent queries for the UserManagerDAO.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserCollectionDAOSQL">
            <summary>
            UserCollection DAO
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:Franson.Directory.DAO.UserCollectionDAOSQL.m_strUserTableName">
            <summary>
            The name of the user table. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserCollectionDAOSQL.LoadActiveUsers">
            <summary>
            Loads all active users. Use with care!
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserCollectionDAOSQL.SearchUserByUsername(System.String)">
            <summary>
            Searches on partial match on username
            </summary>
            <param name="strSearchString"></param>
        </member>
        <member name="M:Franson.Directory.DAO.UserCollectionDAOSQL.SearchExactMatch(System.String)">
            <summary>
            Searches on exact match on email or username
            </summary>
            <param name="strSearchString"></param>
        </member>
        <member name="M:Franson.Directory.DAO.UserCollectionDAOSQL.SearchByEmail(System.String)">
            <summary>
            Loads users by partial match of email address.
            </summary>
            <param name="strUsername">The Email of the user to load.</param>
        </member>
        <member name="M:Franson.Directory.DAO.UserCollectionDAOSQL.Search(System.String)">
            <summary>
            Search users where email or username match the search string 
            </summary>
            <param name="strUsername">The Email of the user to load.</param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">This exception is thrown if the user is not found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.UserCollectionDAOMSSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="conn"></param>
        </member>
        <member name="M:Franson.Directory.DAO.UserCollectionDAOMSSQL.GetItemType">
            <summary>
            Returns typeof(UserDAOMSSQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DAO.UserCollectionDAOMySQL">
            <summary>
            This class contains MySQL dependent queries for UserManagerDAO.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserDAOMSSQL">
            <summary>
            This class contains MS SQL dependent queries for the UserDAO.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserDAOSQL">
            <summary>
            The UserDAO class represents the Data Access Object of the User class 
            in the business tier. The SQL queries in this class should be platform
            independent, i.e. on both MS SQL and MySql.  
            </summary>
        </member>
        <member name="F:Franson.Directory.DAO.UserDAOSQL.m_strTableName">
            <summary>
            The name of the user table. 
            </summary>
        </member>
        <member name="F:Franson.Directory.DAO.UserDAOSQL.m_bIsUsernameDirty">
            <summary>
            True if Username has been set. Set to false after Load / update. 
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load data from DB by ID
            </summary>
            <param name="iUserID">ID of user to load data for</param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">If user wasn't found</exception>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.LoadByUsernameNoException(System.String)">
            <summary>
            Load data from DB by username. Will not throw any exception if not found.
            </summary>
            <param name="username">User name</param>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.LoadByEmail(System.String)">
            <summary>
            Load user data from DB by email address. Since many users can share the same
            email address, the use of this method is not recommended.
            </summary>
            <param name="strEmail">Email address of user.</param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">If email wasn't found in DB</exception>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.LoadBySurname(System.String)">
            <summary>
            Load user data by surname. Use not recommended, since users may share the same surname.
            </summary>
            <param name="strSurname"></param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">Id surname wasn't found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.LoadByName(System.String)">
            <summary>
            Load user data from DB by first name. Use not recommended, since many users may share the same name.
            </summary>
            <param name="strName"></param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">If name wasn't found</exception>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.LoadByUsername(System.String)">
            <summary>
            Load user data from DB by username. Username is always unique.
            </summary>
            <param name="username"></param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">If username was not found.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.LoadByUsernameAndPassword(System.String,System.String)">
            <summary>
            Load user data from DB by username and password.
            </summary>
            <param name="username">Username</param>
            <param name="password">password</param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">If username + password combination wasn't found in DB.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.Update">
            <summary>
            Updates changes to DB.
            </summary>
            <exception cref="T:Franson.License.MaxAllowedUsersException">If license does not allow more users in system.</exception>
            <exception cref="T:Franson.Directory.DAO.UserAlreadyExistsException">If username already exists in DB.</exception>
            <exception cref="T:Franson.DAO.UpdateDBException">Update to DB failed.</exception>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOSQL.ExistsInDatabase">
            <summary>
            Check if a User with the same Username exists in the database. 
            </summary>
            <returns>True if Username exists, otherwise false.</returns>
        </member>
        <member name="P:Franson.Directory.DAO.UserDAOSQL.Username">
            <summary>
            Sets/gets the Username of the user. 
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.UserDAOSQL.Password">
            <summary>
            Password in clear text.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.UserDAOSQL.Surname">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.UserDAOSQL.Email">
            <summary>
            Email address.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.UserDAOSQL.Name">
            <summary>
            (First) name of user.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.UserDAOSQL.Description">
            <summary>
            User description.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.UserDAOSQL.SourceAddress">
            <summary>
            IP address this user was created from.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.UserDAOSQL.Created">
            <summary>
            When user was created. UTC.
            </summary>
        </member>
        <member name="P:Franson.Directory.DAO.UserDAOSQL.IsActivated">
            <summary>
            If the user is active or not.
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserDAOMSSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserDAOMySQL">
            <summary>
            This class contains MySQL dependent queries for UserDAO.
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserSettingsDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserSettingsDAOSQL">
            <summary>
            DAO for UserSettings
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserSettingsDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserSettingsDAOSQL.NewValue(System.Int32)">
            <summary>
            Adds data to user_settings table when new setting is added.
            </summary>
            <param name="m_iTempId"></param>
        </member>
        <member name="M:Franson.Directory.DAO.UserSettingsDAOSQL.LoadByNamespaceAndUserID(System.String,System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="strNamespace"></param>
            <param name="iUserId"></param>
        </member>
        <member name="M:Franson.Directory.DAO.UserSettingsDAOSQL.LoadByKey(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            See BO.
            </summary>
            <param name="strNamespace"></param>
            <param name="iUserID"></param>
            <param name="strKey"></param>
        </member>
        <member name="M:Franson.Directory.DAO.UserSettingsDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.DAO.UserSettingsDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Directory.DAO.UserSettingsDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Directory.Group">
            <summary>
            The Group class represents a group that users can be added to. 
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Directory.Group.#ctor">
            <summary>
            Creates a new empty group instance. 
            </summary>
        </member>
        <member name="M:Franson.Directory.Group.LoadByName(System.String)">
            <summary>
            Load a Groups by its name. 
            </summary>
            <param name="strGroupName">The name of the group to load.</param>
            <exception cref="T:Franson.Directory.DAO.GroupNotFoundException">Is thrown of group is not found.</exception>		
        </member>
        <member name="M:Franson.Directory.Group.LoadByNameAndApplication(System.String,System.Int32)">
            <summary>
            Loads a group by name and application ID. A group has a unique name within one application.
            </summary>
            <param name="strGroupName">Name of group</param>
            <param name="iApplicationID">Application database ID</param>
            <exception cref="T:Franson.Directory.DAO.GroupNotFoundException">Is thrown if group is not found.</exception>
        </member>
        <member name="M:Franson.Directory.Group.AddUser(Franson.Directory.User)">
            <summary>
            Adds user as "Member" to Group
            </summary>
            <param name="user">User to add</param>
        </member>
        <member name="M:Franson.Directory.Group.RemoveUserFromGroup(Franson.Directory.User)">
            <summary>
            Removes a user from a group
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Franson.Directory.Group.GetGroupRightsForUser(Franson.Directory.User)">
            <summary>
            Can be overridden if <see cref="T:Franson.Directory.GroupRights"/> is to be determined some other way than reading it from the database.
            </summary>
            <param name="gateUser">User to determine GroupRights for</param>
            <returns>Return null to read values from DB.</returns>
        </member>
        <member name="M:Franson.Directory.Group.IsInGroup(Franson.Directory.User)">
            <summary>
            Checks if a user is present in group.
            </summary>
            <param name="user"></param>
            <returns>Returns true if user is present in group.</returns>
        </member>
        <member name="M:Franson.Directory.Group.IsInGroup(System.Int32)">
            <summary>
            Checks if a user is present in group.
            </summary>
            <param name="user"></param>
            <returns>Returns true if user is present in group.</returns>
        </member>
        <member name="M:Franson.Directory.Group.ToString">
            <summary>
            Returns name of Group
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.Group.Name">
            <summary>
            The name of the group. 
            The group name is case in-sensitive. 
            </summary>
        </member>
        <member name="P:Franson.Directory.Group.Description">
            <summary>
            Group description. 
            </summary>
        </member>
        <member name="P:Franson.Directory.Group.ApplicationID">
            <summary>
            The id of the application this group belongs to.
            </summary>
        </member>
        <member name="P:Franson.Directory.Group.IsPublic">
            <summary>
            Set/Get public to a group.
            A public group can bee viewed by users not in group
            </summary>
        </member>
        <member name="M:Franson.Directory.AdministratorGroup.AddUser(Franson.Directory.User)">
            <summary>
            Adds user to administrator group
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Franson.Directory.AdministratorGroup.AddUser(Franson.Directory.User,Franson.Directory.GroupRights)">
            <summary>
            Not supported. Use AddUser(User).
            </summary>
            <param name="user"></param>
            <param name="rights"></param>
        </member>
        <member name="M:Franson.Directory.AdministratorGroup.SetGroupRightsToUser(Franson.Directory.User,Franson.Directory.GroupRights)">
            <summary>
            Set new rights to user in group.
            </summary>
            <param name="user">User to add rights to</param>
            <param name="groupRights">Rights</param>
            <exception cref="T:Franson.Directory.GroupRightsNotSupportedByGroup">This GroupRights is not supported by this group</exception>
            <exception cref="T:System.NullReferenceException">An argument was null</exception>
        </member>
        <member name="T:Franson.Directory.AdminRights">
            <summary>
            Represents administrative role for a user in a group.
            
            An object returned from <see cref="M:Franson.Directory.AdminRights.GetRights(System.String,Franson.Directory.DAO.AdminRight)"/> is read only, and therefor thread safe. Any calls to 
            methods that modifies it will return an exception.
            
            Objects created with new are not thread safe and can be modified.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Directory.AdminRights.ClearCache">
            <summary>
            Clears cache.
            </summary>
        </member>
        <member name="M:Franson.Directory.AdminRights.GetRights(System.String,Franson.Directory.DAO.AdminRight)">
            <summary>
            Returns <see cref="T:Franson.Directory.AdminRights"/> object. If combination of namespace + <see cref="P:Franson.Directory.AdminRights.AdminRight"/> doesn't
            exist, it is created. Object are cached, which makes this method fast.
            
            The returned object are read only and thread safe. Calls to methods and properties that modifies the object will return
            an exception.
            </summary>
            <param name="strNamespace"></param>
            <param name="adminRight"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AdminRights.#ctor(System.String,Franson.Directory.DAO.AdminRight,System.Boolean)">
            <summary>
            Load the created GroupRights with the record Namespace/Name from DB.
            If it doesn't exist the record is created.
            </summary>
            <param name="strNamespace"></param>
            <param name="adminRight"></param>
            <param name="bReadOnly">Set to true if this should be a cached read only object.</param>
        </member>
        <member name="M:Franson.Directory.AdminRights.LoadByID(System.Int32)">
            <summary>
            Loads admin rights object by database ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.InvalidOperationException">If called in read only mode</exception>
        </member>
        <member name="M:Franson.Directory.AdminRights.LoadByUserAndGroup(Franson.Directory.User,Franson.Directory.Group)">
            <summary>
            Load admin rights for a user in a group.
            </summary>
            <param name="user"></param>
            <param name="group"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">If called in read only mode</exception>
        </member>
        <member name="M:Franson.Directory.AdminRights.LoadByName(Franson.Directory.DAO.AdminRight)">
            <summary>
            Load this AdminRights by its name. Namespace is ignored. If several names are equal in different namespaces
            any of them can be loaded.
            </summary>
            <param name="strName">The name of the m_adminRightsDao to load.</param>
            <exception cref="T:Franson.Directory.DAO.GroupRightsNotFoundException">This exception is thrown if the GroupRights was not found.</exception>
            <exception cref="T:System.InvalidOperationException">If called in read only mode</exception>
        </member>
        <member name="M:Franson.Directory.AdminRights.LoadByNamespaceAndName(System.String,Franson.Directory.DAO.AdminRight)">
            <summary>
            Load name and namespace.
            </summary>
            <param name="strNamespace"></param>
            <param name="strName"></param>
            <exception cref="T:System.InvalidOperationException">If called in read only mode</exception>
        </member>
        <member name="M:Franson.Directory.AdminRights.Update">
            <summary>
            Updates database, and clears cache.
            </summary>
            <exception cref="T:System.InvalidOperationException">If called in read only mode</exception>
        </member>
        <member name="M:Franson.Directory.AdminRights.ToString">
            <summary>
            Returns AdminRight.ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AdminRights.GetHashCode">
            <summary>
            Returns base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AdminRights.m_createLoadGroupRights(System.String,Franson.Directory.DAO.AdminRight)">
            <summary>
            Internal method that creates or load the AdminRight, used by constructors
            </summary>
        </member>
        <member name="P:Franson.Directory.AdminRights.AdminRight">
            <summary>
            Returns AdminRight. E.g. "Member".
            </summary>
            <exception cref="T:System.InvalidOperationException">If set is called in read only mode</exception>
        </member>
        <member name="P:Franson.Directory.AdminRights.Namespace">
            <summary>
            Returns namespace.
            </summary>
            <exception cref="T:System.InvalidOperationException">If set is called in read only mode</exception>
        </member>
        <member name="M:Franson.Directory.Application.IsInApplication(Franson.Directory.User)">
            <summary>
            Checks if the given user exist in this application.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Application.IsInApplication(System.Int32)">
            <summary>
            Checks if the given user exist in this application.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Application.IsInApplication(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Checks if the given users is in application.
            </summary>
            <param name="arrUserIDs">Array of users to check</param>
            <param name="bAll">Set to true all must be in application. Set to false any must be in application</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Application.SetupPrivileges(Franson.Directory.Session)">
            <summary>
            Set the ServerPrivileges and ApplicationPrivileges properties on the Session object depending of the users Role in Application.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Franson.Directory.Application.SetupDefaultApplicationEntities(System.Version,System.Version)">
            <summary>
            Installs default entities such as event rules etc.
            
            NOP Implementation. Derived classes override to implement
            </summary>
            <param name="newVersion"></param>
            <param name="oldVersion"></param>
        </member>
        <member name="M:Franson.Directory.Application.CreateNewApplication">
            <summary>
            Setup and create a new application
            </summary>
        </member>
        <member name="M:Franson.Directory.Application.Remove">
            <summary>
            Remove applicaiton from server.
            </summary>
        </member>
        <member name="F:Franson.Directory.Application.m_bKeepUser">
            <summary>
            Set to true if RemoveUserFromApplication should not delete an orphan user.
            </summary>
        </member>
        <member name="M:Franson.Directory.Application.RemoveUserFromApplication(Franson.Directory.User,Franson.Directory.User,System.Boolean)">
            <summary>
            Remove a user from application. Will remove user from all groups that belongs to this application.
            If this is the last user in a group, the group is removed as well.
            Removal is made inside a DB transaction.
            </summary>
            <param name="userToRemove">User to be removed.</param>
            <param name="userRemoving">User removing. Must be administrator in application. If this argument is null no check is made.</param>
        </member>
        <member name="M:Franson.Directory.Application.DetachUserFromApplication(Franson.Directory.User)">
            <summary>
            Removes user from application, but will not delete the user even if it is not a member of any group after the
            operation. <see cref="M:Franson.Directory.Application.RemoveUserFromApplication(Franson.Directory.User,Franson.Directory.User)"/> will be called as part of of a call to this method.
            DetachUserFromApplication is simply the same thing as RemoveUserFromApplication except an orphan user is never deleted.
            True is returned if the user is orphan after the operation.
            </summary>
            <param name="usrToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Application.Update">
            <summary>
            Save changes to database. Calls <see cref="M:Franson.Directory.Application.CreateNewApplication"/> if this application was created.
            </summary>
        </member>
        <member name="M:Franson.Directory.Application.IsAdmin(Franson.Directory.User)">
            <summary>
            Returns tru if user is administrator in application.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Application.AddAdministrator(Franson.Directory.User)">
            <summary>
            Add administrator to application.
            </summary>
            <param name="administrator"></param>
            <exception cref="T:Franson.Directory.FransonApplicationException"/>
        </member>
        <member name="M:Franson.Directory.Application.ToString">
            <summary>
            Returns string for logging
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Application.CheckAddUserPreRequirements(Franson.Directory.User)">
            <summary>
            Check if application user max limit is not reached.
            </summary>
            <param name="user"></param>
            <exception cref="T:Franson.Directory.FransonApplicationException"/>
        </member>
        <member name="M:Franson.Directory.Application.Resolve(Franson.Text.TemplateParser,System.String)">
            <summary>
            Resolves the template variable.
            </summary>
            <param name="p"></param>
            <param name="strVariable"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.Application.Name">
            <summary>
            Gets or sets the name. 
            </summary>
        </member>
        <member name="P:Franson.Directory.Application.ApplicationTemplateID">
            <summary>
            Gets or sets the Application Template ID. 
            </summary>
        </member>
        <member name="P:Franson.Directory.Application.MaxUsers">
            <summary>
            Max allowed users in the application.
            Set to 0 to disable. 
            </summary>
        </member>
        <member name="P:Franson.Directory.Application.Expire">
            <summary>
            Time stamp when application expires.
            
            Set to DateTime.MinValue to disable
            </summary>
        </member>
        <member name="P:Franson.Directory.Application.UserCount">
            <summary>
            Returns the number of users in this application
            </summary>
        </member>
        <member name="P:Franson.Directory.Application.Users">
            <summary>
            Returns collection of users in application.
            </summary>
        </member>
        <member name="P:Franson.Directory.Application.SupportedVariables">
            <summary>
            Application.SupportedVariables returns an empty list.
            See concrete applications for supported variables.
            </summary>
        </member>
        <member name="M:Franson.Directory.ApplicationSearch.#ctor">
            <summary>
            Loads a list of application instances.
            </summary>
        </member>
        <member name="M:Franson.Directory.ApplicationSearch.LoadApplications">
            <summary>
            Load all application instances in database.
            </summary>
        </member>
        <member name="M:Franson.Directory.ApplicationSearch.LoadApplicationsByUser(Franson.Directory.User)">
            <summary>
            Load all application instances user is meber of.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Franson.Directory.ApplicationSearch.LoadApplicationByUser(System.Int32)">
            <summary>
            Load all application instances user is meber of.
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:Franson.Directory.ApplicationSearch.LoadApplicationsByBoType(System.String)">
            <summary>
            Loads all application with the given bo type
            </summary>
            <param name="strBoType"></param>
        </member>
        <member name="M:Franson.Directory.ApplicationSearch.LoadApplicationsByBoType(System.String[])">
            <summary>
            Loads all application instances with BO type specified in array. Result is ordered by application name.
            </summary>
            <param name="arrBoType"></param>
        </member>
        <member name="M:Franson.Directory.ApplicationSearch.LoadAssignedApplicationsByMapLib(System.Int32)">
            <summary>
            Do not use.
            </summary>
            <param name="iMapLibId"></param>
        </member>
        <member name="M:Franson.Directory.ApplicationSearch.LoadUnassignedApplicationsByMapLib(System.Int32)">
            <summary>
            Do not use.
            </summary>
            <param name="iMapLibId"></param>
        </member>
        <member name="P:Franson.Directory.ApplicationSearch.Applications">
            <summary>
            Return all loaded applications as an enum.
            </summary>
        </member>
        <member name="T:Franson.Directory.ApplicationSettings">
            <summary>
            Handles application settings.
            </summary>
        </member>
        <member name="T:Franson.Directory.Settings">
            <summary>
            Base class for all settings classes.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Directory.Settings.GpsGateServerNamespace">
            <summary>
            Default namespace for all settings.
            </summary>
        </member>
        <member name="M:Franson.Directory.Settings.SetValue(System.String,System.Object)">
            <summary>
            Sets new value to a named variable. If the variable doesn't exist it is created.
            </summary>
            <param name="strValueName">Name of value.</param>
            <param name="oValue">Value</param>
            <returns>ID in DB. Negative means new value.</returns>
        </member>
        <member name="M:Franson.Directory.Settings.SetValue(System.String,System.Object,System.String)">
            <summary>
            Sets new value to a named variable. If the variable doesn't exist it is created.
            </summary>
            <param name="strValueName">Name of value.</param>
            <param name="oValue">Value</param>
            <param name="strDescription">Optional description. null to keep old description if value already exists.</param>
            <returns>ID in DB. Negative means new value.</returns>
        </member>
        <member name="M:Franson.Directory.Settings.GetValue(System.String,System.String)">
            <summary>
            Returns named value.
            </summary>
            <param name="strValueName">Name of variable.</param>
            <param name="strBOType">BO type for value. null to ignore</param>
            <returns>Value as object, null if not found.</returns>
        </member>
        <member name="M:Franson.Directory.Settings.GetValue(System.String,System.Type)">
            <summary>
            Returns names value
            </summary>
            <param name="strValueName">Name of variable.</param>
            <param name="typeCast">Which type returned object should be cast to. null to keep type from database.</param>
            <returns>Value as object, null if not found.</returns>
        </member>
        <member name="M:Franson.Directory.Settings.GetValue(System.String,System.String,System.Type)">
            <summary>
            Returns named value as specified type. If key not found null is returned.
            </summary>
            <param name="strValueName">Name of variable.</param>
            <param name="strBOType">BO type for value. null to ignore</param>
            <param name="typeCast">Which type returned object should be cast to. null to keep type from database.</param>
            <returns>Value as object, null if not found.</returns>
        </member>
        <member name="M:Franson.Directory.Settings.GetValue(System.String,System.String,System.Type,System.Object)">
            <summary>
            Returns named value as specified type. If key not found default value is returned.
            </summary>
            <param name="strValueName">Name of variable.</param>
            <param name="strBOType">BO type for value. null to ignore</param>
            <param name="typeCast">Which type returned object should be cast to. null to keep type from database.</param>
            <param name="oDefaultValue">Default value if key not found.</param>
            <returns>Value as object, null if not found.</returns>
        </member>
        <member name="M:Franson.Directory.Settings.GetValue(System.String)">
            <summary>
            Gets value from named variable. If the variable does not exists, null is returned.
            </summary>
            <param name="strValueName">Name of variable.</param>
            <returns>Value as object, null if not found.</returns>
        </member>
        <member name="M:Franson.Directory.Settings.RemoveValue(System.String)">
            <summary>
            Remove variable. Will be removed from DB when <see cref="!:Update"/> is called.
            </summary>
            <param name="strValueName"></param>
        </member>
        <member name="M:Franson.Directory.Settings.ContainsValueName(System.String)">
            <summary>
            Returns true if specified key is included in loaded settings.
            </summary>
            <param name="strValueName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Settings.GetItemType">
            <summary>
            Do not use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.Settings.Item(System.Int32)">
            <summary>
            Return indexed setting as a <see cref="T:Franson.Directory.SettingsItem"/> struct.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.ApplicationSettings.#ctor">
            <summary>
            Create application settings object.
            </summary>
        </member>
        <member name="M:Franson.Directory.ApplicationSettings.LoadByNamespaceAndAppID(System.String,System.Int32)">
            <summary>
            Load all settings for specified namespace and application.
            </summary>
            <param name="strNameSpace"></param>
            <param name="iAppID"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Franson.Directory.AttributeBase" -->
        <member name="M:Franson.Directory.AttributeBase.#ctor(System.Int32,System.String)">
            <summary>
            Base class constructor.
            </summary>
            <param name="iID"></param>
            <param name="strName"></param>
        </member>
        <member name="M:Franson.Directory.AttributeBase.GetHashCode">
            <summary>
            Return a unique identifier for this Attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AttributeBase.Equals(System.Object)">
            <summary>
            Return true of ID are same.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.AttributeBase.ID">
            <summary>
            Unique ID.
            </summary>
        </member>
        <member name="P:Franson.Directory.AttributeBase.Name">
            <summary>
            Name of the attribute.
            E.g "Icon Color"
            </summary>
        </member>
        <member name="P:Franson.Directory.AttributeBase.Type">
            <summary>
            Type of the internal value. 
            Supporte. double, int, string and bool
            </summary>
        </member>
        <member name="P:Franson.Directory.AttributeBase.ValueToObject">
            <summary>
            Returns the value as object
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Franson.Directory.Attribute`1" -->
        <member name="M:Franson.Directory.Attribute`1.#ctor(System.String,`0)">
            <summary>
            Default Constructor to create a new Attribute
            </summary>
            <param name="strName"></param>
            <param name="tValue"></param>
        </member>
        <member name="M:Franson.Directory.Attribute`1.#ctor(System.Int32,System.String,`0)">
            <summary>
            Internal Constructs used to create a new attribute with an ID.
            This constructor is used to create an attribute from DB
            </summary>
            <param name="iID"></param>
            <param name="strName"></param>
            <param name="tValue"></param>
        </member>
        <member name="M:Franson.Directory.Attribute`1.ToString">
            <summary>
            String Representation of a Attribute
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.Attribute`1.Value">
            <summary>
            The value of the attribute
            </summary>
        </member>
        <member name="P:Franson.Directory.Attribute`1.Type">
            <summary>
            Type of the Attribute
            </summary>
        </member>
        <member name="P:Franson.Directory.Attribute`1.ValueToObject">
            <summary>
            Returns value as string
            </summary>
        </member>
        <member name="T:Franson.Directory.AuthenticationManager">
            <summary>
            This class provide method to authenticate a user.
            This class does NOT authorize the user, use AuthorizationManager for that.
            </summary>
        </member>
        <member name="M:Franson.Directory.AuthenticationManager.Authenticate(Franson.Directory.TemporaryCredentials,System.String)">
            <summary>
            Authenticate a user using <see cref="T:Franson.Directory.TemporaryCredentials"/>
            </summary>
            <param name="credentials">Temporary credential</param>
            <param name="strIdentifier">Some kind of extra identifier, typically the IP address the client connects from.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AuthenticationManager.Authenticate(System.String,System.String)">
            <summary>
            Authenticates a user using AES encrypted username password string.
            </summary>
            <param name="strCipherBase64">Username password as base64 encoded AES encrypted string</param>
            <param name="strIndentifier">Some kind of extra identifier, typically the IP address the client connects from.</param>
            <param name="bReuseActiveSession">If true. Use existing session if already existing for the user, else create new</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AuthenticationManager.Authenticate(System.String,System.String,System.String,System.Int32)">
            <summary>
            Authenticate user based on credentials and setup the users role based privileges for the given application
            </summary>
            <param name="strUsername">Username</param>
            <param name="strPassword">Password</param>
            <param name="strSourceAddress">Some kind of extra identifier, typically the IP address the client connects from.</param>
            <param name="iApplicationID">ID of the application for which context to login</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AuthenticationManager.Authenticate(System.Int32,System.String,System.Int32)">
            <summary>
            AuthenticateSessionID with an identifier ex. IP 
            </summary>
            <param name="iSessionID">ID of the session</param>
            <param name="strSourceAddress">Some kind of extra identifier, typically the IP address the client connects from.</param>
            <param name="iApplicationID">ID of the application for which context to login</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AuthenticationManager.Authenticate(System.String,System.String,System.String,Franson.Directory.User,Franson.Directory.Session)">
            <summary>
            Used when a sub classed User should be authenticated or a sub classed Session should be created.
            </summary>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
            <param name="strSourceAdress"></param>
            <param name="userCustom">A User object or dereived User object. If null a User object is created.</param>
            <param name="sessCustom">A Session object or dereived Session object. If null a Session object is created</param>
        </member>
        <member name="M:Franson.Directory.AuthenticationManager.Authenticate(System.String,System.String,System.String)">
            <summary>
            Authenticate a username and password with an identifier ex. IP 
            </summary>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
            <param name="strSourceAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AuthenticationManager.Authenticate(System.Int32,System.String)">
            <summary>
            AuthenticateSessionID with an identifier ex. IP 
            </summary>
            <param name="guidSessionID"></param>
            <param name="strIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.AuthenticationManager.CreateSession(Franson.Directory.User,System.String)">
            <summary>
            Creates a new session for user. No password check is made for user object
            </summary>
            <param name="user"><see cref="T:Franson.Directory.User"/> to create <see cref="T:Franson.Directory.Session"/> object for</param>
            <param name="strIdentifier">Some kind of extra identifier, typically the IP address the client connects from.</param>
            <returns>New Session object</returns>
        </member>
        <member name="M:Franson.Directory.AuthenticationManager.CreateSession(Franson.Directory.User,System.String,System.Int32)">
            <summary>
            Creates a new session for user. No password check is made for user object. Device ID included in session record.
            </summary>
            <param name="user"><see cref="T:Franson.Directory.User"/> to create <see cref="T:Franson.Directory.Session"/> object for</param>
            <param name="strIdentifier">Some kind of extra identifier, typically the IP address the client connects from.</param>
            <param name="iDeviceID">ID of device. 0 if no device was used to login.</param>
            <returns>New Session object</returns>
        </member>
        <member name="T:Franson.Directory.Credentials">
            <summary>
            Representation of an users credentials. 
            (Username and password)
            </summary>
        </member>
        <member name="P:Franson.Directory.Credentials.Username">
            <summary>
            Sets/gets the Username of the user. 
            </summary>
        </member>
        <member name="T:Franson.Directory.CryptoHelper">
            <summary>
            Handles Cryptography helper methods such as handling system key generation, store etc.
            </summary>
        </member>
        <member name="M:Franson.Directory.CryptoHelper.GetSystemAESKey">
            <summary>
            Get the system AES password to use with <see cref="T:Franson.Crypto.AESCrypto"/>
            If not found in settings a new is generated and stored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.CryptoHelper.DecrypUsernamePassword(System.String)">
            <summary>
            Returns Decrypted username and password
            </summary>
            <param name="strCipherBase64"></param>
            <returns>
            Key = Username
            Value = Password
            </returns>
            <exception cref="T:System.FormatException">If username and password could not be decrypted and parsed</exception>
        </member>
        <member name="M:Franson.Directory.CryptoHelper.EncryptUsernamePassword(System.String,System.String)">
            <summary>
            Returns AES Encrypted username and password cipher as Base64 string
            </summary>
            <param name="strPassword">Username to encrypt</param>
            <param name="strUsername">Password to encrypt</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.DirectoryException">
            <summary>
            Base class for most exceptions generated in the Directory module.
            </summary>
        </member>
        <member name="M:Franson.Directory.DirectoryException.#ctor(System.String,System.String)">
            <summary>
            Create exception with lang key.
            </summary>
            <param name="strMessage"></param>
            <param name="stringLanguageKey"></param>
        </member>
        <member name="M:Franson.Directory.DirectoryException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:Franson.Directory.DirectoryException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="P:Franson.Directory.DirectoryException.LanguageKey">
            <summary>
            Key to use for translate the error.
            If not Provided in the constructor, exception name in upper case + EX_ prefix will be used.
            Save ex.message as it is to preserve backwards compatibility
            </summary>
        </member>
        <member name="T:Franson.Directory.GroupRightsNotSupportedByGroup">
            <summary>
            Will be thrown if you try to set a GroupRights to a user in a group that the group does not support.
            </summary>
        </member>
        <member name="M:Franson.Directory.GroupRightsNotSupportedByGroup.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Directory.AdminRightsNotSupportedByGroup">
            <summary>
            Will be thrown if you try to set a AdminRights to a user in a group that the group does not support.
            </summary>
        </member>
        <member name="M:Franson.Directory.AdminRightsNotSupportedByGroup.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Directory.AuthenticationException">
            <summary>
            Authentication exception.
            </summary>
        </member>
        <member name="T:Franson.Directory.RoleAlreadyExistsException">
            <summary>
            This exception is thrown when a new role is created that already exists
            in the database. 
            </summary>
        </member>
        <member name="T:Franson.Directory.ApplicationPrerequirementsFaildException">
            <summary>
            Used when an application cannot launch because pre-requirements aren't met.
            </summary>
        </member>
        <member name="M:Franson.Directory.ApplicationPrerequirementsFaildException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception from message and inner exception.
            </summary>
            <param name="strMessage"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Franson.Directory.GroupCollection">
            <summary>
            This represents a collection of Groups. 
            Each user can be coupled to one or many groups which are stored in this collection. 
            </summary>
        </member>
        <member name="M:Franson.Directory.GroupCollection.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByUser(Franson.Directory.User)">
            <summary>
            Load all groups user is member of.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByUser(System.Int32)">
            <summary>
            Load all groups user is member of.
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByUserAndApplication(Franson.Directory.User,Franson.Directory.Application)">
            <summary>
            Load all groups user is member of in application
            </summary>
            <param name="user"></param>
            <param name="app"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Load all groups user is member of in application
            </summary>
            <param name="iApp"></param>
            <param name="iUser"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadAll">
            <summary>
            Load all groups in database. Only use this method for debugging purposes.
            </summary>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByUserAndGroupRights(Franson.Directory.User,Franson.Directory.GroupRights)">
            <summary>
            Load all groups user has specific rights in.
            </summary>
            <param name="user"></param>
            <param name="groupRights"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByUserAndRights(Franson.Directory.User,Franson.Directory.Rights)">
            <summary>
            Load all groups user has specific rights in.
            </summary>
            <param name="user"></param>
            <param name="rights"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByUserAndRightsAndApplication(Franson.Directory.User,Franson.Directory.Rights,Franson.Directory.Application)">
            <summary>
            Load all groups a user has specific rights in and is part of application.
            </summary>
            <param name="user"></param>
            <param name="rights"></param>
            <param name="app"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByBOType(System.String)">
            <summary>
            Load all groups of specified BO type. Do not use this method.
            </summary>
            <param name="strBOType"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByBoTypeAndApplication(System.String,System.Int32)">
            <summary>
            Load all groups of specified BO type in application.
            </summary>
            <param name="strBoType"></param>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadByApplication(System.Int32)">
            <summary>
            Load all groups in application.
            </summary>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.LoadEmptyGroupsByApplication(System.Int32)">
            <summary>
            Load all empty groups in application.
            </summary>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:Franson.Directory.GroupCollection.CreateCopy(Franson.DAO.DAOList)">
            <summary>
            Creates copy of collection
            </summary>
            <param name="daoList"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.GroupCollection.GetItemType">
            <summary>
            Returns typeof(Group) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.GroupReferrersLog.#ctor">
            <summary>
            Create referrer log.
            </summary>
        </member>
        <member name="M:Franson.Directory.GroupReferrersLog.LoadGroupId(System.Int32)">
            <summary>
            Loads all log entries for one group.
            NOTE! Do not use this in new implementation. It can potential consume much resources if a group
            as many web services.
            </summary>
            <param name="iGroupId"></param>
        </member>
        <member name="M:Franson.Directory.GroupReferrersLog.LoadByGroupNameAndAppId(System.String,System.Int32)">
            <summary>
            Loads all log entries for one group.
            NOTE! Do not use this in new implementation. It can potential consume much resources if a group
            as many web services.
            </summary>
            <param name="strGroupName">Group name</param>
            <param name="iAppId">Application ID</param>
        </member>
        <member name="M:Franson.Directory.GroupReferrersLog.LogUrl(System.Int32,System.Uri)">
            <summary>
            Updates the log entry for a referral / group combination. Will create a new log entry if necessary.
            The change is updated to the database. No call to <see cref="!:Update"/> is necessary.
            </summary>
            <param name="iGroupID"></param>
            <param name="uri"></param>
        </member>
        <member name="T:Franson.Directory.GroupRights">
            <summary>
            Represents a data rights for a user in a group.
            
            An object returned from <see cref="M:Franson.Directory.AdminRights.GetRights(System.String,Franson.Directory.DAO.AdminRight)"/> is read only, and therefor thread safe. Any calls to 
            methods that modifies it will return an exception.
            
            Objects created with new are not thread safe and can be modified.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Directory.GroupRights.ClearCache">
            <summary>
            Clears cache.
            </summary>
        </member>
        <member name="M:Franson.Directory.GroupRights.GetRights(System.String,System.String)">
            <summary>
            Returns GroupRights object. Creates if doesn't exists. Cache is used which makes this method fast.
            
            The returned object are read only and thread safe. Calls to methods and properties that modifies the object will return
            an exception.
            </summary>
            <param name="strNamespace"></param>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.GroupRights.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Load the created GroupRights with the record Namespace/Name from DB.
            If it doesn't exist the record is created.
            </summary>
            <param name="strNamespace"></param>
            <param name="strName"></param>
            <param name="bReadOnly">Set to true to make this object read only / thread safe.</param>
        </member>
        <member name="M:Franson.Directory.GroupRights.m_createLoadGroupRights(System.String,System.String)">
            <summary>
            Internal method that creates or load the GroupRight, used by constructors
            </summary>
        </member>
        <member name="M:Franson.Directory.GroupRights.LoadByID(System.Int32)">
            <summary>
            Loads group rights object by database ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.InvalidOperationException">If called in read only mode</exception>
        </member>
        <member name="M:Franson.Directory.GroupRights.LoadByUserAndGroup(Franson.Directory.User,Franson.Directory.Group)">
            <summary>
            Loads group rights for one user in a group.
            </summary>
            <param name="user"></param>
            <param name="group"></param>
            <exception cref="T:System.InvalidOperationException">Object is read only. You cannot modify objects returned by GetRights()</exception>
        </member>
        <member name="M:Franson.Directory.GroupRights.AddToUserInGroup(Franson.Directory.User,Franson.Directory.Group)">
            <summary>
            Add this group right to a user
            </summary>
            <param name="user"></param>
            <param name="group"></param>
            <exception cref="T:System.InvalidOperationException">Object is read only. You cannot modify objects returned by GetRights()</exception>
            <exception cref="T:Franson.DAO.IsNewException">this object, or the user object, or group object has not been saved to the database.</exception>
        </member>
        <member name="M:Franson.Directory.GroupRights.AddTrackPrivacyToUser(Franson.Directory.User,Franson.Directory.Group,System.Boolean)">
            <summary>
            Set track visibility for a user in a group.
            </summary>
            <param name="user"></param>
            <param name="group"></param>
            <param name="bTrackVisibility"></param>
            <exception cref="T:System.InvalidOperationException">Object is read only. You cannot modify objects returned by GetRights()</exception>
            <exception cref="T:Franson.DAO.IsNewException">this object, or the user object, or group object has not been saved to the database.</exception>
        </member>
        <member name="M:Franson.Directory.GroupRights.LoadByName(System.String)">
            <summary>
            Load this GroupRights by its name. Namespace is ignored. If several names are equal in different namespaces
            any of them can be loaded.
            </summary>
            <param name="strName">The name of the GroupRights to load.</param>
            <exception cref="T:Franson.Directory.DAO.GroupRightsNotFoundException">This exception is thrown if the GroupRights was not found.</exception>
            <exception cref="T:System.InvalidOperationException">Object is read only. You cannot modify objects returned by GetRights()</exception>
        </member>
        <member name="M:Franson.Directory.GroupRights.LoadByNamespaceAndName(System.String,System.String)">
            <summary>
            Load name and namespace.
            </summary>
            <param name="strNamespace"></param>
            <param name="strName"></param>
            <exception cref="T:System.InvalidOperationException">Object is read only. You cannot modify objects returned by GetRights()</exception>
        </member>
        <member name="M:Franson.Directory.GroupRights.Update">
            <summary>
            Updates database, and clears cache.
            </summary>
            <exception cref="T:System.InvalidOperationException">Object is read only. You cannot modify objects returned by GetRights()</exception>
        </member>
        <member name="M:Franson.Directory.GroupRights.ToString">
            <summary>
            Returns <see cref="P:Franson.Directory.GroupRights.Name"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.GroupRights.Name">
            <summary>
            Name of GroupRights e.g. "Reader"
            </summary>
            <exception cref="T:System.InvalidOperationException">Object is read only. You cannot modify objects returned by GetRights()</exception>
        </member>
        <member name="P:Franson.Directory.GroupRights.Namespace">
            <summary>
            Namespace e.g. "GpsGate.Online"
            </summary>
            <exception cref="T:System.InvalidOperationException">Object is read only. You cannot modify objects returned by GetRights()</exception>
        </member>
        <member name="T:Franson.Directory.GroupRightsCollection">
            <summary>
            This represents a collection of Groups. 
            Each user can be coupled to one or many groups which are stored in this collection. 
            </summary>
        </member>
        <member name="T:Franson.Directory.GroupSettings">
            <summary>
            Stores settings for a <see cref="T:Franson.Directory.Group"/>
            </summary>
        </member>
        <member name="M:Franson.Directory.GroupSettings.#ctor">
            <summary>
            Create settings object.
            </summary>
        </member>
        <member name="M:Franson.Directory.GroupSettings.LoadByNamespaceAndGroupID(System.String,System.Int32)">
            <summary>
            Populate settings by namespace and group ID. Some Load method must be called before 
            <see cref="!:SetValue"/>, <see cref="!:GetValue"/> or <see cref="!:RemoveValue"/> can be called.
            </summary>
            <param name="strNamespace"></param>
            <param name="iGroupID"></param>
        </member>
        <member name="T:Franson.Directory.Rights">
            <summary>
            A container class of GroupRights and AdminRights. 
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Directory.Rights.LoadByUserAndGroup(Franson.Directory.User,Franson.Directory.Group)">
            <summary>
            Load rights for user on a group.
            </summary>
            <param name="user"></param>
            <param name="group"></param>
        </member>
        <member name="M:Franson.Directory.Rights.Update">
            <summary>
            Update changes to database.
            </summary>
        </member>
        <member name="M:Franson.Directory.Rights.ToString">
            <summary>
            Returns admin rights, group rights
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.Rights.AdminRights">
            <summary>
            Gets or sets the AdminRights. 
            Typically used for administrative and status rights 
            such as member, moderator, pending, etc.
            </summary>
        </member>
        <member name="P:Franson.Directory.Rights.DataRights">
            <summary>
            Gets or sets the DataRights. 
            </summary>
        </member>
        <member name="T:Franson.Directory.Session">
            <summary>
            This class represents a login session.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Directory.Session.AddServerPrivileges(System.Collections.Generic.List{Franson.Directory.Security.Privilege})">
            <summary>
            Add a set of priviledges to this session.
            Calls to this method are thread safe.
            </summary>
            <param name="listPrivileges"></param>
        </member>
        <member name="M:Franson.Directory.Session.CheckServerPriviledge(System.String)">
            <summary>
            Returns true if named server privilege exists for session.
            Calls to this method are thread safe.
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Session.AddApplicationPrivileges(System.Collections.Generic.List{Franson.Directory.Security.Privilege})">
            <summary>
            Add a set of privileges to this session.
            Call to this method is thread safe.
            </summary>
            <param name="listPrivileges"></param>
        </member>
        <member name="M:Franson.Directory.Session.CheckApplicationPrivilege(System.String)">
            <summary>
            Returns an applicaiton Privilege by name. Returns true if found.
            Call to this method is thread safe.
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Session.GetApplicationPrivileges">
            <summary>
            Returns new array of all application privileges.
            Calls to this method are thread safe.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Session.Update">
            <summary>
            Sets <see cref="P:Franson.Directory.Session.TimeStamp"/> to UTC now, and updates database.
            </summary>
        </member>
        <member name="M:Franson.Directory.Session.Close">
            <summary>
            Ends session.
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.m_sessionDAO">
            <summary>
            The SessionDAO is the corresponding DAO object that enables communication with 
            the database. 
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.TimeStamp">
            <summary>
            Time for when the session was last activated through login, login or calling m_Finger() method.
            A new time stamp will only be set if it has passed at least 30s since last time.
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.Expires">
            <summary>
            Time for when this session will expire.
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.User">
            <summary>
            User this session belongs to.
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.UserID">
            <summary>
            Id of the user for who this session bellongs to.
            This property is cheeper then the User property and should be used if possible.
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.DeviceID">
            <summary>
            ID of device that logged in. Zero if it is a web login, or other none device login.
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.Created">
            <summary>
            UTC server time, when session was created.
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.ExpireIncrementation">
            <summary>
            Total number of seconds to extend the Expire date when the session is fingered or loaded.
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.SourceAddress">
            <summary>
            Address of logged in client. This can typically be an IP number or phone number.
            </summary>
        </member>
        <member name="P:Franson.Directory.Session.Application">
            <summary>
            The <see cref="P:Franson.Directory.Session.Application"/> the user is authenticated against.
            
            Note! Null if authenticated outside the contect of an application.
            </summary>
        </member>
        <member name="T:Franson.Directory.SettingsItem">
            <summary>
            The value for one settings item.
            </summary>
        </member>
        <member name="T:Franson.Directory.SettingsManager">
            <summary>
            Manage caching of settings
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Directory.SettingsManager.GetApplicationSettings(System.Int32)">
            <summary>
            Returns all settings for specified application. The returned object is cached and shared for all
            threads that asks for the same application settings. A call to <see cref="M:Franson.Directory.SettingsManager.ResetApplicationCache(System.Int32)"/>
            will clear the cache. This is necessary if the settings are changed.
            </summary>
            <param name="iAppId">Application ID</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.SettingsManager.ResetApplicationCache(System.Int32)">
            <summary>
            Removes settings for specified application from cache. Must be called when settings has been updated to renew content of 
            application cached settings
            </summary>
            <param name="iAppId"></param>
        </member>
        <member name="M:Franson.Directory.SettingsManager.GetSiteSettings">
            <summary>
            Returns all settings for the site. <see cref="M:Franson.Directory.SettingsManager.GetApplicationSettings(System.Int32)"/> for additional information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.SettingsManager.ResetSiteSettingsCache">
            <summary>
            Removes settings for site from cache. <see cref="M:Franson.Directory.SettingsManager.ResetApplicationCache(System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="M:Franson.Directory.SettingsManager.GetUserSettings(System.Int32)">
            <summary>
            Returns settings for specified user. <see cref="M:Franson.Directory.SettingsManager.GetApplicationSettings(System.Int32)"/> for additional information.
            </summary>
            <param name="iUserID">User ID</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.SettingsManager.ResetUserSettingsCache(System.Int32)">
            <summary>
            Removes settings for specified user from cache. <see cref="M:Franson.Directory.SettingsManager.ResetApplicationCache(System.Int32)"/> for more information.
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:Franson.Directory.SettingsManager.ResetAllCaches">
            <summary>
            Clear all. (User, Application, Site settings);
            </summary>
        </member>
        <member name="M:Franson.Directory.SettingsManager.Clear">
            <summary>
            Clear all caches.
            </summary>
        </member>
        <member name="M:Franson.Directory.SettingsManager.Remove(System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="strKey"></param>
        </member>
        <member name="T:Franson.Directory.TemporaryCredentials">
            <summary>
            Reporesents a temporary login credential.
            Temporary credential is only valid for given time defined by expire.
            </summary>
        </member>
        <member name="M:Franson.Directory.TemporaryCredentials.#ctor(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Creates a new TemporaryCredential for save.
            </summary>
            <param name="iUserID">ID of the user for which the credential should be created for.</param>
            <param name="iApplicationID">ID of application this credential apllies to.</param>
            <param name="dtExpire">UTC DateTime for when the credential expires.</param>
        </member>
        <member name="M:Franson.Directory.TemporaryCredentials.#ctor">
            <summary>
            Create a new TemporaryCredential for loading.
            </summary>
        </member>
        <member name="M:Franson.Directory.TemporaryCredentials.LoadByEncryptedID(System.String)">
            <summary>
            Loads the credentials by AES encrypted ID.
            </summary>
            <param name="strEncryptedID"></param>
        </member>
        <member name="P:Franson.Directory.TemporaryCredentials.UserID">
            <summary>
            ID of the User this credential applies to
            </summary>
        </member>
        <member name="P:Franson.Directory.TemporaryCredentials.ApplicationID">
            <summary>
            ID of application for which the credential applies to.
            </summary>
        </member>
        <member name="P:Franson.Directory.TemporaryCredentials.Expire">
            <summary>
            UTC time stamp for when the credential expires.
            </summary>
        </member>
        <member name="P:Franson.Directory.TemporaryCredentials.DAO">
            <summary>
            DataAccess object.
            </summary>
        </member>
        <member name="P:Franson.Directory.TemporaryCredentials.EncryptedID">
            <summary>
            Get the ID encrypted.
            </summary>
        </member>
        <member name="T:Franson.Directory.User">
            <summary>
            A User
            </summary>
        </member>
        <member name="M:Franson.Directory.User.IsValidEmail(System.String)">
            <summary>
            Returns true if the email address match the patterns for an standard mail address
            </summary>
            <param name="strEmailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.User.IsValidUsername(System.String)">
            <summary>
            Returns true id the username is valid. It may contain a-z, A-Z, 0-9, ., _ and @
            </summary>
            <param name="strUsername">String to be validated</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.User.IsValidPassword(System.String)">
            <summary>
            Returns true id the password is valid. It may contain a-z, A-Z, 0-9
            </summary>
            <param name="strPassword">String to be validated</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.User.LoadByUsernameAndPassword(System.String,System.String)">
            <summary>
            Loads this user by its Username and Password. 
            </summary>
            <param name="strUsername">The Username of the user to load.</param>
            <param name="strPassword">The Password of the user to load.</param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">This exception is thrown if the user is not found.</exception>
        </member>
        <member name="M:Franson.Directory.User.LoadByUsername(System.String)">
            <summary>
            Loads this User by its Username. 
            </summary>
            <param name="strUsername">The UserName of the user to load.</param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">This exception is thrown if the user is not found.</exception>
        </member>
        <member name="M:Franson.Directory.User.LoadByEmail(System.String)">
            <summary>
            Loads this User by its Email address. 
            </summary>
            <param name="strUsername">The Email-address of the user to load.</param>
            <exception cref="T:Franson.Directory.DAO.UserNotFoundException">This exception is thrown if the user is not found.</exception>
        </member>
        <member name="M:Franson.Directory.User.LoadBySurname(System.String)">
            <summary>
            Loads user data by Surname. Can be used for hacks when Surname is used to store other data than a name.
            Should only be used in temporary solutions, hacks and tests.
            </summary>
            <param name="strSurname">Surname</param>
        </member>
        <member name="M:Franson.Directory.User.LoadByName(System.String)">
            <summary>
            Loads user data by Name. Can be used for hacks when Name is used to store other data than a name.
            Should only be used in temporary solutions, hacks and tests.
            </summary>
            <param name="strSurname">Surname</param>
        </member>
        <member name="M:Franson.Directory.User.Remove">
            <summary>
            Removes user and all resources related to user at next call to <see cref="M:Franson.Directory.User.Update"/>
            This included devices, tracks, settings, etc.
            </summary>
        </member>
        <member name="M:Franson.Directory.User.Update">
            <summary>
            Writes changes of user to database.
            If user is new a license check will be made. And a check if username already exists.
            If user is flagged for removal, all resources related to user will also be deleted. See <see cref="M:Franson.Directory.User.Remove"/>
            for more information.
            All updates are made inside one single transaction.
            </summary>
            <exception cref="!:MaxAllowedUsersException">License does not allow more users.</exception>
            <exception cref="T:Franson.Directory.DAO.UserAlreadyExistsException">Trying to save a new user with an existing username.</exception>
            <exception cref="T:Franson.DAO.CommitException">Failed to update changes to database.</exception>
        </member>
        <member name="P:Franson.Directory.User.Username">
            <summary>
            Mandatory. Same as Credentials.Username
            </summary>
        </member>
        <member name="P:Franson.Directory.User.Password">
            <summary>
            Mandatory. Same as Credentials.Password
            </summary>
        </member>
        <member name="P:Franson.Directory.User.IsActivated">
            <summary>
            Mandatory. Active user. Only active users needs a license.
            </summary>
        </member>
        <member name="P:Franson.Directory.User.Name">
            <summary>
            First name.
            </summary>
        </member>
        <member name="P:Franson.Directory.User.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:Franson.Directory.User.Surname">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:Franson.Directory.User.Credentials">
            <summary>
            Username + password
            </summary>
        </member>
        <member name="P:Franson.Directory.User.IsAuthenticated">
            <summary>
            True if user object is authenticated.
            </summary>
        </member>
        <member name="P:Franson.Directory.User.Description">
            <summary>
            Description of the user max 256 char. 
            </summary>
        </member>
        <member name="P:Franson.Directory.User.SourceAddress">
            <summary>
            The address as string from where the user was created.
            </summary>
        </member>
        <member name="P:Franson.Directory.User.Created">
            <summary>
            UTC DateTime when user was created.
            </summary>
        </member>
        <member name="P:Franson.Directory.User.SYSTEM_USERNAME">
            <summary>
            Get the default username for SYSTEM user
            </summary>
        </member>
        <member name="P:Franson.Directory.User.SYSTEM_PWD">
            <summary>
            Get the default password for SYSTEM user
            </summary>
        </member>
        <member name="P:Franson.Directory.User.SMSTEST_USERNAME">
            <summary>
            Get the default username for SMSTEST user
            </summary>
        </member>
        <member name="P:Franson.Directory.User.SMSTEST_PWD">
            <summary>
            Get the default password for SMSTEST user
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Franson.Directory.UserAttributeReader" -->
        <member name="M:Franson.Directory.UserAttributeReader.#ctor">
            <summary>
            Region Default Constructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Directory.UserAttributeReader.GetAttributesByUser(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Franson.Directory.UserAttributeReader.GetAttributesByUser``1(System.Int32)" -->
        <member name="P:Franson.Directory.UserAttributeReader.DAO">
            <summary>
            Data Access Object
            </summary>
        </member>
        <member name="T:Franson.Directory.UserAttributeWriter">
            <summary>
            Writer object to add or remove <see cref="T:System.Attribute">Attributes</see> to a <see cref="T:Franson.Directory.User"/>
            </summary>
        </member>
        <member name="M:Franson.Directory.UserAttributeWriter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Directory.UserAttributeWriter.Add``1(Franson.Directory.Attribute{``0})" -->
        <member name="M:Franson.Directory.UserAttributeWriter.Remove(System.String)">
            <summary>
            Removes an attribute from the user identified by the attribute name.
            </summary>
            <param name="strAttributeName">Name of the attribute to remove.</param>
        </member>
        <member name="M:Franson.Directory.UserAttributeWriter.RemoveAll">
            <summary>
            Removes all attributes associated to the user.
            </summary>
        </member>
        <member name="M:Franson.Directory.UserAttributeWriter.LoadByID(System.Int32)">
            <summary>
            Loads the writer for the given User identified by ID
            </summary>
            <param name="iID">ID of the user to load the writer for.</param>
        </member>
        <member name="M:Franson.Directory.UserAttributeWriter.LoadByName(System.String)">
            <summary>
            Loads the writer for the given attribute name.
            </summary>
            <param name="strName"></param>
        </member>
        <member name="P:Franson.Directory.UserAttributeWriter.DAO">
            <summary>
            Data access object
            </summary>
        </member>
        <member name="T:Franson.Directory.UserCollection">
            <summary>
            Collection of user object.
            Extends ArrayList with a ToDataSet() method.
            </summary>
        </member>
        <member name="M:Franson.Directory.UserCollection.LoadByGroupAndGroupRight(Franson.Directory.Group,Franson.Directory.GroupRights)">
            <summary>
            Load all users that are member in a certain group with a certain group rights.
            (e.g all users that are members in a group)
            </summary>
            <param name="group">The group to load by</param>
            <param name="groupRights">The group right to load by</param>
        </member>
        <member name="M:Franson.Directory.UserCollection.LoadByGroupAndRights(Franson.Directory.Group,Franson.Directory.Rights)">
            <summary>
            Load all users that are member in a certain group with a certain group rights.
            (e.g all users that are members in a group)
            </summary>
            <param name="group">The group to load by</param>
            <param name="groupRights">The group right to load by</param>
        </member>
        <member name="M:Franson.Directory.UserCollection.Search(System.String)">
            <summary>
            Fill the usercollection with users where the search string matches the username or the email address.
            </summary>
            <param name="searchString"></param>
        </member>
        <member name="M:Franson.Directory.UserCollection.Equals(System.Object)">
            <summary>
            Compare the logical values of this Collection with obj. 
            </summary>
            <param name="obj">A obj of type UserCollection</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Directory.UserSettings">
            <summary>
            Handles settings for one user.
            </summary>
        </member>
        <member name="M:Franson.Directory.UserSettings.#ctor">
            <summary>
            Create user settings object.
            </summary>
        </member>
        <member name="M:Franson.Directory.UserSettings.LoadByNamespaceAndUserID(System.String,System.Int32)">
            <summary>
            Load settings for user in specified namespace. <see cref="F:Franson.Directory.Settings.GpsGateServerNamespace"/> returns the default
            namespace.
            </summary>
            <param name="strNameSpace"></param>
            <param name="iUserId"></param>
        </member>
        <member name="M:Franson.Directory.UserSettings.LoadByKey(System.String,System.Int32,System.String)">
            <summary>
            Loads all settings for a user with a specific key and namespace. 
            This includes indirect settings through user settings, group settings, application settings and site settings.
            This method can typically be used to figure out the most relevant setting for a user.
            Use this[] to get the settings values in order of priority. The first item (index 0) is the user setting
            if it exists. The next the group setting, then application and last site setting.
            </summary>
            <param name="strNamespace">Namespace, null equals default namespace.</param>
            <param name="iUserID">User ID</param>
            <param name="strKey">Settings key.</param>
        </member>
        <member name="T:Franson.Directory.Security.DAO.PrivilegeReaderDAOMySQL">
            <summary>
            My SQL version of abstract PrivilegeReaderDAO
            </summary>
        </member>
        <member name="T:Franson.Directory.Security.DAO.PrivilegeReaderDAOSQL">
            <summary>
            PrivilegeReader data access object
            </summary>
        </member>
        <member name="M:Franson.Directory.Security.DAO.PrivilegeReaderDAOSQL.#ctor">
            <summary>
            Create a new PrivilegeReaderDAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Franson.Directory.Security.DAO.PrivilegeReaderDAOMySQL.#ctor">
            <summary>
            Create new MySQL PrivilegeReader data acess object
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Franson.Directory.Security.DAO.PrivilegeReaderDAOMSSQL">
            <summary>
            Create new MSSQL PrivilegeReader data acess object
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Franson.Directory.Security.ApplicationSettingAuthorize">
            <summary>
            Authorize ApplicationSettings Operations
            </summary>
        </member>
        <member name="T:Franson.Directory.Security.SettingAuthorize">
            <summary>
            Base class for Settings AUthorization Operations.
            </summary>
        </member>
        <member name="M:Franson.Directory.Security.SettingAuthorize.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Authorize User Setting Privilege
            </summary>
            <param name="iSettingsOwnerID"></param>
            <param name="iApplicationID"></param>
            <param name="bRequireWrite"></param>
        </member>
        <member name="M:Franson.Directory.Security.SettingAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Authorize
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Security.ApplicationSettingAuthorize.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create new Application Settings Operation Authorizor
            </summary>
            <param name="iApplicationID"></param>
            <param name="bRequireWrite"></param>
        </member>
        <member name="T:Franson.Directory.Security.AuthorizationException">
            <summary>
            User not allowed to performe a operation.
            </summary>
        </member>
        <member name="M:Franson.Directory.Security.AuthorizationException.#ctor(System.String)">
            <summary>
            Create new AuthorizationException
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="M:Franson.Directory.Security.AuthorizationException.#ctor(System.String,System.String)">
            <summary>
            Create new AuthorizationException
            </summary>
            <param name="strMessage">Message</param>
            <param name="strLangKey">Key used to translate the exception</param>
        </member>
        <member name="M:Franson.Directory.Security.AuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Create new AuthorizationException.
            </summary>
            <param name="strMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Franson.Directory.Security.Privilege">
            <summary>
            Defines a Privilege for role based security.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Directory.Security.Privilege._ExecuteSpecialCommandAll">
            <summary>
            May execute command marked as "special". In SiteAdmin commands can be marked as "special" to hide them from
            specific groups of users.
            </summary>
        </member>
        <member name="F:Franson.Directory.Security.Privilege._ExecuteCommandAll">
            <summary>
            May execute commands for devices in same application.
            </summary>
        </member>
        <member name="M:Franson.Directory.Security.Privilege.#ctor(System.String)">
            <summary>
            Default constructo.
            Cereate a new Privilege.
            </summary>
            <param name="strName">Name of the privilege</param>
        </member>
        <member name="M:Franson.Directory.Security.Privilege.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructo.
            Cereate a new Privilege.
            </summary>
            <param name="strName">Name of the privilege</param>
            <param name="strDescription">Description of the privilege</param>
            <param name="strLangKey">Key used for translating the name</param>
        </member>
        <member name="M:Franson.Directory.Security.Privilege.ToString">
            <summary>
            Returns <see cref="P:Franson.Directory.Security.Privilege.Name"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Security.Privilege.Equals(System.Object)">
            <summary>
            Returns true if <see cref="P:Franson.Directory.Security.Privilege.Name"/> propery are same on objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Directory.Security.Privilege.GetHashCode">
            <summary>
            Hash code of <see cref="P:Franson.Directory.Security.Privilege.Name"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Directory.Security.Privilege.Name">
            <summary>
            Name of the Privilege
            </summary>
        </member>
        <member name="P:Franson.Directory.Security.Privilege.Description">
            <summary>
            Description of the Privilege
            </summary>
        </member>
        <member name="P:Franson.Directory.Security.Privilege.LangKey">
            <summary>
            Key used for translate the name using <see cref="T:Franson.Localization.Language"/>
            </summary>
        </member>
        <member name="M:Franson.Directory.Security.PrivilegeReader.#ctor">
            <summary>
            Create a new PrivilegeReader.
            </summary>
        </member>
        <member name="P:Franson.Directory.Security.PrivilegeReader.DAO">
            <summary>
            Data Access Object
            </summary>
        </member>
        <member name="T:Franson.Directory.Security.SiteSettingAuthorize">
            <summary>
            Authorize SiteSettings Operations
            </summary>
        </member>
        <member name="M:Franson.Directory.Security.SiteSettingAuthorize.#ctor(System.Boolean)">
            <summary>
            Create new SiteSetting Operation Authorizator
            </summary>
            <param name="bRequireWrite"></param>
        </member>
        <member name="T:Franson.Directory.Security.UserSettingAuthorize">
            <summary>
            Authorize UserSettings Operations
            </summary>
        </member>
        <member name="M:Franson.Directory.Security.UserSettingAuthorize.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create new User Setting Authorizor.
            </summary>
            <param name="iSettingOwnerID"></param>
            <param name="bRequireWrite"></param>
        </member>
        <member name="T:Franson.Cache.Cache">
            <summary>
            Use this class to cache frequently used objects between sessions.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Cache.CacheFactory`1.m_rwLock">
            <summary>
            Lock which handles single writer, multiple readers.
            </summary>
        </member>
        <member name="F:Franson.Cache.CacheFactory`1.m_registeredCaches">
            <summary>
            
            </summary>
        </member>
        <member name="M:Franson.Cache.CacheFactory`1.GetCacheInstance(System.String)">
            <summary>
            Return named cache of templeate type. Creates a new cache if named cache does not exists.
            </summary>
            <param name="strCacheId"></param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException">If cache couldn't be accessed in 15 seconds. (We had a deadlock)</exception>
        </member>
        <member name="F:Franson.Cache.Cache.m_htCache">
            <summary>
            The Hashtable class allows multiple reads, or one single write.
            This means we have a single writer, multiple reader situation in this class.
            </summary>
        </member>
        <member name="M:Franson.Cache.Cache.Clear">
            <summary>
            Remove all cached objects from cache
            </summary>
        </member>
        <member name="M:Franson.Cache.Cache.Count">
            <summary>
            Returns number of objects in cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Cache.Cache.Insert(System.String,System.Object)">
            <summary>
            Inserts a new object to cache. If the key already exists old object is replaced.
            </summary>
            <param name="strKey"></param>
            <param name="item"></param>
        </member>
        <member name="M:Franson.Cache.Cache.GetItem(System.String)">
            <summary>
            Retrieves an Item from the cache.
            </summary>
            <param name="key">Key of cached object</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Cache.Cache.Remove(System.String)">
            <summary>
            Removes the item identified by a key
            </summary>
            <param name="key">Key to identifies the item with</param>
        </member>
        <member name="M:Franson.Cache.Cache.Contains(System.String)">
            <summary>
            Returns true if key is present in cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Cache.Cache.CacheTable">
            <summary>
            Returns internal hash table with cached values.
            </summary>
        </member>
        <member name="P:Franson.Cache.Cache.CacheLock">
            <summary>
            This reader/writer locks needs to be aquired before accessing the cache.
            </summary>
        </member>
        <member name="M:Franson.Cache.CacheBase`1.Clear">
            <summary>
            Clear all items.
            </summary>
        </member>
        <member name="M:Franson.Cache.CacheBase`1.GetItem(System.String)">
            <summary>
            Retrieves an Item from the cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Cache.CacheBase`1.Remove(System.String)">
            <summary>
            Removes the item identified by a key
            </summary>
            <param name="key">Key to identifies the item with</param>
        </member>
        <member name="M:Franson.Cache.FixedSizeCache.Clear">
            <summary>
            Clear all items.
            </summary>
        </member>
        <member name="M:Franson.Cache.FixedSizeCache.Insert(System.String,System.Object)">
            <summary>
            Inserts an item into the cache.
            If Cache has reached it's capacity the oldest item will be removed. 
            </summary>
            <param name="strKey">Key to identifies the item</param>
            <param name="item">The item to be cached</param>
            <param name="expires">The lifetime of the item.</param>
        </member>
        <member name="M:Franson.Cache.FixedSizeCache.GetItem(System.String)">
            <summary>
            Retrieves an Item from the cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Cache.FixedSizeCache.Remove(System.String)">
            <summary>
            Removes the item identified by a key
            </summary>
            <param name="key">Key to identifies the item with</param>
        </member>
        <member name="T:Franson.Cache.cacheObject">
            <summary>
            Internal class to encapsulate and extend the object which are going to be cached with 
            lifetime timestamp.
            </summary>
        </member>
        <member name="T:Franson.Cache.TimeoutCache">
            <summary>
            Cache where item has a lifetime.
            Cache has an capacity limit.
            Returns null if the item has expired.
            
            </summary>
        </member>
        <member name="F:Franson.License.DAO.LicenseCollectionDAOSQL.m_strBaseTableName">
            <summary>
            The name of the user table. 
            </summary>
        </member>
        <member name="P:Franson.License.DAO.LicenseCollectionDAOSQL.Item(System.Int32)">
            <summary>
            get returns 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.License.DAO.LicenseCollectionDAOMySQL">
            <summary>
            This class contains MySQL dependent queries for UserManagerDAO.
            </summary>
        </member>
        <member name="T:Franson.License.DAO.LicenseDAOFactory">
            <summary>
            The DataFactory class creates DataAccess objects that corresponds 
            to classes in the business tier. 
            </summary>
        </member>
        <member name="F:Franson.License.DAO.LicenseDAOFactory.m_nlog">
            <summary>
            The NLog object used for logging. 
            </summary>
        </member>
        <member name="F:Franson.License.DAO.LicenseDAOFactory.m_daoFactory">
            <summary>
            Dao factory object. 
            </summary>
        </member>
        <member name="M:Franson.License.DAO.LicenseDAOFactory.GetServerLicenseDAOSQL">
            <summary>
            Abstract method to return ServerLicense DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.License.DAO.LicenseDAOFactory.GetLicenseCollectionDAOSQL">
            <summary>
            Abstract method to return LicenseCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.License.DAO.LicenseDAOFactory.GetUserSearchDAOSQL">
            <summary>
            Abstract method to return UserSearch DAO
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.License.DAO.LicenseDAOFactory.GetDAOFactory" -->
        <member name="T:Franson.License.DAO.LicenseMSSQLDAOFactory">
            <summary>
            MSSQL DAO factory for Franson.License
            </summary>
        </member>
        <member name="M:Franson.License.DAO.LicenseMSSQLDAOFactory.GetServerLicenseDAOSQL">
            <summary>
            Returns MSSQL ServerLicenseDAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.License.DAO.LicenseMSSQLDAOFactory.GetLicenseCollectionDAOSQL">
            <summary>
            Returns MSSQL LicenseCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.License.DAO.LicenseMSSQLDAOFactory.GetUserSearchDAOSQL">
            <summary>
            Returns MSSQL UserSearch DAO
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.License.DAO.LicenseMySQLDAOFactory">
            <summary>
            MySQL DAO factory for Franson.License
            </summary>
        </member>
        <member name="M:Franson.License.DAO.LicenseMySQLDAOFactory.GetServerLicenseDAOSQL">
            <summary>
            Returns MySQL DAO for ServerLicense
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.License.DAO.LicenseMySQLDAOFactory.GetLicenseCollectionDAOSQL">
            <summary>
            Returns MySQL DAO for LicenseCollection
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.License.DAO.LicenseMySQLDAOFactory.GetUserSearchDAOSQL">
            <summary>
            Returns MySQL DAO for UserSearch
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.License.DAO.ServerLicenseDAOMSSQL">
            <summary>
            This class contains MySQL dependent queries for UserDAO.
            </summary>
        </member>
        <member name="T:Franson.License.DAO.ServerLicenseDAOSQL">
            <summary>
            The UserDAO class represents the Data Access Object of the User class 
            in the business tier. The SQL queries in this class should be platform
            independent, i.e. on both MS SQL and MySql.  
            </summary>
        </member>
        <member name="F:Franson.License.DAO.ServerLicenseDAOSQL.m_strUserTableName">
            <summary>
            The name of the user table. 
            </summary>
        </member>
        <member name="M:Franson.License.DAO.ServerLicenseDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load license by database ID.
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:Franson.License.DAO.ServerLicenseDAOSQL.LoadByLicenseID(System.Guid)">
            <summary>
            Load license by GUID.
            </summary>
            <param name="licenseGuid"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.License.DAO.ServerLicenseDAOSQL.Email">
            <summary>
            Gets or sets the user email. 
            </summary>
        </member>
        <member name="P:Franson.License.DAO.ServerLicenseDAOSQL.CustomerID">
            <summary>
            Customer ID
            </summary>
        </member>
        <member name="P:Franson.License.DAO.ServerLicenseDAOSQL.LicenseID">
            <summary>
            License ID, a unique GUID
            </summary>
        </member>
        <member name="P:Franson.License.DAO.ServerLicenseDAOSQL.Description">
            <summary>
            License description.
            </summary>
        </member>
        <member name="P:Franson.License.DAO.ServerLicenseDAOSQL.LicensedUsers">
            <summary>
            Gets or sets the number of licensed users that this license holds. 
            </summary>
        </member>
        <member name="T:Franson.License.DAO.UserSearchDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.License.DAO.UserSearchDAOSQL">
            <summary>
            Used for special license related queries.
            </summary>
        </member>
        <member name="M:Franson.License.DAO.UserSearchDAOSQL.#ctor">
            <summary>
            Create search object.
            </summary>
            <param name="odbcConn"></param>
        </member>
        <member name="M:Franson.License.DAO.UserSearchDAOSQL.GetActiveUsers">
            <summary>
            Returns number of active users in database.
            </summary>
        </member>
        <member name="M:Franson.License.DAO.UserSearchDAOSQL.GetNoneExpressUserCount(System.Int32)">
            <summary>
            Get number of active users that are not covered by an Express license.
            </summary>
            <returns></returns>
            <param name="iThreshold">Number of user per application, where to start counting.</param>
        </member>
        <member name="M:Franson.License.DAO.UserSearchDAOSQL.GetFirstUserCreated">
            <summary>
            Returns UTC data and time when first user was created. If there are no users in DB DateTime.MinValue
            is returned.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Franson.License.DAO.UserSearchDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:Franson.License.DAO.UserSearchDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:Franson.License.DAO.UserSearchDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:Franson.Taip.TaipSource">
            <summary>
            Source of position information.
            </summary>
        </member>
        <member name="F:Franson.Taip.TaipSource.GPS2D">
            <summary>
            2D fix
            </summary>
        </member>
        <member name="F:Franson.Taip.TaipSource.GPS3D">
            <summary>
            3D fix
            </summary>
        </member>
        <member name="F:Franson.Taip.TaipSource.DGPS2D">
            <summary>
            Differential 2D fix
            </summary>
        </member>
        <member name="F:Franson.Taip.TaipSource.DGPS3D">
            <summary>
            Differential 3D fix
            </summary>
        </member>
        <member name="F:Franson.Taip.TaipAgeOfData.NotAvailable">
            <summary>
            No data available
            </summary>
        </member>
        <member name="F:Franson.Taip.TaipAgeOfData.Old">
            <summary>
            Older than 10 seconds.
            </summary>
        </member>
        <member name="F:Franson.Taip.TaipAgeOfData.Fresh">
            <summary>
            Newer than 10 seconds
            </summary>
        </member>
        <member name="T:Franson.Taip.TaipBase">
            <summary>
            Base class for all TAIP sentences.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Taip.TaipBase.#ctor(System.String)">
            <summary>
            Called by derived class.
            </summary>
            <param name="strVehicleID"></param>
        </member>
        <member name="M:Franson.Taip.TaipBase.#ctor(Franson.Taip.TaipSentence)">
            <summary>
            Called by derived class.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Taip.TaipBase.SetTrackPoint(Franson.Geo.TrackPoint)">
            <summary>
            Called by sub class parser.
            </summary>
            <param name="tp"></param>
        </member>
        <member name="M:Franson.Taip.TaipBase.SetAge(Franson.Taip.TaipAgeOfData)">
            <summary>
            Called by sub class parser.
            </summary>
            <param name="age"></param>
        </member>
        <member name="P:Franson.Taip.TaipBase.VehicleID">
            <summary>
            VehicleID for this sentence. 0 if no ID was included.
            </summary>
        </member>
        <member name="P:Franson.Taip.TaipBase.TrackPoint">
            <summary>
            Override if sentence contains TrackPoint
            </summary>
        </member>
        <member name="P:Franson.Taip.TaipBase.Age">
            <summary>
            Override if sentence contains age
            </summary>
        </member>
        <member name="P:Franson.Taip.TaipBase.TaipSentence">
            <summary>
            For conviniance. Same as casting <see cref="!:ToSentence"/> 
            </summary>
        </member>
        <member name="T:Franson.Taip.TaipBuilder">
            <summary>
            Builds TAIP sentences
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.BuildTaipVehicleID(System.String)">
            <summary>
            Takes a string and returns a TAIP filed for vehicle ID. Eg. "ID=1234"
            Returns ID=0000 if argument is null.
            </summary>
            <param name="strVehicleID">Vehicle ID, 4 charachters will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.BuildTaipTimeOfDay(System.DateTime)">
            <summary>
            Takes a DateTime and converts it to a TAIP time of day field.
            </summary>
            <param name="dtUTC"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.BuildTaipCoordinate(System.Double,System.Int32)">
            <summary>
            Takes a double and returns a TAIP coordinate field as string. E.g. "+3412345"
            </summary>
            <param name="dblDegrees">Decimal degrees</param>
            <param name="iLeftPadding">2 for latitude, 3 for longtitude</param>
            <returns>TAIP coordinate field</returns>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.BuildTaipPosition(Franson.Geo.Position)">
            <summary>
            Takes a <see cref="T:Franson.Geo.Position"/> object and returns a TAIP lon/lat field. E.g. "+3739438-12203846"
            </summary>
            <param name="pos">Position to be converted</param>
            <returns>TAIP coordinate field.</returns>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.#ctor">
            <summary>
            Builds TAIP sentences.
            </summary>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.SetDataField(System.String)">
            <summary>
            Sets data field.
            </summary>
            <param name="strData"></param>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.SetVehicleID(System.String)">
            <summary>
            Sets VehicleID
            </summary>
            <param name="strVehicleID"></param>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.SetField(System.Int32,System.Int32)">
            <summary>
            Use SetDataField() or SetVehicleID() instead
            </summary>
            <param name="iIndex"></param>
            <param name="iValue"></param>
            <exception cref="T:System.NotImplementedException">Will always be thrown</exception>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.SetField(System.Int32,System.String)">
            <summary>
            Use SetDataField() or SetVehicleID() instead
            </summary>
            <param name="iIndex"></param>
            <param name="strValue"></param>
            <exception cref="T:System.NotImplementedException">Will always be thrown</exception>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.SetField(System.Int32,System.String,System.Boolean)">
            <summary>
            A sub classed TAIP parser should use this method to set extra fields.
            </summary>
            <param name="IIndex"></param>
            <param name="strValue"></param>
            <param name="bDummy"></param>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.SetLength(System.Int32)">
            <summary>
            Use SetDataField() or SetVehicleID() instead
            </summary>
            <param name="iLength"></param>
            <exception cref="T:System.NotImplementedException">Will always be thrown</exception>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.CreateSentence(System.Byte[])">
            <summary>
            Returns a <see cref="T:Franson.Taip.TaipSentence"/> sentence.
            </summary>
            <param name="arrSentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.GetPrefix">
            <summary>
            Returns '>'
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Taip.TaipBuilder.GetPostfix" -->
        <member name="M:Franson.Taip.TaipBuilder.GetDelimiter(System.Int32)">
            <summary>
            Returns ; for all fields but index 0.
            </summary>
            <param name="iFieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipBuilder.CalcChecksum(System.Byte[])">
            <summary>
            Returns TAIP checksum.
            </summary>
            <param name="arrSentence"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Taip.TaipBuilder.IncludeAsterixInChecksum">
            <summary>
            Determines if "*" should be included in checksum calculation or not. Default true.
            </summary>
        </member>
        <member name="M:Franson.Taip.TaipCP.IsCP(Franson.Taip.TaipSentence)">
            <summary>
            Returns true if argument is a TAIP CP sentence.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipCP.BuildSentence">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Franson.Taip.TaipCP.Source">
            <summary>
            Source.
            </summary>
        </member>
        <member name="M:Franson.Taip.TaipEV.IsEV(Franson.Taip.TaipSentence)">
            <summary>
            Returns true if argument is a TAIP EV sentence.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipEV.BuildSentence">
            <summary>
            Build TAIP sentence from paramaters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipEV.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parse sentence and set paramaters
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Taip.TaipEV.EventCode">
            <summary>
            Event code 0 - 49
            </summary>
        </member>
        <member name="P:Franson.Taip.TaipEV.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="T:Franson.Taip.TaipFormatException">
            <summary>
            Invalid TAIP syntax
            </summary>
        </member>
        <member name="M:Franson.Taip.TaipFormatException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:Franson.Taip.TaipFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception with innner exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="M:Franson.Taip.TaipLN.IsLN(Franson.Taip.TaipSentence)">
            <summary>
            Returns true if this is most likely is a LN sentence.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Taip.TaipLN.Source">
            <summary>
            Souorce.
            </summary>
        </member>
        <member name="T:Franson.Taip.TaipParser">
            <summary>
            Parses Trimble TAIP data.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Taip.TaipParser.ParseTaipTimeOfDay(System.String)">
            <summary>
            Converts TAIP GPS time of day field to UTC <see cref="T:System.DateTime"/>. The field contains seconds from start of day. 
            The date is set to current UTC date.
            </summary>
            <param name="strField">string to convert</param>
            <returns></returns>
            <exception cref="T:Franson.Taip.TaipFormatException">The string is not a valid TAIP time of day field</exception>
        </member>
        <member name="M:Franson.Taip.TaipParser.ParseTaipDouble(System.String,System.Int32)">
            <summary>
            Converts a TAIP field to a double. The field starts with a sign, and has no decimal place. E.g. "+3739438"
            </summary>
            <param name="strField">TAIP field</param>
            <param name="iDecimalIndex">Number of decimals. If -1 no decimals are used.</param>
            <returns></returns>
            <exception cref="T:Franson.Taip.TaipFormatException">The string is not a valid TAIP double field</exception>
        </member>
        <member name="M:Franson.Taip.TaipParser.ParseTaipDouble(System.String,System.Int32,System.Boolean)">
            <summary>
            Converts a TAIP field to a double. The field starts with a sign, and has no decimal place. E.g. "+3739438"
            </summary>
            <param name="strField">TAIP field</param>
            <param name="iDecimalIndex">Number of decimals. If -1 no decimals are used.</param>
            <param name="bNoSign">Set to true if field has no sign.</param>
            <returns></returns>
            <exception cref="T:Franson.Taip.TaipFormatException">The string is not a valid TAIP double field</exception>
        </member>
        <member name="M:Franson.Taip.TaipParser.#ctor">
            <summary>
            Create TAIP parser.
            </summary>
        </member>
        <member name="M:Franson.Taip.TaipParser.ValidateSentence(System.Byte[])">
            <summary>
            Override default NMEA checksum. Implements TAIP checksum algorithm.
            </summary>
            <param name="arrData"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipParser.CreateSentence(System.Byte[])">
            <summary>
            Create TAIP sentence from byte array.
            </summary>
            <param name="arrSentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipParser.CreateTrackPointSentence(Franson.Taip.TaipSentence)">
            <summary>
            Checks if sentence can be converted to a typed sentence containing a track point.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Taip.TaipParser.IncludeAsterixInChecksum">
            <summary>
            Determines if "*" should be included in checksum calculation or not. Default true.
            </summary>
        </member>
        <member name="T:Franson.Taip.TaipPV">
            <summary>
            TAIP PV sentence
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Taip.TaipPV.#ctor(Franson.Taip.TaipSentence)">
            <summary>
            Create from <see cref="T:Franson.Taip.TaipSentence"/> object.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Taip.TaipPV.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,System.String)">
            <summary>
            Create from parameters
            </summary>
            <param name="pos">Position</param>
            <param name="vel">Velocity</param>
            <param name="dtUTC">UTC</param>
            <param name="strVehicleID">Vechile ID</param>
        </member>
        <member name="M:Franson.Taip.TaipPV.#ctor(Franson.Geo.Position,Franson.Geo.Velocity,System.DateTime,Franson.Taip.TaipSource,Franson.Taip.TaipAgeOfData,System.String)">
            <summary>
            Create from parameters
            </summary>
            <param name="pos">Position</param>
            <param name="vel">Velocity</param>
            <param name="dtUTC">UTC</param>
            <param name="source">Source</param>
            <param name="age">Age</param>
            <param name="strVehicleID">Vehicle ID</param>
        </member>
        <member name="M:Franson.Taip.TaipPV.IsPV(Franson.Taip.TaipSentence)">
            <summary>
            Returns true if argument is a TAIP PV sentence.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipPV.BuildSentence">
            <summary>
            Build TAIP sentence from paratmers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipPV.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parse sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Taip.TaipPV.Source">
            <summary>
            Source.
            </summary>
        </member>
        <member name="T:Franson.Taip.TaipSentence">
            <summary>
            Generic TAIP sentence. Read only.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Taip.TaipSentence.#ctor(System.Byte[])">
            <summary>
            Constructor used by parser.
            </summary>
            <param name="arrSentence"></param>
        </member>
        <member name="M:Franson.Taip.TaipSentence.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Use if deriving from this class.
            </summary>
            <param name="arrSentence"></param>
            <param name="bDummy"></param>
        </member>
        <member name="M:Franson.Taip.TaipSentence.GetTag(System.String)">
            <summary>
            Returns named tag. null if not found.
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipSentence.GetString(System.Int32,System.Int32)">
            <summary>
            Extracts part of data field as string
            </summary>
            <param name="iStartIndex">Start index</param>
            <param name="iLength">Length of field</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipSentence.GetInteger(System.Int32,System.Int32)">
            <summary>
            Extracts part of data field as int.
            </summary>
            <param name="iStartIndex">Start index</param>
            <param name="iLength">Length of field</param>
            <returns></returns>
        </member>
        <member name="P:Franson.Taip.TaipSentence.VehicleID">
            <summary>
            TAIP (Vehicle) ID. If not present NULL is returned.
            </summary>
        </member>
        <member name="T:Franson.Taip.TaipTK">
            <summary>
            TAIP TK sentence
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Taip.TaipTK.#ctor(Franson.Taip.TaipSentence)">
            <summary>
            Create from <see cref="T:Franson.Taip.TaipSentence"/> object.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:Franson.Taip.TaipTK.IsTK(Franson.Taip.TaipSentence)">
            <summary>
            Returns true if argument is a TAIP TK sentence.
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipTK.BuildSentence">
            <summary>
            Build TAIP sentence from paratmers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Taip.TaipTK.ParseSentence(Franson.Nmea.Sentence)">
            <summary>
            Parse sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:Franson.Taip.TaipTK.Source">
            <summary>
            Souorce.
            </summary>
        </member>
        <member name="T:Franson.Serialization.SerializationWrapper">
            <summary>
            Serialization wrapper encapsulate a Xml or Json serializeable object.
            </summary>
        </member>
        <member name="T:Franson.Threading.DynamicIterator">
            <summary>
            Implements a "change safe" iterator over an <see cref="T:System.Collections.IList"/>.</summary> 
            <remarks>
            Normally foreach will throw an exception
            if the IList is changed during iteration. DynamicIterator will make sure all objects in the
            IList are processed given that some rules are followed, and that changes in the IList are allowed during iteration.
            DynamicIterator can handle those two cases of change during foreach<br/>
            1. New objects are added to the end of the IList<br/>
            2. The last returned object (current object) from the iterator is removed.<br/>
            <br/>
            If other objects are removed, or objects are inserted inside the IList
            objects may be processed twice or not at all. However in no case will there be an exception
            or synchronization error. DynamicIterator will lock the IList when it is accessed.
            The same object cannot be stored in two locations of the IList.
            Two different objects where obj1 == obj2 is true cannot be stored in the same IList
            </remarks>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Threading.DynamicIterator.#ctor(System.Collections.IList)">
            <summary>
            Creates a "change safe" iterator. 
            </summary>
            <param name="list"><see cref="T:System.Collections.IList"/> to iterate over.</param>
        </member>
        <member name="M:Franson.Threading.DynamicIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Threading.DynamicIterator.System#Collections#IEnumerator#MoveNext">
            <summary>
            Moves to next object in a thread safe way.
            </summary>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException">If we have a deadlock. Or it takes more than 15 seconsds to aquire lock.</exception>
        </member>
        <member name="M:Franson.Threading.DynamicIterator.System#Collections#IEnumerator#Reset">
            <summary>
            Reset enumarator.
            </summary>
        </member>
        <member name="P:Franson.Threading.DynamicIterator.System#Collections#IEnumerator#Current">
            <summary>
            Returns current object.
            </summary>
        </member>
        <member name="T:Franson.Threading.LockTimeoutException">
            <summary>
            Use when <see cref="T:Franson.Threading.TimedLock"/> or <see cref="T:Franson.Threading.TimedReaderWriterLock"/> fails to aquire a lock of an object.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Threading.LockTimeoutException.#ctor(System.Object)">
            <summary>
            Create exception
            </summary>
            <param name="o">Object which couldn't be locked.</param>
        </member>
        <member name="M:Franson.Threading.LockTimeoutException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="T:Franson.Threading.TimedLock">
            <summary>
            Used to lock objects without worrying about releasing it 
            e.g. in case of exceptions or other unexpected exits of method.
            </summary>
            <example>
            <code language="C#">
            using (TimedLock.Lock(obj))
            {
            }
            </code>
            </example>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Threading.TimedLock.Lock(System.Object,System.Int32,System.String)">
            <summary>
            Wait specified timeout to get a lock of object.
            </summary>
            <param name="o">Object to lock</param>
            <param name="iTimeout">Timeout in milliseconds</param>
            <param name="strMessage">Message in exception if lock times out. Useful for logging.</param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException">Lock could not be aquired.</exception>
        </member>
        <member name="M:Franson.Threading.TimedLock.Lock(System.Object,System.Int32)">
            <summary>
            Wait specified timeout to get a lock of object.
            </summary>
            <param name="o">Object to lock</param>
            <param name="iTimeout">Timeout in milliseconds</param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException">Lock could not be aquired.</exception>
        </member>
        <member name="M:Franson.Threading.TimedLock.Lock(System.Object)">
            <summary>
            Locks object for 15 seconds. If lock cannot be aquired within that time an exception is thrown.
            </summary>
            <param name="o"></param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException">Lock could not be aquired.</exception>
        </member>
        <member name="M:Franson.Threading.TimedLock.Lock(System.Object,System.String)">
            <summary>
            Locks object for 15 seconds. If lock cannot be aquired within that time an exception is thrown.
            </summary>
            <param name="o">Object to be locked</param>
            <param name="strMessage">Message in exception.</param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException">Lock could not be aquired.</exception>
        </member>
        <member name="M:Franson.Threading.TimedLock.Dispose">
            <summary>
            Release lock. Called when using{} exits
            </summary>
        </member>
        <member name="T:Franson.Threading.TimedReaderWriterLock">
            <summary>
            Used to handle reader/writer locks, without worrying about releasing the lock,
            e.g if there is an exception or unhandled exit.
            </summary>
            <example>
            <code language="C#">
            using (TimedReaderWriterLock.ReaderLock(rwLock))
            {
            }
            
            using (TimedReaderWriterLock.WriterLock(rwLock))
            {
            }
            </code>
            </example>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.ReaderLock(System.Threading.ReaderWriterLock,System.Int32,System.String)">
            <summary>
            Wait specified time to get a reader lock.
            </summary>
            <param name="rwLock">Handle</param>
            <param name="iTimeout">Milliseconds</param>
            <param name="strMessage">Message in exception. Set to null for default message.</param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException"></exception>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.ReaderLock(System.Threading.ReaderWriterLock)">
            <summary>
            Wait 15 seconds to get a reader lock.
            </summary>
            <param name="rwLock"></param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException"></exception>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.ReaderLock(System.Threading.ReaderWriterLock,System.String)">
            <summary>
            Wait 15 seconds to get a reader lock. Customize exception message if lock fails.
            </summary>
            <param name="rwLock"></param>
            <param name="strMessage">Message if there is an exception.</param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException"></exception>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.WriterLock(System.Threading.ReaderWriterLock,System.Int32,System.String)">
            <summary>
            Wait specified time to get a writer lock.
            </summary>
            <param name="rwLock"></param>
            <param name="iTimeout">Milliseconds</param>
            <param name="strMessage">Message if lock fails.</param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException"></exception>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.WriterLock(System.Threading.ReaderWriterLock)">
            <summary>
            Wait 15 seconds for a writer lock.
            </summary>
            <param name="rwLock"></param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException"></exception>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.WriterLock(System.Threading.ReaderWriterLock,System.String)">
            <summary>
            Wait 15 seconds for a writer lock. Customized exception message if lock fails.
            </summary>
            <param name="rwLock"></param>
            <param name="strMessage"></param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException"></exception>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.UpgradeToWriterLock(System.Threading.ReaderWriterLock,System.Int32,System.String)">
            <summary>
            Upgrade reader lock to a writer lock with timeout.
            </summary>
            <param name="rwLock"></param>
            <param name="iTimeout"></param>
            <param name="strMessage">Message if lock fails. null for default message.</param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException"></exception>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.UpgradeToWriterLock(System.Threading.ReaderWriterLock)">
            <summary>
            Upgrade reader lock to a writer lock. Timeout 15 seconds.
            </summary>
            <param name="rwLock"></param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException"></exception>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.UpgradeToWriterLock(System.Threading.ReaderWriterLock,System.String)">
            <summary>
            Upgrade reader lock to writer lock. Timeout 15 seconds. Customized exception message if lock fails.
            </summary>
            <param name="rwLock"></param>
            <param name="strMessage"></param>
            <returns></returns>
            <exception cref="T:Franson.Threading.LockTimeoutException"></exception>
        </member>
        <member name="M:Franson.Threading.TimedReaderWriterLock.Dispose">
            <summary>
            Releases reader or writer lock. Called when using{} exits.
            </summary>
        </member>
        <member name="T:Franson.Message.QueueException">
            <summary>
            All queue exceptions inherit from this class
            </summary>
        </member>
        <member name="M:Franson.Message.QueueException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Franson.Message.QueueException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Message.QueueFatalError">
            <summary>
            If this exception is thrown when processing a queued item, the item will not be retried
            it will get the state <see cref="F:Franson.Message.DeliveryStatus.PermanentFailure"/>
            </summary>
        </member>
        <member name="M:Franson.Message.QueueFatalError.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="M:Franson.Message.QueueFatalError.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Message.QueueBusyException">
            <summary>
            An item could not be queued or sent depending on queue state and item config.
            </summary>
        </member>
        <member name="M:Franson.Message.QueueBusyException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Franson.Message.QueueBusyException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Message.QueueOverloaded">
            <summary>
            Thrown of the queue is used over its assigned capacity.
            </summary>
        </member>
        <member name="M:Franson.Message.QueueOverloaded.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:Franson.Message.QueueOverloaded.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Franson.Message.ProviderNotFoundException">
            <summary>
            Thrown when a communication attempt fails with a device, because a provider or listener is missing.
            E.g. no SMS proxy is configured, and there is an attempt to send an SMS to the device.
            </summary>
        </member>
        <member name="M:Franson.Message.ProviderNotFoundException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="M:Franson.Message.ProviderNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="exInner">Inner exception.</param>
        </member>
        <member name="T:Franson.Message.MessageField">
            <summary>
            A message field defines properties and meta information such as system type, unit, namespaces etc. of message data.
            Use <see cref="M:Franson.Message.MessageFieldReader.FindMessageField(System.String,Franson.Message.MessageNamespace)"/> to create a MessageField object 
            for an existing message field.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Message.MessageField.#ctor(System.Int32,System.Int32,System.String,System.String,System.Type,System.String,System.String)" -->
        <member name="M:Franson.Message.MessageField.ToString">
            <summary>
            Returns <see cref="P:Franson.Message.MessageField.Name"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageField.Resolve(Franson.Text.TemplateParser,System.String)">
            <summary>
            Resolves variable.
            </summary>
            <param name="p"></param>
            <param name="strVariable"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.MessageField.ID">
            <summary>
            Integer ID of Message field.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageField.Name">
            <summary>
            The name of the MessageField
            </summary>
        </member>
        <member name="P:Franson.Message.MessageField.Description">
            <summary>
            Short description
            </summary>
        </member>
        <member name="P:Franson.Message.MessageField.NamespaceId">
            <summary>
            The ID of the <see cref="T:Franson.Message.MessageNamespace"/> this <see cref="T:Franson.Message.MessageField"/> belongs to.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageField.FieldType">
            <summary>
            The system Type this <see cref="T:Franson.Message.MessageField"/> will repressent. E.g. "System.Double"
            </summary>
        </member>
        <member name="P:Franson.Message.MessageField.UnitName">
            <summary>
            Name of the <see cref="T:Franson.Unit"/> this message field represent.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageField.LocaleKey">
            <summary>
            Key used to translate and convert values to locale format.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageField.SupportedVariables">
            <summary>
            Supported:
            MESSAGE_FIELD_LOCALIZATION_KEY = value of LocaleKey
            MESSAGE_FIELD_NAME = value of Name
            </summary>
        </member>
        <member name="T:Franson.Message.MessageFieldDictionary">
            <summary>
            Defines a mapping table of <see cref="T:Franson.Message.MessageField"/>'s used for translate incoming native messages into internal 
            GpsGate Message format.
            
            A <see cref="T:Franson.Message.MessageFieldDictionary"/> contains a collection of  <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/>'s.
            Each <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/> define an incoming <see cref="T:Franson.Message.MessageField"/> which will be translated/re-labeled into
            the outgoing <see cref="T:Franson.Message.MessageField"/>.
            </summary>
        </member>
        <member name="F:Franson.Message.MessageFieldDictionary.m_group">
            <summary>
            The <see cref="T:Franson.Directory.Group"/> for which this <see cref="T:Franson.Message.MessageFieldDictionary"/> belongs.
            This is how we link a <see cref="T:Franson.Message.MessageFieldDictionary"/> into an application context.
            </summary>
        </member>
        <member name="F:Franson.Message.MessageFieldDictionary.m_listInFieldToEntry">
            <summary>
            Internal Dictionary holding the <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/>'s as value and the ID of the InMessageField
            for the <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/> to enables fast access by InMessageField.ID.
            
            Lazy loaded by m_LoadInternalDictionary() and used by ContainsKeyField(int iKeyFieldId) method. 
            </summary>
        </member>
        <member name="F:Franson.Message.MessageFieldDictionary.m_bIsDictionaryLoaded">
            <summary>
            Indicates if m_dictInFieldToEntry is loaded. 
            </summary>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionary.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionary.m_LoadInternalDictionary">
            <summary>
            Loads the internal dictionary of MessageFieldDictionaryEntris used for fast access
            </summary>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionary.NewFieldEntry(Franson.Message.MessageField,Franson.Message.MessageField,System.Boolean)">
            <summary>
            Create a new <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/> assigned to this <see cref="!:MessageFieldDictyionary"/>
            </summary>
            <param name="fieldIn">Incomming field</param>
            <param name="fieldOut">Field to map to</param>
            <param name="bSaveChangesOnly">False for "button". True for "Switch".</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionary.NewFieldEntry(Franson.Message.MessageField,Franson.Message.MessageField,System.String,System.Double,System.Boolean)">
            <summary>
            Create a new <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/> assigned to this <see cref="!:MessageFieldDictyionary"/>
            </summary>
            <param name="fieldIn">Incomming field</param>
            <param name="fieldOut">Field to map to</param>
            <param name="strMultiplicator">optional calibration multiplicator</param>
            <param name="dConstant">optional calibration constant</param>
            <param name="bSaveChangesOnly">Set to true to only save changes and save DB space.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionary.ClearFieldEntries">
            <summary>
            Remove all <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/>'s in the dictionary.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionary.AddFieldEntry(Franson.Message.MessageFieldDictionaryEntry)">
            <summary>
            Adds a new <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/> to the dictionary.
            
            Note! Both the InMessageField and the OutMessageField (not only the Combination) must be unique for the dictionary.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="P:Franson.Message.MessageFieldDictionary.Name">
            <summary>
            Name of this dictionary.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageFieldDictionary.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageFieldDictionary.GroupId">
            <summary>
            Id of the the <see cref="T:Franson.Directory.Group"/> for which this <see cref="T:Franson.Message.MessageFieldDictionary"/> belongs to.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageFieldDictionary.Group">
            <summary>
            The <see cref="T:Franson.Directory.Group"/> for which this <see cref="T:Franson.Message.MessageFieldDictionary"/> belongs to.
            Lazy loaded on demand. 
            
            Note. Use the GroupId property if possible to avoid extra data base access.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageFieldDictionary.FieldEntries">
            <summary>
            <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/> of this dictionary. 
            
            All the <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/>'s loads before the collection is returned, this 
            will result in a little slower first time access but faster when enumerated more then once which is the usual scenario.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Franson.Message.MessageFieldDictionaryCollection" -->
        <member name="T:Franson.Message.MessageFieldDictionaryEntry">
            <summary>
            Single record, mapping arbitrary incoming message fields to GpsGate Server predefined ones.
            Object is immutable.
            InMessageField is equivalent to the OutMessageField after the data have been transformed using the Formula. 
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionaryEntry.#ctor(System.Int32,System.Int32,Franson.Message.MessageField,Franson.Message.MessageField,System.String,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Internal constructor used to create a object from a data reader instead of row to increase performance.
            </summary>
            <param name="iID">The db id of this MessageFieldDictionaryEntry</param>
            <param name="iDictionaryId">The id of the <see cref="T:Franson.Message.MessageFieldDictionary"/> to which this entry belongs to.</param>
            <param name="inField">Input <see cref="T:Franson.Message.MessageField"/> to map from</param>
            <param name="outField">Output <see cref="T:Franson.Message.MessageField"/> to map to</param>
            <param name="strFormula">TODO: Implement</param>
            <param name="bEnabled">bool to indicate if this entry is enabled and should be processed</param>
            <param name="bSaveWithPos"></param>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionaryEntry.Calculate(System.Object)">
            <summary>
            Recalculate the provided value according to the Formula.
            
            y=k(x+m)
            </summary>
            <param name="objInValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionaryEntry.CalculateFormula(System.String,System.Object)">
            <summary>
            Uses interval multiplicator. A:B#C:D,E:F#G:H
            Returns null if formula is invalid or if in value is outside interval.
            </summary>
            <param name="strFormula"></param>
            <param name="objInValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageFieldDictionaryEntry.Equals(System.Object)">
            <summary>
            Equals if InMessageField, OutMessageField and DictionaryId are equals.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.MessageFieldDictionaryEntry.InMessageField">
            <summary>
            Key <see cref="T:Franson.Message.MessageField"/> to translate from.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageFieldDictionaryEntry.OutMessageField">
            <summary>
            <see cref="T:Franson.Message.MessageField"/> to which the InMessageField will be translated to.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageFieldDictionaryEntry.DictionaryId">
            <summary>
            Id of the <see cref="T:Franson.Message.MessageFieldDictionary"/> this entry belongs to.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageFieldDictionaryEntry.Enabled">
            <summary>
            Indicates if the translation should be done for this field.
            </summary>
        </member>
        <member name="T:Franson.Message.MessageFieldReader">
            <summary>
            Reads <see cref="T:Franson.Message.MessageField"/> objects from database.
            
            Singleton returned by <see cref="M:Franson.Message.MessageFieldReader.GetReader"/> is thread safe.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Message.MessageFieldReader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Franson.Message.MessageFieldReader.LoadAll">
            <summary>
            Load all MessageField's. Native aswell as defined by different devices.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">If called on singleton.</exception>
        </member>
        <member name="M:Franson.Message.MessageFieldReader.GetUsed">
            <summary>
            Return all <see cref="T:Franson.Message.MessageField"/> where data has been reported for.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageFieldReader.GetMapped(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Return all <see cref="T:Franson.Message.MessageField"/> mapped in the given application.
            </summary>
            <param name="iApplicationID">Application to look in</param>
            <param name="tagIDs">optional user tag ids. If set only mappers for the given user tags is checked.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageFieldReader.FindMessageField(System.Int32)">
            <summary>
            Find MessageField  based on the given ID
            </summary>
            <param name="iFieldId"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageFieldReader.FindMessageField(System.String,Franson.Message.MessageNamespace)">
            <summary>
            Get MessageField by name.  
            </summary>
            <param name="strName"></param>
            <param name="msgNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageFieldReader.ReaderToMessageField(System.Data.IDataReader,System.Int32)">
            <summary>
            Created a MessagField from a Database record.
            </summary>
            <param name="reader">DataReader with messagefield record data.</param>
            <param name="iReadIndex">the offset columns. If msg_field_id is in first column; set offset to 0.</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.MessageNamespace">
            <summary>
            Handles a message field namespace.
            </summary>
        </member>
        <member name="F:Franson.Message.MessageNamespace.GPSGATE_SERVER_NAMESPACE">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="M:Franson.Message.MessageNamespace.#ctor">
            <summary>
            Create.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageNamespace.#ctor(System.String,System.String)">
            <summary>
            Create new namespace.
            </summary>
            <param name="strName"></param>
            <param name="strDescription"></param>
        </member>
        <member name="M:Franson.Message.MessageNamespace.LoadByName(System.String)">
            <summary>
            Load namespace by name.
            </summary>
            <param name="strName"></param>
            <exception cref="T:Franson.DAO.NotFoundException">Not found</exception>
        </member>
        <member name="M:Franson.Message.MessageNamespace.GetDefaultNamespace">
            <summary>
            Returns the "GpsGate" default namespace object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageNamespace.ClearCache">
            <summary>
            Can be called by UNIT tests etc, when database has been flushed and namespade IDs will change.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageNamespace.ToString">
            <summary>
            Returns name of namespace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageNamespace.Equals(System.Object)">
            <summary>
            Returns true if database ID equals, or if argument and this are same object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageNamespace.GetHashCode">
            <summary>
            Calls <see cref="!:base.GetHashCode"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.MessageNamespace.Name">
            <summary>
            Namespace unique name.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageNamespace.Description">
            <summary>
            Free text description.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageNamespace.ProtocolID">
            <summary>
            Protocol devices in this message namespace uses.
            </summary>
        </member>
        <member name="T:Franson.Message.MessageProvider">
            <summary>
            Base class for all message providers. A provider receives and sends messages over one specific transport layer
            such as SMS, email or GpsGate Proxy. It does not know anything of the content or meaning of the messages,
            that is up to listeners to understand.
            </summary>
        </member>
        <member name="T:Franson.Reflection.TypeInstance">
            <summary>
            Base class for dynamic ILoadables with instance "awareness"
            Provides methods for saving instances of ILoadables and link to loadable_type table
             
            E.g. of implementations Franson.Message.MessageProvider and GpsGate.Online.Message.Rule
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Franson.Reflection.ILoadable">
             <summary>
             This interface is implemented by classes that should be plugged in / loaded into GpsGate Server.
             </summary>
             <example>
             <code language="C#">
             [Franson.Reflection.Loadable(Installable=true)]
             public class DerivedLoadable : BaseLoadable
             {
             	// This class defines the Loadable attribute and will be the type that 
            		// will be loaded and discovered by the TypeManager.
             }
            
             [Franson.Reflection.BaseType(Description="Base Loadable")]
             public abstract class BaseLoadable : Franson.Reflection.ILoadable
             {
             	#region ILoadable Members
             
            	 public virtual void Load(LoadableType args)
            	 {
              }
             
            	 public virtual void Install(LoadableType typeInfo)
            	 {
            	 	// Do some install code here.
            	 	// E.g Inserting data in database e.tc.
            	 }
             
            	 #endregion
             }
             </code>
             </example>
        </member>
        <member name="M:Franson.Reflection.ILoadable.Load(Franson.Reflection.LoadableType)">
            <summary>
            Will be run by factory directly after object is created.
            Place initiation code here.
            </summary>
            <param name="loadableType">Arguments from help table</param>
        </member>
        <member name="M:Franson.Reflection.ILoadable.Install(Franson.Reflection.LoadableType)">
            <summary>
            This method should implement routines to setup and install a ILoadable.
            E.g Inserting neccesarry data in database e.tc.
            
            The ILoadable which need to be installed also have to define the <see cref="T:Franson.Reflection.LoadableAttribute"/>
            with the named-parameter Installable set to true.
            
            This method is executed by <see cref="T:Franson.Reflection.TypeManager"/> when this ILoadable is
            discovered for the first time if the <see cref="T:Franson.Reflection.LoadableAttribute"/> have Installable set to true.
            
            This method can be implemented in base classes, abstract or not. It is the <see cref="T:Franson.Reflection.LoadableAttribute"/> that defines 
            which class that should bee instantiated. 
            </summary>
            <param name="typeInfo">Type information about the newly discovered ILoadable.</param>
        </member>
        <member name="M:Franson.Reflection.ILoadable.Upgrade(Franson.Reflection.LoadableType)">
            <summary>
            This method is called when an existing loadable found with a newer assembly version.
            Implement upgrading routines here.
            </summary>
            <param name="typeInfo">Type information about the ILoadable to be upgraded.</param>
        </member>
        <member name="M:Franson.Reflection.TypeInstance.SetLoadableType(Franson.Reflection.LoadableType)">
            <summary>
            Set when loading by TypeManager.Load
            </summary>
            <param name="loadableType"></param>
        </member>
        <member name="M:Franson.Reflection.TypeInstance.Update">
            <summary>
            Call to write state to DB
            </summary>
        </member>
        <member name="M:Franson.Reflection.TypeInstance.Load(Franson.Reflection.LoadableType)">
            <summary>
            This implementation will load an instance from database. It uses LoadableType.InstanceID.
            </summary>
            <param name="loadableType"></param>
        </member>
        <member name="M:Franson.Reflection.TypeInstance.Install(Franson.Reflection.LoadableType)">
            <summary>
            NOP implementation. 
            Must be override to provide install functionality.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:Franson.Reflection.TypeInstance.Upgrade(Franson.Reflection.LoadableType)">
            <summary>
            NOP implementation
            Called when a newer version found then that one that is currently installed.
            Must be override to provide upgrade functionality.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:Franson.Reflection.TypeInstance.LoadableType">
            <summary>
            Returns <see cref="P:Franson.Reflection.TypeInstance.LoadableType"/> object for this instance.
            </summary>
        </member>
        <member name="P:Franson.Reflection.TypeInstance.Description">
            <summary>
            Free text description of loadable type.
            </summary>
        </member>
        <member name="P:Franson.Reflection.TypeInstance.TypeID">
            <summary>
            Get the ID of the LoadableType
            </summary>
        </member>
        <member name="P:Franson.Reflection.TypeInstance.m_DAO">
            <summary>
            Returns DAO object. Must be set by derived class if DB access is used. <see cref="!:SetDaoObject"/>
            By default no DAO object is created to save resources.
            </summary>
        </member>
        <member name="P:Franson.Reflection.TypeInstance.Dependencies">
            <summary>
            No Dependencies
            </summary>
        </member>
        <member name="M:Franson.Message.MessageProvider.#ctor">
            <summary>
            Create message provider.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageProvider.LoadByName(System.String)">
            <summary>
            Load provider from database by name.
            </summary>
            <param name="strName"></param>
        </member>
        <member name="M:Franson.Message.MessageProvider.Start">
            <summary>
            Called when starting provider. Will call <see cref="M:Franson.Message.MessageProvider.DoStart"/> as part of startup.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageProvider.Stop">
            <summary>
            Called when stopping provider. Will call <see cref="M:Franson.Message.MessageProvider.DoStop"/> as part of stopping provider.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageProvider.DoStart">
            <summary>
            Called when provider should be started.
            Override to implement.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageProvider.DoStop">
            <summary>
            Called when provider should be stopped.
            Override to implement.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageProvider.OnMessageReceived(Franson.Message.ProviderMessage)">
            <summary>
            Provider that derives from MessaegProvider should call this method when a new message has been received.
            </summary>
            <param name="msgIncomming"></param>
        </member>
        <member name="M:Franson.Message.MessageProvider.ToString">
            <summary>
            Used for logging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageProvider.Equals(System.Object)">
            <summary>
            If object is int, true is returned if obj equals the database ID.
            If object is Type, true is returned if obj equals the listener type.
            If object is MessageProvider, true is returned if obj is the same object as this.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageProvider.GetHashCode">
            <summary>
            Returns base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MessageProvider.Install(Franson.Reflection.LoadableType)">
            <summary>
            Calls Update to save provider to database.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:Franson.Message.MessageProvider.ID">
            <summary>
            Returns message_provider.msg_prov_id (not loadable_type.type_id)
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.Name">
            <summary>
            Name of provider. Used as identifier.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.Enabled">
            <summary>
            True if enabled.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.Url">
            <summary>
            URL to possible external service provider is using.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.Username">
            <summary>
            Username to possible external service provider is using.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.Password">
            <summary>
            Password to possible external service provider is using.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.CallInterval">
            <summary>
            Possible call interval in seconds to external service provider is using.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.CustomLong">
            <summary>
            Custom long value used by provider.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.CustomString">
            <summary>
            Custom string value provider used by provider to store its state.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.CallTimeout">
            <summary>
            Timeout in seconds for calls to external service by provider .
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.RouteLabel">
            <summary>
            Label used for routing messages to provider.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.DefaultProvider">
            <summary>
            True if default provider.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.Created">
            <summary>
            Time of creation in database
            </summary>
        </member>
        <member name="P:Franson.Message.MessageProvider.IsStarted">
            <summary>
            Returns true if provider is successfully started.
            </summary>
        </member>
        <member name="E:Franson.Message.MessageProvider.MessageReceived">
            <summary>
            Called when a new message has been received by provider.
            </summary>
        </member>
        <member name="T:Franson.Message.MessageProvider.MessageReceivedHandler">
            <summary>
            
            </summary>
            <param name="msgProvider">Provider source of message</param>
            <param name="msgIncomming">New received message.</param>
        </member>
        <member name="T:Franson.Message.MessageQueue">
            <summary>
            Queues <see cref="T:Franson.Message.ProviderMessage"/>s. A message queue is not thread safe, and should only be used by one thread.
            The queue cannot handle several queues competing to deliver the same message. A message should only belong to one queue
            or else there will be errors.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Franson.Message.Queue">
            <summary>
            Queues <see cref="M:Franson.Message.Queue.QueueItem(Franson.Message.IQueueSender,Franson.Message.QueueItem,Franson.Message.QueueExecuteMode,System.Boolean,System.Int32,System.Int32,System.Int32)"/>s. 
            A queue item should only belong to one queue or else there will be errors.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Message.Queue.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Create queue
            </summary>
            <param name="sender">Objects that sends messages in queue. Set to null to only queue messages.</param>
            <param name="bOutgoing">True if outgoing queue.</param>
            <param name="bCheckDuplicates">If set to true duplicate itesm will not be queued.</param>
        </member>
        <member name="M:Franson.Message.Queue.ResetQueue(System.Int32)">
            <summary>
            Clears messages for device in queue.
            </summary>
            <param name="iDevice"></param>
            <exception cref="T:Franson.DAO.ExecuteDBException">Could not update database</exception>
            <exception cref="T:Franson.DAO.ConnectionException">No free connection to database.</exception>
        </member>
        <member name="M:Franson.Message.Queue.MarkDelivered(System.Int32)">
            <summary>
            Mark any pending message for device in this queue as delivered. A device can only have one pending message per queue.
            </summary>
            <param name="iDevice"></param>
            <returns>Returns true if any message was flagged from pending to delivered.</returns>
            <exception cref="T:Franson.DAO.ExecuteDBException">Could not update database</exception>
            <exception cref="T:Franson.DAO.ConnectionException">No free connection to database.</exception>
        </member>
        <member name="M:Franson.Message.Queue.HasPendingMessage(System.Int32)">
            <summary>
            Returns true if queue has a pending message for specified device.
            </summary>
            <param name="iDevice"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.Queue.GetLatestItem(System.Int32)">
            <summary>
            Returns the last item for device in the queue independent of status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.Queue.QueueItem(Franson.Message.IQueueSender,Franson.Message.QueueItem,Franson.Message.QueueExecuteMode,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Queue a new message for processing.
            If bTrySend is set to true, queue tries to send message right away. Otherwise 
            </summary>
            <param name="sender">Provider that sends item.</param>
            <param name="item">Item to send/queue</param>
            <param name="exeMode">Execution mode.</param>
            <param name="iClientDeviceID">Client device to receive (outgoing) or sent (incoming) message. Set to 0 if unknown.</param>
            <param name="iClientUserID">Owner of client device</param>
            <param name="iSenderUserID">Sender of outgoing message. Set to 0 for incoming message.</param>
            <param name="bRequiresAck">If an ack is required from device before more data could be sent to it.</param>
            <returns>True if the message was delivered, or made pending. False if it was queued, or it was a duplicate in 
            a queue that does not allow duplicates.</returns>
            <exception cref="T:System.InvalidOperationException">You try to queue an already queued message.</exception>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock</exception>
            <exception cref="T:Franson.Message.QueueOverloaded">Max number of outgoing items per hour limit exceeded</exception>
            <exception cref="T:Franson.Message.QueueBusyException">If pending item exists and new item is ForceSync</exception>
        </member>
        <member name="M:Franson.Message.Queue.ProcessPendingForDevice(Franson.Message.IQueueSender,System.Int32,System.Object)">
            <summary>
            Try to finish any pending items for device.
            This method is useful for queues that handles items that goes through several steps before the item
            is "Delivered". E.g. an outgoing GpsGate Command Queue.
            </summary>
            <param name="iDeviceID"></param>
            <returns>Returns true if any item was processed.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Franson.Message.Queue.SendQueue(Franson.Message.IQueueSender,System.TimeSpan,System.TimeSpan)">
            <summary>
            Will try to resend (process) all queued items at specified retry level and lower. An attempt will be made
            once per message.
            </summary>
            <param name="sender">Interface to object providing sending functionallity.</param>
            <param name="tsKill">How old an item should be to be killed rather than retried.</param>
            <param name="tsRetry">How old an item should be to be retried.</param>
            <returns>Number of items processed.</returns>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock</exception>
            <exception cref="T:System.ArgumentException">Error in some argument.</exception>
        </member>
        <member name="M:Franson.Message.Queue.m_UpdateItemStatus(Franson.Message.QueueItem,Franson.Message.DeliveryStatus)">
            <summary>
            Updates status for message.
            </summary>
            <param name="status"></param>
            <exception cref="T:System.InvalidOperationException">You try to update the status of an unqueued message.</exception>
        </member>
        <member name="P:Franson.Message.Queue.Outgoing">
            <summary>
            Returns true if this is an outgoing queue.
            </summary>
        </member>
        <member name="P:Franson.Message.Queue.WaitTimeout">
            <summary>
            Number of miliseconds to wait for queue. 15000 miliseconds by default. Override to change.
            </summary>
        </member>
        <member name="P:Franson.Message.Queue.MaxOutgoingItemsPerHour">
            <summary>
            Override to set a limit on number of items that can be queued per hour. If 0 is returned there is no limit.
            By default 0 is returned.
            </summary>
        </member>
        <member name="P:Franson.Message.Queue.QueueDAO">
            <summary>
            Returns DaoBaseObject as QueueDAOSQL
            </summary>
        </member>
        <member name="P:Franson.Message.Queue.QueueItemDAO">
            <summary>
            Returns message DAO to read and write individual items from queue.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageQueue.#ctor(System.Boolean,System.Boolean,Franson.Message.IQueueSender)">
            <summary>
            Create provider message queue. Used by derived queue.
            </summary>
            <param name="bOutgoing">True if outgoing queue.</param>
            <param name="bRemoveDuplicates">If true duplicates will not be queued</param>
            <param name="sender">Interface to send item.</param>
        </member>
        <member name="M:Franson.Message.MessageQueue.#ctor(Franson.Message.MessageProvider,System.Boolean,System.Boolean,Franson.Message.IQueueSender)">
            <summary>
            Create provider message queue
            </summary>
            <param name="msgProv">Provider for this queue</param>
            <param name="bOutgoing">True if outgoing queue.</param>
            <param name="bRemoveDuplicates">If true duplicates will not be queued</param>
            <param name="sender">Interface to send item.</param>
        </member>
        <member name="P:Franson.Message.MessageQueue.WaitTimeout">
            <summary>
            Returns 90000 miliseconds.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageQueue.Sender">
            <summary>
            For convenience.
            </summary>
        </member>
        <member name="P:Franson.Message.MessageQueue.QueueItemDAO">
            <summary>
            Returns a new ProviderMessageDAOSQL object.
            </summary>
        </member>
        <member name="T:Franson.Message.MessageQueueManager">
            <summary>
            Managed resend and async sending of provider message items in a queue.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Franson.Message.QueueManager">
            <summary>
            Base class for all queue managers. Manage resend and async send of items in a queue.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Message.QueueManager.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Called by derived class.
            </summary>
            <param name="tsRetry"></param>
            <param name="tsKill"></param>
        </member>
        <member name="M:Franson.Message.QueueManager.Start">
            <summary>
            Calls <see cref="M:Franson.Message.QueueManager.DoStart"/> and then checks if there is anything to be executed in queue.
            </summary>
        </member>
        <member name="M:Franson.Message.QueueManager.DoStart">
            <summary>
            Override to do custom things at start.
            </summary>
        </member>
        <member name="M:Franson.Message.QueueManager.Stop">
            <summary>
            Stops timer and calls <see cref="M:Franson.Message.QueueManager.DoStop"/>
            </summary>
        </member>
        <member name="M:Franson.Message.QueueManager.DoStop">
            <summary>
            Override to do custom actions at stop.
            </summary>
        </member>
        <member name="M:Franson.Message.QueueManager.ExecuteNewItems">
            <summary>
            Will process any new items in queues managed by this manager.
            </summary>
        </member>
        <member name="M:Franson.Message.QueueManager.SetNextRun">
            <summary>
            Call this method to set next run of queued items that should be retried.
            This method must be called at least once to start queue manager.
            </summary>
        </member>
        <member name="M:Franson.Message.QueueManager.SendAllQueues(System.TimeSpan,System.TimeSpan)">
            <summary>
            Sends all queues manager is responsible of. With given retry and kill intervalls.
            </summary>
            <param name="dtRetry"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.QueueManager.IsStarted">
            <summary>
            Returns true if manager is started.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueManager.NextRun">
            <summary>
            Should return time stamp for when next run should be made.
            By default next run is alwas RETRY_INTERVAL ahead in time. A more clever implementation overrides and checks
            the time stamps of the items in queue.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueManager.MaxThreadCount">
            <summary>
            Max number of threads queue manager will use to execute queued items.
            Default 1, override to change.
            </summary>
        </member>
        <member name="M:Franson.Message.MessageQueueManager.#ctor(System.TimeSpan,System.TimeSpan,Franson.Message.IQueueSender,Franson.Message.MessageQueue)">
            <summary>
            Create manager.
            </summary>
            <param name="tsRetry"></param>
            <param name="tsKill"></param>
        </member>
        <member name="M:Franson.Message.MessageQueueManager.SendAllQueues(System.TimeSpan,System.TimeSpan)">
            <summary>
            Send queued items.
            </summary>
            <param name="dtRetry"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.MessageQueueManager.MaxThreadCount">
            <summary>
            Returns 1. Only one thread should use the message queue concurrently.
            </summary>
        </member>
        <member name="T:Franson.Message.MSISDN">
            <summary>
            Keeps a phone number strictly formated according to MSISDN standards.
            
            See specifications:
            http://en.wikipedia.org/wiki/MSISDN
            </summary>
        </member>
        <member name="M:Franson.Message.MSISDN.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor. If all arguments are zero, this number is considered to be "null" or "empty".
            </summary>
            <param name="iCC"></param>
            <param name="iNDC"></param>
            <param name="iSN"></param>
        </member>
        <member name="M:Franson.Message.MSISDN.ToString">
            <summary>
            Returns a string representation of this mobile device phone number.
            If <see cref="M:Franson.Message.MSISDN.IsEmpty"/> is true, null is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MSISDN.Equals(System.Object)">
            <summary>
            True if phone numbers are equal and not empty.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MSISDN.GetHashCode">
            <summary>
            Returns hash code based on phone number string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MSISDN.IsEmpty">
            <summary>
            Returns true if parsed number was null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MSISDN.Parse(System.String)">
            <summary>
            Converts the string representation of a mobile device phone number (MSISDN) to MSISDN object.
            
            Supported input formats:
            +447797882860 or 0046736714157
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Franson.Message.MSISDN.TryParse(System.String,System.Nullable{Franson.Message.MSISDN}@)">
            <summary>
            Try to convert the string representation of a mobile device phone number (MSISDN) to MSISDN object.
            A return value indicates whether the operation was successfully. 
            </summary>
            <param name="s"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.MSISDN.m_validate(System.String)">
            <summary>
            Validating a MSISDN using regular expression.
            Match if: 
            1. Starts with 00 or +
            2. Contains only numbers.
            3. Is between 6 and 20 chars long
            </summary>
            <param name="strMSISDN"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.MSISDN.Raw">
            <summary>
            Returns value from <see cref="M:Franson.Message.MSISDN.ToString"/>
            </summary>
        </member>
        <member name="P:Franson.Message.MSISDN.Empty">
            <summary>
            Returns an empty MSISDN
            </summary>
        </member>
        <member name="T:Franson.Message.ProviderMessage">
            <summary>
            Base class for messages from external providers.
            ex. SmsMessage, EmailMessage, IM messages etc.
            
            A ProviderMessage is the carrier of a message between the external providers and the GpsGate Server Platform
            </summary>
        </member>
        <member name="T:Franson.Message.QueueItem">
            <summary>
            Base class for queueable items, like commands, messages etc.
            ex. SmsMessage, EmailMessage, IM messages, GpsGate Commands etc.
            </summary>
        </member>
        <member name="M:Franson.Message.QueueItem.Init(System.Int64,System.Int32,Franson.Message.DeliveryStatus,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Call to initiate object. Can only be called once.
            </summary>
            <param name="longID"></param>
            <param name="iQueueID"></param>
            <param name="status"></param>
            <param name="bOutgoing"></param>
            <param name="dtQueued"></param>
            <param name="dtDelivered"></param>
            <param name="dtLastTry"></param>
            <param name="iRetryCount"></param>
            <param name="iClientDeviceID"></param>
            <param name="iClientUserID"></param>
            <param name="iSenderUserID"></param>
            <exception cref="T:System.InvalidOperationException">If called twice.</exception>
        </member>
        <member name="M:Franson.Message.QueueItem.SetError(System.Exception)">
            <summary>
            Set error that happened during exection of item.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:Franson.Message.QueueItem.Error">
            <summary>
            Return any exception that happened when executing item.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.ErrorDesc">
            <summary>
            Return description of any error that happened when executing item.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.TimestampClient">
            <summary>
            UTC timestamp for when the client sent this message.
            This is only set for incoming messages. For outgoing messages this field is DateTime.MinTime
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.ID">
            <summary>
            Database ID, if queued.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.QueueID">
            <summary>
            Queue ID. 0 if not queued.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.DeliveryStatus">
            <summary>
            Queue delivery status.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.Outgoing">
            <summary>
            True if this is a message from the server to a client/device. False if this is a message from a client/device to the server.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.TimestampQueued">
            <summary>
            UTC timestamp for when this message was queued.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.TimestampDelivered">
            <summary>
            UTC timestamp for when message was delivered.
            For an incoming message this is the timestamp for when a message was successfully processed by the GpsGate Server.
            For an outgoing message this is the timestamp for when a message was successfully delivered to the client.
            (or next step in deliviery chain that GpsGate Server doesn't control).
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.TimestampLastTry">
            <summary>
            UTC for last time an attempt was made to deliver this message.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.RetryCount">
            <summary>
            Count for how many retries has been made to deliver message
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.ClientDeviceID">
            <summary>
            Which client device this message is/was sent to or received from
            For outgoing messages this is the target device that receives the message
            For incoming messages this is the sending device.
            
            The value can be set once, and not changed after that.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.ClientUserID">
            <summary>
            User who owns <see cref="P:Franson.Message.QueueItem.ClientDeviceID"/>
            The value can be set once, and not changed after that.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItem.SenderUserID">
            <summary>
            Sender of message. 0 for incoming messages.
            The value can be set once, and not changed after that.
            </summary>
        </member>
        <member name="M:Franson.Message.ProviderMessage.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Create generic provider message.
            </summary>
            <param name="strMessage"></param>
            <param name="strClientAddress"></param>
            <param name="strTransport"></param>
            <param name="dtClientTimeStamp"></param>
        </member>
        <member name="M:Franson.Message.ProviderMessage.#ctor">
            <summary>
            Used by derived message class.
            </summary>
        </member>
        <member name="M:Franson.Message.ProviderMessage.Copy">
            <summary>
            Returns a copy of provider message. Override to copy more specialized message types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.ProviderMessage.SetIncomingRouteLabel(System.String)">
            <summary>
            Set incoming router label. This method can only be called once.
            </summary>
        </member>
        <member name="M:Franson.Message.ProviderMessage.SetOutgoingRouteLabel(System.String)">
            <summary>
            Set outgoing router label. This method can only be called once.
            </summary>
        </member>
        <member name="M:Franson.Message.ProviderMessage.ToByteArray">
            <summary>
            Returns Message as a byte array. Can typically be parsed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.ProviderMessage.ToString">
            <summary>
            Used for logging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.ProviderMessage.Message">
            <summary>
            Should return original message contain as a string.
            Return null if not relevant.
            </summary>
        </member>
        <member name="P:Franson.Message.ProviderMessage.ClientAddress">
            <summary>
            The client address. For an incoming message this is the from address. For an outgoing message this is the to address.
            </summary>
        </member>
        <member name="P:Franson.Message.ProviderMessage.Transport">
            <summary>
            Transport this message used. null if unknown.
            </summary>
        </member>
        <member name="P:Franson.Message.ProviderMessage.IncomingRouteLabel">
            <summary>
            Label for provider this message was received from. null means unknown provider.
            </summary>
        </member>
        <member name="P:Franson.Message.ProviderMessage.OutgoingRouteLabel">
            <summary>
            Label for provider this message should sent to. null means default provider.
            </summary>
        </member>
        <member name="T:Franson.Message.ProviderMessageBag">
            <summary>
            Bag with extra info from provider_message table that aren't shared with CmdQueueItemBag.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:Franson.Message.QueueItemBag">
            <summary>
            Base queue item bag class.
            Contains the properties that CmdQueueItemBag and ProviderMessageBag share.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:Franson.Message.QueueItemBag.ClientDeviceID">
            <summary>
            Client device ID.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.ClientDeviceName">
            <summary>
            Client device name.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.ClientUserID">
            <summary>
            Client user ID.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.ClientUserName">
            <summary>
            Client username.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.DeliveryStatus">
            <summary>
            Delivery status.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.Outgoing">
            <summary>
            Whether this queue item is outgoing (true) or incoming (false).
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.TimestampClient">
            <summary>
            The timestamp at which the client "sent" the queue item.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.TimestampQueued">
            <summary>
            The timestamp at which the server queued the item.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.TimestampDelivered">
            <summary>
            The timestamp at which the item was delivered successfully.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.TimestampLastTry">
            <summary>
            The timestamp of the last try.
            </summary>
        </member>
        <member name="P:Franson.Message.QueueItemBag.RetryCount">
            <summary>
            Number of retries.
            </summary>
        </member>
        <member name="M:Franson.Message.ProviderMessageBag.#ctor(System.String,System.String,System.Int32,System.String,System.Int32,System.String,Franson.Message.DeliveryStatus,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="strClientAddress"></param>
            <param name="strMessage"></param>
            <param name="iClientDeviceID"></param>
            <param name="iClientUserID"></param>
            <param name="deliveryStatus"></param>
            <param name="bOutgoing"></param>
            <param name="timestampClient"></param>
            <param name="timestampQueued"></param>
            <param name="timestampDelivered"></param>
            <param name="timestampLastTry"></param>
            <param name="iRetryCount"></param>
        </member>
        <member name="P:Franson.Message.ProviderMessageBag.ClientAddress">
            <summary>
            Client address.
            </summary>
        </member>
        <member name="P:Franson.Message.ProviderMessageBag.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="T:Franson.Message.ProviderMessageReader">
            <summary>
            Light weight reader for provider_message table.
            </summary>
        </member>
        <member name="T:Franson.Message.QueueItemReader">
            <summary>
            Base (abstract) queue item reader class.
            </summary>
        </member>
        <member name="M:Franson.Message.ProviderMessageReader.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Franson.Message.ProviderMessageReader.GetQueueList(System.DateTime,System.DateTime,System.Collections.Generic.List{Franson.Message.DeliveryStatus},System.String)">
            <summary>
            Get a list of queue items for the specified filters.
            </summary>
            <param name="dtStartTime"></param>
            <param name="dtEndTime"></param>
            <param name="statusList"></param>
            <param name="strFullText"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.ProviderMessageReader.GetQueueListByDevice(System.Int32)">
            <summary>
            Get a list of queue items for the given device.
            </summary>
            <param name="iDeviceID"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.ProviderMessageReader.DAO">
            <summary>
            Data Access Object.
            </summary>
        </member>
        <member name="T:Franson.Message.ProviderReader">
            <summary>
            Load TypeInfo for all registered MessageProvider in database.
            Used by ProviderFactory to dynamic instantiate MessageProviders
            </summary>
        </member>
        <member name="T:Franson.Reflection.TypeInstanceReader">
            <summary>
            Abstract base class used to retrieve <see cref="T:Franson.Reflection.LoadableType"/>s from the database.
            e.g. of implementation: See <see cref="!:Franson.Message.ProviderDBReader"/>
            </summary>
        </member>
        <member name="M:Franson.Reflection.TypeInstanceReader.GetLoadableType(System.Int32)">
            <summary>
            Returns a loadable type by its instance ID. Returns null if not found.
            Call <see cref="M:Franson.Reflection.TypeManager.Load(Franson.Reflection.LoadableType,System.Boolean)"/> to create an object.
            </summary>
            <param name="iInstanceID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Reflection.TypeInstanceReader.GetLoadableType(System.String)">
            <summary>
            Returns a loadable type by its type name. Returns null if not found.
            Call <see cref="M:Franson.Reflection.TypeManager.Load(Franson.Reflection.LoadableType,System.Boolean)"/> to create an object.
            </summary>
            <param name="strTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Reflection.TypeInstanceReader.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Get database ID for instance using loadable_type. E.g. gate_command.gate_command_id for a loadable GpsGate Command
            or message_provider.msg_prov_id for a MessageProvider
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Reflection.TypeInstanceReader.LoadLoadableTypes">
            <summary>
            Return <see cref="T:Franson.Reflection.LoadableType"/> from the database.
            Derived class should implement <see cref="M:Franson.DAO.DAOReaderBase.GetSqlCommand"/> to return.
            </summary>
            <exception cref="T:System.InvalidOperationException">DAO class not set by derived class</exception>
        </member>
        <member name="P:Franson.Reflection.TypeInstanceReader.LoadableInstances">
            <summary>
            This method will instantiate the <see cref="T:Franson.Reflection.LoadableType"/>'s provided by the <see cref="P:Franson.Reflection.TypeInstanceReader.LoadLoadableTypes"/> 
            property. Will reload type data from database each time when called.
            Use <see cref="M:Franson.Reflection.TypeManager.Load(Franson.Reflection.LoadableType,System.Boolean)"/> to create a single instance from a known <see cref="T:Franson.Reflection.LoadableType"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.ProviderReader.LoadEnabled(System.Boolean)">
            <summary>
            Specifies if only enabled providers should be loaded. By default false - all providers, enabled and disabled are loaded.
            </summary>
            <param name="bEnabled"></param>
        </member>
        <member name="M:Franson.Message.ProviderReader.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns instance database ID from message_provider.msg_prov_id
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.ProxyMessage">
            <summary>
            Light weight representation of a ProxyMessage.
            </summary>
        </member>
        <member name="M:Franson.Message.ProxyMessage.#ctor(Franson.Nmea.Command.ProxyMessageCmdBuilder)">
            <summary>
            From a GpsGate NMEA Command
            </summary>
            <param name="mxgBuilder"></param>
        </member>
        <member name="M:Franson.Message.ProxyMessage.#ctor(System.String,System.String)">
            <summary>
            Create read only proxy message. The ClientAddress is always the device's address (e.g. phone number)
            For an outgoing message this would be equal to a "to address" and for an incoming message this would be equal to
            a "from address".
            </summary>
            <param name="strClientAddress"></param>
            <param name="strMessage"></param>
        </member>
        <member name="M:Franson.Message.ProxyMessage.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Create read only proxy message.
            </summary>
            <param name="strClientAddress">Client address</param>
            <param name="strMessage">Message</param>
            <param name="dtTimeStamp">Time stamp when message was original sent (in UTC)</param>
        </member>
        <member name="M:Franson.Message.ProxyMessage.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Create read only proxy message.
            </summary>
            <param name="strClientAddress">Client address</param>
            <param name="strMessage">Message</param>
            <param name="dtTimeStamp">Time stamp when message was original sent (in UTC)</param>
            <param name="strTransport"></param>
        </member>
        <member name="T:Franson.Message.IQueueSender">
            <summary>
            Implemented by a class that sends provider messages from a queue.
            </summary>
        </member>
        <member name="M:Franson.Message.IQueueSender.Send(Franson.Message.Queue,Franson.Message.QueueItem)">
            <summary>
            Should send try to send an item synchronously and return status.
            If <see cref="T:Franson.Message.QueueFatalError"/> is thrown the item will not be retried.
            </summary>
            <param name="queue">Source queue</param>
            <param name="item">Item to be delivered.</param>
            <returns>Returns true if message was delivered to next step in chain.</returns>
        </member>
        <member name="M:Franson.Message.IQueueSender.ProcessPending(Franson.Message.Queue,Franson.Message.QueueItem,System.Object)">
            <summary>
            Continue processing a pending item.
            </summary>
            <param name="queue"></param>
            <param name="item"></param>
            <param name="oArgument"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.IQueueSender.IsOnline(Franson.Message.Queue)">
            <summary>
            Return true if sender is online and can send messages.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.QueueExecuteMode">
            <summary>
            Flag on how a command should be queued.
            </summary>
        </member>
        <member name="F:Franson.Message.QueueExecuteMode.DoNotCare">
            <summary>
            In this case the command is tried to be executed sync right away.
            And if there is a queue and a pending command, the command is queued in stead for async execution.
            </summary>
        </member>
        <member name="F:Franson.Message.QueueExecuteMode.ForceSync">
            <summary>
            If the command cannot be executed sync right away, the execution fails.
            If there is a queue and there is a pending command, the command fails.
            </summary>
        </member>
        <member name="F:Franson.Message.QueueExecuteMode.ForceAsync">
            <summary>
            There must be a queue, and the command is always executed async.
            </summary>
        </member>
        <member name="T:Franson.Message.DeliveryStatus">
            <summary>
            Queue status for an item.
            </summary>
        </member>
        <member name="F:Franson.Message.DeliveryStatus.Unknown">
            <summary>
            Unknown, not placed in a queue.
            </summary>
        </member>
        <member name="F:Franson.Message.DeliveryStatus.Queued">
            <summary>
            The message is queued and is waiting for delivery.
            The next possible state is Delivered or PermanentFailure
            </summary>
        </member>
        <member name="F:Franson.Message.DeliveryStatus.Delivered">
            <summary>
            The message is delivered. This is an end state for a queued item.
            </summary>
        </member>
        <member name="F:Franson.Message.DeliveryStatus.PermanentFailure">
            <summary>
            The message could not be delivered. No more attempts will be made. This is an end state.
            </summary>
        </member>
        <member name="F:Franson.Message.DeliveryStatus.Pending">
            <summary>
            An attempt to deliver item is in progress. The next possible step is Delivered or PermanentFailure
            </summary>
        </member>
        <member name="F:Franson.Message.DeliveryStatus.QueuedRequiresAck">
            <summary>
            Item is queued and requires ack when sent. The next possible step is Pending
            </summary>
        </member>
        <member name="T:Franson.Message.Sms.SmsMessage">
            <summary>
            Represents an SMS.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Message.Sms.SmsMessage.#ctor(System.String,Franson.Message.MSISDN)">
            <summary>
            Create SMS message.
            </summary>
            <param name="strMessage">Message</param>
            <param name="numClient">SMS receivers phone number for client/device</param>
        </member>
        <member name="M:Franson.Message.Sms.SmsMessage.#ctor(System.String,Franson.Message.MSISDN,System.DateTime)">
            <summary>
            Create SMS message.
            </summary>
            <param name="strMessage">Message</param>
            <param name="numClient">SMS receivers phone number for client/device</param>
            <param name="dtClient">When message was original created by client</param>
        </member>
        <member name="M:Franson.Message.Sms.SmsMessage.#ctor(System.Byte[],Franson.Message.MSISDN)">
            <summary>
            Creates SMS message. The byte array is assumed to be UTF-8 encoded.
            </summary>
            <param name="arrMessage">Message</param>
            <param name="numClient">SMS receivers phone number for client/device</param>
        </member>
        <member name="M:Franson.Message.Sms.SmsMessage.#ctor(System.Byte[],Franson.Message.MSISDN,System.DateTime)">
            <summary>
            Creates SMS message. The byte array is assumed to be UTF-8 encoded.
            </summary>
            <param name="arrMessage">Message</param>
            <param name="numClient">SMS receivers phone number for client/device</param>
            <param name="dtClient">When message was original created by client</param>
        </member>
        <member name="M:Franson.Message.Sms.SmsMessage.#ctor(Franson.Message.ProxyMessage)">
            <summary>
            Casts a ProxyMessage to a SmsMessage. Takes ClientAddress and uses as MSISDN.
            </summary>
            <param name="proxyMsg"></param>
            <FormatException>Number does not follow MSISDN standards</FormatException>
        </member>
        <member name="P:Franson.Message.Sms.SmsMessage.MSISDN">
            <summary>
            Returns client/device phone number.
            </summary>
        </member>
        <member name="P:Franson.Message.Sms.SmsMessage.Message">
            <summary>
            Returns message content as string.
            </summary>
        </member>
        <member name="P:Franson.Message.Sms.SmsMessage.ClientAddress">
            <summary>
            Returns <see cref="P:Franson.Message.Sms.SmsMessage.MSISDN"/> as string
            </summary>
        </member>
        <member name="P:Franson.Message.Sms.SmsMessage.TimestampClient">
            <summary>
            Timestamp in UTC when message was created on client/device.
            </summary>
        </member>
        <member name="P:Franson.Message.Sms.SmsMessage.Transport">
            <summary>
            Returns "sms"
            </summary>
        </member>
        <member name="T:Franson.Message.Sms.SmsProvider">
            <summary>
            Base class for all SMS providers.
            </summary>
        </member>
        <member name="T:Franson.Message.Sms.DAO.SmsMessageDAOSQL">
            <summary>
            SMS Message DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.ProviderMessageDAOSQL">
            <summary>
            ProviderMessage DAO.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Franson.Message.DAO.QueueItemDAOSQL">
            <summary>
            QueueItem DAO.
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.#ctor(System.String)">
            <summary>
            Create QueueItem DAO
            </summary>
            <param name="conn"></param>
            <param name="strTableName">Name of table that contains items</param>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.LoadByID(System.Int32)">
            <summary>
            Do not use.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotImplementedException">Not supported.</exception>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.GetNextItem(System.Int32,System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
            Returns next queued item. Will call <see cref="!:LoadNextItem"/> and <see cref="M:Franson.Message.DAO.QueueItemDAOSQL.CreateItem"/>.
            </summary>
            <param name="iDeviceID">Device ID. Set to -1 to ognore device, and get next item for any device.</param>
            <param name="bOutgoing">True if outgoing item.</param>
            <param name="iQueueID">Queue</param>
            <param name="tsRetry">How old item should be to be included. New items are always included.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.GetPendingItem(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Return pending item if exists. A queue can only have one pending item in each direction.
            </summary>
            <param name="iQueueID"></param>
            <param name="bOutgoing"></param>
            <param name="iDeviceID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.GetLastIem(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Return last item added to queue independent of status.
            </summary>
            <param name="iQueueID"></param>
            <param name="bOutgoing"></param>
            <param name="iDeviceID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.GetItem(System.Int64)">
            <summary>
            Loads queued item. Returns null if not found.
            </summary>
            <param name="longID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.UpdateItemStatus(Franson.Message.QueueItem,Franson.Message.DeliveryStatus)">
            <summary>
            Updates status and timestamps for an item after an attempt to deliver item.
            </summary>
            <param name="item"></param>
            <param name="status"></param>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.SaveItem(System.Int32,Franson.Message.DeliveryStatus,Franson.Message.QueueItem,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves <see cref="T:Franson.Message.ProviderMessage"/> to database, including all queue status fields.
            To insert records into help tables, <see cref="!:OnRowInserted"/>.
            </summary>
            <param name="iQueueID">Used if provMsg is new.</param>
            <param name="status">New delivery status</param>
            <param name="item"></param>
            <param name="bOutgoing">True if outgoing message. False if incoming message.</param>
            <param name="iClientDeviceID">ID of device that sends or receives this message.</param>
            <param name="iClientUserID">Owner of device</param>
            <param name="iSenderUserID">Sender of outgoing item.</param>
            <param name="bTriedToDeliver">Set to true if there was a try to deliver item</param>
            <returns>The message's database ID.</returns>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.OnSaveItem(Franson.Message.QueueItem)">
            <summary>
            Called by <see cref="M:Franson.Message.DAO.QueueItemDAOSQL.SaveItem(System.Int32,Franson.Message.DeliveryStatus,Franson.Message.QueueItem,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean)"/> before <see cref="!:Update"/> is called.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.OnInsertedItem(Franson.Message.QueueItem)">
            <summary>
            Called when a new item has been inserted to database, and has its new ID.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.LoadNext(System.Int32,System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
            Override to load a queued item from database, e.g. an SmsMessage.
            Oldest message is loaded first.
            </summary>
            <param name="iQueueID">Queue to load from.</param>
            <param name="tsRetry">How old items should be to be loaded. New items are always included.</param>
            <param name="bOutgoing">True if outgoing, false if incoming.</param>
            <param name="iDeviceID">Which device. Set to -1 to ignore device.</param>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.LoadPending(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Override to load pending item. A queue can only have one pending item in each direction.
            </summary>
            <param name="iQueueID">Queue to load from</param>
            <param name="bOutgoing">True to load pending outgoing item</param>
            <param name="iDeviceID">Device</param>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.LoadLast(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Override to support loading last item from queue.
            </summary>
            <param name="iQueueID">Queue to load from</param>
            <param name="bOutgoing">True to load pending outgoing item</param>
            <param name="iDeviceID">Device</param>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemDAOSQL.CreateItem">
            <summary>
            Creates (derived) QueueItem from loaded paramaters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.ID">
            <summary>
            Please use <see cref="P:Franson.Message.DAO.QueueItemDAOSQL.LongID"/> instead
            </summary>
            <exception cref="T:System.NotImplementedException">Not used.</exception>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.LongID">
            <summary>
            Database ID.
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.ClientDeviceID">
            <summary>
            [ITEM_TABLE].client_device_id
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.ClientUserID">
            <summary>
            [ITEM_TABLE].client_user_id
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.SenderUserID">
            <summary>
            [ITEM_TABLE].sender_user_id
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.QueueID">
            <summary>
            [ITEM_TABLE].queue_id
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.DeliveryStatus">
            <summary>
            [ITEM_TABLE].delivery_status
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.Outgoing">
            <summary>
            [ITEM_TABLE].outgoing
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.TimestampClient">
            <summary>
            [ITEM_TABLE].timestamp_client
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.TimestampQueued">
            <summary>
            [ITEM_TABLE].timestamp_queued
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.TimestampDelivered">
            <summary>
            [ITEM_TABLE].timestamp_delivered
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.TimestampLastTry">
            <summary>
            [ITEM_TABLE].timestamp_last_try
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.RetryCount">
            <summary>
            [ITEM_TABLE].retry_count
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.ErrorDesc">
            <summary>
            [ITEM_TABLE]_item.error_desc
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueItemDAOSQL.HasErrorDesc">
            <summary>
            Override and return true, if queue item table has a error_desc field.
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageDAOSQL.#ctor">
            <summary>
            Create ProviderMessageDAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageDAOSQL.OnSaveItem(Franson.Message.QueueItem)">
            <summary>
            Updates message content.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageDAOSQL.TopLimit(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="iCount"></param>
            <param name="bMSSQLstyle"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageDAOSQL.LoadNext(System.Int32,System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
            Loads next SMS message for specified queue. This is a SMS for a device with no pending SMS.
            </summary>
            <param name="iQueueID">Queue to load from</param>
            <param name="tsRetry">How long time since last retry to be considered. New items are always loaded.</param>
            <param name="bOutgoing">True for outgoing SMS</param>
            <param name="iDeviceID">Which device. Set to -1 for any device.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageDAOSQL.LoadPending(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="iQueueID"></param>
            <param name="bOutgoing"></param>
            <param name="iDeviceID"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageDAOSQL.LoadLast(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Not implemented.
            </summary>
            <param name="iQueueID"></param>
            <param name="bOutgoing"></param>
            <param name="iDeviceID"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageDAOSQL.CreateItem">
            <summary>
            Returns a new <see cref="T:Franson.Message.ProviderMessage"/> with data from DAO object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.DAO.ProviderMessageDAOSQL.Message">
            <summary>
            provider_message.message
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderMessageDAOSQL.ClientAddress">
            <summary>
            provider_message.client_address
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderMessageDAOSQL.Transport">
            <summary>
            Transport for message. E.g. "sms" or "orb"
            </summary>
        </member>
        <member name="M:Franson.Message.Sms.DAO.SmsMessageDAOSQL.CreateItem">
            <summary>
            Returns a new SmsMessage if data is loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.DAO.MessageDAOFactory">
            <summary>
            Factory for all DAO classes in Franson.Message namespace.
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetProviderMessageDAO">
            <summary>
            Abstract method to get ProviderMessage DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetMessageQueueDAO">
            <summary>
            Abstract method to get MessageQueue DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetSmsMessageDAO">
            <summary>
            Abstract method to get SmsMessage DAO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetProviderReaderDAOSQL">
            <summary>
            Abstract method to get ProviderReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetProviderDAOSQL">
            <summary>
            Abstract method to get Provider DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetMessageProviderSettingsDAO">
            <summary>
            Abstract method to get MessageProviderSettings DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetMessageFieldReaderDAO">
            <summary>
            Abstract method to get MessageFieldReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetMessageNamespaceDAO(System.String,System.String)">
            <summary>
            Abstract method to get MessageNamespace
            </summary>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetMessageFieldDictionaryDAO">
            <summary>
            Abstract method to get MessageFieldDictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetMessageFieldWriterDAO">
            <summary>
            Abstract method to get MessageFieldWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetMessageFieldDictionaryCollectionDAOSQL">
            <summary>
            Abstract method to get MessageFieldDictionaryCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetProviderMessageReaderDAOSQL">
            <summary>
            Abstract method to get ProviderMessageReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOFactory.GetDAOFactory">
            <summary>
            DAO Factory for Franson.Message.* namespace.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.DAO.MessageDAOMSSQLFactory">
            <summary>
            MSSQL DAO factory for Franson.Message.* namespace.
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetProviderReaderDAOSQL">
            <summary>
            MSSQL version of ProviderReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetProviderDAOSQL">
            <summary>
            MSSQL version of Provider DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetMessageProviderSettingsDAO">
            <summary>
            MSSQL version of MessageProviderSettings DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetMessageFieldReaderDAO">
            <summary>
            MSSQL version of MessageFieldReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetMessageNamespaceDAO(System.String,System.String)">
            <summary>
            MSSQL version of MessageNamespace DAO
            </summary>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetMessageFieldDictionaryDAO">
            <summary>
            MSSQL version of MessageFieldDictionary DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetMessageFieldDictionaryCollectionDAOSQL">
            <summary>
            MSSQL version of MessageFieldDictionaryCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetMessageFieldWriterDAO">
            <summary>
            MSSQL version of MessageFieldWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetSmsMessageDAO">
            <summary>
            MSSQL version of SmsMessage DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetMessageQueueDAO">
            <summary>
            MSSQL version of MessageQueue DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetProviderMessageDAO">
            <summary>
            MSSQL version to get ProviderMessage DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMSSQLFactory.GetProviderMessageReaderDAOSQL">
            <summary>
            MSSQL version of ProviderMessageReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.DAO.MessageDAOMySQLFactory">
            <summary>
            MySQL DAO factory for Franson.Message.* namespace.
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetProviderReaderDAOSQL">
            <summary>
            MySQL version of ProviderReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetProviderDAOSQL">
            <summary>
            MySQL version of Provider DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetMessageProviderSettingsDAO">
            <summary>
            MySQL version of MessageProviderSettings DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetMessageFieldReaderDAO">
            <summary>
            MySQL version of MessageFieldReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetMessageNamespaceDAO(System.String,System.String)">
            <summary>
            MySQL version of MessageNamespace DAO
            </summary>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetMessageFieldDictionaryDAO">
            <summary>
            MySQL version of MessageFieldDictionary DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetMessageFieldDictionaryCollectionDAOSQL">
            <summary>
            MySQL version of MessageFieldDictionaryCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetMessageFieldWriterDAO">
            <summary>
            MySQL version of MessageFieldWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetSmsMessageDAO">
            <summary>
            MySQL version of SmsMessage DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetMessageQueueDAO">
            <summary>
            MySQL version of MessageQueue DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetProviderMessageDAO">
            <summary>
            MySQL version to get ProviderMessage DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageDAOMySQLFactory.GetProviderMessageReaderDAOSQL">
            <summary>
            MySQL version of ProviderMessageReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.DAO.MessageFieldDictionaryCollectionDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.MessageFieldDictionaryCollectionDAOSQL">
            <summary>
            MessageFieldDictionaryCollection DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldDictionaryCollectionDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldDictionaryCollectionDAOSQL.LoadByGroup(System.Int32)">
            <summary>
            See <see cref="!:Franson.Message.LoadByGroup"/>
            </summary>
            <param name="iGroupId"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldDictionaryCollectionDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldDictionaryCollectionDAOMySQL.GetItemType">
            <summary>
            Returns typeof(MessageFieldDictionaryDAOSQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.DAO.MessageFieldDictionaryCollectionDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldDictionaryCollectionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldDictionaryCollectionDAOMSSQL.GetItemType">
            <summary>
            Returns typeof(MessageFieldDictionaryDAOSQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.DAO.MessageFieldDictionaryDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.MessageFieldDictionaryDAOSQL">
            <summary>
            MessageFieldDictionary DAO
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.MessageFieldDictionaryDAOSQL.Name">
            <summary>
            msg_field_dictionary.name
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.MessageFieldDictionaryDAOSQL.Description">
            <summary>
            msg_field_dictionary.description
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.MessageFieldDictionaryDAOSQL.GroupId">
            <summary>
            msg_field_dictionary.group_id
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldDictionaryDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="T:Franson.Message.DAO.MessageFieldDictionaryDAOMSSQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldDictionaryDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="T:Franson.Message.DAO.MessageFieldReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.MessageFieldReaderDAOSQL">
            <summary>
            MessageFieldReader DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldReaderDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="connection"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldReaderDAOSQL.GetMessageFieldByNamespace(System.String)">
            <summary>
            See <see cref="!:Franson.Message.LoadMessageFieldByNameSpace"/>
            </summary>
            <param name="strNamespace"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldReaderDAOSQL.GetByDeviceDefinition(System.Int32)">
            <summary>
            See <see cref="!:Franson.Message.LoadByDeviceDefinition"/>
            </summary>
            <param name="iDeviceDefinitionId"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldReaderDAOSQL.LoadAll">
            <summary>
            See <see cref="!:Franson.Message.LoadAll"/>
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldReaderDAOSQL.GetUsed">
            <summary>
            Return all <see cref="T:Franson.Message.MessageField"/> where data has been reported for.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldReaderDAOSQL.GetMapped(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            See BO
            </summary>
            <param name="iApplicationID"></param>
            <param name="tagIDs"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns SQL string set by "LoadBy..."
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:Franson.Message.DAO.MessageFieldReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageFieldReaderDAOMySQL.#ctor">
            <summary>
            Create MySql DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:Franson.Message.DAO.MessageNamespaceDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.MessageNamespaceDAOSQL">
            <summary>
            MessageNamespace DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageNamespaceDAOSQL.#ctor(System.String,System.String)">
            <summary>
            Create DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageNamespaceDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load namespace by ID
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">Not found</exception>
        </member>
        <member name="M:Franson.Message.DAO.MessageNamespaceDAOSQL.LoadByName(System.String)">
            <summary>
            See <see cref="!:Franson.Message.LoadByName"/>
            </summary>
            <param name="strName"></param>
            <exception cref="T:Franson.DAO.NotFoundException">Not found</exception>
        </member>
        <member name="P:Franson.Message.DAO.MessageNamespaceDAOSQL.Name">
            <summary>
            msg_namespace.name
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.MessageNamespaceDAOSQL.Description">
            <summary>
            msg_namespace.description
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.MessageNamespaceDAOSQL.ProtocolID">
            <summary>
            msg_namespace.protocol_id
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.MessageNamespaceDAOSQL.BOType">
            <summary>
            msg_namespace does not support the bo_type field.
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageNamespaceDAOMySQL.#ctor(System.String,System.String)">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
        </member>
        <member name="T:Franson.Message.DAO.MessageNamespaceDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageNamespaceDAOMSSQL.#ctor(System.String,System.String)">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
        </member>
        <member name="T:Franson.Message.DAO.MessageProviderSettingsDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.MessageProviderSettingsDAOSQL">
            <summary>
            MessageProviderSettings DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageProviderSettingsDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageProviderSettingsDAOSQL.NewValue(System.Int32)">
            <summary>
            Called when new settings value is added. Updates "msg_prov_settings" table.
            </summary>
            <param name="m_iTempId"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageProviderSettingsDAOSQL.LoadByNamespaceAndProviderID(System.String,System.Int32)">
            <summary>
            See <see cref="!:Franson.Message.LoadByNamespaceAndProviderID"/>
            </summary>
            <param name="strNamespace"></param>
            <param name="iMsgProvId"></param>
        </member>
        <member name="M:Franson.Message.DAO.MessageProviderSettingsDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.MessageProviderSettingsDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageProviderSettingsDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.MessageQueueDAOSQL">
            <summary>
            MessageQueue DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.QueueDAOSQL">
            <summary>
            Queue DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.QueueDAOSQL.#ctor">
            <summary>
            Create MessageQueue DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:Franson.Message.DAO.QueueDAOSQL.LoadByID(System.Int32)">
            <summary>
            Not implemented.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Franson.Message.DAO.QueueDAOSQL.IsDuplicate(Franson.Message.QueueItem)">
            <summary>
            Should return true if a duplicate of this item already has been successfully delivered.
            </summary>
            <param name="provMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.QueueDAOSQL.QueuedOutgoingMessagesLastHour">
            <summary>
            Returns number of queued items last hour.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.QueueDAOSQL.HasPendingMessage(System.Int32)">
            <summary>
            Returns true if this device has a pending message.
            </summary>
            <param name="iDevice"></param>
            <returns></returns>
            <exception cref="T:Franson.DAO.ExecuteDBException">Could execute database query</exception>
            <exception cref="T:Franson.DAO.ConnectionException">No free connection to database.</exception>
        </member>
        <member name="M:Franson.Message.DAO.QueueDAOSQL.ResetQueue(System.Int32)">
            <summary>
            Sets all Pending, Queued and QueuedRequiresAck messages to PermanentFailure for device.
            </summary>
            <param name="iDevice"></param>
            <exception cref="T:Franson.DAO.ExecuteDBException">Could not update database</exception>
            <exception cref="T:Franson.DAO.ConnectionException">No free connection to database.</exception>
        </member>
        <member name="M:Franson.Message.DAO.QueueDAOSQL.MarkDelivered(System.Int32)">
            <summary>
            Sets Pending messages to Delivered for device. A queue can only have one pending message per device.
            </summary>
            <param name="iDevice"></param>
            <returns>Returns true if any message was flagged from pending to delivered.</returns>
            <exception cref="T:Franson.DAO.ExecuteDBException">Could not update database</exception>
            <exception cref="T:Franson.DAO.ConnectionException">No free connection to database.</exception>
        </member>
        <member name="P:Franson.Message.DAO.QueueDAOSQL.QueueTableName">
            <summary>
            Should return the database table name for this queue.
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.QueueDAOSQL.QueueItemTableName">
            <summary>
            Should return the database table name for queue items.
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.MessageQueueDAOSQL.LoadByMessageProvider(System.Int32)">
            <summary>
            Load queue by message provider ID.
            </summary>
            <param name="iMsgProvID"></param>
            <exception cref="T:Franson.DAO.NotFoundException"></exception>
        </member>
        <member name="M:Franson.Message.DAO.MessageQueueDAOSQL.IsDuplicate(Franson.Message.QueueItem)">
            <summary>
            Returns true if TimestampClient, ClientAddress, and Message already exists in this queue
            for an item that is pending, queued or delivered. Failed items will not be considered as duplicates
            Does not consider item.ID
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Message.DAO.MessageQueueDAOSQL.MessageProviderID">
            <summary>
            provider_message_queue.msg_prov_id
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.MessageQueueDAOSQL.QueueTableName">
            <summary>
            Returns "provider_message_queue"
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.MessageQueueDAOSQL.QueueItemTableName">
            <summary>
            Returns "provider_message", which is the table containing queued items
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.ProviderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.ProviderDAOSQL">
            <summary>
            Provider DAO
            </summary>
        </member>
        <member name="T:Franson.Reflection.DAO.TypeInstanceDAOSQL">
            <summary>
            Derive from this class if it is a loadable type.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeInstanceDAOSQL.#ctor">
            <summary>
            Derive from this class if it is a loadable type.
            Derived class' constructor must call <see cref="!:AddTable"/>.
            </summary>
            <param name="concurrencyOption"></param>
            <param name="odbcConnection"></param>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeInstanceDAOSQL.m_LoadByTypeID(System.Int32)">
            <summary>
            Loads loadable_type to extra table.
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">If loadable type is not set</exception>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeInstanceDAOSQL.Update">
            <summary>
            Stores data in DB. Will set type_id if not set by Install
            </summary>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeInstanceDAOSQL.SetAssemblyInfo(System.Type)">
            <summary>
            Set type when creating a new parameter instance for a loadable type.
            E.g. a new template command based on TemplateCmdExe
            </summary>
            <param name="strAssemblyName"></param>
            <param name="strTypeName"></param>
        </member>
        <member name="P:Franson.Reflection.DAO.TypeInstanceDAOSQL.TypeID">
            <summary>
            type_id from derived table e.g. gate_command table, not from loadable_type table.
            </summary>
        </member>
        <member name="P:Franson.Reflection.DAO.TypeInstanceDAOSQL.AssemblyName">
            <summary>
            Will make an extra round trip to database to fetch stored assembly name.
            </summary>
            <exception cref="T:Franson.DAO.NotFoundException">If loadable type is not set</exception>
        </member>
        <member name="P:Franson.Reflection.DAO.TypeInstanceDAOSQL.TypeName">
            <summary>
            Will make an extra round trip to database to fetch stored type name.
            </summary>
            <exception cref="T:Franson.DAO.NotFoundException">If loadable type is not set</exception>
        </member>
        <member name="M:Franson.Message.DAO.ProviderDAOSQL.#ctor">
            <summary>
            Create DAO object.
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.ProviderDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load data by ID.
            </summary>
            <param name="iID"></param>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.ID">
            <summary>
            message_provider.msg_prov_id
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.Name">
            <summary>
            message_provider.msg_prov_name
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.Enabled">
            <summary>
            message_provider.enabled
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.Url">
            <summary>
            message_provider.url
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.Username">
            <summary>
            message_provider.username
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.Password">
            <summary>
            message_provider.password
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.CallInterval">
            <summary>
            message_provider.call_interval
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.CustomLong">
            <summary>
            message_provider.custom_long
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.CustomString">
            <summary>
            message_provider.custom_string
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.CallTimeout">
            <summary>
            message_provider.timeout
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.RouteLabel">
            <summary>
            message_provider.route_label
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.DefaultProvider">
            <summary>
            message_provider.default_provider
            </summary>
        </member>
        <member name="P:Franson.Message.DAO.ProviderDAOSQL.Created">
            <summary>
            message_provider.created
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.ProviderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.ProviderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.ProviderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.ProviderMessageReaderDAOMySQL">
            <summary>
            MySQL version of ProviderMessageReaderDAO.
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.ProviderMessageReaderDAO">
            <summary>
            Light weight reader for provider_message table.
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.QueueItemReaderDAO">
            <summary>
            Base (abstract) queue item reader class.
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemReaderDAO.GetSqlCommand">
            <summary>
            Get SQL query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemReaderDAO.BuildFilter(System.DateTime,System.DateTime,System.Collections.Generic.List{Franson.Message.DeliveryStatus},System.String,System.String)">
            <summary>
            Builds an SQL "WHERE" clause from different filters.
            </summary>
            <param name="dtStartTime"></param>
            <param name="dtEndTime"></param>
            <param name="statusList"></param>
            <param name="strFullText"></param>
            <param name="strCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemReaderDAO.BuildAnd(System.Text.StringBuilder)">
            <summary>
            Checks if the given string(builder) is null or not.
            Returns an "AND" string if not null, otherwise it returns an empty string.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Franson.Message.DAO.QueueItemReaderDAO.GetStatusFilter(System.Collections.Generic.List{Franson.Message.DeliveryStatus})">
            <summary>
            Builds a comma-separated string from a delivery status list.
            </summary>
            <param name="statusList"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageReaderDAO.GetQueueList(System.DateTime,System.DateTime,System.Collections.Generic.List{Franson.Message.DeliveryStatus},System.String,System.String)">
            <summary>
            Get a list of queue items for the specified filters.
            </summary>
            <param name="dtStartTime"></param>
            <param name="dtEndTime"></param>
            <param name="statusList"></param>
            <param name="strFullText"></param>
            <param name="strCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageReaderDAO.GetQueueListByDevice(System.Int32)">
            <summary>
            Get a list of queue items for the given device.
            </summary>
            <param name="iDeviceID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.ProviderMessageReaderDAO.ReaderToBag(System.Data.IDataReader)">
            <summary>
            Converts an IDataReader into a light weight ProviderMessageBag.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Message.DAO.ProviderMessageReaderDAOMSSQL">
            <summary>
            MSSQL version of ProviderMessageReaderDAO.
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.ProviderReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Message.DAO.ProviderReaderDAOSQL">
            <summary>
            DAO to load message providers
            </summary>
        </member>
        <member name="T:Franson.Reflection.DAO.TypeInstanceReaderDAOSQL">
            <summary>
            TypeInstanceReader DAO
            </summary>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeInstanceReaderDAOSQL.#ctor">
            <summary>
            Create reader DAO
            </summary>
            <param name="connection"></param>
            <param name="cmd"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Reflection.DAO.TypeInstanceReaderDAOSQL.CreateBag(System.Data.IDataReader)" -->
        <member name="M:Franson.Message.DAO.ProviderReaderDAOSQL.#ctor">
            <summary>
            Constructor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Franson.Message.DAO.ProviderReaderDAOSQL.LoadEnabled(System.Boolean)">
            <summary>
            Specifies if only enabled providers should be loaded. By default false - all providers, enabled and disabled are loaded.
            </summary>
            <param name="bEnabled"></param>
        </member>
        <member name="M:Franson.Message.DAO.ProviderReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns SQL query to return all message providers in DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Message.DAO.ProviderReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Franson.Message.DAO.ProviderReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Message.DAO.ProviderReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Franson.Reflection.BaseTypeAttribute">
            <summary>
            Attribute defining the type of the BaseClass providing an <see cref="T:Franson.Reflection.ILoadable"/>'s characteristics.
            Ex. For <see cref="!:MessageProvider"/> implementations such as <see cref="!:Franson.Hsl.HslSmsProvider"/> 
            the base class will be <see cref="T:Franson.Message.MessageProvider"/> and should be taged with this attribute.
            </summary>
        </member>
        <member name="F:Franson.Reflection.BaseTypeAttribute.Description">
            <summary>
            Description for base class that will be stored in loadable_types table.
            </summary>
        </member>
        <member name="M:Franson.Reflection.DependencyResolver.ResolveInstallOrder(System.Collections.Generic.List{Franson.Reflection.LoadableType})">
            <summary>
            Go trough each ILoadablers dependency list and resolve the installation order.
            </summary>
            <param name="loadables"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Reflection.LoadableAttribute">
            <summary>
            This attribute must be defined by the class implementing <see cref="T:Franson.Reflection.ILoadable"/> to be discovered by the 
            the <see cref="T:Franson.Reflection.TypeManager"/>.
            
            This attribute is necessary when a base class implements the <see cref="!:ILoadabe"/> and custom functionality
            but should not be instantiated by the Plugin system.
            
            See <see cref="T:Franson.Reflection.ILoadable"/> for an example implementation where this attribute is utilized.
            </summary>
        </member>
        <member name="F:Franson.Reflection.LoadableAttribute.Installable">
            <summary>
            Indicates if the <see cref="!:ILoadabe"/>'s Install() method should be called when the ILoadable defining this attribute
            is discovered by the <see cref="T:Franson.Reflection.TypeManager"/> for the first time. 
            </summary>
        </member>
        <member name="F:Franson.Reflection.LoadableAttribute.Description">
            <summary>
            Description. Will be stored in loadable_types table.
            </summary>
        </member>
        <member name="T:Franson.Reflection.LoadableType">
            <summary>
            Representing the type information necessary to create instances of <see cref="T:Franson.Reflection.ILoadable"/> 
            
            Used by <see cref="!:LoadHelper"/> when creating instances of <see cref="T:Franson.Reflection.ILoadable"/>'s.
            Used as parameter in <see cref="T:Franson.Reflection.ILoadable"/>.Install() method.
            Used by <see cref="T:Franson.Reflection.TypeManager"/> and <see cref="T:Franson.Reflection.TypeCollection"/> when synchronizing database.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:Franson.Reflection.LoadableType.m_iInstanceID">
            <summary>
            Database ID, for instance record. E.g. gate_command.gate_command_id or listener.listener_id
            </summary>
        </member>
        <member name="M:Franson.Reflection.LoadableType.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            Used when loading a loadable instance type from database.
            Includes all instance values from the database and the instance database ID.
            Also contains the values from loadable_type table which is used to instantiate object.
            </summary>
            <param name="dicArgs"></param>
            <param name="iInstanceID"></param>
        </member>
        <member name="M:Franson.Reflection.LoadableType.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Used when loading a type from an assembly found on disk.
            </summary>
            <param name="strAssemblyName"></param>
            <param name="strTypeName"></param>
            <param name="strTypeDescription"></param>
            <param name="strBaseType"></param>
            <param name="strBaseTypeDescription"></param>
        </member>
        <member name="M:Franson.Reflection.LoadableType.ContainsField(System.String)">
            <summary>
            Returns true if field exists in this instance's database arguments.
            </summary>
            <param name="strField"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Reflection.LoadableType.GetObject(System.String)">
            <summary>
            Returns named database value as an object. Returns null if the field doesn't exists.
            </summary>
            <param name="strKey"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Field not found</exception>
        </member>
        <member name="M:Franson.Reflection.LoadableType.GetInteger(System.String)">
            <summary>
            Return value as integer. Returns 0 if database value is null.
            </summary>
            <param name="strField"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Field not found</exception>
            <exception cref="T:System.FormatException">Value could not be converted to an integer</exception>
        </member>
        <member name="M:Franson.Reflection.LoadableType.GetString(System.String)">
            <summary>
            Returns value as string.
            </summary>
            <param name="strField"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Field not found</exception>
        </member>
        <member name="M:Franson.Reflection.LoadableType.GetBool(System.String)">
            <summary>
            Returns value as bool. Returns false if database value is null.
            </summary>
            <param name="strField"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Field not found</exception>
        </member>
        <member name="M:Franson.Reflection.LoadableType.GetDouble(System.String)">
            <summary>
            Returns value as double. Returns 0 if value is null.
            </summary>
            <param name="strField"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Field not found</exception>
            <exception cref="T:System.FormatException">Could not convert to double</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Reflection.LoadableType.Equals(System.Object)" -->
        <member name="M:Franson.Reflection.LoadableType.GetHashCode">
            <summary>
            Return the hash code of this.TypeName.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Reflection.LoadableType.ToString">
            <summary>
            TypeName
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Reflection.LoadableType.ID">
            <summary>
            Database ID of loadable type. This is the same value as loadable_type.type_id in the database.
            Zero if loadable type doesn't exists in database yet.
            </summary>
        </member>
        <member name="P:Franson.Reflection.LoadableType.AssemblyName">
            <summary>
            Assembly name.
            </summary>
        </member>
        <member name="P:Franson.Reflection.LoadableType.TypeName">
            <summary>
            Type name for most "subclassed" type.
            E.x: GpsGate.Online.Message.FieldMappingRule
            </summary>
        </member>
        <member name="P:Franson.Reflection.LoadableType.TypeDescription">
            <summary>
            Free text description of type.
            </summary>
        </member>
        <member name="P:Franson.Reflection.LoadableType.BaseType">
            <summary>
            Type name for for base class, used to categories a loadable type. E.g. GpsGate.Online.Command.GateCmd
            for command types.
            </summary>
        </member>
        <member name="P:Franson.Reflection.LoadableType.BaseTypeDescription">
            <summary>
            Free text description.
            </summary>
        </member>
        <member name="P:Franson.Reflection.LoadableType.InstanceID">
            <summary>
            Returns database ID for instance record. E.g. gate_command.gate_command_id or message_provider.msg_prov_id
            Zero if loadable type doesn't exists in database yet.
            </summary>
        </member>
        <member name="P:Franson.Reflection.LoadableType.Version">
            <summary>
            Return a string of the assembly version of the loadable
            </summary>
        </member>
        <member name="P:Franson.Reflection.LoadableType.OldVersion">
            <summary>
            Return a string representation of the latest version before this one installed.
            
            Can be used in upgrade scenarios.
            Is 0.0.0.0 if first time installed.
            </summary>
        </member>
        <member name="P:Franson.Reflection.LoadableType.Fields">
            <summary>
            Returns all name of all argument fields.
            </summary>
        </member>
        <member name="T:Franson.Reflection.LoadException">
            <summary>
            Thrown when an <see cref="T:Franson.Reflection.ILoadable"/> fails to load. 
            </summary>
        </member>
        <member name="M:Franson.Reflection.LoadException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="M:Franson.Reflection.LoadException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:Franson.Reflection.TypeCollection">
            <summary>
            Collection of TypeInfo.
            Used to add, remove and read <see cref="T:Franson.Reflection.LoadableType"/> to/from database.
            
            Used by <see cref="T:Franson.Reflection.TypeManager"/> to synchronize the database with the <see cref="!:ILoadables"/> found on disk.
            </summary>
        </member>
        <member name="M:Franson.Reflection.TypeCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Franson.Reflection.TypeCollection.LoadAll">
            <summary>
            Load all <see cref="T:Franson.Reflection.LoadableType"/>'s from the database.
            Will load <see cref="T:Franson.Reflection.LoadableType"/>'s even if they are flagged as deleted.
            </summary>
        </member>
        <member name="M:Franson.Reflection.TypeCollection.LoadDeleted">
            <summary>
            Load only <see cref="T:Franson.Reflection.LoadableType"/>'s marked as deleted.
            </summary>
        </member>
        <member name="M:Franson.Reflection.TypeCollection.Load">
            <summary>
            Load only <see cref="T:Franson.Reflection.LoadableType"/>'s NOT marked as deleted.
            </summary>
        </member>
        <member name="M:Franson.Reflection.TypeCollection.LoadByBaseType(System.Type)">
            <summary>
            Load all <see cref="T:Franson.Reflection.LoadableType"/> for the given base type.
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:Franson.Reflection.TypeCollection.AddTypeInfo(Franson.Reflection.LoadableType)">
            <summary>
            Adds a new <see cref="!:TypeInfo"/> to the collection.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:Franson.Reflection.TypeCollection.RemoveTypeInfo(Franson.Reflection.LoadableType)">
            <summary>
            Remove a <see cref="T:Franson.Reflection.LoadableType"/> from the collection.
            
            When Update() is called the <see cref="T:Franson.Reflection.LoadableType"/> database record will bne marked as deleted. 
            </summary>
            <param name="typeInfo"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Reflection.TypeCollection.RemoveTypeInfoPermanently(Franson.Reflection.LoadableType)" -->
        <member name="M:Franson.Reflection.TypeCollection.ContainsTypeInfo(Franson.Reflection.LoadableType)">
            <summary>
            Check if the collection contains a <see cref="T:Franson.Reflection.LoadableType"/> by comparing TypeInfo.AssemblyName and TypeInfo.TypeName
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Reflection.TypeCollection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Reflection.TypeManager">
            <summary>
            Search and Synchronize database of loadable types with the file system.
            <see cref="!:TypeInfo"/> is used as a representation of a type implementing <see cref="T:Franson.Reflection.ILoadable"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Reflection.TypeManager.Load(Franson.Reflection.LoadableType,System.Boolean)" -->
        <member name="M:Franson.Reflection.TypeManager.Load(Franson.Reflection.LoadableType)">
            <summary>
            Loads a loadable type and calls ILoadable.Load() on created object.
            </summary>
            <param name="typeInfo"></param>
            <returns>Loadable object</returns>
            <exception cref="T:Franson.Reflection.LoadException"></exception>
        </member>
        <member name="M:Franson.Reflection.TypeManager.RescanLoadableTypes">
            <summary>
            Rescan the disk for new Loadable DLL's and synchronize the database.
            
            Searches the Applications base directory. (AppDomain.CurrentDomain.BaseDirectory)
            </summary>
            <exception cref="T:Franson.Threading.LockTimeoutException">If more than one thread enters this method at the same time.</exception>
        </member>
        <member name="M:Franson.Reflection.TypeManager.RescanLoadableTypes(System.String)">
            <summary>
            Rescan the disk for new Loadable DLL's and synchronize the database.
            <see cref="M:Franson.Reflection.ILoadable.Install(Franson.Reflection.LoadableType)"/> will be called on any newly found classes.
            Classes not found will be removed from database.
            </summary>
            <param name="strFilePath">Path where to look for assemblies.</param>
            <exception cref="T:Franson.Threading.LockTimeoutException">If more than one thread enters this method at the same time.</exception>
            <exception cref="T:System.InvalidOperationException">If called with active transaction in thread.</exception>
        </member>
        <member name="M:Franson.Reflection.TypeManager.m_FindILoadables(System.String)">
            <summary>
            Scans the disk for DLL's with Types implementing ILoadables.
            </summary>
            <param name="strSearchPath">Path to search</param>
            <returns>Return all type Implementing <see cref="!:ILoadables"/> AND defining the <see cref="T:Franson.Reflection.LoadableAttribute"/>.</returns>
        </member>
        <member name="M:Franson.Reflection.TypeManager.m_findBaseTypeClass(System.Type)">
            <summary>
            Method to iterate through hierarchy of classes searching for the BaseTypeAttribute.
            </summary>
            <param name="iLoadable"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Reflection.TypeManager.m_FindFiles(System.String,System.String,System.Boolean)">
            <summary>
            Method traversing files on the disk.
            todo: use existing method in util.cs instead (Franson.Util.FS.FindFiles )
            </summary>
            <param name="dir">Start path</param>
            <param name="match">Search pattern E.g *.dll</param>
            <param name="bRecursive">Recursive or not.</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Reflection.Web.ILoadableASCX">
            <summary>
            Implemt this interface to dynamic plugin an <see cref="T:System.Web.UI.UserControl"/> gui to the ILoadable.
            </summary>
        </member>
        <member name="P:Franson.Reflection.Web.ILoadableASCX.VirtualASCXFilePath">
            <summary>
            The virtual path to the .ascx <see cref="T:System.Web.UI.UserControl"/> file.
            
            e.g: return "~/WebControls/ChannelManagerControl.ascx";
            </summary>
        </member>
        <member name="T:Franson.Reflection.DAO.TypeCollectionDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="T:Franson.Reflection.DAO.TypeCollectionDAOSQL">
            <summary>
            TypeCollection DAO
            </summary>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOSQL.LoadAll">
            <summary>
            <see cref="M:Franson.Reflection.TypeCollection.LoadAll"/>
            </summary>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOSQL.LoadDeleted">
            <summary>
            <see cref="M:Franson.Reflection.TypeCollection.LoadDeleted"/>
            </summary>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOSQL.Load">
            <summary>
            <see cref="M:Franson.Reflection.TypeCollection.Load"/>
            </summary>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOSQL.LoadByBaseType(System.Type)">
            <summary>
            Select all from db where base_type_name equals to the given Type.FullName
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOSQL.AddTypeInfo(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Franson.Reflection.TypeCollection.AddTypeInfo(Franson.Reflection.LoadableType)"/>
            </summary>
            <param name="strAssemblyName"></param>
            <param name="strTypeName"></param>
            <param name="strBaseTypeName"></param>
            <param name="strTypeDescription"></param>
            <param name="strBaseTypeDescription"></param>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOSQL.RemoveTypeInfo(System.String,System.String)">
            <summary>
            <see cref="M:Franson.Reflection.TypeCollection.RemoveTypeInfo(Franson.Reflection.LoadableType)"/>
            </summary>
            <param name="strAssemblyName"></param>
            <param name="strTypeName"></param>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOSQL.RemoveTypeInfoPermanently(System.String,System.String)">
            <summary>
            <see cref="M:Franson.Reflection.TypeCollection.RemoveTypeInfoPermanently(Franson.Reflection.LoadableType)"/>
            </summary>
            <param name="strAssemblyName"></param>
            <param name="strTypeName"></param>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOSQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="T:Franson.Reflection.DAO.TypeCollectionDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:Franson.Reflection.DAO.TypeCollectionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="T:Franson.Geo.Geocoding.SettingsKeys">
            <summary>
            Contains Keys to receive settings used by Franson.Localization namespace using <see cref="T:Franson.Directory.Settings"/>
            </summary>
        </member>
        <member name="F:Franson.Geo.Geocoding.SettingsKeys.GEOCODER_NAME">
            <summary>
            Key used to receive the name of which <see cref="T:Franson.Geo.Geocoding.Geocoder"/> an Application uses. If not specified, a default geocoder will be used
            </summary>
        </member>
        <member name="T:Franson.Geo.Geocoding.Geocoder">
            <summary>
            Responsible for geocoding functionality. Uses its prioritized geocoder providers to serve incoming geocoding requests.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Geo.Geocoding.Geocoder.ReverseGeocode(System.Collections.Generic.List{Franson.Geo.Position})">
            <summary>
            Reverse geocodes the provided positions using prioritized geocoder providers.
            </summary>
            <param name="lstPositions">The list of positions to be reverse geocoded</param>
            <returns>The result containing a list of the found locations, status code from last used provider, 
            the number of positions requested and the name of the source provider(s) of the result. 
            Result contains an empty list of locations if none found.</returns>
        </member>
        <member name="P:Franson.Geo.Geocoding.Geocoder.Providers">
            <summary>
            The sorted list of geocoder providers
            </summary>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocoderCacheReader">
            <summary>
            Reads location data from the database cache
            </summary>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocoderCacheReader.#ctor">
            <summary>
            Reads location data from the database cache
            </summary>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocoderCacheReader.GetByPosition(Franson.Geo.Position)">
            <summary>
            Gets the locations corresponding to the position, by using its hashed value
            </summary>
            <param name="lngHash"></param>
            <returns>List of locations corresponding to the position. Empty list if not found.</returns>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocoderCacheWriter">
            <summary>
            Writes location data to the database cache
            </summary>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocoderCacheWriter.AddLocations(System.Collections.Generic.List{Franson.Geo.Location},System.Int32)">
            <summary>
            Adds locations for the geocoder provider id
            </summary>
            <param name="lstLocations">The locations to be added</param>
            <param name="iGeocoderProviderId">The geocoder provider id to use when adding the locations</param>
            <returns>List of found locations. Empty list if not found</returns>
            <exception cref="T:Franson.DAO.UpdateDBException">When geocoder provider id is not valid</exception>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocoderCacheWriter.Add(System.Object)">
            <summary>
            May not be used. Use <see cref="M:Franson.Geo.Geocoding.GeocoderCacheWriter.AddLocations(System.Collections.Generic.List{Franson.Geo.Location},System.Int32)">AddLocations</see> for adding Locations instead.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Franson.Geo.Geocoding.GeocodingException">May not be used. Use AddLocations instead.</exception>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocoderFactory">
            <summary>
            Creates a Geocoder object.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocoderFactory.GetGeocoderByApplicationId(System.Int32)">
            <summary>
            Gets the geocoder currently associated with an application id or null. 
            </summary>
            <param name="iAppId"></param>
            <returns>If a geocoder has been specified by name in application settings for the application id, 
            the geocoder will be loaded by name. If the geocoder name is not found, the first geocoder found by 
            application id is returned (this is usually the default geocoder. Null if no Geocoder found.</returns>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocoderProvider">
            <summary>
            Base class for geocoder providers.
            </summary>
        </member>
        <member name="P:Franson.Geo.Geocoding.GeocoderProvider.Name">
            <summary>
            Name of the geocoder provider. The name is displayed in the reverse geocoding result of this provider.
            </summary>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocoderReader">
            <summary>
            Reads Geocoder objects.
            </summary>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocoderReader.GetById(System.Int32)">
            <summary>
            Gets the geocoder having the provided id
            </summary>
            <param name="strName"></param>
            <returns>The geocoder having the provided id. Null if not found.</returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocoderReader.GetByApplicationId(System.Int32)">
            <summary>
            Gets a list of Geocoders belonging to this application id
            </summary>
            <param name="iApplicationId"></param>
            <returns>List of geocoders linked to the provided application id. Empty list if not found.</returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocoderReader.GetByName(System.String)">
            <summary>
            Gets the geocoder having the provided name
            </summary>
            <param name="strName"></param>
            <returns>The geocoder having the provided name. Null if not found.</returns>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocoderWriter">
            <summary>
            Writes Geocoder objects.
            </summary>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocoderWriter.LoadByName(System.String)">
            <summary>
            Loads geocoder data by geocoder name
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Franson.Geo.Geocoding.GeocoderWriter.ApplicationIds">
            <summary>
            The application ids linked to this geocoder data
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Franson.Geo.Geocoding.GeocoderWriter.Providers">
            <summary>
            List of the geocoder providers that will be used by this geocoder.
            The list index of a geocoder provider will determine its priority value when written to the database.
            <example>
            //The following code will give Cache priority (priority 0) over Google (priority 1).
            writer.Providers.Add(new CacheGeocoderProvider()); 
            writer.Providers.Add(new GoogleGeocoderProvider());
            </example>
            </summary>
        </member>
        <member name="P:Franson.Geo.Geocoding.GeocoderWriter.Name">
            <summary>
            The name of the Geocoder.
            </summary>
        </member>
        <member name="P:Franson.Geo.Geocoding.GeocoderWriter.Description">
            <summary>
            The description of the Geocoder.
            </summary>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocodingException">
            <summary>
            Base class for exception in Franson.Geo.Geocoding namespace.
            </summary>
        </member>
        <member name="M:Franson.Geo.Geocoding.GeocodingException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="P:Franson.Geo.Geocoding.GeocodingException.LanguageKey">
            <summary>
            Key to use for translate the error.
            If not Provided in the constructor, exception name in upper case + EX_ prefix will be used.
            Save ex.message as it is to preserve backwards compatibility
            </summary>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocoderProviderPriorityException">
            <summary>
            Thrown if two geocoder providers have the same priority. This is possible if geocoders are manually added into the database, 
            not using the business objects.
            </summary>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocoderProviderTypeException">
            <summary>
            Thrown if geocoder providers types are not unique.
            </summary>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocoderJsonSerializationException">
            <summary>
            Thrown if there was a problem when serialising JSON.
            </summary>
        </member>
        <member name="T:Franson.Geo.Geocoding.GeocodingRegexPatterns">
            <summary>
            Regular expressions for parsing address data.
            </summary>
        </member>
        <member name="T:Franson.Geo.Geocoding.ReverseGeocodeResult">
            <summary>
            Wraps a list of <see cref="T:Franson.Geo.Location"/>s together with a status code of the response, the number of positions requested 
            and the source of the result.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Franson.Time.DayOfWeekPeriod">
            <summary>
            Represents a period consisting of a time interval on day(s) of the week.
            </summary>
        </member>
        <member name="M:Franson.Time.DayOfWeekPeriod.Contains(System.DateTime,Franson.Localization.TimeZone)">
            <summary>
             Evaluate whether a a provided datetime parameter is contained by the period.
            </summary>
            <param name="timePointUtc">The point in time (UTC) to be evaluated.</param>
            <param name="timeZone">The TimeZone object to translate the UTC time point into a local time point.</param>
            <returns>True if the timePoint parameter is contained by the period using the period evaluation method, False otherwise.</returns>
            <remarks>Details of the Contains algorithm:
            A timepoint is not contained by a day of week period if the time point day of week is not in the period.
            The [min,max] time of day interval for a period is [0, 23h 59m 59s 999ms].
            When evaluation method is 'Inside', a time point is contained by the period if inside the interval [starttimeofday,stoptimeofday].
            When evaluation method is 'Outside', a time point is contained by the period if inside the interval [0,starttimeofday] union [stoptimeofday,23:59:59:999],
            or if starttimeofday == stoptimeofday. 
            When evaluation method is 'Outside', a time point is never contained by the period if the [min,max] interval is specified (starttimeofday == 0 and at the same time stoptimeofday == 23:59:59:999).</remarks>
            <exception cref="T:System.ArgumentException">When there is an error getting the DayOfWeek from the timePoint parameter or parsing the PeriodDayOfWeek enum.</exception>
        </member>
        <member name="M:Franson.Time.DayOfWeekPeriod.Equals(System.Object)">
            <summary>
            Equal if the start time of day, stop time of day, day of week and evaluation method are equal.
            </summary>
            <param name="obj"></param>
            <returns>True if the start time of day, stop time of day, day of week and evaluation method are equal. False otherwise.</returns>
        </member>
        <member name="M:Franson.Time.DayOfWeekPeriod.GetHashCode">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Time.DayOfWeekPeriod.ToString">
            <summary>
            Generates a string of the days of week, evaluation method, start time of day and stop time of day.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Time.DayOfWeekPeriod.StartTimeOfDay">
            <summary>
            The start time of day for this period
            </summary>
        </member>
        <member name="P:Franson.Time.DayOfWeekPeriod.StopTimeOfDay">
            <summary>
            The stop time of day for this period
            </summary>
        </member>
        <member name="P:Franson.Time.DayOfWeekPeriod.DayOfWeek">
            <summary>
            The day(s) of the week for this period
            </summary>
        </member>
        <member name="P:Franson.Time.DayOfWeekPeriod.EvaluationMethod">
            <summary>
            The period evaluation method (i.e evaluate Inside or Outside).
            </summary>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderCacheReaderDAOSQL.GetByPosition(Franson.Geo.Position)">
            <summary>
            Gets the locations corresponding to the position, by using its hashed value
            </summary>
            <param name="lngHash"></param>
            <returns>List of locations corresponding to the position. Empty list if not found.</returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderCacheReaderDAOSQL.ExecuteReader">
            <summary>
            Returns an IEnumerable of locations matching the previously defined sql query
            </summary>
            <returns></returns>
            <exception cref="!:">System.Data.SqlTypes.SqlNullValueException</exception>
            <exception cref="!:">System.IndexOutOfRangeException</exception>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderCacheWriterDAOSQL.AddLocations(System.Collections.Generic.List{Franson.Geo.Location},System.Int32)">
            <summary>
            Adds a location to the DataSet if not already present
            </summary>
            <param name="location">The location to be added</param>
            <param name="iGeocoderProviderId">The Id of the geocoderprovider adding the location</param>
            <returns></returns>
            <exception cref="T:Franson.Geo.Geocoding.GeocodingException"></exception>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderCacheWriterDAOSQL.Add(System.Object)">
            <summary>
            May not be used. Use <see cref="M:Franson.Geo.Geocoding.DAO.GeocoderCacheWriterDAOSQL.AddLocations(System.Collections.Generic.List{Franson.Geo.Location},System.Int32)">AddLocations</see> for adding Locations instead.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Franson.Geo.Geocoding.GeocodingException">May not be used. Use AddLocations instead.</exception>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderCacheWriterDAOSQL.GetMinMaxCoordinates(System.Collections.Generic.List{Franson.Geo.Location})">
            <summary>
            Gets the minimum and maximum longitude and latitude coordinate values from a list of locations.
            </summary>
            <param name="locations"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderReaderDAOSQL.GetById(System.Int32)">
            <summary>
            Gets the geocoder having the provided id
            </summary>
            <param name="strName"></param>
            <returns>Geocoder having the provided id. Null if not found.</returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderReaderDAOSQL.GetByApplicationId(System.Int32)">
            <summary>
            Gets a list of Geocoders belonging to this application id
            </summary>
            <param name="iApplicationId"></param>
            <returns>A list of geocoders having the same application id. Empty list if not found.</returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderReaderDAOSQL.GetByName(System.String)">
            <summary>
            Gets the geocoder having the provided name
            </summary>
            <param name="strName"></param>
            <returns>The geocoder having the provided name. Null if not found.</returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderReaderDAOSQL.ExecuteReader">
            <summary>
            Returns the Geocoders matching the previously set sql command text (GetBy-methods)
            </summary>
            <returns></returns>
            <exception cref="!:">System.Data.SqlTypes.SqlNullValueException</exception>
            <exception cref="!:">System.IndexOutOfRangeException</exception>
            <exception cref="T:Franson.Geo.Geocoding.GeocoderProviderPriorityException">When the priority value of a provider is already present in the database.</exception>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderWriterDAOSQL.Update">
            <summary>
            Writes the current object state to the database and flags that object state should be updated from database when accessing object properties
            </summary>
            <exception cref="T:Franson.Geo.Geocoding.GeocoderProviderTypeException">When provider types added are not unique.</exception>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderWriterDAOSQL.LoadUnloadedGeocoderProviders">
            <summary>
            Loads any newly added geocoder providers (TypeId 0) to get their type ids from database so we can check for uniqueness.
            </summary>
            <exception cref="T:Franson.Geo.Geocoding.GeocoderProviderTypeException">When the geocoder provider types of this geocoder are not unique</exception>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderWriterDAOSQL.ProvidersHaveUniqueTypes">
            <summary>
            Check if our providers have unique types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderWriterDAOSQL.LoadByName(System.String)">
            <summary>
            Loads geocoder data by geocoder name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocoderWriterDAOSQL.LoadByID(System.Int32)">
            <summary>
            Loads geocoder data by geocoder id
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:Franson.Geo.Geocoding.DAO.GeocodingDAOFactory.GetDAOFactory">
            <summary>
            Gets the correct DAO type depending on application settings
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Web.ScriptManager">
            <summary>
            Manage JS Scripts and Service includes. Check include order, doublets etc.
            </summary>
        </member>
        <member name="M:Franson.Web.ScriptManager.RegisterCustomScripts(System.String,System.Web.HttpContext)">
            <summary>
            Includes GGS 2.0.5 style custom javascripts. This is no longer supported in GpsGate Server 2.1.1 and later.
            This is replaced by "Script Plugins".
            </summary>
            <param name="strPath"></param>
            <param name="context"></param>
        </member>
        <member name="T:Franson.Web.Script.Plugin.ConfigParser">
            <summary>
            Parses a script plugin XML stream
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Web.Script.Plugin.ConfigParser.ParsePlugin(System.String,System.String)">
            <summary>
            Scans XML file.
            </summary>
            <param name="strFilePath">Physical path to XML Script Plugin file.</param>
            <param name="strVirtualScriptPath">Virtual "~" path to folder where XML script plugin file is.</param>
            <returns></returns>
            <exception cref="T:System.IO.InvalidDataException">XML file could not be read.</exception>
            <exception cref="T:System.IO.FileNotFoundException">File not found</exception>
        </member>
        <member name="T:Franson.Web.Script.Plugin.PluginManager">
            <summary>
            Handles script plugins.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Web.Script.Plugin.PluginManager.ScanFolder(System.Web.HttpContext,System.String)">
            <summary>
            Scan virtual path for XML Script plugin files.
            </summary>
            <param name="context">Web application context.</param>
            <param name="strVirtualScriptPath">Virtual path to script folder. ~/Resources/ScriptPlugins"</param>
        </member>
        <member name="M:Franson.Web.Script.Plugin.PluginManager.ScanFolder(System.String,System.String)">
            <summary>
            Scan path for new plugins. All xml files are opened and parsed for script plugin information.
            Old plugins are upgraded, new are registered, not found are deactivated.
            Plugins are not deleted from database by this method.
            </summary>
            <param name="strAppPath">Physical path to IIS application root.</param>
            <param name="strVirtualScriptPath">Virtual path to XML Script plugin file.</param>
            <exception cref="T:System.ArgumentException">Incorrect argument.</exception>
        </member>
        <member name="M:Franson.Web.Script.Plugin.PluginManager.GetPlugins(System.Int32,System.String)">
            <summary>
            Get an array of enabled script plugins that should be loaded for a specific page in an application instance.
            Typically used to insert script tags in a aspx page just being generated.
            </summary>
            <param name="iAppID"></param>
            <param name="strPageName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Script.Plugin.PluginManager.GetPlugins(System.Int32)">
            <summary>
            Returns all registered - enabled and disabled - script plugins for an application instance.
            Typically used for plugin management in an application instance.
            </summary>
            <param name="iAppID"></param>
            <param name="bEnabled"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Script.Plugin.PluginManager.GetApplications(System.Int32)">
            <summary>
            Returns all applications - enabled and disabled - for specified plugin.
            </summary>
            <param name="iPluginID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Script.Plugin.PluginManager.GetPlugins">
            <summary>
            Return all plugins registered in the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Script.Plugin.PluginManager.LoadPlugin(System.Int32)">
            <summary>
            Loads one script plugin using its database ID.
            </summary>
            <param name="iPluginID"></param>
            <returns></returns>
            <exception cref="!:NotFoundException"></exception>
        </member>
        <member name="M:Franson.Web.Script.Plugin.PluginManager.SetPluginStatus(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enable or disable a script plugin in a particular application instance.
            </summary>
            <param name="iAppID"></param>
            <param name="iPluginID"></param>
            <param name="bEnabled"></param>
        </member>
        <member name="M:Franson.Web.Script.Plugin.PluginManager.IncludeScriptPlugin(System.Int32,System.Web.HttpContext)">
            <summary>
            Includes specified script plugin to current page.
            </summary>
            <param name="plugin"></param>
            <param name="context"></param>
        </member>
        <member name="T:Franson.Web.Script.Plugin.ScriptFileBag">
            <summary>
            A script file resource
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptFileBag.Url">
            <summary>
            Absolute path to local file. Or absolute url.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptFileBag.IsLocalUrl">
            <summary>
            Returns true if <see cref="P:Franson.Web.Script.Plugin.ScriptFileBag.Url"/> is a local virtual path and not a http url.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptFileBag.Language">
            <summary>
            Optional language. E.g. "text/javascript"
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptFileBag.LoadOrder">
            <summary>
            Load order.
            </summary>
        </member>
        <member name="T:Franson.Web.Script.Plugin.ScriptPageBag">
            <summary>
            Script page
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Web.Script.Plugin.ScriptPageBag.#ctor(System.String,System.String)">
            <summary>
            Create bag.
            </summary>
            <param name="iID"></param>
            <param name="strApplicationBoType"></param>
            <param name="strPageName"></param>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPageBag.ApplicationBoType">
            <summary>
            BO type for application for which plugin should be loaded. E.g. "GpsGate.VehicleTracker.VehicleTrackerApplication"
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPageBag.PageName">
            <summary>
            Name of web page where plugin should be included. E.g. "Admin.aspx"
            </summary>
        </member>
        <member name="T:Franson.Web.Script.Plugin.ScriptPluginApplicationBag">
            <summary>
            Status for specific script plugin in one application instance.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Web.Script.Plugin.ScriptPluginApplicationBag.#ctor(Franson.Web.Script.Plugin.ScriptPluginBag,System.Int32,System.String,System.Boolean)">
            <summary>
            Create bag
            </summary>
            <param name="pluginBag"></param>
            <param name="iAppID"></param>
            <param name="strAppName"></param>
            <param name="bEnabled"></param>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginApplicationBag.ScriptPluginBag">
            <summary>
            Script plugin.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginApplicationBag.ApplicationID">
            <summary>
            ID of applicaiton instance.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginApplicationBag.ApplicationName">
            <summary>
            Application name.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginApplicationBag.Enabled">
            <summary>
            True if plugin is enabled in applicaiton instance.
            </summary>
        </member>
        <member name="T:Franson.Web.Script.Plugin.ScriptPluginBag">
            <summary>
            A script plugin.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Web.Script.Plugin.ScriptPluginBag.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Version,System.Int32,Franson.Web.Script.Plugin.ScriptPageBag[],Franson.Web.Script.Plugin.ScriptFileBag[],Franson.Web.Script.Plugin.WebServiceBag[])">
            <summary>
            Create bag.
            </summary>
            <param name="iID">Database ID of plugin</param>
            <param name="strName">Name</param>
            <param name="strCategory">Category</param>
            <param name="strDescription">Free text description</param>
            <param name="strVirtualFilePath">Virtual file path</param>
            <param name="ver">Plugin version</param>
            <param name="iLoadOrder">Load order. Low number loads first.</param>
            <param name="arrPages">Array of pages this plugin loads on, includes application type.</param>
            <param name="arrFiles">Array of files and URLs to be loaded in plugin.</param>
            <param name="arrServices">Array of services to be loaded in plugin.</param>
        </member>
        <member name="M:Franson.Web.Script.Plugin.ScriptPluginBag.SetID(System.Int32)">
            <summary>
            Used internally to set database ID after loaded from XML file.
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:Franson.Web.Script.Plugin.ScriptPluginBag.ToString">
            <summary>
            Returns script plugin name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.ID">
            <summary>
            Database ID.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.Name">
            <summary>
            Plugin name
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.Description">
            <summary>
            Free text description.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.VirtualFilePath">
            <summary>
            Virtual file path to plugin XML file. (file_path filed in database).
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.Version">
            <summary>
            Plugin version.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.LoadOrder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.Pages">
            <summary>
            Pages this plugin can be used for.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.Files">
            <summary>
            File resources in load order.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.Services">
            <summary>
            Service resources.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.ScriptPluginBag.ApplicationBoTypes">
            <summary>
            Returns string array of all Application BO Types this script plugin supports.
            </summary>
        </member>
        <member name="T:Franson.Web.Script.Plugin.WebServiceBag">
            <summary>
            A script file resource
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:Franson.Web.Script.Plugin.WebServiceBag.Url">
            <summary>
            Absolute path or URL to the webservice.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.WebServiceBag.DebugUrl">
            <summary>
            Same as <see cref="P:Franson.Web.Script.Plugin.WebServiceBag.Url"/>, but is used when registering the plugin in DEBUG mode.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.WebServiceBag.IsLocalUrl">
            <summary>
            Returns true if <see cref="P:Franson.Web.Script.Plugin.WebServiceBag.Url"/> is a local virtual path and not a http url.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.WebServiceBag.Namespace">
            <summary>
            Namespace.
            </summary>
        </member>
        <member name="P:Franson.Web.Script.Plugin.WebServiceBag.Method">
            <summary>
            Method.
            </summary>
        </member>
        <member name="T:Franson.Web.Script.Plugin.DAO.ScriptPluginReaderDAO">
            <summary>
            Handles reading of script plugin configuration from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginReaderDAO.GetPlugins(System.Int32,System.String)">
            <summary>
            Get an array of enabled script plugins that should be loaded for a specific page in an application instance.
            Typically used to insert script tags in a aspx page just being generated.
            </summary>
            <param name="iAppID"></param>
            <param name="strPageName"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginReaderDAO.GetPlugins(System.Int32)">
            <summary>
            Returns enabled and disabled script plugins for an application instance.
            Typically used for plugin management in an application instance.
            </summary>
            <param name="iAppID"></param>
            <param name="bEnabled"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginReaderDAO.GetApplications(System.Int32)">
            <summary>
            Returns all applications - enabled and disabled - for specified plugin.
            Response order by application instance name.
            </summary>
            <param name="iPluginID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginReaderDAO.GetPlugins">
            <summary>
            Returns all registered plugins in database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginReaderDAO.LoadPlugin(System.Int32)">
            <summary>
            Load script plugin by database ID
            </summary>
            <param name="iPluginID"></param>
            <returns></returns>
            <exception cref="T:Franson.DAO.NotFoundException"></exception>
        </member>
        <member name="T:Franson.Web.Script.Plugin.DAO.ScriptPluginWriterDAO">
            <summary>
            Handles writing of script plugin configuration to database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginWriterDAO.#ctor">
            <summary>
            Create writer
            </summary>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginWriterDAO.SetPluginStatus(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enable or disable a script plugin in a particular application instance.
            </summary>
            <param name="iAppID"></param>
            <param name="iPluginID"></param>
            <param name="bEnabled"></param>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginWriterDAO.FileToVirtualPath(System.String)">
            <summary>
            Converts file paths to virtual paths. Fixes bug in 1766 and earlier. Writes changes to database.
            </summary>
            <param name="strVirtualPath"></param>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginWriterDAO.MarkPluginsAsDeleted(System.String)">
            <summary>
            Marks all plugins in this path as deleted.
            </summary>
            <param name="strPath"></param>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginWriterDAO.RegisterPlugin(Franson.Web.Script.Plugin.ScriptPluginBag)">
            <summary>
            Inserts plugin to database if it doesn't exist. Or updates existing plugin if version numbers differ.
            Database update is made inside a transaction.
            </summary>
            <param name="pluginBag"></param>
        </member>
        <member name="M:Franson.Web.Script.Plugin.DAO.ScriptPluginWriterDAO.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Franson.Geo.Geocoding.Providers.CacheGeocoderProvider">
            <summary>
            A geocoder provider that searches the database cache for the requested positions.
            </summary>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.CacheGeocoderProvider.ReverseGeocode(System.Collections.Generic.List{Franson.Geo.Position})">
            <summary>
            Looks for the provided positions in the database cache and populates corresponding locations with found values.
            Does not return a location for a positions that was not found
            </summary>
            <param name="positions"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.CacheGeocoderProvider.FindNearestLocationWithinDistance(Franson.Geo.Position,System.Collections.Generic.List{Franson.Geo.Location},System.Double)">
            <summary>
            Finds the Location that is closest to a Position and also within a distance.
            </summary>
            <param name="position"></param>
            <param name="lstLocations">The locations to be searched among</param>
            <param name="dblDistanceMeters">The maximum allowed distance in meters from the Position</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.CacheGeocoderProvider.WriteToDatabaseCache(System.Collections.Generic.List{Franson.Geo.Location})">
            <summary>
            Writes the provided list of locations to the gecoder database cache and adds them to the in-memory cache.
            </summary>
            <param name="lstLocations"></param>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.CacheGeocoderProvider.SearchInMemoryCache(System.Collections.Generic.List{Franson.Geo.Position})">
            <summary>
            Fills an internal list of Locations found in the in-memory cache and returns the Positions not found.
            </summary>
            <param name="lstPositions">The positions to be found</param>
            <returns>The positions not found</returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.CacheGeocoderProvider.SearchDatabaseCache(System.Collections.Generic.List{Franson.Geo.Position})">
            <summary>
            Fills an internal list of Locations found in the database cache and returns the Positions not found.
            </summary>
            <param name="lstPositions">The positions to be found</param>
            <returns>List of positions not found in the database cache</returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.CacheGeocoderProvider.PositionToHash(Franson.Geo.Position)">
            <summary>
            Generates a 64-bit hash value based on the longitude and latitude values of the Position. 
            The hash is computed as follows: Each of the two double values are converted to a 32-bit int, truncating to three decimals 
            (which gives an accuracy of roughly 110 meters for a GPS coordinate at the Equator). The ints are then converted to long and the 
            longitude value is shifted 32 bits. Both values are OR:ed together to form the final 64-bit hash of the Position.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Geo.Geocoding.Providers.GoogleGeocoderProvider">
            <summary>
            Uses the Google reverse geocoder to provide geocoded locations
            </summary>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.GoogleGeocoderProvider.ReverseGeocode(System.Collections.Generic.List{Franson.Geo.Position})">
            <summary>
            Queries the Google reverse geocoder provider for reverse geocoding of the list of positions.
            </summary>
            <param name="lstPositions">List of positions to reverse geocode</param>
            <returns>Struct containing list of <see cref="T:Franson.Geo.Location"/>s together with a Google status code</returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.GoogleGeocoderProvider.FillLocationBuilder(Jayrock.Json.JsonObject,Franson.Geo.LocationBuilder)">
            <summary>
            Fills a LocationBuilder object recursively using the provided JsonObject representing a Google geocoding response
            </summary>
            <param name="jsonObj"></param>
            <param name="location"></param>
            <exception cref="T:Franson.Geo.Geocoding.GeocoderJsonSerializationException">There was an error when serializing JSON.</exception>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.GoogleGeocoderProvider.GetStatusCode(Jayrock.Json.JsonObject)">
            <summary>
            Gets the status code for a JSON object representing a Google geocoding response
            </summary>
            <param name="jsonObj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.GoogleGeocoderProvider.GetAccuracy(Jayrock.Json.JsonObject)">
            <summary>
            Gets the status code for a JSON object representing a Google geocoding response
            </summary>
            <param name="jsonObj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Geo.Geocoding.Providers.GoogleGeocoderProvider.HttpGetToJsonObject(System.String,System.String)">
            <summary>
            Sends a request to the Google geocoding service and returns the response in the form of a JSON object.
            To avoid hammering the Google server, a delay will be introduced when the response has a google geocoder 
            status of 620 (G_GEO_TOO_MANY_QUERIES), or when the response has HTTP 403 (Forbidden) status (WebException 
            is thrown in this case). The delay will be increased by 100 ms for each sequential non-successful 
            request, up to a maximum of 50 retries.
            </summary>
            <param name="url"></param>
            <param name="parameters"></param>
            <returns>The JSON object representing the response.</returns>
        </member>
        <member name="P:Franson.Geo.Geocoding.Providers.GoogleGeocoderProvider.GoogleAPIKey">
            <summary>
            The Google API key to be used for the requests
            </summary>
        </member>
        <member name="T:Franson.ApplicationContext">
            <summary>
            Object containing current Application context such as Session, Applicatino and Localization information.
            </summary>
        </member>
        <member name="M:Franson.ApplicationContext.#ctor(Franson.Directory.Session,Franson.Directory.Application,Franson.Localization.Locale)">
            <summary>
            Create a new Context.
            </summary>
            <param name="session">Session for the current loged in user.</param>
            <param name="application">Current Application</param>
            <param name="locale">Current Localization object</param>
        </member>
        <member name="M:Franson.ApplicationContext.Create(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Create a new Context object with the given Session- and aplpiation ID.
            Session is then created with AuthenticationManager.Authenticate(sessionID, applicationID) where Privileges is set up.
            Locale object is created from LocaleFactory(Session.User, Session.Applicatino);
            </summary>
            <param name="iSessionID">ID of session to create context from.</param>
            <param name="iApplicationID">ID of application to authenticat</param>
            <returns>Current context.</returns>
        </member>
        <member name="P:Franson.ApplicationContext.Application">
            <summary>
            Current Application for which User is loged on to.
            </summary>
        </member>
        <member name="P:Franson.ApplicationContext.Session">
            <summary>
            Current Session.
            </summary>
        </member>
        <member name="P:Franson.ApplicationContext.Locale">
            <summary>
            Object containing localization information such as langugae dictionary and measurement conversions.
            </summary>
        </member>
        <member name="T:Franson.DAO.MainDAOFactory">
            <summary>
            Factory for all DAO classes in Franson.Web namespace.
            </summary>
        </member>
        <member name="M:Franson.DAO.MainDAOFactory.GetDAOFactory">
            <summary>
            DAO Factory for Franson.Web.* namespace.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.DAO.MainDAOMSSQLFactory">
            <summary>
            MSSQL DAO factory for Franson.Web.* namespace.
            </summary>
        </member>
        <member name="T:Franson.DAO.MainDAOMySQLFactory">
            <summary>
            MySQL DAO factory for Franson.* namespace.
            </summary>
        </member>
        <member name="T:Franson.Scheduling.SchedulerManager">
            <summary>
            Maintains scheduler instances.
            Schedulers created through manager will monitor state and persist new tasks and parameters.
            </summary>
        </member>
        <member name="F:Franson.Scheduling.SchedulerManager.DEFAULT_SCHEDULER_NAME">
            <summary>
            Name of GpsGate default scheduler.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.SchedulerManager.GetDefaultScheduler">
            <summary>
            Get the scheduler named "GpsGateDefaultScheduler"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.SchedulerManager.GetScheduler(System.String,System.Boolean)">
            <summary>
            Get Scheduler identified by name.
            If not found a new will be created.
            </summary>
            <param name="strName">Name of the scheduler. E.g: ReportScheduler</param>
            <param name="bPersistState">True to persist all changes to the scheduler to database.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.SchedulerManager.ClearCache">
            <summary>
            Clear all caches.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.SchedulerManager.RefreshAll">
            <summary>
            Restart all running schedulers.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.SchedulerManager.Refresh(System.String)">
            <summary>
            Restarts the given scheduler.
            </summary>
            <param name="strName"></param>
        </member>
        <member name="T:Franson.Scheduling.SchedulerWriter">
            <summary>
            Scheduler is used to persist schedulers with tasks, trigger and parameters.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.SchedulerWriter.#ctor">
            <summary>
            Create a new SchedulerWriter.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.SchedulerWriter.LoadByName(System.String)">
            <summary>
            Load a scheduler to modify by name of scheduler.
            </summary>
            <param name="strName"></param>
        </member>
        <member name="M:Franson.Scheduling.SchedulerWriter.AddTask(Franson.Scheduling.ITaskDescription,Franson.Scheduling.IScheduleTrigger)">
            <summary>
            Adds a task to the scheduler and associate it with a trigger.
            Note. If task already added the task will be replaced with new one identified task by TaskID
            </summary>
            <param name="task"></param>
            <param name="trigger"></param>
        </member>
        <member name="M:Franson.Scheduling.SchedulerWriter.RemoveTask(Franson.Scheduling.ITaskDescription)">
            <summary>
            Removes a task. Identified by TaskID
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Franson.Scheduling.SchedulerWriter.UpdateTask(Franson.Scheduling.ITaskDescription,Franson.Scheduling.IScheduleTrigger)">
            <summary>
            Removes a task. Identified by TaskID
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Franson.Scheduling.SchedulerWriter.ToScheduler(System.Boolean)">
            <summary>
            Returns a <see cref="T:Franson.Scheduling.Scheduler"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Scheduling.SchedulerWriter.Update(Franson.Scheduling.ITaskDescription,Franson.Scheduling.IScheduleTrigger)">
            <summary>
            Maintains state changes wile the scheduler is running.
            Updates the task with new state.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Franson.Scheduling.SchedulerWriter.Remove(Franson.Scheduling.ITaskDescription)">
            <summary>
            Removes the task.
            </summary>
            <param name="task"></param>
        </member>
        <member name="P:Franson.Scheduling.SchedulerWriter.Name">
            <summary>
            Name of the scheduler.
            </summary>
        </member>
        <member name="P:Franson.Scheduling.SchedulerWriter.DAO">
            <summary>
            DataAccess object
            </summary>
        </member>
        <member name="T:Franson.Scheduling.Command.SchedulerCmdBuilder">
            <summary>
            Builds a _SchedulerCmd.
            Refresh scheduler.
            </summary>
        </member>
        <member name="M:Franson.Scheduling.Command.SchedulerCmdBuilder.#ctor(System.String)">
            <summary>
            Creates a new Scheduler command.
            </summary>
            <param name="strScheduler"></param>
        </member>
        <member name="T:Franson.MVP.IPresenter">
            <summary>
            Base markup interface for presenters.
            </summary>
        </member>
        <member name="T:Franson.MVP.IView">
            <summary>
            Base interface for Views
            </summary>
        </member>
        <member name="T:Franson.Web.SessionCookie">
            <summary>
            Encapsulate and parse the Franson Session HttpCookie
            Encryp/Decrypt the content.
            </summary>
        </member>
        <member name="M:Franson.Web.SessionCookie.#ctor(System.Web.HttpContext)">
            <summary>
            Create a new SessionCookie from the given HttpContext
            </summary>
        </member>
        <member name="M:Franson.Web.SessionCookie.Clear">
            <summary>
            Clears the cookie.
            Set Expired to Now -1 year)
            </summary>
        </member>
        <member name="M:Franson.Web.SessionCookie.Get(System.Web.HttpContext)">
            <summary>
            Create new HttpCookie from the given HttpContext
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Web.SessionCookie.SessionID">
            <summary>
            Get the Session ID
            </summary>
        </member>
        <member name="P:Franson.Web.SessionCookie.ApplicationID">
            <summary>
            Get and Set the ApplicationID.
            </summary>
        </member>
        <member name="M:Franson.Web.Url.UrlDecode(System.String,System.Boolean)">
            <summary>
            Urld decodes a string.
            </summary>
            <param name="strURL">string to decode</param>
            <param name="bIsBase64">Special used when urlencoding base64 string</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Url.UrlEncode(System.String)">
            <summary>
            URL encodes a string
            </summary>
            <param name="strURL"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Url.MapPath(System.String,System.Web.HttpContext)">
            <summary>
            Returns the physical file path that corresponds to the virtual.
            </summary>
            <param name="strVirtualPath"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Url.ResolveVirtualPath(System.String,System.Web.HttpContext)">
            <summary>
            Maps a file path to a absolute virtual path. Works both if application is installed in IIS root or in a virtual folder.
            </summary>
            <param name="strFilePath">File path to map to virtual path.</param>
            <param name="context">HTTP context</param>
            <returns>Resolved virtual path.</returns>
        </member>
        <member name="T:Franson.Web.Application.IWebApplication">
            <summary>
            Application representations derived from Franson.Directory.Application can implemement this interface to 
            add WEB specific functionality to the business object.
            </summary>
        </member>
        <member name="T:Franson.Web.Application.SettingsKeys">
            <summary>
            Contains Keys to receive settings used by Web Applications using <see cref="T:Franson.Directory.Settings"/>
            </summary>
        </member>
        <member name="F:Franson.Web.Application.SettingsKeys.DEFAULT_MAP">
            <summary>
            Name of default map to use for the site.
            </summary>
        </member>
        <member name="F:Franson.Web.Application.SettingsKeys.ENABLE_GOOGLE_MAPS">
            <summary>
            Key for setting that specifies if Google Maps should be enabled for application or not.
            </summary>
        </member>
        <member name="F:Franson.Web.Application.SettingsKeys.URL_LOGOUT">
            <summary>
            The key for logout URL.
            </summary>
        </member>
        <member name="F:Franson.Web.Application.SettingsKeys.SCRIPT_COMPRESSION">
            <summary>
            Use compressed javascript inclludes
            </summary>
        </member>
        <member name="F:Franson.Web.Application.SettingsKeys.GOOGLE_MAP_KEY">
            <summary>
            The Google API Key
            </summary>
        </member>
        <member name="F:Franson.Web.Application.SettingsKeys.THIRD_PARTY_MAP_TYPE">
            <summary>
            Map type. GMap VirtualEarth etc.
            
            This should be removed since maptypes should use Script plugin system.
            </summary>
        </member>
        <member name="T:Franson.Web.Application.WebApplicationContext">
            <summary>
            Object containing current Application context such as Session, Applicatino and Localization information.
            </summary>
        </member>
        <member name="M:Franson.Web.Application.WebApplicationContext.GetApplicationPath(System.Web.HttpContext,Franson.Web.Application.WebApplicationType)">
            <summary>
            Get the web application path.
            
            Fallback order:
            1: SiteSettings.GetValue("ServerHostnameMobile");
            2: SiteSettings.GetValue("ServerHostname");
            3: Request.Url.Host
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Application.WebApplicationContext.Create(System.Int32,System.Int32)">
            <summary>
            Create a new Context object.
            Session ID is resolved from FransonSessionID cookie found in HttpContext.Current.
            Application ID is resolved from FransonApplicationID cookie found in HttpContext.Current.
            Session is then created with AuthenticationManager.Authenticate(sessionID, applicationID) where Privileges is set up.
            Application is taken from the Session.Application propertie.
            Locale object is created from LocaleFactory(Session.User, Session.Applicatino);
            </summary>
            <returns>Current context.</returns>
        </member>
        <member name="M:Franson.Web.Application.WebApplicationContext.Create">
            <summary>
            Create a new Context object.
            Session ID is resolved from FransonSessionID cookie found in HttpContext.Current.
            Application ID is resolved from FransonApplicationID cookie found in HttpContext.Current.
            Session is then created with AuthenticationManager.Authenticate(sessionID, applicationID) where Privileges is set up.
            Application is taken from the Session.Application propertie.
            Locale object is created from LocaleFactory(Session.User, Session.Applicatino);
            </summary>
            <returns>Current context.</returns>
        </member>
        <member name="T:Franson.Web.DAO.WebDAOFactory">
            <summary>
            Factory for all DAO classes in Franson.Web namespace.
            </summary>
        </member>
        <member name="M:Franson.Web.DAO.WebDAOFactory.GetWorkspaceWriterDAO(System.Int32,System.Int32)">
            <summary>
            Abstract method to get WorkspaceWriter DAO
            </summary>
            <param name="iUserID">The user id of the workspace</param>
            <param name="iApplicationID">The application id of the workspace</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.DAO.WebDAOFactory.GetWorkspaceReaderDAO">
            <summary>
            Abstract method to get WorkspaceReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.DAO.WebDAOFactory.GetDAOFactory">
            <summary>
            DAO Factory for Franson.Web.* namespace.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Web.DAO.WebDAOMSSQLFactory">
            <summary>
            MSSQL DAO factory for Franson.Web.* namespace.
            </summary>
        </member>
        <member name="M:Franson.Web.DAO.WebDAOMSSQLFactory.GetWorkspaceWriterDAO(System.Int32,System.Int32)">
            <summary>
            MSSQL version of WorkspaceWriterDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.DAO.WebDAOMSSQLFactory.GetWorkspaceReaderDAO">
            <summary>
            MSSQL version of WorkspaceReaderDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Web.DAO.WebDAOMySQLFactory">
            <summary>
            MySQL DAO factory for Franson.Web.* namespace.
            </summary>
        </member>
        <member name="M:Franson.Web.DAO.WebDAOMySQLFactory.GetWorkspaceWriterDAO(System.Int32,System.Int32)">
            <summary>
            MySQL version of WorkspaceWriterDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.DAO.WebDAOMySQLFactory.GetWorkspaceReaderDAO">
            <summary>
            MySQL version of WorkspaceReaderDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="T:Franson.Web.UI.MasterPageBase">
            <summary>
            Base class for all ASP.NET MasterPages.
            </summary>
        </member>
        <member name="M:Franson.Web.UI.MasterPageBase.OnSessionException(System.Exception)">
            <summary>
            Called when Session is expired or no session id is found.
            
            Override this to logout the user or handle the error in other way.
            Set the return value to true to avoid exception to be thrown.
            </summary>
            <param name="ex">The exception instance.</param>
            <returns>bool if exception was handled. Set to false the exception will be thrown.</returns>
        </member>
        <member name="P:Franson.Web.UI.MasterPageBase.WebContext">
            <summary>
            Object containing the current application context such as Session, Locale and Application.
            
            Context is first retrieved from child Page.WebContext if page derives from PageBase. 
            If not then context is resolved here.
            </summary>
        </member>
        <member name="T:Franson.Web.UI.PageBase">
            <summary>
            Base class for all ASP.NET Pages.
            </summary>
        </member>
        <member name="M:Franson.Web.UI.PageBase.Page_Error(System.Object,System.EventArgs)">
            <summary>
            Logs unhandled exceptions.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Franson.Web.UI.PageBase.OnSessionException(System.Exception)">
            <summary>
            Called when Session is expired or no session id is found.
            
            Calls master page OnSessionException if page include a master.
            Set the return value to true to avoid exception to be thrown.
            </summary>
            <param name="ex"></param>
            <returns>bool if exception was handled. Set to false the exception will be thrown.</returns>
        </member>
        <member name="M:Franson.Web.UI.PageBase.OnUserControlRequestContext(Franson.Web.UI.UserControlBase,Franson.ApplicationContext@,System.String@)">
            <summary>
            Called when UserControlBase.Request the Pages WebContext object.
            Override and set context and init control here.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="P:Franson.Web.UI.PageBase.WebContext">
            <summary>
            Object containing the current application context such as Session, Locale and Application
            </summary>
        </member>
        <member name="T:Franson.Web.UI.Mobile.Page">
            <summary>
            Base bage for mobile applicartions.
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Mobile.Page.OnPreRender(System.EventArgs)">
            <summary>
            Override to always set Header context to "text/html" and charset to "".
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Franson.Web.UI.Workspace.Workspace">
            <summary>
            A workspace represents the state of a client view, such as visible modules and their location
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Franson.Web.UI.Workspace.Workspace.#ctor">
            <summary>
            Hidden. Use Workspace(int iID, string strName, string strState, bool bShared) instead.
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Workspace.Workspace.#ctor(System.Int32,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Creates a Workspace.
            </summary>
            <param name="iID">The id of the workspace.</param>
            <param name="strName">The name of the workspace.</param>
            <param name="strState">The state of the workspace. This is typically a JSON formatted string.</param>
            <param name="bShared">Specifies if this workspace is shared or not.</param>
        </member>
        <member name="P:Franson.Web.UI.Workspace.Workspace.ID">
            <summary>
            The id of the workspace.
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.Workspace.Name">
            <summary>
            The name of the workspace.
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.Workspace.State">
            <summary>
            The state of the workspace. This is usually a JSON formatted string.
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.Workspace.Shared">
            <summary>
            Specifies if the workspace is shared or not.
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.Workspace.OwnerID">
            <summary>
            Workspace owner.
            </summary>
        </member>
        <member name="T:Franson.Web.UI.Workspace.WorkspaceReader">
            <summary>
            Reads <see cref="T:Franson.Web.UI.Workspace.Workspace"/>s from the database using the provided user id and application id.
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Workspace.WorkspaceReader.#ctor">
            <summary>
            Creates a workspace reader
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Workspace.WorkspaceReader.GetByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Gets the workspaces corresponding to the provided user id and application id, as well as any workspaces marked as shared. 
            The returned list is sorted by (in order) name, user id and application id
            </summary>
            <param name="iUserID">The user ID of the workspace</param>
            <param name="iApplicationID">The application ID of the workspace</param>
            <returns>List of workspaces ordered by name, user id and application id</returns>
        </member>
        <member name="T:Franson.Web.UI.Workspace.WorkspaceResult">
            <summary>
            A container for a GetWorkspaces(...) operation result. Includes the resulting workspaces as well as the user id and application id.
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Workspace.WorkspaceResult.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{Franson.Web.UI.Workspace.Workspace})">
            <summary>
            Creates a container for a GetWorkspaces(...) operation. Includes the resulting workspaces as well as the user id and application id.
            </summary>
            <param name="iUserID"></param>
            <param name="iApplicaionID"></param>
            <param name="lstWorkspaces"></param>
        </member>
        <member name="P:Franson.Web.UI.Workspace.WorkspaceResult.UserID">
            <summary>
            The user id of this workspace result
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.WorkspaceResult.ApplicationID">
            <summary>
            The application id of this workspace result
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.WorkspaceResult.Workspaces">
            <summary>
            The workspaces of this workspace result
            </summary>
        </member>
        <member name="T:Franson.Web.UI.Workspace.WorkspaceWriter">
            <summary>
            Creates, updates and removes a <see cref="T:Franson.Web.UI.Workspace.Workspace"/>.
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Workspace.WorkspaceWriter.#ctor">
            <summary>
            Hidden. Use constructor WorkspaceWriter(int iUserID, int iApplicationID) instead.
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Workspace.WorkspaceWriter.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a workspace writer using the provided user id and application id.
            </summary>
            <param name="iUserID"></param>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:Franson.Web.UI.Workspace.WorkspaceWriter.Update">
            <summary>
            We don't need a bo_type for the workspace so override.
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.WorkspaceWriter.Name">
            <summary>
            The name of this workspace
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.WorkspaceWriter.State">
            <summary>
            The state of this workspace, usually a JSON formatted string.
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.WorkspaceWriter.Shared">
            <summary>
            Specifies if this workspace is shared or not.
            </summary>
        </member>
        <member name="P:Franson.Web.UI.Workspace.WorkspaceWriter.DAO">
            <summary>
            Types DAO object
            </summary>
        </member>
        <member name="T:Franson.Web.UI.Workspace.Security.WorkspaceAuthorize">
            <summary>
            Authorize management of workspaces.
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Workspace.Security.WorkspaceAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Checks that user have privileges for manageing Workspaces..
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Web.UI.Workspace.DAO.WorkspaceReaderDAOSQL">
            <summary>
            Abstract base class for WorkspaceReader DAOs
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Workspace.DAO.WorkspaceReaderDAOSQL.GetByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Gets the workspaces corresponding to the provided user id and application id, as well as any workspaces marked as shared. 
            The returned list is sorted by (in order) name, user id and application id
            </summary>
            <param name="iUserID">The user ID of the workspace</param>
            <param name="iApplicationID">The application ID of the workspace</param>
            <returns>List of workspaces ordered by name, user id and application id</returns>
        </member>
        <member name="T:Franson.Web.UI.Workspace.DAO.WorkspaceWriterDAOSQL">
            <summary>
            Abstract base class for WorkspaceWriter DAOs
            </summary>
        </member>
        <member name="M:Franson.Web.UI.Workspace.DAO.WorkspaceWriterDAOSQL.LoadByID(System.Int32)">
            <summary>
            Used when an existing workspace should be overwritten
            </summary>
            <param name="iID"></param>
        </member>
        <member name="T:Franson.Web.Map.IStaticMapBuilder">
            <summary>
            Interface defining a builder object for building static map URL.
            </summary>
        </member>
        <member name="M:Franson.Web.Map.IStaticMapBuilder.SetKey(System.String)">
            <summary>
            Set the licence key if any.
            </summary>
            <param name="strKey"></param>
        </member>
        <member name="M:Franson.Web.Map.IStaticMapBuilder.SetSize(System.Int32,System.Int32)">
            <summary>
            Set map size in pixels
            </summary>
            <param name="iWidth">Width in pixels</param>
            <param name="iHeight">Heights in pixels</param>
        </member>
        <member name="M:Franson.Web.Map.IStaticMapBuilder.SetCenter(Franson.Geo.Position)">
            <summary>
            Set the center of the map.
            </summary>
            <param name="pos">Center <see cref="T:Franson.Geo.Position"/></param>
        </member>
        <member name="M:Franson.Web.Map.IStaticMapBuilder.SetZoom(System.Int32)">
            <summary>
            Set the zoom level.
            Note. This differs between map provider.
            Use GetZoom(BoundgBox) to get the proper zoom level for the map type.
            </summary>
            <param name="iZoom"></param>
        </member>
        <member name="M:Franson.Web.Map.IStaticMapBuilder.GetZoom(Franson.Geo.BoundingBox,System.Int32,System.Int32)">
            <summary>
            Calculates the zoom level from a <see cref="T:Franson.Geo.BoundingBox"/>
            </summary>
            <param name="bb"></param>
        </member>
        <member name="M:Franson.Web.Map.IStaticMapBuilder.AddMarker(Franson.Geo.Position,System.String,System.String)">
            <summary>
            Add marker.
            </summary>
            <param name="pos">Marker <see cref="T:Franson.Geo.Position"/></param>
            <param name="strLabel">Marker label</param>
            <param name="strHexColor">Marker color in hex. E.g: 00FF00 (green)</param>
        </member>
        <member name="M:Franson.Web.Map.IStaticMapBuilder.ToUrl">
            <summary>
            Returns the map URL.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Web.Map.IStaticMapBuilder.Name">
            <summary>
            Name of provider.
            </summary>
        </member>
        <member name="T:Franson.Web.Map.StaticMapBuilder">
            <summary>
            Base class for static map builders.
            </summary>
        </member>
        <member name="M:Franson.Web.Map.StaticMapBuilder.SetKey(System.String)">
            <summary>
            Set the licence key if any.
            </summary>
            <param name="strKey"></param>
        </member>
        <member name="M:Franson.Web.Map.StaticMapBuilder.AddMarker(Franson.Geo.Position,System.String,System.String)">
            <summary>
            Adds a marker
            </summary>
            <param name="pos"></param>
            <param name="strLabel"></param>
            <param name="strHexColor"></param>
        </member>
        <member name="M:Franson.Web.Map.StaticMapBuilder.GetZoom(Franson.Geo.BoundingBox,System.Int32,System.Int32)">
            <summary>
            Calculates the zoom level from a <see cref="T:Franson.Geo.BoundingBox"/>
            </summary>
            <param name="bb"></param>
        </member>
        <member name="M:Franson.Web.Map.StaticMapBuilder.SetSize(System.Int32,System.Int32)">
            <summary>
            Set map size in pixels
            </summary>
            <param name="iWidth">Width in pixels</param>
            <param name="iHeight">Heights in pixels</param>
        </member>
        <member name="M:Franson.Web.Map.StaticMapBuilder.SetCenter(Franson.Geo.Position)">
            <summary>
            Set the center of the map.
            </summary>
            <param name="pos">Center <see cref="T:Franson.Geo.Position"/></param>
        </member>
        <member name="M:Franson.Web.Map.StaticMapBuilder.SetZoom(System.Int32)">
            <summary>
            Set the zoom level.
            </summary>
            <param name="iZoom"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Web.Map.StaticMapBuilder.AddParameter(System.String,System.String)" -->
        <member name="M:Franson.Web.Map.StaticMapBuilder.ToUrl">
            <summary>
            Get the map URL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Map.StaticMapBuilder.Load(Franson.Reflection.LoadableType)">
            <summary>
            NOP
            </summary>
            <param name="loadableType"></param>
        </member>
        <member name="M:Franson.Web.Map.StaticMapBuilder.Install(Franson.Reflection.LoadableType)">
            <summary>
            NOP
            </summary>
            <param name="loadableType"></param>
        </member>
        <member name="M:Franson.Web.Map.StaticMapBuilder.Upgrade(Franson.Reflection.LoadableType)">
            <summary>
            NOP
            </summary>
            <param name="loadableType"></param>
        </member>
        <member name="P:Franson.Web.Map.StaticMapBuilder.BaseURL">
            <summary>
            Get the map base url without parameters.
            E.g: "http://maps.google.com/maps/api/staticmap"
            </summary>
        </member>
        <member name="P:Franson.Web.Map.StaticMapBuilder.SizeParamName">
            <summary>
            Name of size parameter.
            </summary>
        </member>
        <member name="P:Franson.Web.Map.StaticMapBuilder.CenterParamName">
            <summary>
            Name of center parameter.
            </summary>
        </member>
        <member name="P:Franson.Web.Map.StaticMapBuilder.ZoomParamName">
            <summary>
            Name of zoom level parameter,
            </summary>
        </member>
        <member name="P:Franson.Web.Map.StaticMapBuilder.Name">
            <summary>
            Name of map provider.
            </summary>
        </member>
        <member name="P:Franson.Web.Map.StaticMapBuilder.Dependencies">
            <summary>
            NOP
            </summary>
        </member>
        <member name="T:Franson.Web.Map.Google.GoogleStaticMapBuilder">
            <summary>
            Google static map builder.
            </summary>
        </member>
        <member name="M:Franson.Web.Map.Google.GoogleStaticMapBuilder.#ctor">
            <summary>
            Creates a new Goosle static map builder.
            </summary>
            <param name="strAPIKey"></param>
        </member>
        <member name="M:Franson.Web.Map.Google.GoogleStaticMapBuilder.SetKey(System.String)">
            <summary>
            Sets key=KEY param
            </summary>
            <param name="strKey"></param>
        </member>
        <member name="M:Franson.Web.Map.Google.GoogleStaticMapBuilder.AddMarker(Franson.Geo.Position,System.String,System.String)">
            <summary>
            Adds a marker to the given position.
            </summary>
            <param name="pos"></param>
            <param name="strHexColor"></param>
            <param name="strLabel"></param>
        </member>
        <member name="M:Franson.Web.Map.Google.GoogleStaticMapBuilder.GetZoom(Franson.Geo.BoundingBox,System.Int32,System.Int32)">
            <summary>
            Calculates the zoom level from a <see cref="T:Franson.Geo.BoundingBox"/>
            </summary>
            <param name="bb"></param>
        </member>
        <member name="M:Franson.Web.Map.Google.GoogleStaticMapBuilder.ToUrl">
            <summary>
            Get the static map URL
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Web.Map.Google.GoogleStaticMapBuilder.Name">
            <summary>
            Name of map provider
            </summary>
        </member>
        <member name="P:Franson.Web.Map.Google.GoogleStaticMapBuilder.BaseURL">
            <summary>
            return "http://maps.google.com/maps/api/staticmap"
            </summary>
        </member>
        <member name="P:Franson.Web.Map.Google.GoogleStaticMapBuilder.SizeParamName">
            <summary>
            return "size"
            </summary>
        </member>
        <member name="P:Franson.Web.Map.Google.GoogleStaticMapBuilder.CenterParamName">
            <summary>
            return "center"
            </summary>
        </member>
        <member name="P:Franson.Web.Map.Google.GoogleStaticMapBuilder.ZoomParamName">
            <summary>
            return "zoom"
            </summary>
        </member>
        <member name="T:Franson.Web.Services.ServiceFacadeBase">
            <summary>
            Base class for WebService Facade.
            
            Usual a abstract Service Facade implements this class eg GpsGate.Directory.Sefvice.DirectoryFacade
            Then a Concrete Protocol specific Facade Implements the service specific abstract facade 
            eg: GpsGate.Directory.Service.Json.JsonDirectoryFacade to provide Protocol specific functionallity for providing session ID etc.
            </summary>
        </member>
        <member name="M:Franson.Web.Services.ServiceFacadeBase.GetSession(System.Int32)">
            <summary>
            Authenticate Current session with ID from abstract protocol specific implementation of GetSessionID.
            
            This routine will setup Session.ApplicationPrivileges and Set Session.Application.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Services.ServiceFacadeBase.GetContext(System.Int32)">
            <summary>
            Get Web Context object containg application, session and localization information.
            </summary>
            <param name="iAppliationID"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Web.Services.ServiceFacadeBase.GetSessionID">
            <summary>
            Provide the session ID.
            Soap Services get session ID from WebMethod argument.
            Json Service get session ID from HttpCookie
            </summary>
        </member>
        <member name="T:Franson.Web.Services.Security.GpsGateComValidator">
            <summary>
            Validator to support sites in specified by the <see cref="T:Franson.Directory.SiteSettings"/> ALLOWED_XSS_SITES.
            If no settings found allow the default sites:
            http://gpsgate.com
            http://rackforce.gpsgate.com
            http://stageout.gpsgate.com
            </summary>
        </member>
        <member name="T:Franson.Web.Services.Security.Validator">
            <summary>
            Generic base class for validation of web service requests.
            </summary>
        </member>
        <member name="M:Franson.Web.Services.Security.Validator.Validate(System.Web.HttpRequest,System.Collections.IDictionary)">
            <summary>
            Override this method, and return true if the request is valid.
            </summary>
            <param name="httpReq"></param>
            <param name="requestParameters"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Web.Services.Security.Validator.ValidatingParams">
            <summary>
            Parameters to validator, can for example be set by constructor.
            </summary>
        </member>
        <member name="M:Franson.Web.Services.Security.GpsGateComValidator.Validate(System.Web.HttpRequest,System.Collections.IDictionary)">
            <summary>
            Allow referrer siotes found in AllowedSites.
            
            If Request.ReferrerURI == null. Deny the request.
            </summary>
            <param name="httpReq"></param>
            <param name="requestParameters"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Web.Services.Security.GpsGateComValidator.AllowedSites">
            <summary>
            Returns a list of allowed sites.
            </summary>
        </member>
        <member name="T:Franson.Web.Services.Security.GroupReferrerLogValidator">
            <summary>
            Validates web service requests from public web services, and logs the referrer.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:Franson.Web.Services.Security.PublicGroupValidator">
            <summary>
            Validates public web service requests to public groups.
            </summary>
        </member>
        <member name="M:Franson.Web.Services.Security.GroupReferrerValidator.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="strGroupName">Name of the group to check for referrer access.</param>
            <param name="iAppId">Application id</param>
        </member>
        <member name="M:Franson.Web.Services.Security.GroupReferrerValidator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="strGroupName">Name of the group to check for referrer access.</param>
            <param name="iAppId">Application id</param>
        </member>
        <member name="M:Franson.Web.Services.Security.GroupReferrerValidator.Validate(System.Web.HttpRequest,System.Collections.IDictionary)">
            <summary>
            Performs the validation. 
            
            If referrer host is same as requester host I.e the request is from same site as the requesting page (no XXS) then always allow.
            </summary>
            <param name="httpReq"></param>
            <param name="requestParameters"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Web.Services.Security.GroupReferrerValidator.Group">
            <summary>
            Set by deriving validators to avoid double loading of group data.
            This validator check if this is set, if not it loads a new one.
            </summary>
        </member>
        <member name="M:Franson.Web.Services.Security.PublicGroupValidator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create validator.
            </summary>
            <param name="strGroupName"></param>
            <param name="iAppId"></param>
        </member>
        <member name="M:Franson.Web.Services.Security.PublicGroupValidator.Validate(System.Web.HttpRequest,System.Collections.IDictionary)">
            <summary>
            Validates the request to a public group.
            </summary>
            <param name="httpReq"></param>
            <param name="requestParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Services.Security.GroupReferrerLogValidator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create validator
            </summary>
            <param name="strGroupName"></param>
            <param name="iAppId"></param>
        </member>
        <member name="M:Franson.Web.Services.Security.GroupReferrerLogValidator.Validate(System.Web.HttpRequest,System.Collections.IDictionary)">
            <summary>
            Validates a public web service requests, and logs the referrer to the database.
            </summary>
            <param name="httpReq">HTTP request to validate</param>
            <param name="requestParameters">Paramaters containing group and app ID.</param>
            <returns>True if request is valid</returns>
        </member>
        <member name="T:Franson.Web.Services.Security.ServiceSecurityAttribute">
            <summary>
            Attribute to set on WebService methods used to validate the request and check access.
            
            The request will check the requested web method for this attribute. If exist
            the <see cref="T:Franson.Web.Services.Security.ServiceSecurityAttribute"/> will instantiate the <see cref="T:Franson.Web.Services.Security.Validator"/> specified by the
            ValidatorType property with the constructor parameters from the ValidatorParameters property and call the <see cref="T:Franson.Web.Services.Security.Validator"/>'s Validate method.
            
            Example to secure a web method. This will create a <see cref="T:Franson.Web.Services.Security.Validator"/> of type <see cref="T:Franson.Web.Services.Security.SessionGroupValidator"/> with the constructor parameters
            which takes two string in constructor (the web methods parameter names.
            
            <example>
            <code>
            [ServiceSecurity(ValidatorType = typeof(SessionGroupValidator),
               ValidatorParameters = new object[] { "appId", "groupName" })]
            	public GateUserSearch GetUsersInGroup(int appId, string groupName, int start, int stop)
            {
            	return DirectoryBase.GetUsersInGroup(appId, groupName, start, stop, true);
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Franson.Web.Services.Security.ServiceSecurityAttribute.#ctor">
            <summary>
            Public Constructor
            </summary>
        </member>
        <member name="M:Franson.Web.Services.Security.ServiceSecurityAttribute.Clone">
            <summary>
            Clone this instance. Needed by <see cref="!:JsonRpcDispatcher"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Services.Security.ServiceSecurityAttribute.Validate(System.Web.HttpRequest,System.Collections.IDictionary)">
            <summary>
            Instantiate the validator and call the Validate method.
            </summary>
            <param name="httpRequest">The <see cref="T:System.Web.HttpRequest"/></param>
            <param name="validatingParams">Dictionary of parameters the <see cref="T:Franson.Web.Services.Security.Validator"/> need for validating.</param>
            <returns>tru if the validator evaluted the request as allowed.</returns>
        </member>
        <member name="P:Franson.Web.Services.Security.ServiceSecurityAttribute.ValidatorType">
            <summary>
            Type of <see cref="T:Franson.Web.Services.Security.Validator"/> to instantiate.
            </summary>
        </member>
        <member name="P:Franson.Web.Services.Security.ServiceSecurityAttribute.ValidatorParameters">
            <summary>
            The <see cref="T:Franson.Web.Services.Security.Validator"/> to be instantiated constructor parameters.
            </summary>
        </member>
        <member name="T:Franson.Web.Services.Soap.SessionIDHeader">
            <summary>
            Summary description for TokenHeader
            </summary>
        </member>
        <member name="T:Franson.Web.Services.Soap.AuthExtension">
            <summary>
            Summary description for AuthExtension
            </summary>
        </member>
        <member name="T:Franson.Web.Services.Soap.XmlResponse">
            <summary>
            Soap Response representation.
            </summary>
        </member>
        <member name="M:Franson.Web.Services.Soap.XmlResponse.#ctor(System.Object,System.String)">
            <summary>
            Create a new Soap Response
            </summary>
            <param name="o">Object to return in the response</param>
            <param name="strRootName">Name of the root node. Set to null to use name specified by Serialize attribute</param>
        </member>
        <member name="M:Franson.Web.Services.Soap.XmlResponse.Create(System.Object)">
            <summary>
            Creates a new Soap Response from object o
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Web.Services.Soap.XmlResponse.Create(System.Object,System.String)">
            <summary>
            Create a new Soap response and override serilization attribute node name.
            
            If object not taged with serialize attribute the response will be wrapped in Franson.Servialization.SerilizationWrapper
            </summary>
            <param name="o"></param>
            <param name="strRootName"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Web.Services.Soap.XmlResponse.ResponseXml">
            <summary>
            Get the serialized XML response
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Franson.Validation.CustomValidationAttribute" -->
        <member name="T:Franson.Validation.ValidationAttribute">
            <summary>
            Base class for validation attributes
            </summary>
        </member>
        <member name="M:Franson.Validation.ValidationAttribute.#ctor(System.String,Franson.Validation.Severity)">
            <summary>
            Default ValidationAtrtibute constructor.
            </summary>
            <param name="strKey"></param>
            <param name="severity"></param>
        </member>
        <member name="M:Franson.Validation.ValidationAttribute.Check(Franson.Validation.IValidatable,System.Reflection.MemberInfo)">
            <summary>
            Implemented by the concrete attributes. 
            </summary>
            <param name="validatable"></param>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Validation.ValidationAttribute.Key">
            <summary>
            Key representing the error. Used for translation.
            </summary>
        </member>
        <member name="P:Franson.Validation.ValidationAttribute.Severity">
            <summary>
            The severity of the error.
            Warn or Error
            </summary>
        </member>
        <member name="M:Franson.Validation.CustomValidationAttribute.#ctor(System.String)">
            <summary>
            Creates a new CustomValidationAttribute.
            </summary>
            <param name="strKey"></param>
            <param name="severity"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Validation.CustomValidationAttribute.Check(Franson.Validation.IValidatable,System.Reflection.MemberInfo)" -->
        <member name="T:Franson.Validation.IValidatable">
            <summary>
            Represents a validatable business object.
            Only a markup interface.
            
            Usage:
            <code>
            public class MyObject : IValidatable
            {
            	private string m_strName;
            	
                [PropertyValidation(
                 "INVALID_NAME", 
                 Severity.Error, 
            	 NotNull=true, 
            	 MinLength=3,
            	 MaxLength=16
                )]
            	public string Name
            	{
            		get { return m_strName; }
            		set { m_strName = value; }
            	}
            }
            </code>
            </summary>
        </member>
        <member name="T:Franson.Validation.PropertyValidationAttribute">
            <summary>
            Specifies validation criterias for a valid property.
            </summary>
        </member>
        <member name="M:Franson.Validation.PropertyValidationAttribute.#ctor(System.String,Franson.Validation.Severity)">
            <summary>
            Creates a new PropertyValidationAttribute.
            </summary>
            <param name="strKey">Error key.</param>
            <param name="severity">Severity of the error</param>
        </member>
        <member name="M:Franson.Validation.PropertyValidationAttribute.Check(Franson.Validation.IValidatable,System.Reflection.MemberInfo)">
            <summary>
            Check the property.
            </summary>
            <param name="validatable"></param>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Validation.PropertyValidationAttribute.NotNull">
            <summary>
            Property can not be null.
            </summary>
        </member>
        <member name="P:Franson.Validation.PropertyValidationAttribute.MaxLength">
            <summary>
            Max length of the property.
            Applies to string, arrays and collections. (IEnumerable)
            </summary>
        </member>
        <member name="P:Franson.Validation.PropertyValidationAttribute.MinLength">
            <summary>
            Min length of the property.
            Applies to string, arrays and collections. (IEnumerable)
            </summary>
        </member>
        <member name="T:Franson.Validation.Severity">
            <summary>
            Severity of the error.
            </summary>
        </member>
        <member name="T:Franson.Validation.ValidationError">
            <summary>
            Error representation used in validation.
            </summary>
        </member>
        <member name="M:Franson.Validation.ValidationError.#ctor(System.String,Franson.Validation.Severity,System.Collections.Generic.IEnumerable{Franson.Text.ITemplateResolver})">
            <summary>
            Creates a new error with a given Message and Severity.
            </summary>
            <param name="strMessage"></param>
            <param name="severity"></param>
            <param name="resolvableArgs">Arguments used to resolve the error message.</param>
        </member>
        <member name="M:Franson.Validation.ValidationError.#ctor(System.String,Franson.Validation.Severity)">
            <summary>
            Creates a new error with a given Message and Severity.
            </summary>
            <param name="strMessage"></param>
            <param name="severity"></param>
        </member>
        <member name="M:Franson.Validation.ValidationError.Equals(System.Object)">
            <summary>
            Equals when Message and Severity are equals.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Validation.ValidationError.GetHashCode">
            <summary>
            Hash code based on Message and Severity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Validation.ValidationError.ToString(Franson.Localization.Language,System.String)">
            <summary>
            Get a localized error message
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Validation.ValidationError.Message">
            <summary>
            Get Error message
            </summary>
        </member>
        <member name="P:Franson.Validation.ValidationError.Severity">
            <summary>
            Get the Severity of the error.
            </summary>
        </member>
        <member name="P:Franson.Validation.ValidationError.ResolvableArguments">
            <summary>
            Arguments needed for resolve the error message.
            </summary>
        </member>
        <member name="T:Franson.Validation.Validator">
            <summary>
            Validator.
            Validates an object implementing <see cref="T:Franson.Validation.IValidatable"/>.
            Validator will scan for <see cref="!:ValidationAttributes"/> and call the Check method on each attribute to collect a list
            of <see cref="T:Franson.Validation.ValidationError">ValidationErrors</see> to be returned.
            </summary>
        </member>
        <member name="M:Franson.Validation.Validator.Validate(Franson.Validation.IValidatable,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates the validators defined in by the list of keys on the validatable object. 
            </summary>
            <param name="validatable">Object to validate</param>
            <param name="Keys">List of keys to validate</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Validation.Validator.Validate(Franson.Validation.IValidatable)">
            <summary>
            Validates all validators on the validatable object.
            </summary>
            <param name="validatable">Object to validate</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Validation.Validator.m_Validate(Franson.Validation.IValidatable,System.String)">
            <summary>
            Validate the given validator on the validatable object.
            </summary>
            <param name="validatable"></param>
            <param name="strKey"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Validation.Validator.GetAttributeMembers(Franson.Validation.IValidatable)">
            <summary>
            Cache for validatable attributes.
            </summary>
            <param name="validatable"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Localization.Converter">
            <summary>
            Abstract base class for Converters.
            </summary>
        </member>
        <member name="T:Franson.Localization.IConverter">
            <summary>
            Defines the structory of a converter.
            </summary>
        </member>
        <member name="M:Franson.Localization.IConverter.Convert(System.Double)">
            <summary>
            Convert input and return an output.
            </summary>
            <param name="dblValue">Input value</param>
            <returns>Return new converted double value.</returns>
        </member>
        <member name="M:Franson.Localization.IConverter.GetInverse">
            <summary>
            Get the inverse converter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.Converter.#ctor(System.String)">
            <summary>
            Create a new converter.
            </summary>
            <param name="strType"></param>
        </member>
        <member name="M:Franson.Localization.Converter.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the converter with arguments from read e.g from converter element in .measure file.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:Franson.Localization.Converter.Convert(System.Double)">
            <summary>
            Abstract Convert.
            </summary>
            <param name="dblValue"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.Converter.GetInverse">
            <summary>
            Get the inverted converter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.Converter.TypeName">
            <summary>
            Get the name of the convertor type.
            </summary>
        </member>
        <member name="T:Franson.Localization.ILocaleResource">
            <summary>
            Interface that defines a localized resource.
            E.g <see cref="T:Franson.Localization.Language"/> or <see cref="!:MeasureTable"/>
            </summary>
        </member>
        <member name="P:Franson.Localization.ILocaleResource.EnableCache">
            <summary>
            Return if object should be cached by <see cref="!:LocaleManager"/>
            </summary>
        </member>
        <member name="P:Franson.Localization.ILocaleResource.Name">
            <summary>
            Unique name. 
            This name is present in GUI and must be unique. 
            I.E Several Language files cannot have same name.
            </summary>
        </member>
        <member name="T:Franson.Localization.ILocaleResourceFile`1">
            <summary>
            Interface defining the file representation object of a localized resource file. 
            E.g 
            LanguageFile represents *.lang files and can parse e.g. Englis.lang files.
            MeasureTable represents *.measure files and can parse e.g. Metric.measure.
            </summary>
            <typeparam name="TResource">The output business object. E.g LanguageFile define Language.</typeparam>
        </member>
        <member name="M:Franson.Localization.ILocaleResourceFile`1.LoadResource(System.String)">
            <summary>
            Loading the business Resource object.
            </summary>
            <param name="strFilePath">Absolute path to the resource files.</param>
            <returns></returns>
        </member>
        <member name="T:Franson.Localization.Language">
            <summary>
            Language file. Containing Locale language Phrase book.
            </summary>
        </member>
        <member name="M:Franson.Localization.Language.Resolve(System.String,System.Collections.Generic.IEnumerable{Franson.Text.ITemplateResolver},System.String)">
            <summary>
            Resolve the phrase and tries to parse values from resolvables.
            Language phrases is declared in format [TypeName,Property] e.g [Franson.Directory.User,Name]
            </summary>
            <param name="strPhrase"></param>
            <param name="resolvables"></param>
            <param name="strModuleName">Name of the module to use for translating the parsed template variable. Set to null to skip translation of the resolved value.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.Language.#ctor">
            <summary>
            Create a new Empty Language. Containing  no Phrases.
            </summary>
        </member>
        <member name="M:Franson.Localization.Language.#ctor(System.Collections.Generic.Dictionary{System.String,Franson.Localization.Language.Module},System.String)">
            <summary>
            Create a new Empty Language initialized with modules and name.
            </summary>
            <param name="Modules">Modules in language.</param>
            <param name="strName">Name of language.</param>
        </member>
        <member name="M:Franson.Localization.Language.ToString">
            <summary>
            Return Name of language.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.Language.Name">
            <summary>
            Name of langufile.
            This i specified by lng xml attribute in top of .lang file and will be displayed in GUI.
            </summary>
        </member>
        <member name="P:Franson.Localization.Language.EnableCache">
            <summary>
            Specifies if the file should be in memmory cached.
            This is specified by xml attribute enablecache in language file.
            </summary>
        </member>
        <member name="P:Franson.Localization.Language.Item(System.String)">
            <summary>
            Module e.g. Units, VehicleTracker
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Localization.Language.Phrases">
            <summary>
            Internal dictionary like class representing a Phrases. A Phrase is a translation key mapped to a translated phrase. 
            </summary>
        </member>
        <member name="P:Franson.Localization.Language.Phrases.Item(System.String)">
            <summary>
            Get translated Phrase by key. If match is found for key in lang file the key itself is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.Language.Phrases.PhraseDictionary">
            <summary>
            Get the underlying phrase dictionary.
            </summary>
        </member>
        <member name="T:Franson.Localization.Language.Module">
            <summary>
            Language.Module represents a Set of Phrases mapped to a module. E.g VehicleTracker phrases is grouped in VehicleTracker module.
            </summary>
        </member>
        <member name="M:Franson.Localization.Language.Module.#ctor">
            <summary>
            Create a new Empty named Module.
            </summary>
        </member>
        <member name="M:Franson.Localization.Language.Module.#ctor(System.String)">
            <summary>
            Create a new named Module.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Franson.Localization.Language.Module.Name">
            <summary>
            Name of module. 
            Serializable
            </summary>
        </member>
        <member name="P:Franson.Localization.Language.Module.Server">
            <summary>
            Phrases dictionary for server side translations. 
            Serializable
            </summary>
        </member>
        <member name="P:Franson.Localization.Language.Module.Client">
            <summary>
            Phrases dictionary for client side translations.
            Serializable
            </summary>
        </member>
        <member name="T:Franson.Localization.LanguageManager">
            <summary>
            Manage Users, Applications and Site Language.
            
            Scans and initialize language objects and manage caching.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Franson.Localization.LocaleManager`2" -->
        <member name="F:Franson.Localization.LocaleManager`2.m_rwLock">
            <summary>
            Synchronization lock object.
            </summary>
        </member>
        <member name="F:Franson.Localization.LocaleManager`2.m_nlog">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="F:Franson.Localization.LocaleManager`2.m_LocaleResourceCache">
            <summary>
            Caches instances of ILocaleResources.
            
            We dont want to cache resource for each user / applicatin or site. Consumes to much memory.
            Instead we cache unique resources and the mappings for which resource each user require.
            </summary>
        </member>
        <member name="F:Franson.Localization.LocaleManager`2.m_ResourceCodeCache">
            <summary>
            Cache Resource name for each user, applicatino or site. This key is used for looking up the actuall instancer in the 
            m_LocaleResourceCache.
            </summary>
        </member>
        <member name="F:Franson.Localization.LocaleManager`2.m_strResourceDirectoryPath">
            <summary>
            Path to the resource directory.
            </summary>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.#ctor(System.String)">
            <summary>
            Create new LocalManager.
            </summary>
            <param name="strResourceDirectoryPath">Physical path to dorectory where resource failes exists.</param>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.GetUserResource(Franson.Directory.User,Franson.Directory.Application)">
            <summary>
            Get Locale resource for an User in an Application
            </summary>
            <param name="user">User to get locale for.</param>
            <param name="application">Application for which context the user is in.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.GetApplicationResource(Franson.Directory.Application)">
            <summary>
            Get Locale resource for an Application
            </summary>
            <param name="application">Application for which context the user is in.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.GetSiteResource">
            <summary>
            Get server installation default Locale resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.SetUserResource(`0,Franson.Directory.User)">
            <summary>
            Set Locale resource for an User.
            </summary>
            <param name="resource">Resource to set.</param>
            <param name="user">User for which Locale resource should be stored.</param>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.SetApplicationResource(`0,Franson.Directory.Application)">
            <summary>
            Set Locale resource for an Application.
            </summary>
            <param name="resource">Resource to set.</param>
            <param name="application">Application for which Locale resource should be set.</param>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.SetSiteResource(`0)">
            <summary>
            Set Default site Resource.
            </summary>
            <param name="resource">Resource to set.</param>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.CreateFallbackResource">
            <summary>
            Fallback resource used when default resouce not found.
            E.g Invalid Resource path or missing resource files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.GetResources">
            <summary>
            Get all resources.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.GetResource(System.String)">
            <summary>
            Rescans the Resource. Using TResourceFile to Load TResource.
            </summary>
            <param name="strResourceName">Name of the resource. An unique identifier of resource.</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.RescanResources">
            <summary>
            Reload all TResourceFile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.ClearResourceCache">
            <summary>
            Clears resource cace.
            </summary>
        </member>
        <member name="M:Franson.Localization.LocaleManager`2.ClearResourceCodeCache">
            <summary>
            Clears the ResourceCodeCache.
            </summary>
        </member>
        <member name="P:Franson.Localization.LocaleManager`2.ResourcePath">
            <summary>
            Gret the path where resources are located
            </summary>
        </member>
        <member name="P:Franson.Localization.LocaleManager`2.FileSearchString">
            <summary>
            Search string to identified the ResourceFiles
            E.g. *.lang
            </summary>
        </member>
        <member name="P:Franson.Localization.LocaleManager`2.DefaultResourceName">
            <summary>
            Set the name of the default resource to fallback if no settings found.
            </summary>
        </member>
        <member name="P:Franson.Localization.LocaleManager`2.UserResourceSettingsKey">
            <summary>
            Return the setting key used to get user resource setting.
            
            E.g: UserSettings.SettingsKeys.USER_LANG
            </summary>
        </member>
        <member name="P:Franson.Localization.LocaleManager`2.ApplicationResourceSettingKey">
            <summary>
            Return the setting key used to get user resource setting.
            
            E.g: ApplicationSettings.SettingsKeys.APPLICATION_LANGUAGE
            </summary>
        </member>
        <member name="P:Franson.Localization.LocaleManager`2.SiteResourceSettingKey">
            <summary>
            Return the setting key used to get user resource setting.
            
            E.g: SiteSettings.SettingsKeys.SITE_LANGUAGE
            </summary>
        </member>
        <member name="P:Franson.Localization.LocaleManager`2.ResourceCache">
            <summary>
            Get the cache for the resource of Type TResource.
            </summary>
        </member>
        <member name="P:Franson.Localization.LocaleManager`2.ResourceCodeCache">
            <summary>
            Get cache where a key e.g user hash are mapped to resource unique names.
            use the Unique bname to look up the actuall resource instance in ResourceCache.
            </summary>
        </member>
        <member name="M:Franson.Localization.LanguageManager.#ctor(System.String)">
            <summary>
            Creater a new Locale Manager
            </summary>
            <param name="strResourcePath">Locale Resources Path</param>
        </member>
        <member name="M:Franson.Localization.LanguageManager.CreateFallbackResource">
            <summary>
            Creates an Empty NOP Language.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LanguageManager.GetHashCode">
            <summary>
            Return the hashcode of the Type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.LanguageManager.FileSearchString">
            <summary>
            File extension for Language files. "*.lang"
            </summary>
        </member>
        <member name="P:Franson.Localization.LanguageManager.DefaultResourceName">
            <summary>
            Default Language: "English"
            </summary>
        </member>
        <member name="P:Franson.Localization.LanguageManager.UserResourceSettingsKey">
            <summary>
            Return the setting key used to get user resource setting.
            
            "LANG"
            </summary>
        </member>
        <member name="P:Franson.Localization.LanguageManager.ApplicationResourceSettingKey">
            <summary>
            Return the setting key used to get user resource setting.
            
            "LANG"
            </summary>
        </member>
        <member name="P:Franson.Localization.LanguageManager.SiteResourceSettingKey">
            <summary>
            Return the setting key used to get user resource setting.
            
            "LANG"
            </summary>
        </member>
        <member name="T:Franson.Localization.LinearConverter">
            <summary>
            Coverts values with linear formula y = xy + m.
            </summary>
        </member>
        <member name="M:Franson.Localization.LinearConverter.#ctor(System.String)">
            <summary>
            Create a new Linear converter.
            </summary>
            <param name="strTypeName"></param>
        </member>
        <member name="M:Franson.Localization.LinearConverter.Convert(System.Double)">
            <summary>
            Converts a value with linear formula.
            </summary>
            <param name="dblValue">Value to convert</param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LinearConverter.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize converter from XML Attribute list.
            </summary>
            <param name="attributes">List of attributes defined in .measure file.</param>
            <exception cref="T:System.ArgumentNullException">Converter initialized without arguments.</exception>
            <exception cref="T:System.ArgumentException">Missing Delta and Factor.</exception>
            <exception cref="T:System.FormatException">Invalid format of Delta or Factor argument.</exception>
        </member>
        <member name="P:Franson.Localization.LinearConverter.Factor">
            <summary>
            Get the conversion factor.
            </summary>
        </member>
        <member name="P:Franson.Localization.LinearConverter.Delta">
            <summary>
            Get the conversion delta.
            </summary>
        </member>
        <member name="T:Franson.Localization.Locale">
            <summary>
            Locale holding localized data such as Translation tables and measurement conversions.
            </summary>
        </member>
        <member name="M:Franson.Localization.Locale.#ctor(Franson.Localization.Language,Franson.Localization.MeasurementTable,Franson.Localization.TimeZone)">
            <summary>
            Create a new Locale.
            </summary>
            <param name="language">Language translation Table.</param>
            <param name="measurement">Measurement conversion table.</param>
        </member>
        <member name="M:Franson.Localization.Locale.LocalizeValue(System.String,System.String,System.Type)">
            <summary>
            Localizes a value. Measurement unit is appended to numeric values.
            </summary>
            <param name="strKey">The localization key of the value</param>
            <param name="strValue">The variable value</param>
            <param name="valueType">The type of the variable value</param>
            <returns>Localized string in the format name:value</returns>
        </member>
        <member name="M:Franson.Localization.Locale.LocalizeValue(System.String,System.Object)">
            <summary>
            Localizes a value. Measurement unit is appended to numeric values.
            </summary>
            <param name="strKey">The localization key of the value</param>
            <param name="oValue">The value</param>
            <returns>Localized value</returns>
        </member>
        <member name="M:Franson.Localization.Locale.ToString">
            <summary>
            Return "Locale: Language, Measurementm TimeZone"
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.Locale.Lang">
            <summary>
            Get the translation table.
            </summary>
        </member>
        <member name="P:Franson.Localization.Locale.Measurement">
            <summary>
            Get the measurement conversion table.
            </summary>
        </member>
        <member name="P:Franson.Localization.Locale.TimeZone">
            <summary>
            Get the TimeZone
            </summary>
        </member>
        <member name="T:Franson.Localization.LocaleFactory">
            <summary>
            Creates a <see cref="T:Franson.Localization.Locale"/> for the given context.
            <see cref="T:Franson.Localization.Locale"/> are resolved from settings.
            </summary>
        </member>
        <member name="F:Franson.Localization.LocaleFactory.m_rwLock">
            <summary>
            Synchronization lock object.
            </summary>
        </member>
        <member name="F:Franson.Localization.LocaleFactory.m_strResourceVirtualPath">
            <summary>
            Static virtual path to resource directory.
            </summary>
        </member>
        <member name="F:Franson.Localization.LocaleFactory.m_strResourceRelativePath">
            <summary>
            Static relative path to resource directory. Used by service when localizing template variables when executing commands.
            </summary>
        </member>
        <member name="F:Franson.Localization.LocaleFactory.m_nlog">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:Franson.Localization.LocaleFactory.CreateLocale(Franson.Directory.Application,Franson.Directory.User,System.String)">
            <summary>
            Create <see cref="T:Franson.Localization.Locale"/> for the given <see cref="T:Franson.Directory.User"/> in the specified <see cfref="Appliction"/>
            </summary>
            <param name="application">Application</param>
            <param name="user">User for which to get Locale for</param>
            <param name="strLangPath">Absolute path to Locale resources</param>
            <returns><see cref="T:Franson.Localization.Locale"/> resolved from settings for the given context.</returns>
        </member>
        <member name="M:Franson.Localization.LocaleFactory.CreateLocale(Franson.Directory.Application,System.String)">
            <summary>
            Create <see cref="T:Franson.Localization.Locale"/> for the given <see cref="T:Franson.Directory.Application"/>
            </summary>
            <param name="application"><see cref="T:Franson.Directory.Application"/> for which to get Locale for.</param>
            <param name="strLangPath">Absolute path to Locale resources</param>
            <returns><see cref="T:Franson.Localization.Locale"/> resolved from settings for the given context.</returns>
        </member>
        <member name="M:Franson.Localization.LocaleFactory.CreateLocale(System.String)">
            <summary>
            Create Server default <see cref="T:Franson.Localization.Locale"/>
            </summary>
            <param name="strLangPath">Absolute path to Locale resources</param>
            <returns><see cref="T:Franson.Localization.Locale"/> resolved from settings for the given context.</returns>
        </member>
        <member name="M:Franson.Localization.LocaleFactory.MakeAbsoluteRelativeExecutionContext(System.String)">
            <summary>
            Makes a relative path absolute considering the execution base directory.
            </summary>
            <param name="strRelativePath"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.LocaleFactory.ClearResourceCaches">
            <summary>
            Clear TimeZone, Language and Measure caches.
            </summary>
        </member>
        <member name="M:Franson.Localization.LocaleFactory.Clear">
            <summary>
            Clear all cahces.
            </summary>
        </member>
        <member name="M:Franson.Localization.LocaleFactory.Remove(System.String)">
            <summary>
            Not implemented.
            </summary>
            <param name="strKey"></param>
            <exception cref="T:System.NotImplementedException">LocalManager cannot clear a specific cahce. Use ICach.Clear()</exception>
        </member>
        <member name="P:Franson.Localization.LocaleFactory.ResourceDirectoryVirtualPath">
            <summary>
            Get the Virtual path to Resouce directory.
            
            Default ~/Resources/Languages
            </summary>
        </member>
        <member name="P:Franson.Localization.LocaleFactory.ResourceDirectoryRelativePath">
            <summary>
            Gets the relative path to the Resources directory.
            Default value ../IIS/Resources/Language.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Franson.Localization.LocalizedTemplateParser.Parse(System.String,Franson.Localization.Locale)" -->
        <member name="M:Franson.Localization.LocalizedTemplateParser.OnResolveVariable(Franson.Text.TemplateParser,System.String)">
            <summary>
            Call base.OnResolveVariable and tries to localize the resolved value.
            </summary>
            <param name="sender"></param>
            <param name="strVariable"></param>
            <returns></returns>
        </member>
        <member name="T:Franson.Localization.Measure">
            <summary>
            Represents a Measure with a Value and Unit
            </summary>
        </member>
        <member name="M:Franson.Localization.Measure.#ctor(System.Double,Franson.Localization.Unit,System.String)">
            <summary>
            Create a new Measure.
            </summary>
            <param name="value">Value of the Measure</param>
            <param name="unit">Unit of the Measure</param>
        </member>
        <member name="M:Franson.Localization.Measure.ToString">
            <summary>
            String representation. Value + Unit.Symbol
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.Measure.Unit">
            <summary>
            Unit of the measure
            </summary>
        </member>
        <member name="P:Franson.Localization.Measure.Value">
            <summary>
            Value of the measure
            </summary>
        </member>
        <member name="T:Franson.Localization.MeasurementManager">
            <summary>
            Manage Users, Applications and Site Localized Mesaurements.
            
            Scans and Initialize Measurement locale objects and manage caching.
            </summary>
        </member>
        <member name="M:Franson.Localization.MeasurementManager.#ctor(System.String)">
            <summary>
            Creates a new MeasurementManager.
            </summary>
            <param name="strResourcePath"></param>
        </member>
        <member name="M:Franson.Localization.MeasurementManager.CreateFallbackResource">
            <summary>
            Create an Empty fallback measure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.MeasurementManager.GetHashCode">
            <summary>
            Return the hashcode of the Type
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.MeasurementManager.FileSearchString">
            <summary>
            File extension for Measurement files. "*.measure"
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementManager.DefaultResourceName">
            <summary>
            Default fallbac: "Metric"
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementManager.UserResourceSettingsKey">
            <summary>
            Return the setting key used to get user resource setting.
            
            UserSettings.SettingsKeys.MEASUREMENT_UNITS
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementManager.ApplicationResourceSettingKey">
            <summary>
            Return the setting key used to get user resource setting.
            
            ApplicationSettings.SettingsKeys.MEASUREMENT_UNITS
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementManager.SiteResourceSettingKey">
            <summary>
            Return the setting key used to get user resource setting.
            
            SiteSettings.SettingsKeys.MEASUREMENT_UNITS
            </summary>
        </member>
        <member name="T:Franson.Localization.MeasurementTable">
            <summary>
            Measure table containing localized measure information such as Units, Converters and Number formating.
            </summary>
        </member>
        <member name="M:Franson.Localization.MeasurementTable.#ctor">
            <summary>
            Create an Empty measure table with name = Unknown and no conversions.
            </summary>
        </member>
        <member name="M:Franson.Localization.MeasurementTable.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Franson.Localization.MeasurementTable.MeasureDefinition})">
            <summary>
            Internal constructor. A MeasureTable should be received from <see cref="!:LocalFactor"/> or by <see cref="!:MeasureTableFile"/> representation object.
            </summary>
            <param name="strName">Name of the table. E.g Metric</param>
            <param name="measurements">Dictionary holding Measures mapped with their keys.</param>
        </member>
        <member name="M:Franson.Localization.MeasurementTable.HasConversion(System.String)">
            <summary>
            Return if key has conversion.
            </summary>
            <param name="strMeasureKey">Measure key.</param>
            <returns>True if conversion exist else false.</returns>
        </member>
        <member name="M:Franson.Localization.MeasurementTable.Convert(System.String,System.Double)">
            <summary>
            Convert a value to unit defined by SourceUnit and TargetUnit in .measure file.
            
            If Key does not a exist a default Measure is returned With "unknown" unit and same value as input.
            </summary>
            <param name="strMeasureKey">Key for the messure to convert. E.g TRACK_DISTANCE</param>
            <param name="dblValue">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Franson.Localization.MeasurementTable.InverseConvert(System.String,System.Double)">
            <summary>
            Inverse convert a value to unit defined by SourceUnit and TargetUnit in .measure file.
            
            If Key does not a exist a default Measure is returned With "unknown" unit and same value as input.
            </summary>
            <param name="strMeasureKey">Key for the messure to convert. E.g TRACK_DISTANCE</param>
            <param name="dblValue">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Franson.Localization.MeasurementTable.Convert(System.String,System.Double,System.Boolean)">
            <summary>
            Inverse convert a value to unit defined by SourceUnit and TargetUnit in .measure file.
            
            If Key does not a exist a default Measure is returned With "unknown" unit and same value as input.
            </summary>
            <param name="strMeasureKey">Key for the messure to convert. E.g TRACK_DISTANCE</param>
            <param name="dblValue">Value to convert.</param>
            <param name="bInverse">
            True will convert SourceUnit --> TargetUnit
            False will convert TargetUnit --> SourceUnit
            </param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Franson.Localization.MeasurementTable.ToString">
            <summary>
            Return string representation.
            Returns the Name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.MeasurementTable.Measures">
            <summary>
            Get the Underlying dictionary with measures.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTable.EnableCache">
            <summary>
            Return if the Measure locale resource shoudl be cached. 
            This return true.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTable.Name">
            <summary>
            Name of MeasureTable. E.g Metric
            </summary>
        </member>
        <member name="T:Franson.Localization.MeasurementTable.MeasureDefinition">
            <summary>
            Internal struct representing a Measure definition. 
            Containing information such as Formatting, Source Unit, Destinitation Unit and the Converter use to convert to local format.
            </summary>
        </member>
        <member name="M:Franson.Localization.MeasurementTable.MeasureDefinition.#ctor(Franson.Localization.IConverter,Franson.Localization.Unit,Franson.Localization.Unit,System.String)">
            <summary>
            Internal constructor to create a new MeasureDefinition.
            </summary>
            <param name="converter">IConverter to use to convert SourceUnit to DestinationUnit with.</param>
            <param name="uSource">Unit to convert from.</param>
            <param name="uTarget">Unit to convert to.</param>
        </member>
        <member name="P:Franson.Localization.MeasurementTable.MeasureDefinition.Converter">
            <summary>
            Converter to convert from SourceUnit --> TargetUnit with.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTable.MeasureDefinition.SourceUnit">
            <summary>
            Unit to Convert from.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTable.MeasureDefinition.TargetUnit">
            <summary>
            Unit to Convert to.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTable.MeasureDefinition.Format">
            <summary>
            Formating string. See .NET reference for formats.
            </summary>
        </member>
        <member name="T:Franson.Localization.MeasurementTableFile">
            <summary>
            Representing a *.measure XML file.
            Used only internally to load <see cref="T:Franson.Localization.MeasurementTable"/>. the <see cref="T:Franson.Localization.MeasurementTable"/> is the corresponding business object.
            </summary>
        </member>
        <member name="M:Franson.Localization.MeasurementTableFile.LoadResource(System.String)">
            <summary>
            Loads the .measure files into MeasurementTable.
            </summary>
            <param name="strFilePath">Absolute parth to .measure file.</param>
            <returns>MeasurementTable used to convert units to local format.</returns>
        </member>
        <member name="M:Franson.Localization.MeasurementTableFile.ToMeasurementTable(Franson.Localization.MeasurementTableFile)">
            <summary>
            Coverts the File representation object into a business MeasurementTable object.
            </summary>
            <param name="mf"><see cref="T:Franson.Localization.MeasurementTableFile"/> to process.</param>
            <returns><see cref="T:Franson.Localization.MeasurementTable"/> holding localized measurement information.</returns>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.Name">
            <summary>
            Reflecting &lt;MeasurementTable Name=""&gt; attribute in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.Measurements">
            <summary>
            Reflecting &lt;Measurement&gt; Element in *.measure file.
            </summary>
        </member>
        <member name="T:Franson.Localization.MeasurementTableFile.MeasurementElement">
            <summary>
            Representing the &lt;Measurement XML element in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.MeasurementElement.Name">
            <summary>
            Reflecting &lt;Measurement Name=""&gt; attribute in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.MeasurementElement.Format">
            <summary>
            Reflecting &lt;Format/&gt; XML element in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.MeasurementElement.Converter">
            <summary>
            Reflecting &lt;Converter/&gt; XML element in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.MeasurementElement.SourceUnit">
            <summary>
            Reflecting &lt;SourceUnit/&gt; XML element in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.MeasurementElement.TargetUnit">
            <summary>
            Reflecting &lt;TargetUnit/&gt; XML element in *.measure file.
            </summary>
        </member>
        <member name="T:Franson.Localization.MeasurementTableFile.ConverterElement">
            <summary>
            Representing the &lt;Converter XML element in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.ConverterElement.Type">
            <summary>
            Reflecting &lt;Converter Type=""/&gt; XML Attribute in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.ConverterElement.Attributes">
            <summary>
            Reflecting &lt;Converter *Attributes=""/&gt; in *.measure file. Used to initialize different kind of Converters
            </summary>
        </member>
        <member name="T:Franson.Localization.MeasurementTableFile.UnitElement">
            <summary>
            Representing the &lt;Unit XML element in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.UnitElement.Name">
            <summary>
            Name of Unit as language key.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.UnitElement.Symbol">
            <summary>
            Symbol of Unit as language key.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.UnitElement.Plural">
            <summary>
            Plural name of Unit as language key.
            </summary>
        </member>
        <member name="T:Franson.Localization.MeasurementTableFile.FormatElement">
            <summary>
            Representing the &lt;NumberFormat XML element in *.measure file.
            </summary>
        </member>
        <member name="P:Franson.Localization.MeasurementTableFile.FormatElement.FormatString">
            <summary>
            Number of decimals.
            </summary>
        </member>
        <member name="T:Franson.Localization.SettingsKeys">
            <summary>
            Contains Keys to receive settings used by Franson.Localization namespace using <see cref="T:Franson.Directory.Settings"/>
            </summary>
        </member>
        <member name="F:Franson.Localization.SettingsKeys.MEASUREMENT_UNITS">
            <summary>
            Key used to receive the name of which <see cref="T:Franson.Localization.MeasurementTable"/> a User, Application or Site uses.
            </summary>
        </member>
        <member name="F:Franson.Localization.SettingsKeys.LANGUAGE">
            <summary>
            Key used to receive the name of which <see cref="T:Franson.Localization.Language"/> a User, Application or Site uses.
            </summary>
        </member>
        <member name="F:Franson.Localization.SettingsKeys.LANGUAGE_FILES_VIRTUAL_PATH">
            <summary>
            Virtual path to localization resource directory.
            </summary>
        </member>
        <member name="F:Franson.Localization.SettingsKeys.LANGUAGE_FILES_RELATIVE_PATH">
            <summary>
            Relative path to localization resource directory.
            </summary>
        </member>
        <member name="F:Franson.Localization.SettingsKeys.TIMEZONE">
            <summary>
            Key used to receive the name of timezon a User, Application or Site uses.	
            </summary>
        </member>
        <member name="T:Franson.Localization.TimeZone">
            <summary>
            Represents a TimeZone and all time transitions.
            </summary>
        </member>
        <member name="M:Franson.Localization.TimeZone.#ctor">
            <summary>
            Creates an NOP TimeZone with name "Unknown"
            </summary>
        </member>
        <member name="M:Franson.Localization.TimeZone.#ctor(System.String,System.String,System.Int32[],System.Byte[],Franson.Localization.TZType[],Franson.Localization.TZType)">
            <summary>
            Create a new TimeZone object.
            </summary>
            <param name="strName">TimeZone name</param>
            <param name="arrTransitionTimes">Array of transition times. Seconds from 1970-01-01 for which time transitions occurs</param>
            <param name="arrTransitionTypes">TimeZone description for each transition.</param>
            <param name="arrTZ">Array of TimeZone descriptions.</param>
            <param name="tzNormal">The default TimeZone description.</param>
        </member>
        <member name="M:Franson.Localization.TimeZone.ToLocalTime(System.DateTime)">
            <summary>
            Returns the local time for the given utc time.
            If dtUTC.Kind == Utc the given value will be returned.
            </summary>
            <param name="dtUTC"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.TimeZone.ToUniversalTime(System.DateTime)">
            <summary>
            Returns the UTC time for the given local time.
            If DateTime.Kind is UTC the given time will be returned.
            </summary>
            <param name="dtLocal"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.TimeZone.FindTZType(System.DateTime)">
            <summary>
            Finds the TimeZone type for the current date
            </summary>
            <param name="dtUTC"></param>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.TimeZone.ToString">
            <summary>
            Return the Name
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.TimeZone.EnableCache">
            <summary>
            returns true. TimeZones always caches.
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZone.Name">
            <summary>
            Get full name. E.g: Europe/Paris
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZone.SubRegion">
            <summary>
            Time zone name
            E.g: Stockholm
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZone.Region">
            <summary>
            Get the region E.g Europe
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZone.Normal">
            <summary>
            Get the normal time zone.
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZone.TransitionTypes">
            <summary>
            Get the transition types. 
            This property is reflected for serialization only.
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZone.TZTypes">
            <summary>
            Get the time shift type descriptions.
            This property is reflected for serialization only.
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZone.TransitionTimes">
            <summary>
            Get the transition times.
            This property is reflected for serialization only.
            </summary>
        </member>
        <member name="T:Franson.Localization.TimeZoneFile">
            <summary>
            Represents a TimeZone binary file object.
            Manage loading and parsing of binary 
            </summary>
        </member>
        <member name="M:Franson.Localization.TimeZoneFile.ReadBigEndianBytes(System.Int32,System.IO.BinaryReader)">
            <summary>
            Swaps order of iCount bytes from the current Position in BinaryReader
            </summary>
        </member>
        <member name="T:Franson.Localization.TimeZoneManager">
            <summary>
            Manage Users, Applications and Site TimeZones.
            
            Scans and Initialize TimeZones objects and manage caching.
            </summary>
        </member>
        <member name="M:Franson.Localization.TimeZoneManager.#ctor">
            <summary>
            Creates a new TimeZoneManager object.
            </summary>
        </member>
        <member name="M:Franson.Localization.TimeZoneManager.CreateFallbackResource">
            <summary>
            Creates an empty UTC TimeZone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.TimeZoneManager.GetHashCode">
            <summary>
            Return the hashcode of the Type
            Type is used for caching should work.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.TimeZoneManager.GetZoneTab">
            <summary>
            Get the zone.tab file representation holding description of all available TimeZones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Franson.Localization.TimeZoneManager.RescanResources">
            <summary>
            TimeZones uses zone.tab file for searching TimeZone resources.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.TimeZoneManager.FileSearchString">
            <summary>
            TimeZone files are ebeded and this is not valid for TimeZoneManager.
            Returns "*"
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZoneManager.DefaultResourceName">
            <summary>
            Return the Etc/UTC.
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZoneManager.UserResourceSettingsKey">
            <summary>
            UserSetting key for TimeZone
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZoneManager.ApplicationResourceSettingKey">
            <summary>
            ApplicationSetting key for TimeZone
            </summary>
        </member>
        <member name="P:Franson.Localization.TimeZoneManager.SiteResourceSettingKey">
            <summary>
            SiteSetting key for TimeZone
            </summary>
        </member>
        <member name="T:Franson.Localization.TZType">
            <summary>
            TimeZone type description. E.g. EST or EDT
            </summary>
        </member>
        <member name="M:Franson.Localization.TZType.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new tz descriptoion
            </summary>
            <param name="name">Name of type</param>
            <param name="offset">Offset in seconds from GMT</param>
            <param name="dst">True if day light saving.</param>
        </member>
        <member name="M:Franson.Localization.TZType.ToString">
            <summary>
            Return string representation.
            TzType: name offs=3600 dst=True
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.TZType.Name">
            <summary>
            Name of type
            </summary>
        </member>
        <member name="P:Franson.Localization.TZType.Offset">
            <summary>
            Offset from GMT in seconds
            </summary>
        </member>
        <member name="P:Franson.Localization.TZType.IsDST">
            <summary>
            True if daylight saving
            </summary>
        </member>
        <member name="T:Franson.Localization.Unit">
            <summary>
            Representing a Unit such as Meter.
            </summary>
        </member>
        <member name="M:Franson.Localization.Unit.#ctor">
            <summary>
            Create a new Unit with fields set to unknown. 
            </summary>
        </member>
        <member name="M:Franson.Localization.Unit.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new Unit.
            </summary>
            <param name="strName">Name of the unit</param>
            <param name="strSymbol">Symbol of the unit</param>
            <param name="strPlural">Name in plural of the unit</param>
        </member>
        <member name="P:Franson.Localization.Unit.Name">
            <summary>
            Name of Unit as language key.
            </summary>
        </member>
        <member name="P:Franson.Localization.Unit.Symbol">
            <summary>
            Symbol of Unit as language key.
            </summary>
        </member>
        <member name="P:Franson.Localization.Unit.Plural">
            <summary>
            Plural name of Unit as language key.
            </summary>
        </member>
        <member name="T:Franson.Localization.ZoneDescription">
            <summary>
            Represents and entry in zone.tab file.
            </summary>
        </member>
        <member name="M:Franson.Localization.ZoneDescription.#ctor(System.String,Franson.Geo.Position,System.String,System.String)">
            <summary>
            Creates a new zone.tab ZoneDescription
            </summary>
            <param name="strCode"></param>
            <param name="posCapital"></param>
            <param name="strZoneInfoPath"></param>
            <param name="strComment"></param>
        </member>
        <member name="M:Franson.Localization.ZoneDescription.Parse(System.String)">
            <summary>
            Parses a line to a ZoneDescription
            </summary>
            <param name="strZoneDescritpion"></param>
            <returns></returns>
            <exception type="ArgumentException">if null is passed in</exception>
            <exception type="FormatException">if string not recognized as ZoneDescription</exception>
        </member>
        <member name="M:Franson.Localization.ZoneDescription.ToString">
            <summary>
            Returns a string representation in format "CODE: ZonePath"
            </summary>
            <returns></returns>
        </member>
        <member name="P:Franson.Localization.ZoneDescription.Code">
            <summary>
            ISO 3166 2-character country code
            </summary>
        </member>
        <member name="P:Franson.Localization.ZoneDescription.CapitalPosition">
            <summary>
            Position of the zone's principal location
            Note: Not implemented
            </summary>
        </member>
        <member name="P:Franson.Localization.ZoneDescription.ZonePath">
            <summary>
            Zone name used and relative path in zoneinfo dir
            </summary>
        </member>
        <member name="P:Franson.Localization.ZoneDescription.Comment">
            <summary>
            Comments; present if and only if the country has multiple rows.
            </summary>
        </member>
        <member name="T:Franson.Localization.ZoneTab">
            <summary>
            Representation of zoneinfo database ZoneTab file.
            ZoneTab contains descriptions of all time zones.
            </summary>
        </member>
        <member name="M:Franson.Localization.ZoneTab.#ctor(System.IO.Stream)">
            <summary>
            Creates a new ZoneTab from strem. 
            Stream could be a FileStream or ResourceStream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Franson.Localization.ZoneTab.Zones">
            <summary>
            ReadOnly list of <see cref="T:Franson.Localization.ZoneDescription">ZoneDescriptions</see>
            </summary>
        </member>
    </members>
</doc>
