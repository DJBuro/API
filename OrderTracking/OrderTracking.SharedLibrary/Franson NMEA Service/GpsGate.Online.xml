<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GpsGate.Online</name>
    </assembly>
    <members>
        <member name="T:GpsGate.Online.Command.DAO.CmdArgDAOSQL">
            <summary>
            
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdArgDAOSQL.#ctor">
            <summary>
            Create DAO to stream Command arguments to and from DB.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdArgDAOSQL.LoadByCmdQueueItemID(System.Int64)">
            <summary>
            Fill data based on a queued Command.
            </summary>
            <param name="longID"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdArgDAOSQL.GetSentence(System.Int32)">
            <summary>
            Returns loaded sentence. Returns null if index is out of bounds.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdArgDAOSQL.StartNewCommand(System.Int64)">
            <summary>
            Call this method before start calling <see cref="M:GpsGate.Online.Command.DAO.CmdArgDAOSQL.AddSentence(Franson.Nmea.NmeaBase)"/>
            </summary>
            <param name="longCmdQueueItemID"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdArgDAOSQL.AddSentence(Franson.Nmea.NmeaBase)">
            <summary>
            Add typed sentence.
            </summary>
            <param name="typedSentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdArgDAOSQL.AddSentence(Franson.Nmea.Sentence)">
            <summary>
            Add nmea sentence argument. 
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.CmdQueueDAOSQL">
            <summary>
            CmdQueue DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueDAOSQL.#ctor">
            <summary>
            Create MessageQueue DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueDAOSQL.IsDuplicate(Franson.Message.QueueItem)">
            <summary>
            Not implemented.
            </summary>
            <param name="item"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueDAOSQL.LoadByDeviceID(System.Int32)">
            <summary>
            Loads queue by device ID.
            </summary>
            <param name="iDeviceID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">If queue is not present in database.</exception>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueDAOSQL.DeviceID">
            <summary>
            cmd_queue.device_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueDAOSQL.QueueTableName">
            <summary>
            Returns "cmd_queue", which is name of Command Queue table in database.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueDAOSQL.QueueItemTableName">
            <summary>
            Returns "cmd_queue_item", which is the name of table containing all queue items.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.CmdQueueItemDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.CmdQueueItemDAO">
            <summary>
            CmdQueueItem DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAO.#ctor">
            <summary>
            Create Command DAO.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAO.TopLimit(System.Int32,System.Boolean)">
            <summary>
            To resolve different TOP syntax for different SQL dialects.
            </summary>
            <param name="iCount"></param>
            <param name="bMSSQLstyle"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAO.LoadNext(System.Int32,System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
            Loads next Command for specified queue. This is a Command for a device with no pending Command.
            </summary>
            <param name="iQueueID">Queue to load from</param>
            <param name="tsRetry">Time sine last try to be considered. New items are always considered.</param>
            <param name="bOutgoing">True for outgoing item</param>
            <param name="iDeviceID">Which device. Set to -1 for any device.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAO.LoadPending(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Loads pending command in queue for specified device.
            </summary>
            <param name="iQueueID"></param>
            <param name="bOutgoing"></param>
            <param name="iDeviceID"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAO.LoadLast(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Loads last item in queue independent of status.
            </summary>
            <param name="iQueueID"></param>
            <param name="bOutgoing"></param>
            <param name="iDeviceID"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAO.OnSaveItem(Franson.Message.QueueItem)">
            <summary>
            Called before <see cref="!:Update"/> is called by <see cref="!:SaveItem"/>.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAO.OnInsertedItem(Franson.Message.QueueItem)">
            <summary>
            Called when a new item is saved to queue. Will store command arguments to cmd_arg table.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAO.CreateItem">
            <summary>
            Returns a new CmdQueueItem if data is loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueItemDAO.GateCommandID">
            <summary>
            cmd_queued_item.gate_command_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueItemDAO.GateCommandName">
            <summary>
            cmd_queue_item.gate_command_name
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueItemDAO.StepCurrent">
            <summary>
            cmd_queue_item.step_current
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueItemDAO.StepMax">
            <summary>
            cmd_queue_item.step_max
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueItemDAO.StepDesc">
            <summary>
            cmd_queue_item.step_desc
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueItemDAO.CustomState">
            <summary>
            cmd_queue_item.custom_state
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.CmdQueueItemDAO.HasErrorDesc">
            <summary>
            Returns true
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAOMSSQL.TopLimit(System.Int32,System.Boolean)">
            <summary>
            Returns "TOP #" and ""
            </summary>
            <param name="iCount"></param>
            <param name="bMSSQLstyle"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.CmdQueueItemDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemDAOMySQL.TopLimit(System.Int32,System.Boolean)">
            <summary>
            Returns "" and "LIMIT 0,#"
            </summary>
            <param name="iCount"></param>
            <param name="bMSSQLstyle"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.CmdQueueItemReaderDAOMySQL">
            <summary>
            MySQL version of CmdQueueItemReaderDAO.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.CmdQueueItemReaderDAO">
            <summary>
            Light weight reader for cmd_queue_item table.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemReaderDAO.GetQueueList(System.DateTime,System.DateTime,System.Collections.Generic.List{Franson.Message.DeliveryStatus},System.String,System.String)">
            <summary>
            Get a list of queue items for the specified filters.
            </summary>
            <param name="dtStartTime"></param>
            <param name="dtEndTime"></param>
            <param name="statusList"></param>
            <param name="strFullText"></param>
            <param name="strCommand"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemReaderDAO.GetQueueListByDevice(System.Int32)">
            <summary>
            Get a list of queue items for the given device.
            </summary>
            <param name="iDeviceID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.CmdQueueItemReaderDAO.ReaderToBag(System.Data.IDataReader)">
            <summary>
            Converts an IDataReader into a light weight CmdQueueItemBag.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.CmdQueueItemReaderDAOMSSQL">
            <summary>
            MSSQL version of CmdQueueItemReaderDAO.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.GateCmdBagReaderDAO">
            <summary>
            Light weight reader of GpsGate Command info from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdBagReaderDAO.GetByDevice(System.Int32,System.Boolean)">
            <summary>
            Returns outgoing commands for device.
            </summary>
            <param name="iDeviceID"></param>
            <param name="bExcludeSpecial"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdBagReaderDAO.GetNumInstances(GpsGate.Online.Command.GateCmd)">
            <summary>
            Returns the number of instances of the specified command.
            Used to check if a command is safe for removal (not more than one instance).
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdBagReaderDAO.GetSqlCommand">
            <summary>
            Returns SQL set by LoadBy...() methods.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.GateCmdBagReaderDAO.LangModule">
            <summary>
            Set to true if <see cref="P:GpsGate.Online.Command.GateCmdBag.LocalName"/> should be set in result.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.GateCmdDAOMSSQL">
            <summary>
            MSSQL adaptions
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.GateCmdDAOSQL">
            <summary>
            DAO to handle database paratamers for a GateCmd
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdDAOSQL.LoadByName(System.String)">
            <summary>
            Same as calling <see cref="M:GpsGate.Online.Command.DAO.GateCmdDAOSQL.LoadByName(System.String,System.String)"/> with namespace = "GpsGate".
            </summary>
            <param name="strName">Command name.</param>
            <exception cref="T:Franson.DAO.NotFoundException">No match found in database.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdDAOSQL.LoadByName(System.String,System.String)">
            <summary>
            Load command data from database 
            </summary>
            <param name="strName">Command name</param>
            <param name="strNamespace">Command namespace. Defaults to "GpsGate" if set to null.</param>
            <exception cref="T:Franson.DAO.NotFoundException">No match found in database.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load by command database ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">No match found in database.</exception>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.GateCmdDAOSQL.Name">
            <summary>
            gate_command.name
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.GateCmdDAOSQL.Namespace">
            <summary>
            gate_command.namespace
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.GateCmdDAOSQL.Description">
            <summary>
            gate_command.description. Command description. Free text.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.GateCmdDAOSQL.Enabled">
            <summary>
            gate_command.enabled. True if command is enabled.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.GateCmdDAOSQL.Outgoing">
            <summary>
            gate_command.outgoing. True if this is an outgoing command. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DAO.GateCmdDAOSQL.Special">
            <summary>
            gate_command.special. True if this command is flagged to require _ExecuteSpecialCommand* privileges.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdDAOMSSQL.#ctor">
            <summary>
            Create DAO object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.GateCmdDAOMySQL">
            <summary>
            MySQL adaptions
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdDAOMySQL.#ctor">
            <summary>
            Create DAO object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.GateCmdReaderDAOMSSQL">
            <summary>
            MSSQL specifics
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.GateCmdReaderDAOSQL">
            <summary>
            Read Gate Command plugin types from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdReaderDAOSQL.SetCommandID(System.Int32)">
            <summary>
            Load by database id.
            </summary>
            <param name="iCommandID"></param>
            <exception cref="T:System.ArgumentException">If argument is zero.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdReaderDAOSQL.SetParameters(System.Boolean,System.String)">
            <summary>
            Set parameters before executing reader
            </summary>
            <param name="bOutgoing">Set to true to load outgoing command types</param>
            <param name="strNamespace">Command namespace. null defaults to "GpsGate". This equals to ProtocolID.</param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdReaderDAOSQL.SetParameters(System.Boolean,System.String,System.Int32)">
            <summary>
            Set paramaters for loading all commands for a specific device definition.
            </summary>
            <param name="bOutgoing"></param>
            <param name="strNamespace"></param>
            <param name="iDeviceDefID"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdReaderDAOSQL.SetLoadAll">
            <summary>
            Call to load all commands at next call to <see cref="!:Execute"/>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns SQL query to return all gate command plugins in DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdReaderDAOMSSQL.#ctor">
            <summary>
            Create DAO object.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Command.DAO.GateCmdReaderDAOMySQL">
            <summary>
            MySQL specifics
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DAO.GateCmdReaderDAOMySQL.#ctor">
            <summary>
            Create DAO object.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.ConfigCmd">
            <summary>
            All outgoing configuration commands to devices should inherit from this class.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.OutgoingCmd">
            <summary>
            All outgoing commands should inherit from this class.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Command.GateCmd">
            <summary>
            Base class for all Cmd classes that process FRCMD.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Command.GateCmd.m_bIsError">
            <summary>
            Set to true if Cmd gets into error state and should stop executing.
            And only receive the remaining data.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Command.GateCmd.m_loadableType">
            <summary>
            Will be set to a value if this object was created using TypeManager.Load()
            </summary>
        </member>
        <member name="F:GpsGate.Online.Command.GateCmd.m_bSpecial">
            <summary>
            Set to true if special privileges are required to execute command.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Command.GateCmd.m_dicSentences">
            <summary>
            Raw list of sentences used for command. Used to stream command to and from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.#ctor">
            <summary>
            Used by TypeManager when installing a loadable command.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.Init(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.CmdBase)">
            <summary>
            Used by GateCmdReader to init new command object.
            </summary>
            <param name="connIncoming"></param>
            <param name="frcmd"></param>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.AddSentence(Franson.Nmea.Sentence)">
            <summary>
            Cache sentence
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.GetSentence(System.Int32)">
            <summary>
            Get cached sentence.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.WriteSpecial(System.Boolean)">
            <summary>
            Updates the "special" value to the database.
            </summary>
            <param name="bNewValue"></param>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.ProcessData(Franson.Nmea.Sentence)">
            <summary>
            Called by <see cref="P:GpsGate.Online.Command.GateCmd.NmeaConnection"/> when argument NMEA sentence arrives
            </summary>
            <param name="sentence">Sentence to be processed.</param>
            <returns>false if this was the last sentence to be processed as argument.
            true if next more sentences should be processed</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.Begin">
            <summary>
            Start executing command.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Override to receive argument NMEA sentences.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.Commit">
            <summary>
            Called when command should finish. Default implementation sends a FRRET back to client with no arguments.
            Should be overridden and implement the necessary code to commit a command.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.CommitAsync">
            <summary>
            This method is called if the command is executed async.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.Rollback">
            <summary>
            Called if there is any kind of error during executing.
            Like the Cmd class throwing an unhandled exception.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.RouteSentence(Franson.Nmea.Sentence)">
            <summary>
            Call this method to route sentence through GpsGate Franmework.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.Dispose">
            <summary>
            Call when Cmd has finished to resolve circular references.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.Load(Franson.Reflection.LoadableType)">
            <summary>
            Called when object is created by <see cref="M:Franson.Reflection.TypeManager.Load(Franson.Reflection.LoadableType,System.Boolean)"/> at run time.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.Install(Franson.Reflection.LoadableType)">
            <summary>
            Called when this command is installed in the system.
            Will insert a record in the gate_command table.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmd.ToString">
            <summary>
            Returns "Namespace.Name" + incoming connection info. String is suitable for logging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.ID">
            <summary>
            Returns database ID.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.Special">
            <summary>
            Returns true if this is a command that requires _ExecuteSpecialCommand* privileges to be executed
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.MoreDataNeeded">
            <summary>
            Returns true if Cmd wants more NMEA sentences as arguments.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.IsError">
            <summary>
            Set to true if an execption occurs when executing command.
            No more sentences will be passed to derived object.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.NmeaConnection">
            <summary>
            <see cref="P:GpsGate.Online.Command.GateCmd.NmeaConnection"/> this Cmd is executed on.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.FRCMD">
            <summary>
            Original <see cref="P:GpsGate.Online.Command.GateCmd.FRCMD"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.FRRET">
            <summary>
            Original FRRET
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.QueueExecuteMode">
            <summary>
            How the command should be executed in a queue. Default <see cref="!:CmdQueueExecuteMode.ForceSync"/>
            Override to change.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.Name">
            <summary>
            Should return the name of the command. Must be implemented by derived class.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.Namespace">
            <summary>
            Should return the namespace for this command. E.g. "GpsGate" or "StarsNav"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.Outgoing">
            <summary>
            Returns true for a command that is executed "on the device". Return false for a command that is sent from
            a device and executed "on the server".
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmd.PermitAnonymousAccess">
            <summary>
            Return true to permit anonymous execution of command.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.OutgoingCmd.Init(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRCMD,GpsGate.Online.Net.NmeaConnection,Franson.Nmea.ROUTE,GpsGate.Online.Directory.Device)">
            <summary>
            Called after object is created to init. Will make default authorization if command may be executed.
            </summary>
            <param name="connIncoming">Connection that sends command</param>
            <param name="frcmd"></param>
            <param name="connOutgoing">Outgoing connection to receive and execute command</param>
            <param name="route">Route four outgoing command.</param>
            <exception cref="T:Franson.Directory.AuthenticationException">If logged in user isn't the SYSTEM user.</exception>
            <exception cref="T:System.ArgumentException">Argument errors.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.OutgoingCmd.SendToDevice(System.Byte[],System.String,System.Boolean)">
            <summary>
            Sends data back to device. Finds right queue for SMS. Flags for "RequiresAck" if necessary.
            </summary>
            <param name="arrData"></param>
            <param name="strPreferedTransport">Prefered transport. If not found, the ROUTE transport is used.</param>
            <param name="bPreferedIsMandatory">If true the prefered transport is mandatory.</param>
            <exception cref="T:GpsGate.Online.GateCmdException">If mandatory transport isn't found.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.OutgoingCmd.SendToDevice(System.Byte[])">
            <summary>
            Send array to device using ROUTE transport.
            </summary>
            <param name="arrData"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.OutgoingCmd.SendToDevice(System.String)">
            <summary>
            Converts string to UTF-8 byte array and calls <see cref="M:GpsGate.Online.Command.Outgoing.OutgoingCmd.SendToDevice(System.Byte[])"/>
            </summary>
            <param name="strData"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.OutgoingCmd.PendingCommit(System.Object,System.String)">
            <summary>
            Will be called each time a pending command is ack:ed from device. Override and return true 
            from <see cref="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.RequiresAck"/> to make enable an outgoing command to go through several of steps of pending.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.OutgoingCmd.UpdateProgress(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Update progress for command. <see cref="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.RequiresAck"/> must be true for this command.
            If argument is 0 or null the value is not updated.
            </summary>
            <param name="iStepCurrent"></param>
            <param name="iStepMax"></param>
            <param name="strStepDesc"></param>
            <param name="strCustomState"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.OutgoingCmd.ToString">
            <summary>
            Returns string for logging containing Namespace, Name and device information.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.RequiresAck">
            <summary>
            Override and return true if data sent over outgoing connection, e.g. a SMS, requires an ack from client device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.StepCurrent">
            <summary>
            Get progress bar index for command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.StepMax">
            <summary>
            Override to get progress bar for command. This is the number of steps required to complete command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.StepDesc">
            <summary>
            Override to get description of current step in command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.CustomState">
            <summary>
            Override to return a custom state which will be used in next call to <see cref="M:GpsGate.Online.Command.Outgoing.OutgoingCmd.PendingCommit(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.Outgoing">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.PermitAnonymousAccess">
            <summary>
            By default do not allow anonymous access of outgoing commands.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.ROUTE">
            <summary>
            ROUTE object for this outgoing command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.ClientUserID">
            <summary>
            User ID for receiver of this outgoing command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.ClientDeviceID">
            <summary>
            Device ID for receiver of this outgoing command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.OutgoingDevice">
            <summary>
            Device command is sent to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.OutgoingCmd.OutgoingConnection">
            <summary>
            Default outgoing NmeaConnection which handles this outgoing command.
            </summary>
            <exception cref="T:GpsGate.Online.GateCmdException">No outgoing connection found for recommended transport.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.ConfigCmd.Execute">
            <summary>
            Called when all paramaters has been received.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.ConfigCmd.GetParameter(System.String)">
            <summary>
            Returns a named parameter or null if it does not exist.
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.ConfigCmd.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.ConfigCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Save all FRVAL. Can be retrived by a call to <see cref="M:GpsGate.Online.Command.Outgoing.ConfigCmd.GetParameter(System.String)"/>
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.ConfigCmd.Commit">
            <summary>
            Calls <see cref="M:GpsGate.Online.Command.Outgoing.ConfigCmd.Execute"/>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.ConfigCmd.Rollback">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.ConfigCmd.DeviceImei">
            <summary>
            Device IMEI
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.ConfigCmd.SmsProxyPhoneNumber">
            <summary>
            Phone number device should send SMS to.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe">
            <summary>
            All outgoing GprsSettings Command handlers should inherit from this class
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe.GetProtocolPort(System.String)">
            <summary>
            Port device should connect to.
            </summary>
            <param name="strTransport">Transport to get port for.</param>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe.Install(Franson.Reflection.LoadableType)">
            <summary>
            Make _GprsSettings a special command by default by installation.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe.DevicePhoneNumber">
            <summary>
            Device phone number to send configuration SMS to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe.GprsApn">
            <summary>
            GPRS APN to be used by device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe.GprsUsername">
            <summary>
            GPRS username to be used by device, if any.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe.GprsPassword">
            <summary>
            GPRS password to be used by device, if any.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe.ProtocolHostname">
            <summary>
            Hostname device should connect to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe.ProtocolIPAddress">
            <summary>
            Return hostname as an IPAddress object. Returns null if no IP found
            </summary>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GprsSettingsCmdExe.Name">
            <summary>
            Returns "_GprsSettings"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.GpsGateGprsSettingsCmdExe">
            <summary>
            Handles outgoing _GprsSettings command for GpsGate compatible devices.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GpsGateGprsSettingsCmdExe.Execute">
            <summary>
            Sends GpsGate GPRS config SMS.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GpsGateGprsSettingsCmdExe.PendingCommit(System.Object,System.String)">
            <summary>
            Receives response from device.
            </summary>
            <param name="oDeviceData"></param>
            <param name="strCustomState"></param>
            <returns></returns>
            <exception cref="T:GpsGate.Online.GateCmdException">Respose from device is not valid</exception>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGateGprsSettingsCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGateGprsSettingsCmdExe.RequiresAck">
            <summary>
            Require ACK.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.GpsGatePollPositionCmdExe">
            <summary>
            Handles outgoing _PollPosition command for GpsGate compatible devices.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.PollPositionCmdExe">
            <summary>
            All outgoing commands for _PollPosition should inherit from this class.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.PollPositionCmdExe.Transport">
            <summary>
            Returns prefered transport layer. Default "tcp". Other options "sms", "udp", "email", "http" etc.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.PollPositionCmdExe.Transport2">
            <summary>
            Backup transport. Typically "sms"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.PollPositionCmdExe.Name">
            <summary>
            Returns "_PollPosition"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GpsGatePollPositionCmdExe.Execute">
            <summary>
            Send _PollPosition command to device
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGatePollPositionCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGatePollPositionCmdExe.RequiresAck">
            <summary>
            Require ACK.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.GpsGateSmsPlainTextCmdExe">
             <summary>
             Outgoing command that sends plain text message using GpsGate Protocol. 
             Command name: _PlainText
             </summary>
             <example>
             <code lang="C#">
             
                // We need to know the device's database ID.
                // This device must have "GpsGate" as ProtocolID
                // Note that a user can have several of devices assigned to it!
                GpsGate.Online.Directory.Device dev = new GpsGate.Online.Directory.Device();
                dev.LoadByMSISDN(Franson.Message.MSISDN.Parse("+1555123445"));
            
                // The above is just an example on how to get the device ID.
                int iDeviceID = dev.ID;
            
                // All the namespaces below exists in GpsGate.Client.dll (light weight)
                // Or in GpsGate.Online.dll
                // If you reference GpsGate.Online.dll do not reference GpsGate.Client.dll
            
                // If you only use the code below you only need to reference the light weight GpsGate.Client.dll
                // That is if you get the device database ID in some other way that by using Franson.dll and GpsGate.Online.dll
             
                // A route sentence that is prefixed to outgoing GpsGate Commands.
                Franson.Nmea.ROUTE route = new Franson.Nmea.ROUTE("device", iDeviceID.ToString(), "sms");
            
                // Create a GpsGate Client to connect to the server
                GpsGate.Client.GpsGateClientCmd gClient = new GpsGateClientCmd("localhost", 30175);
            
                // Login. Use the _SYSTEM user which can execute outgoing commands for any user.
                // The _SYSTEM user must login from the same IP address as NMEA Service is bound to.
                gClient.Connect("_SYSTEM", "SYSTEM");
            
                // Prepare a command to send "Hello World!"
                Franson.Nmea.Command.PlainTextCmdBuilder plainText = new Franson.Nmea.Command.PlainTextCmdBuilder(route, "Hello World!");
            
                // Send SMS!
                // GpsGate SMS Proxy must be connected to server.
                gClient.CmdToServer(plainText);
            
                // Close connection to server
                gClient.Disconnect();
             </code>
             </example>
             <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GpsGateSmsPlainTextCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GpsGateSmsPlainTextCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GpsGateSmsPlainTextCmdExe.Commit">
            <summary>
            Takes plain text message and sends to outgoing NmeaConnection.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GpsGateSmsPlainTextCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGateSmsPlainTextCmdExe.Name">
            <summary>
            Returns "_PlainText"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGateSmsPlainTextCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGateSmsPlainTextCmdExe.RequiresAck">
            <summary>
            Returns false. Plain text SMS does not require an ACK from client device.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.GpsGateStartTrackingCmdExe">
            <summary>
            Handles outgoing _StartTracking command for GpsGate compatible devices.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.StartTrackingCmdExe">
            <summary>
            All outgoing commands for _StartTracking should inherit from this class.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.StartTrackingCmdExe.Transport">
            <summary>
            Returns prefered transport layer. Default "tcp". Other options "sms", "udp", "email", "http" etc.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.StartTrackingCmdExe.Transport2">
            <summary>
            Backup transport. Typically "sms"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.StartTrackingCmdExe.TimeFilter">
            <summary>
            Recommended update interval in seconds over inexpensive transport (e.g. GPRS)
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.StartTrackingCmdExe.SmsTimeFilter">
            <summary>
            Recommended update interval over SMS
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.StartTrackingCmdExe.DistanceFilter">
            <summary>
            Recomended distance interval in meters.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.StartTrackingCmdExe.DirectionFilter">
            <summary>
            Recommended direction (heading) change.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.StartTrackingCmdExe.Motion">
            <summary>
            True if recommended that tracking only is activated when tracker moves. Possibly activated by motion sensor.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.StartTrackingCmdExe.Name">
            <summary>
            Returns "_StartTracking"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGateStartTrackingCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGateStartTrackingCmdExe.RequiresAck">
            <summary>
            Require ACK.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.GpsGateStopTrackingCmdExe">
            <summary>
            Handles outgoing _StopTracking command for GpsGate compatible devices.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.StopTrackingCmdExe">
            <summary>
            All outgoing commands for _StopTracking should inherit from this class.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.StopTrackingCmdExe.Name">
            <summary>
            Returns "_StopTracking"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.GpsGateStopTrackingCmdExe.Execute">
            <summary>
            Send _StopTracking command to device
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGateStopTrackingCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.GpsGateStopTrackingCmdExe.RequiresAck">
            <summary>
            Require ACK.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Outgoing.SetDeviceTrackRecorderCmdExe">
            <summary>
            All outgoing commands for _SetDeviceTrackRecorder should inherit from this class.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.SetDeviceTrackRecorderCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Called for each sentence argument.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Outgoing.SetDeviceTrackRecorderCmdExe.Install(Franson.Reflection.LoadableType)">
            <summary>
            Make _SetDeviceTrackRecorder a special command by default by installation.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Command.Outgoing.SetDeviceTrackRecorderCmdExe.Name">
            <summary>
            Returns "_SetDeviceTrackRecorder"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Security.ExecuteAuthorize">
            <summary>
            Checks if a specific user has the right to execute a specific command.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.Security.ExecuteAuthorize.#ctor(System.Int32,System.String)">
            <summary>
            Create object to check execution rights for specified command on specified device.
            </summary>
            <param name="iDeviceID">Device to execute command for.</param>
            <param name="strCommandName">Command to be executed.</param>
        </member>
        <member name="M:GpsGate.Online.Command.Security.ExecuteAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Returns true if logged in user has right to execute command on device.
            Checks _ExecuteSpecialCommandAll and _ExecuteCommandAll privileges.
            </summary>
            <param name="session"></param>
            <returns></returns>
            <exception cref="T:Franson.DAO.NotFoundException">Some object did not exist in database.</exception>
        </member>
        <member name="T:GpsGate.Online.Command.Security.ListCommandsAuthorize">
            <summary>
            Checks if sessions may list commands for device.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.Security.ListCommandsAuthorize.#ctor(GpsGate.Online.Directory.Device)">
            <summary>
            Create authorization object to check if session may list commands for device.
            </summary>
            <param name="dev"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Security.ListCommandsAuthorize.#ctor(System.Int32)">
            <summary>
            Create authorization object to check if session may list commands for device.
            </summary>
            <param name="iDeviceID"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Security.ListCommandsAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Returns true if session may list commands for device.
            </summary>
            <param name="session"></param>
            <returns></returns>
            <exception cref="!:NotFoundException">Some object did not exist in database.</exception>
        </member>
        <member name="P:GpsGate.Online.Command.Security.ListCommandsAuthorize.ExcludeSpecial">
            <summary>
            Returns true after a call to <see cref="M:GpsGate.Online.Command.Security.ListCommandsAuthorize.Authorize(Franson.Directory.Session)"/> if session may not list special commands.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Template.DAO.TemplateCmdReaderDAO">
            <summary>
            Template command reader DAO
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.Template.DAO.TemplateCmdReaderDAO.GetSteps(System.Int32)">
            <summary>
            Returns template steps.
            </summary>
            <param name="iGateCommandID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.Template.DAO.TemplateCmdReaderDAO.GetSteps(System.String,System.String)">
            <summary>
            Returns template steps.
            </summary>
            <param name="strCommandName"></param>
            <param name="strProtocol"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Command.Template.DAO.TemplateCmdWriterDAO">
            <summary>
            Template command writer DAO
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.Template.DAO.TemplateCmdWriterDAO.#ctor">
            <summary>
            Create writer.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Template.DAO.TemplateCmdWriterDAO.LoadByID(System.Int32)">
            <summary>
            Not implemented.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Command.Template.DAO.TemplateCmdWriterDAO.UpdateTemplate(GpsGate.Online.Command.Template.TemplateCmdStepBag)">
            <summary>
            Updates or creates template command step.
            </summary>
            <param name="bag"></param>
            <exception cref="T:System.InvalidOperationException">If command name is in use.</exception>
            <exception cref="T:Franson.DAO.DAOException">Database error.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.Template.DAO.TemplateCmdWriterDAO.RemoveTemplate(GpsGate.Online.Command.Template.TemplateCmdStepBag)">
            <summary>
            Delete a command template.
            </summary>
            <param name="bag"></param>
            <exception cref="T:System.InvalidOperationException">Command is not a template command</exception>
            <exception cref="T:Franson.DAO.DAOException">Database error.</exception>
        </member>
        <member name="T:GpsGate.Online.Command.Template.TemplateCmdExe">
            <summary>
            Execute outgoing commands from string templates
            </summary>
            <threadsafety static="true" instance="false"/>
            <exception cref="T:GpsGate.Online.GateCmdException">Command couold not be sent.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdExe.Execute">
            <summary>
            Execute template command
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdExe.Install(Franson.Reflection.LoadableType)">
            <summary>
            Does nothing. Template commands are added using <see cref="T:GpsGate.Online.Command.Template.TemplateCmdWriter"/>
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdExe.Load(Franson.Reflection.LoadableType)">
            <summary>
            
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdExe.RequiresAck">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdExe.Name">
            <summary>
            Returns name of template command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdExe.Namespace">
            <summary>
            Returns namespace (protocol) for template command.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Template.TemplateCmdReader">
            <summary>
            Reads data for template command from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdReader.GetSteps(System.Int32)">
            <summary>
            Returns steps for template command.
            </summary>
            <param name="iGateCommandID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdReader.GetSteps(System.String,System.String)">
            <summary>
            Return steps for template command.
            </summary>
            <param name="strCommandName"></param>
            <param name="strProtocol"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Command.Template.TemplateCmdStepBag">
            <summary>
            Contains information about a step in a template command. Immutable object.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdStepBag.#ctor(System.String,System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Create bag.
            </summary>
            <param name="strProtocol"></param>
            <param name="strCommandName"></param>
            <param name="strTemplate"></param>
            <param name="strTransport"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdStepBag.SetCommandID(System.Int32)">
            <summary>
            Used by reader and writer to set GateCmd database ID.
            </summary>
            <param name="iCommandID"></param>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdStepBag.ToString">
            <summary>
            Returns string for logging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdStepBag.CommandID">
            <summary>
            Database ID of GateCmd. 0 if not determined.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdStepBag.Protocol">
            <summary>
            Protocol. e.g. "StarsNav"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdStepBag.CommandName">
            <summary>
            Command name. e.g. "ParkDevice"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdStepBag.Template">
            <summary>
            Template that builds command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdStepBag.Transport">
            <summary>
            Transport that this command can be executed over. E.g. "sms".
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdStepBag.CmdDescription">
            <summary>
            Description of the command
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.Template.TemplateCmdStepBag.StepDescription">
            <summary>
            Description of this step in command.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Template.TemplateCmdWriter">
            <summary>
            Write a new or update a template command to database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdWriter.#ctor">
            <summary>
            Create writer.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdWriter.UpdateTemplate(GpsGate.Online.Command.Template.TemplateCmdStepBag)">
            <summary>
            Writes template to database. 
            Changes are written to database, no call to <see cref="M:GpsGate.Online.Command.Template.TemplateCmdWriter.Update"/> should be made.
            </summary>
            <param name="templBag"></param>
            <exception cref="T:System.InvalidOperationException">If command name is in use.</exception>
            <exception cref="T:Franson.DAO.DAOException">Database error.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdWriter.RemoveTemplate(GpsGate.Online.Command.Template.TemplateCmdStepBag)">
            <summary>
            Deletes template from database.
            Changes are written to database, no call to <see cref="M:GpsGate.Online.Command.Template.TemplateCmdWriter.Update"/> should be made.
            </summary>
            <param name="templBag"></param>
            <exception cref="T:System.InvalidOperationException">If command name is in use.</exception>
            <exception cref="T:Franson.DAO.DAOException">Database error.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateCmdWriter.Update">
            <summary>
            Throws an exception. Use UpdateTemplate()
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:GpsGate.Online.Command.Template.TemplateParserHex.Parse(System.String)">
            <summary>
            Parse template and return populated string. Each [variable] is resolved by a call to 
            the event <see cref="E:GpsGate.Online.Command.Template.TemplateParserHex.ResolveVariable"/>.
            </summary>
            <param name="strTemplate"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="E:GpsGate.Online.Command.Template.TemplateParserHex.ResolveVariable">
            <summary>
            Called to resolve variables found in template. 
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.Template.TemplateParserHex.ResolveVariableHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Command.Template.TemplateParserHex.ResolveVariable"/>
            </summary>
            <param name="parser"></param>
            <param name="strVariable">Variable to be resolved. Always in lower case.</param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Command.CacheCmd">
            <summary>
            Command to execute ICache methods remote.
            Often used when Web GUI make changes in database and must notify GpsGate Service to flush caches. 
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.SystemCmd">
            <summary>
            System commands should inherit from this class.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.IncomingCmd">
            <summary>
            Incoming commands should inherit from this class.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.IncomingCmd.Outgoing">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.IncomingCmd.PermitAnonymousAccess">
            <summary>
            Override and return true if anonymous access is allowed to execute this command.
            Returns false by default.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SystemCmd.Init(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.CmdBase)">
            <summary>
            Authorizes request. Only the _system user can execute system commands.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CacheCmd.Begin">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CacheCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Receives arguments for command.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.CacheCmd.Rollback">
            <summary>
            This method will not execute anything.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CacheCmd.Commit">
            <summary>
            Commits the command and executes the method specified by argument for the given ICache instance
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CacheCmd.Name">
            <summary>
            returns the name = "ICache"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CacheCmd.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.CmdArgCollection">
            <summary>
            CmdArg collection.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdArgCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdArgCollection.LoadByCmdQueueItemID(System.Int64)">
            <summary>
            Load command arguments by cmd_queue_item_id.
            </summary>
            <param name="iCmdQueueItemID"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.CmdArgCollection.DAO">
            <summary>
            CmdArgDAOSQL DAO.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.CmdFactory">
            <summary>
            Factory for GpsGate Command plugins.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Command.CmdFactory.GetSingleton">
            <summary>
            Get command factory singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.CmdFactory.CreateGateCmd(System.Int32,Franson.Nmea.CmdBase,Franson.Nmea.ROUTE)">
            <summary>
            Return GpsGate Command object based on database ID. Connections are not added to command object.
            </summary>
            <param name="iGateCmdID"></param>
            <param name="cmd"></param>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.CmdFactory.CreateGateCmd(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.CmdBase,Franson.Nmea.ROUTE)">
            <summary>
            Returns an instance of a GateCmd plugin which can handle the requested command.
            Set route to a value for outgoing commands.
            
            Returns null no plugin is registered to handle requested command, or if there was an unexcepted errors.
            Unexcepted errors will be loged, but no exception will be thrown.
            </summary>
            <param name="connIncoming">Connection requests comes from. If null no connections will be assigned to command object.</param>
            <param name="frcmd">Command to be executed</param>
            <param name="route">Which entiry should handle this command. null if source connection handles it.</param>
            <returns>GateCmd to execute command.</returns>
        </member>
        <member name="M:GpsGate.Online.Command.CmdFactory.CreateGateCmd(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRCMD)">
            <summary>
            Returns a non-routed command.
            </summary>
            <param name="connSource"></param>
            <param name="frcmd"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Command.CmdQueue">
            <summary>
            Manage a queue of GpsGate Commands.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueue.GetQueue(System.Int32)">
            <summary>
            Returns queue for device. There is only one queue object per device.
            -1 returns a new unassigned cmd queue object.
            </summary>
            <param name="iDeviceID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueue.ClearCache">
            <summary>
            Should only be called when NMEA Service restarts without killing process. Basically only for UNIT tests.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueue.#ctor(System.Int32)">
            <summary>
            Load (or create) queue for device.
            </summary>
            <param name="iClientDeviceID">Device to load queue for.</param>
            <param name="sender">Callback interface to process queued commands.</param>
            <param name="bOutgoing">True if outgoing queue</param>
            <param name="bRemoveDuplicates">True if duplicates should be ignored in queue.</param>
            <exception cref="T:Franson.DAO.NotFoundException">If queue doesn't exists and bCreateIfNotFound is set to false.</exception>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueue.GetNextDeviceWithQueuedCommands(System.TimeSpan)">
            <summary>
            Returns ID of next device with queued commands. Returns 0 if there is none.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueue.ToString">
            <summary>
            String for logging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueue.DeviceID">
            <summary>
            Device that owns queue.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueue.QueueItemDAO">
            <summary>
            DAO to read and write single messages to queue
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.CmdQueueItem">
            <summary>
            Represents a queued GpsGate Command
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueItem.#ctor(GpsGate.Online.Command.GateCmd)">
            <summary>
            Create queue container for GpsGate Command
            </summary>
            <param name="gateCmd"></param>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueItem.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Create from database.
            </summary>
            <param name="iGateCmdID"></param>
            <param name="iStepCurrent"></param>
            <param name="iStepMax"></param>
            <param name="strStepDesc"></param>
            <param name="strCustomState"></param>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueItem.UpdateItem(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Chnage state of item. Arguments set to 0 or null are not changed.
            </summary>
            <param name="iStepCurrent"></param>
            <param name="iStepMax"></param>
            <param name="strStepDesc"></param>
            <param name="strCustomState"></param>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItem.GateCmd">
            <summary>
            Queued GpsGate Command
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItem.GateCommandName">
            <summary>
            Returns name of queued GpsGate Command. Same as <see cref="!:GateCmd.Name"/> but faster since it avoids
            loading a GpsGate Command object.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItem.StepCurrent">
            <summary>
            Step of progress for a pending GpsGate Command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItem.StepMax">
            <summary>
            Number of steps in total for a pending GpsGate Command before it is completed.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItem.StepDesc">
            <summary>
            Description of the current step for a pending GpsGate Command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItem.CustomState">
            <summary>
            Internal state information used by a pending GpsGate Command to keep its state.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItem.TimestampClient">
            <summary>
            Returns DateTime.MinValue
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.CmdQueueItemBag">
            <summary>
            Bag with extra info from cmd_queue_item table that aren't shared with ProviderMessageBag.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueItemBag.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.String,System.Int32,System.String,Franson.Message.DeliveryStatus,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="strCommandName"></param>
            <param name="iCurrentStep"></param>
            <param name="iMaxSteps"></param>
            <param name="strStepDesc"></param>
            <param name="strErrorDesc"></param>
            <param name="iClientDeviceID"></param>
            <param name="iClientUserID"></param>
            <param name="deliveryStatus"></param>
            <param name="bOutgoing"></param>
            <param name="timestampClient"></param>
            <param name="timestampQueued"></param>
            <param name="timestampDelivered"></param>
            <param name="timestampLastTry"></param>
            <param name="iRetryCount"></param>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItemBag.ID">
            <summary>
            CmdQueueItemID.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItemBag.CommandName">
            <summary>
            Command name.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItemBag.CurrentStep">
            <summary>
            Current step.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItemBag.MaxSteps">
            <summary>
            Max steps.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItemBag.StepDesc">
            <summary>
            Step description.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItemBag.ErrorDesc">
            <summary>
            Step error description.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.CmdQueueItemReader">
            <summary>
            Light weight reader for cmd_queue_item table.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueItemReader.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueItemReader.GetQueueList(System.DateTime,System.DateTime,System.Collections.Generic.List{Franson.Message.DeliveryStatus},System.String,System.String)">
            <summary>
            Get a list of queue items for the specified filters.
            </summary>
            <param name="dtStartTime"></param>
            <param name="dtEndTime"></param>
            <param name="statusList"></param>
            <param name="strFullText"></param>
            <param name="strCommand"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueItemReader.GetQueueListByDevice(System.Int32)">
            <summary>
            Get a list of queue items for the given device.
            </summary>
            <param name="iDeviceID"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueItemReader.DAO">
            <summary>
            Data Access Object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.CmdQueueManager">
            <summary>
            Handles async execution of gate commands. Retries failed commands.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Command.CmdQueueManager.DEFAULT_RETRY_INTERVAL">
            <summary>
            Retry every 15 minutes
            </summary>
        </member>
        <member name="F:GpsGate.Online.Command.CmdQueueManager.DEFAULT_KILL_INTERVAL">
            <summary>
            Kill command after 8 hours.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueManager.ClearSingleton">
            <summary>
            Should only be called for debugging purposes.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueManager.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Create command queue manager. Call <see cref="!:Start"/> to start queue.
            </summary>
            <param name="tsRetry"></param>
            <param name="tsKill"></param>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueManager.SendAllQueues(System.TimeSpan,System.TimeSpan)">
            <summary>
            Executes all queued commands for all devices without pending commands, that has a retry timestamp
            older than retry.
            </summary>
            <param name="dtRetry"></param>
            <param name="dtKill"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueManager.Send(Franson.Message.Queue,Franson.Message.QueueItem)">
            <summary>
            Starts executing command.
            </summary>
            <param name="queue"></param>
            <param name="item"></param>
            <returns></returns>
            <exception cref="T:Franson.Message.QueueFatalError"></exception>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueManager.ProcessPending(Franson.Message.Queue,Franson.Message.QueueItem,System.Object)">
            <summary>
            Not implemented. Can only handle the first step in a commands execution.
            </summary>
            <param name="queue"></param>
            <param name="item"></param>
            <param name="oArgument"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueManager.IsOnline(Franson.Message.Queue)">
            <summary>
            Returns true is manager is started.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueManager.Manager">
            <summary>
            Returns manager singleton for Gate command queues.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.CmdQueueResetCmdExe">
            <summary>
            Handles incoming command _CmdQueueReset
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueResetCmdExe.Begin">
            <summary>
            Checks that _SYSTEM is logged in.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueResetCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueResetCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueResetCmdExe.Commit">
            <summary>
            Deletes all queued items for device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueResetCmdExe.Name">
            <summary>
            Returns "_CmdQueueReset"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueResetCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.CmdQueueStatusCmdExe">
            <summary>
            Incoming command _CmdQueueStatus
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueStatusCmdExe.Begin">
            <summary>
            Checks that _SYSTEM user is executing command.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueStatusCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.CmdQueueStatusCmdExe.Rollback">
            <summary>
            NOP.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueStatusCmdExe.Name">
            <summary>
            Returns "_CmdQueueStatus"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.CmdQueueStatusCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DeviceResetCmd">
            <summary>
            _DeviceReset
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.DeviceResetCmd.Begin">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DeviceResetCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Does nothing
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DeviceResetCmd.Rollback">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DeviceResetCmd.Name">
            <summary>
            Returns name of command "_DeviceReset"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DeviceResetCmd.Namespace">
            <summary>
            Returns the commands namespace "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.DisconnectDeviceCmdExe">
            <summary>
            _DisconnectDevice. Ends a track for logged in user.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DisconnectDeviceCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DisconnectDeviceCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.DisconnectDeviceCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.DisconnectDeviceCmdExe.Commit">
            <summary>
            Ends current TrackInfo
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:GpsGate.Online.Command.DisconnectDeviceCmdExe.Name">
            <summary>
            Returns "_DisconnectDevice"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.DisconnectDeviceCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.EndTrackCmdExe">
            <summary>
            _EndTrack. Ends a track for logged in user.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.EndTrackCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.EndTrackCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.EndTrackCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.EndTrackCmdExe.Commit">
            <summary>
            Ends current TrackInfo
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.EndTrackCmdExe.Name">
            <summary>
            Returns "_EndTrack"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.EndTrackCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.GateCmdBag">
            <summary>
            This bag with info from gate_command table. 
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdBag.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create bag.
            </summary>
            <param name="iID">Database ID.</param>
            <param name="strName">Logical ID e.g. _GprsSettings</param>
            <param name="strLocalName">Localized name.</param>
            <param name="strDescription">Free text description.</param>
            <param name="strNamespace">Namespace. Smae sa Protocol ID.</param>
            <param name="bOutgoing">True if ourgoing command.</param>
            <param name="bSpecial">True if special privileges is required to execute.</param>
            <param name="strTransport">Recommended transport from server to device if available.</param>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmdBag.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmdBag.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmdBag.LocalName">
            <summary>
            Localized name.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmdBag.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmdBag.Namespace">
            <summary>
            Protocol.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmdBag.Outgoing">
            <summary>
            True if outgoing command from server to device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmdBag.Special">
            <summary>
            True if special privileges required to execute this command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmdBag.Transport">
            <summary>
            Transport from server to device.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdBagReader.#ctor">
            <summary>
            Create light weight gate command bag reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdBagReader.GetByDevice(System.Int32,System.Boolean)">
            <summary>
            Returns commands for device.
            </summary>
            <param name="iDevice"></param>
            <param name="bExcludeSpecial">True if only no special commands are to be included.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdBagReader.GetNumInstances(GpsGate.Online.Command.GateCmd)">
            <summary>
            Returns the number of instances of the specified command.
            Used to check if a command is safe for removal (not more than one instance).
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Command.GateCmdBagReader.LangModule">
            <summary>
            Set to true if <see cref="P:GpsGate.Online.Command.GateCmdBag.LocalName"/> should be set in result.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.GateCmdReader">
            <summary>
            Reads loadable Command types from database.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetSingleton">
            <summary>
            Singleton used as GateCmd factory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.ClearSingleton">
            <summary>
            Clear singleton.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.#ctor">
            <summary>
            Create command reader
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns value of "gate_command_id" field.
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetCmd(System.Int32,Franson.Nmea.CmdBase,Franson.Nmea.ROUTE)">
            <summary>
            Return GpsGate Command object based on database ID. Connections are not added to command object.
            </summary>
            <param name="iGateCmdID"></param>
            <param name="cmd"></param>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetOutgoingCmd(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRCMD,GpsGate.Online.Directory.Device,Franson.Nmea.ROUTE)">
            <summary>
            Returns a new <see cref="T:GpsGate.Online.Command.Outgoing.OutgoingCmd"/> for matching command name and protocol.
            Returns null if no handler found, or if any of the arguments is null.
            </summary>
            <param name="connIncoming"></param>
            <param name="frcmd"></param>
            <param name="connOutgoing"></param>
            <param name="route"></param>
            <returns>Returns a matching outgoing command handler.</returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetIncomingCmd(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRCMD)">
            <summary>
            Returns a new <see cref="T:GpsGate.Online.Command.IncomingCmd"/> object for a named command. 
            Returns null if no handler found or if any of the arguments is null.
            </summary>
            <param name="nmeaConn">Connetion</param>
            <param name="frcmd">Command to be executed</param>
            <returns>Returns null if no command type found.</returns>
            <exception cref="T:System.InvalidOperationException">Something wrong with the loaded command handler</exception>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetIncomingRet(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRRET)">
            <summary>
            Returns a new <see cref="T:GpsGate.Online.Command.IncomingRet"/> object for a named command. 
            Returns null if no handler found or if any of the arguments is null.
            </summary>
            <param name="nmeaConn">Connetion</param>
            <param name="frret">Response to be handled</param>
            <returns>Returns null if no command type found.</returns>
            <exception cref="T:System.InvalidOperationException">Something wrong with the loaded command handler</exception>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetAll">
            <summary>
            Loads all gate commands from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetByDeviceDefinition(System.Int32,System.Boolean)">
            <summary>
            Returns registered commands for specified device definition.
            </summary>
            <param name="iDeviceDefID"></param>
            <param name="bOutgoing"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetByDeviceDefinitionAndName(System.Int32,System.String)">
            <summary>
            Returns named command by device definition ID and command name.
            </summary>
            <param name="iDeviceDefID"></param>
            <param name="strCommandName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetByProtocol(System.String,System.Boolean)">
            <summary>
            Returns registered commands for specified protocol ID (same as GpsGate Command namespace).
            </summary>
            <param name="strProtocolID"></param>
            <param name="bOutgoing"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.GetByCommandID(System.Int32)">
            <summary>
            Returns 
            </summary>
            <param name="iCommandID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.Clear">
            <summary>
            Clear singleton
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.GateCmdReader.Remove(System.String)">
            <summary>
            Clears singleton.
            </summary>
            <param name="strKey"></param>
        </member>
        <member name="T:GpsGate.Online.Command.IncomingRet">
            <summary>
            Incoming replies should inherit from this class
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.IncomingRet.Commit">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.IncomingRet.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Checks for FRERR in response.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:GpsGate.Online.Command.IncomingRet.Outgoing">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.IncomingRet.PermitAnonymousAccess">
            <summary>
            Returns false. Does not permit anonymous access by default.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.IncomingRet.FRERR">
            <summary>
            Returns null if command was executed successfully.
            Returns FRERR if there was an error.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.IncomingRet.Namespace">
            <summary>
            Returns "GpsGateRet"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.PingCmd">
            <summary>
            _Ping a  no operation response to client.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.PingCmd.Begin">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.PingCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Does nothing
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.PingCmd.Rollback">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.PingCmd.Name">
            <summary>
            Returns name of command "_Ping"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.PingCmd.Namespace">
            <summary>
            Returns the commands namespace "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.ProxyMessageCmd">
            <summary>
            Routes proxy messages.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.ProxyMessageCmd.Begin">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.ProxyMessageCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Receives ToAddress, FromAddress and Message arguments.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.ProxyMessageCmd.Commit">
            <summary>
            Routes message to provider.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.ProxyMessageCmd.Rollback">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.ProxyMessageCmd.Name">
            <summary>
            Returns "_ProxyMessage"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.ProxyMessageCmd.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.ProxyMessageRet">
            <summary>
            Handles incoming replies from GpsGate Proxy.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.ProxyMessageRet.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.ProxyMessageRet.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Checks for error response.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.ProxyMessageRet.Commit">
            <summary>
            Sends ack to <see cref="T:GpsGate.Online.Net.ProxyMessageProvider"/>.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.ProxyMessageRet.Rollback">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.ProxyMessageRet.Name">
            <summary>
            Returns "_ProxyMessage"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.SchedulerCmdExe">
            <summary>
            Performes scheduler actions such as refres, start and stop scheduler.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SchedulerCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SchedulerCmdExe.Commit">
            <summary>
            Performe the action on the given scheduler;
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SchedulerCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.SchedulerCmdExe.Name">
            <summary>
            SchedulerCmd
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.SchedulerCmdExe.Namespace">
            <summary>
            GpsGate Namespace
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.SendMessageCmd">
            <summary>
            _SendMessage
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Command.SendMessageCmd.Begin">
            <summary>
            Begin executing command
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SendMessageCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Called for each argument sentence
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.SendMessageCmd.Commit">
            <summary>
            Routes message and returns response to client.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SendMessageCmd.Rollback">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.SendMessageCmd.Name">
            <summary>
            Returns name of command. "_SendMessage"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.SendMessageCmd.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.SendPositionCmd">
            <summary>
            _SendPosition
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SendPositionCmd.Begin">
            <summary>
            Begin executing command.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SendPositionCmd.Commit">
            <summary>
            Creates <see cref="T:GpsGate.Online.Message.GateMessage"/> and routes it through recorder and application rules.
            And creates RMC sentence and routes it.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SendPositionCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Called for each argument sentence. Should receive one FRPOS sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.SendPositionCmd.Rollback">
            <summary>
            Called if there is any error during execution.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.SendPositionCmd.Name">
            <summary>
            Name of command. "_SendPosition"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.SetTrackRecorderCmdExe">
            <summary>
            _SetTrackRecorder. Ends a track for logged in user.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SetTrackRecorderCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SetTrackRecorderCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.SetTrackRecorderCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SetTrackRecorderCmdExe.Commit">
            <summary>
            Ends current TrackInfo
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:GpsGate.Online.Command.SetTrackRecorderCmdExe.Name">
            <summary>
            Returns "_SetTrackRecorder"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.SetTrackRecorderCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.SupportsProxyMessageCmdExe">
            <summary>
            _SupportsProxyMessage
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SupportsProxyMessageCmdExe.Begin">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.SupportsProxyMessageCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Does nothing.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.SupportsProxyMessageCmdExe.Rollback">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.SupportsProxyMessageCmdExe.Name">
            <summary>
            Returns name of command. "_SupportsProxyMessage"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.SupportsProxyMessageCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Command.TrackBufferCmd">
            <summary>
            Handles batch processing of uploaded tracks using FRCMD + FRPOS.
            _CreateTrackRecorder and _SaveTrackData commands.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.TrackBufferCmd.Begin">
            <summary>
            Called when a cmd is started.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.TrackBufferCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Called for each argument NMEA sentence.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.TrackBufferCmd.Commit">
            <summary>
            Called when cmd ends (commit).
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.TrackBufferCmd.Rollback">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.TrackBufferCmd.Install(Franson.Reflection.LoadableType)">
            <summary>
            Called when this command is installed in the system.
            Will insert a record in the gate_command table.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.TrackBufferCmd.Name">
            <summary>
            Returns _CreateTrackRecorder or _SaveTrackData depending on command.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.TrackBufferCmd.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.UpdateRulesCmd.Begin">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.UpdateRulesCmd.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Does nothing.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Command.UpdateRulesCmd.Commit">
            <summary>
            Produces end result of command. Sends back config paramerters to connection.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Command.UpdateRulesCmd.Rollback">
            <summary>
            Called if command fails for some reason. Does nothing.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.UpdateRulesCmd.Name">
            <summary>
            Returns "_getupdaterules"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Command.UpdateRulesCmd.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Configuration.ServerCapabilities">
            <summary>
            Provides configuration information about GpsGate Server.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Configuration.ServerCapabilities.ServiceAddress">
            <summary>
            Returns the address NMEA Service is bound to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Configuration.ServerCapabilities.NmeaPort">
            <summary>
            Returns the GpsGate Protocol port NMEA Service will respond to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Configuration.ServerCapabilities.UdpNmeaPort">
            <summary>
            Returns GpsGate Protocol UDP port on NMEA Service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Configuration.ServerCapabilities.TcpNmeaPort">
            <summary>
            Same as <see cref="M:GpsGate.Online.Configuration.ServerCapabilities.NmeaPort"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Configuration.ServerCapabilities.HasNmeaService">
            <summary>
            Returns true if NMEA Service is installed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.DAO.GateDAOFactory">
            <summary>
            The DataFactory class creates DataAccess objects that corresponds 
            to classes in the business tier. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetProviderBagReaderDAO">
            <summary>
            Abstract method to get ProviderBagReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetProviderBagWriterDAO">
            <summary>
            Abstract method to get ProviderBagReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetServicePluginReaderDAO">
            <summary>
            Abstract method to get ServicePluginReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetServicePluginDAO">
            <summary>
            Abstract method to get ServicePlugin DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateCmdBagReaderDAO">
            <summary>
            Abstract method to get GateCmdBagReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetTemplateCmdReaderDAO">
            <summary>
            Abstract method to get TemplateCmdReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetTemplateCmdWriterDAO">
            <summary>
            Abstract method to get TemplateCmdWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetStringCompareExpressionDAO">
            <summary>
            Abstract method to get EventExpressionStateWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEventExpressionStateWriterDAO">
            <summary>
            Abstract method to get EventExpressionStateWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetFatFreakPostProcessorDAO">
            <summary>
            Abstract method to get FatFreakPostProcessor DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetOutgoingWebServiceListDAO">
            <summary>
            Abstract method to get OutgoingWebServiceList DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetOutgoingWebServiceDAO">
            <summary>
            Abstract method to get OutgoingWebService DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetCmdArgDAO">
            <summary>
            Abstract method to get CmdArg DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetCmdQueueItemDAO">
            <summary>
            Abstract method to get CmdQueueItem DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetCmdQueueDAO">
            <summary>
            Abstract mthod to get CmdQueue DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetSmsProxyQueueDAO">
            <summary>
            Abstract method to get SmsProxyQueue DAO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetCmdQueueItemReaderDAO">
            <summary>
            Abstract method to get CmdQueueItemReaderDAO
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.DAO.GateDAOFactory.GetTrackPostProcessorLogReaderDAO" -->
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetTrackInfoModWriterDAO">
            <summary>
            Abstract method to get TrackInfoModWriter DAO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetTrackDataModWriterDAO">
            <summary>
            Abstract method to get TrackDataModWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDeviceSearchDAO">
            <summary>
            Abstract method to get DeviceSerach DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDeviceDAO">
            <summary>
            Abstract method to get Device DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetProtocolDAO">
            <summary>
            Abstract method to get Protocol DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetProtocolVersionDAO">
            <summary>
            Abstract method to get ProtocolVersion DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetVehicleGroupDAO">
            <summary>
            Abstract method to get VehicleGroupDAOSQL
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetVehicleGroupCollectionDAO">
            <summary>
            Abstract method to get VehicleGroupCollectionDAOSQL
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateUserDAO">
            <summary>
            Abstract method to get a GateUserDAO object.
            </summary>
            <returns>A GateUserDAO object.</returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetBuddyGroupDAO">
            <summary>
            Abstract method to get a BuddyGroupDAOSQL object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetBuddyGroupCollectionDAO">
            <summary>
            Abstract method to get BuddyGroupCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateUserCollectionDAO">
            <summary>
            Abstract method to get GateUserCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateUserSearchDAO">
            <summary>
            Abstract method to get a GateUserSearch DAO. 
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGroupSearchDAO">
            <summary>
            Abstract method to get a GateUserSearch DAO. 
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetRecorderRuleReaderDAO(System.Int32)">
            <summary>
            Abstract method to get ReacorderRuleReader DAO
            </summary>
            <param name="iChainId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetRecorderRuleDAO">
            <summary>
            Abstract method to get ReaderRule DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetApplicationRuleDAO">
            <summary>
            Abstract method to get Application Rule DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetApplicationRuleReaderDAO(System.Int32)">
            <summary>
            Abstract method to get ApplicationRuleReader DAO
            </summary>
            <param name="iChainId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateMessageWriterDAO">
            <summary>
            Abstract method to get GateMessage DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetRuleChainDAO">
            <summary>
            Abstract method to get RuleChain DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDeviceDefinitionDAO">
            <summary>
            Abstract method to get DeviceDefinition DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDeviceDefinitionReaderDAO">
            <summary>
            Abstract method to get GetDeviceDefinitionCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDeviceDefinitionMapperReaderDAO">
            <summary>
            Abstract method to get GetDeviceDefinitionMapperReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateCmdReaderDAO">
            <summary>
            Abstract method to get GetGateCmdReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateCmdDAO">
            <summary>
            Abstract method to get GetGateCmd
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateMessageRecordLatestDAO">
            <summary>
            Abstract method to get GateMessageRecordLatest DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetListenerDAO">
            <summary>
            Abstract method to get Listener DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetListenerReaderDAO">
            <summary>
            Abstract method to get ListenerReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDeviceDefinitionMapperDAO">
            <summary>
            Abstract method to get DeviceDefinitionMapper DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateMessageReaderDAO">
            <summary>
            Abstract method to get GateMessageReader DAO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGatePostProcessorReaderDAO">
            <summary>
            Abstract method to get GatePostProcessorReader DAO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGatePostProcessorDAO">
            <summary>
            Abstract method to get GatePostProcessor DAO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetTrackGateDataReaderDAO">
            <summary>
            Abstract method to get TrackGateDataReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetTrackPostProcessorLogDAO(System.Int32)">
            <summary>
            Internal abstract method to get TrackPostProcessorLog DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetApplicationDefinitionWriterDAO">
            <summary>
            Abstract method to get ApplicationDefinitionWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetApplicationDefinitionReaderDAO">
            <summary>
            Abstract method to get ApplicationDefinitionReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetSmsProxyDAO">
            <summary>
            Abstract method to get SmsProxy DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDeviceReaderDAO">
            <summary>
            Abstract method to get DeviceReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDeviceDefinitionMapperCollectionDAO">
            <summary>
            Abstract method to get DeviceDefinitionMapperCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetProtocolReaderDAO">
            <summary>
            Abstract method to get ProtocolReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetMobileNetworkReaderDAO">
            <summary>
            Abstract method to get MobileNetworkReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateEventWriterDAO">
            <summary>
            Abstract method to get GateEvent DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateEventReaderDAO">
            <summary>
            Abstract method to get GateEventReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEventStateReaderDAO">
            <summary>
            Abstract method to get GateEventLevelReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEventStateWriterDAO">
            <summary>
            Abstract method to get object for writing EventState to DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEventChannelReaderDAO">
            <summary>
            Abstract method to get GateEventChannelReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEventChannelWriterDAO">
            <summary>
            Abstract method to get object for writing <see cref="!:EventChannel"/> to DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEventExpressionEvaluatorReaderDAO">
            <summary>
            Abstract method to get EventExpressionEvaluator DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetAnalogMessageFieldExpressionDAO">
            <summary>
            Abstract method to get AnalogMessageFieldExpression DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDigitalMessageFieldExpressionDAO">
            <summary>
            Abstract method to get AnalogMessageFieldExpression DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDerivateMessageFieldExpressionDAO">
            <summary>
            Abstract method to get AnalogMessageFieldExpression DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEventExpressionEvaluatorWriterDAO">
            <summary>
            Abstract method to get EventExpressionEvaluatorWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGeofenceEventExpressionDAO">
            <summary>
            Abstract method to get GeofenceEventExpression DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetIntegrityEventExpressionDAO">
            <summary>
            Abstract method to get IntegrityEventExpression DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEventArgumentWriterDAO">
            <summary>
            Abstract method to get EventArgumentWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDayOfWeekPeriodEvaluatorConditionDAO">
            <summary>
            Abstract method to get DayOfWeekPeriodEvaluatorPreCondition DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEventDurationEvaluatorConditionDAO">
            <summary>
            Abstract method to get DayOfWeekPeriodEvaluatorPreCondition DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetCommandNotifierDAO">
            <summary>
            Abstract method to get CommandNotifier DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetEmailNotifierDAO">
            <summary>
            Abstract method to get EmailNotifier DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetSmsNotifierDAO">
            <summary>
            Abstract method to get SmsNotifier DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetChannelNotifierDAO">
            <summary>
            Abstract method to get ChannelNotifier DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetUserAttributeNotifierDAO">
            <summary>
            Abstract method to get UserAttributeNotifier DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetUserAttributeNotifierReaderDAO">
            <summary>
            Abstract method to get UserAttributeNotifierReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetMessageTemplateReaderDAO">
            <summary>
            Abstract method to get MessageTemplateReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetUserTagWriterDAO">
            <summary>
            Abstract method to get UserTagWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGeofenceTagWriterDAO">
            <summary>
            Abstract method to get GeofenceTagWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetUserTagReaderDAO">
            <summary>
            Abstract method to get UserTagReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGeofenceTagReaderDAO">
            <summary>
            Abstract method to get GeofenceTagReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetViewWriterDAO">
            <summary>
            Abstract method to get ViewWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetViewReaderDAO">
            <summary>
            Abstract method to get ViewReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGateUserReaderDAO">
            <summary>
            Abstract method to get GateUserReader DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetCircularGeofenceWriterDAO">
            <summary>
            Abstract method to get CircularGeofence DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetPolygonGeofenceWriterDAO">
            <summary>
            Abstract method to get PolygonGeofence DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGeofenceEventArgumentDAO">
            <summary>
            Abstract method to get GeofenceEventArgument DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetGeofenceCollectionDAO">
            <summary>
            Abstract method to get GeofenceCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetReportViewerDAO">
            <summary>
            Abstract method to get ReportViewer DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetReportViewerTypeInstanceReaderDAO">
            <summary>
            Abstract method to get ReportViewerTypeInstanceReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetStoredReportDAO">
            <summary>
            Abstract method to get StoredReport DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetStoredReportReaderDAO">
            <summary>
            Abstract method to get StoredReportReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateDAOFactory.GetDAOFactory">
            <summary>
            Get a data source dependent DAOFactory.  
            </summary>
            <returns>A DAOFactory object to be used to get DAO objects.</returns>
        </member>
        <member name="T:GpsGate.Online.DAO.GateMSSQLDAOFactory">
            <summary>
            DAO factory for MSSQL.
            </summary>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateUserDAO">
            <summary>
            MSSQL version of GateUser DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetBuddyGroupDAO">
            <summary>
            MSSQL version of BuddyGroup DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetBuddyGroupCollectionDAO">
            <summary>
            MSSQL  version of BuddyGroupCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateUserCollectionDAO">
            <summary>
            MSSQL version of GateUserCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetVehicleGroupDAO">
            <summary>
            MSSQL version of VehicleGroup DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetVehicleGroupCollectionDAO">
            <summary>
            MSSQL version of VehicleGroupCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateUserSearchDAO">
            <summary>
            MSSQL version of GateUserSearch DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGroupSearchDAO">
            <summary>
            MSSQL version of GroupSearch DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDeviceDAO">
            <summary>
            MSSQL version of Device DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetProtocolDAO">
            <summary>
            MSSQL version of Protocol DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetProtocolVersionDAO">
            <summary>
            MSSQL version of ProtocolVersion DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDeviceSearchDAO">
            <summary>
            MSSQL version of DeviceSearch DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetRecorderRuleReaderDAO(System.Int32)">
            <summary>
            MSSQL version of RecorderRuleReader DAO
            </summary>
            <param name="iChainId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetRecorderRuleDAO">
            <summary>
            MSSQL version of RecorderRule DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetApplicationRuleDAO">
            <summary>
            MSSQL version of ApplicationRule DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateMessageWriterDAO">
            <summary>
            MSSQL version of GateMessageWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetRuleChainDAO">
            <summary>
            MSSQL version of RuleChain DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDeviceDefinitionDAO">
            <summary>
            MSSQL version of DeviceDefinition DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDeviceDefinitionReaderDAO">
            <summary>
            MSSQL version of DeviceDefinitionCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDeviceDefinitionMapperReaderDAO">
            <summary>
            MSSQL version of GetDeviceDefinitionMapperReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateMessageRecordLatestDAO">
            <summary>
            MSSQL version of GateMessageeRecordLatest DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateCmdReaderDAO">
            <summary>
            MSSQL version of GateCmdReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateCmdDAO">
            <summary>
            MSSQL version of GateCmd DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetApplicationRuleReaderDAO(System.Int32)">
            <summary>
            MSSQL version of ApplicationRuleReader DAO
            </summary>
            <param name="iChainId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateEventWriterDAO">
            <summary>
            MSSQL version of GateEventWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetListenerDAO">
            <summary>
            MSSQL version of Listener DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetListenerReaderDAO">
            <summary>
            MSSQL  version of ListenerReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDeviceDefinitionMapperDAO">
            <summary>
            MSSQL version of DefinitionFieldDictionary DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateMessageReaderDAO">
            <summary>
            MSSQL version of GateMessageReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGatePostProcessorReaderDAO">
            <summary>
            MSSQL version of GatePostProcessorReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGatePostProcessorDAO">
            <summary>
            MSSQL version of GatePostProcessor DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetTrackGateDataReaderDAO">
            <summary>
            MSSQL version of TrackGateDataReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetTrackPostProcessorLogDAO(System.Int32)">
            <summary>
            MSSQL version of TrackPostProcessorLog DAO
            </summary>
            <param name="iPostProcId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetTrackDataModWriterDAO">
            <summary>
            MSSQL version of TrackDataModWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetTrackInfoModWriterDAO">
            <summary>
            MSSQL version of TrackInfoModWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetTrackPostProcessorLogReaderDAO">
            <summary>
            MSSQL version of TrackPostProcessorLogReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetApplicationDefinitionWriterDAO">
            <summary>
            MSSQL version of ApplicationDefinitionWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetApplicationDefinitionReaderDAO">
            <summary>
            MSSQL version of ApplicationDefinitionReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetSmsProxyDAO">
            <summary>
            MSSQL version of SmsProxy DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetSmsProxyQueueDAO">
            <summary>
            MSSQL version of SmsProxyQueue DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDeviceReaderDAO">
            <summary>
            MSSQL version of DeviceReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetProtocolReaderDAO">
            <summary>
            MSSQL version of ProtocolReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetMobileNetworkReaderDAO">
            <summary>
            MSSQL version of MobileNetworkReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDeviceDefinitionMapperCollectionDAO">
            <summary>
            MSSQL version of DeviceDefinitionMapperCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetCmdQueueItemDAO">
            <summary>
            MSSQL version of CmdQueueItem DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetCmdQueueDAO">
            <summary>
            MSSQL version of CmdQueue DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetCmdQueueItemReaderDAO">
            <summary>
            MSSQL version of GetCmdQueueItemReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetCmdArgDAO">
            <summary>
            MSSQL version of CmdArg DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetOutgoingWebServiceListDAO">
            <summary>
            MSSQL version of OutgoingWebServiceListDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetOutgoingWebServiceDAO">
            <summary>
            MSSQL version of OutgoingWebServiceDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEventStateReaderDAO">
            <summary>
            MSSQL version of EventStateReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEventChannelReaderDAO">
            <summary>
            MSSQL version of EventChannelReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEventStateWriterDAO">
            <summary>
            MSSQL version of EventStateWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEventChannelWriterDAO">
            <summary>
            MSSQL version of EventChannelWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateEventReaderDAO">
            <summary>
            MSSQL version of GateEventReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEventExpressionEvaluatorReaderDAO">
            <summary>
            MSSQL version of EventExpressionEvaluatorReader DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetAnalogMessageFieldExpressionDAO">
            <summary>
            MSSQL version of AnalogMessageFieldExpression DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDigitalMessageFieldExpressionDAO">
            <summary>
            MSSQL version of DigitalMessageFieldExpression DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDerivateMessageFieldExpressionDAO">
            <summary>
            MSSQL version of DerivateMessageFieldExpression DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEventExpressionEvaluatorWriterDAO">
            <summary>
            MSSQL version of EventExpressionEvaluatorWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGeofenceEventExpressionDAO">
            <summary>
            MSSQL version of GeofenceEventExpression DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetIntegrityEventExpressionDAO">
            <summary>
            MSSQL version of IntegrityEventExpression DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEventArgumentWriterDAO">
            <summary>
            MSSQL version of EventArgumentWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEventExpressionStateWriterDAO">
            <summary>
            MSSQL version of EventExpressionStateWriterDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetDayOfWeekPeriodEvaluatorConditionDAO">
            <summary>
            MSSQL version of DayOfWeekPeriodEvaluatorConditionDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEventDurationEvaluatorConditionDAO">
            <summary>
            MSSQL version of EventDurationEvaluatorConditionDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetUserTagWriterDAO">
            <summary>
            MSSQL version of UserTagWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGeofenceTagWriterDAO">
            <summary>
            MSSQL version of GeofenceTagWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetUserTagReaderDAO">
            <summary>
            MSSQL version of UserTagReader DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGeofenceTagReaderDAO">
            <summary>
            MSSQL version of GeofenceTagReader DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetViewWriterDAO">
            <summary>
            MSSQL version of ViewWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetViewReaderDAO">
            <summary>
            MSSQL version of ViewReader DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateUserReaderDAO">
            <summary>
            MSSQL version of GateUserReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetCircularGeofenceWriterDAO">
            <summary>
            MSSQL version of CircularGeofence DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetPolygonGeofenceWriterDAO">
            <summary>
            MSSQL version of PolygonGeofence DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGeofenceEventArgumentDAO">
            <summary>
            MSSQL version of GeofenceEventArgument DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGeofenceCollectionDAO">
            <summary>
            MSSQL version of GeofenceCollection DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetReportViewerDAO">
            <summary>
            MSSQL version of ReportViewer DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetReportViewerTypeInstanceReaderDAO">
            <summary>
            MSSQL version of ReportViewerTypeInstanceReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetStoredReportDAO">
            <summary>
            MSSQL version of StoredReport DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetStoredReportReaderDAO">
            <summary>
            MSSQL version of StoredReportReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetCommandNotifierDAO">
            <summary>
            MSSQL version of CommandNotifierDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetEmailNotifierDAO">
            <summary>
            MSSQL version of EmailNotifierDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetSmsNotifierDAO">
            <summary>
            MSSQL version of SmsNotifierDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetChannelNotifierDAO">
            <summary>
            MSSQL version of ChannelNotifierDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetUserAttributeNotifierDAO">
            <summary>
            MSSQL version of UserAttributeNotifierDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetUserAttributeNotifierReaderDAO">
            <summary>
            MSSQL version of UserAttributeNotifierReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetMessageTemplateReaderDAO">
            <summary>
            MSSQL version of MessageTemplateReaderDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetFatFreakPostProcessorDAO">
            <summary>
            MSSQL version of FatFreakPostProcessorDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetStringCompareExpressionDAO">
            <summary>
            MSSQL version of StringCompareExpressionDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetTemplateCmdReaderDAO">
            <summary>
            Returns MSSQL version of TemplateCmdReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetTemplateCmdWriterDAO">
            <summary>
            Returns MSSQL version of TemplateCmdWriterDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetGateCmdBagReaderDAO">
            <summary>
            Returns MSSQL version of GateCmdBagReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetServicePluginDAO">
            <summary>
            Returns MSSQL version of ServicePluginDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetServicePluginReaderDAO">
            <summary>
            Returns MSSQL version of ServicePluginReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetProviderBagReaderDAO">
            <summary>
            Returns MSSQL version of ProviderBagReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMSSQLDAOFactory.GetProviderBagWriterDAO">
            <summary>
            Returns MSSQL version of ProviderBagWriterDAO
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.DAO.GateMySQLDAOFactory">
            <summary>
            DAO factory for MySQL
            </summary>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetOutgoingWebServiceListDAO">
            <summary>
            MYSQL version of OutgoingWebServiceListDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetOutgoingWebServiceDAO">
            <summary>
            MySQL version of OutgoingWebServiceDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateUserDAO">
            <summary>
            MySQL version of GateUser DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetBuddyGroupDAO">
            <summary>
            MySQL version of BuddyGroup DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetBuddyGroupCollectionDAO">
            <summary>
            MySQL version of BuddyGroupCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateUserCollectionDAO">
            <summary>
            MySQL version of GateUserCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetVehicleGroupDAO">
            <summary>
            MySQL version of VehicleGroup DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetVehicleGroupCollectionDAO">
            <summary>
            MySQL version of VehicleGroupCollection DAO
            </summary>
            <param name="concurrencyOption"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateUserSearchDAO">
            <summary>
            MySQL version of GateUserSearch DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGroupSearchDAO">
            <summary>
            MySQl version of GroupSearch DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDeviceDAO">
            <summary>
            MySQl version of Device DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetProtocolDAO">
            <summary>
            MySQL version of Protocol DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetProtocolVersionDAO">
            <summary>
            MySQl version of ProtocolVersion DAO
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDeviceSearchDAO">
            <summary>
            MySql version of DeviceSearch DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetRecorderRuleReaderDAO(System.Int32)">
            <summary>
            MySQL version of RecorderRuleReader DAO
            </summary>
            <param name="iChainId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetRecorderRuleDAO">
            <summary>
            MySQL version of RecorderRule DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetApplicationRuleDAO">
            <summary>
            MySQL version of ApplicationRule DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetApplicationRuleReaderDAO(System.Int32)">
            <summary>
            MySQL version of ApplicationRuleReader DAO
            </summary>
            <param name="iChainId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateMessageWriterDAO">
            <summary>
            MySQL version of GateMessageWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetRuleChainDAO">
            <summary>
            MySQL version of RuleChain DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDeviceDefinitionDAO">
            <summary>
            MySQL version of DeviceDefinition DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDeviceDefinitionReaderDAO">
            <summary>
            MySQL version of DeviceDefinitionCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDeviceDefinitionMapperReaderDAO">
            <summary>
            MySQL version of GetDeviceDefinitionMapperReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateCmdReaderDAO">
            <summary>
            MySQL version of GateCmdReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateCmdDAO">
            <summary>
            MySQL version of GateCmd DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateMessageRecordLatestDAO">
            <summary>
            MySQL version of GateMessageRecordLatest DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateEventWriterDAO">
            <summary>
            MySQL version of GateEventWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetListenerDAO">
            <summary>
            MySQL version of Listener DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetListenerReaderDAO">
            <summary>
            MySQL version of ListenerReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDeviceDefinitionMapperDAO">
            <summary>
            MySQL version of DefinitionFieldDictionary DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateMessageReaderDAO">
            <summary>
            MySQL version of GateMessageReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGatePostProcessorReaderDAO">
            <summary>
            MySQL version of GatePostProcessorReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGatePostProcessorDAO">
            <summary>
            MySQL version of GatePostProcessor DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetTrackGateDataReaderDAO">
            <summary>
            MySQL version of TrackGateDataReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetTrackPostProcessorLogDAO(System.Int32)">
            <summary>
            MySQL version of TrackPostProcessorLog DAO
            </summary>
            <param name="iPostProcId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetTrackDataModWriterDAO">
            <summary>
            MySQL  version of TrackDataModWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetTrackInfoModWriterDAO">
            <summary>
            MySQL version of TrackInfoModWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetTrackPostProcessorLogReaderDAO">
            <summary>
            MySQL version of TrackPostProcessorLogReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetApplicationDefinitionWriterDAO">
            <summary>
            MySQL version of ApplicationDefinitionWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetApplicationDefinitionReaderDAO">
            <summary>
            MySQL version of ApplicationDefinitionReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetSmsProxyDAO">
            <summary>
            MySQL version of SmsProxy DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDeviceReaderDAO">
            <summary>
            MySQL version of DeviceReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetSmsProxyQueueDAO">
            <summary>
            MySQL version of SmsProxyQueue
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetProtocolReaderDAO">
            <summary>
            MySQL version of ProtocolReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetMobileNetworkReaderDAO">
            <summary>
            MySQL version of MobileNetworkReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDeviceDefinitionMapperCollectionDAO">
            <summary>
            MySQL version of DeviceDefinitionMapperCollection DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetCmdQueueItemDAO">
            <summary>
            MySQL version of CmdQueueItem DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetCmdQueueDAO">
            <summary>
            MySQL version of CmdQueue DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetCmdQueueItemReaderDAO">
            <summary>
            MySQL version of CmdQueueItemReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetCmdArgDAO">
            <summary>
            MySQL version of CmdArg DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEventStateReaderDAO">
            <summary>
            MySQL version of EventStateReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEventChannelReaderDAO">
            <summary>
            MySQL version of EventChannelReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEventStateWriterDAO">
            <summary>
            MySQL version of EventStateWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEventChannelWriterDAO">
            <summary>
            MySQL version of EventChannelWriter DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateEventReaderDAO">
            <summary>
            MySQL version of GateEventReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEventExpressionEvaluatorReaderDAO">
            <summary>
            MySQL version of EventExpressionEvaluatorReader DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetAnalogMessageFieldExpressionDAO">
            <summary>
            MySQL version of AnalogMessageFieldExpression DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDigitalMessageFieldExpressionDAO">
            <summary>
            MySQL version of DigitalMessageFieldExpression DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDerivateMessageFieldExpressionDAO">
            <summary>
            MySQL version of DerivateMessageFieldExpression DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEventExpressionEvaluatorWriterDAO">
            <summary>
            MySQL version of EventExpressionEvaluatorWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGeofenceEventExpressionDAO">
            <summary>
            MySQL version of GeofenceEventExpression DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetIntegrityEventExpressionDAO">
            <summary>
            MySQL version of IntegrityEventExpression DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEventArgumentWriterDAO">
            <summary>
            MySQL version of EventArgumentWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEventExpressionStateWriterDAO">
            <summary>
            MySQL version of EventExpressionStateWriterDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetStringCompareExpressionDAO">
            <summary>
            MySQL version of StringCompareExpressionDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetDayOfWeekPeriodEvaluatorConditionDAO">
            <summary>
            MySQL version of DayOfWeekPeriodEvaluatorConditionDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEventDurationEvaluatorConditionDAO">
            <summary>
            MySQL version of EventDurationEvaluatorConditionDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetUserTagWriterDAO">
            <summary>
            MySQL version of TagWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGeofenceTagWriterDAO">
            <summary>
            MySQL version of GeofenceTagWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetUserTagReaderDAO">
            <summary>
            MySQL version of TagReader DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGeofenceTagReaderDAO">
            <summary>
            MySQL version of GeofenceTagReader DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetViewWriterDAO">
            <summary>
            MySQL version of ViewWriter DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetViewReaderDAO">
            <summary>
            MySQL version of ViewReader DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateUserReaderDAO">
            <summary>
            MySQL version of GateUserReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetCircularGeofenceWriterDAO">
            <summary>
            MySQL version of CircularGeofence DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetPolygonGeofenceWriterDAO">
            <summary>
            MySQL version of PolygonGeofence DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGeofenceEventArgumentDAO">
            <summary>
            MySQL version of GeofenceEventArgument DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGeofenceCollectionDAO">
            <summary>
            MySQL version of GeofenceCollection DAO 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetReportViewerDAO">
            <summary>
            MySQL version of ReportViewer DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetReportViewerTypeInstanceReaderDAO">
            <summary>
            MySQL version of ReportViewerTypeInstanceReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetStoredReportDAO">
            <summary>
            MySQL version of ReportTemplate DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetStoredReportReaderDAO">
            <summary>
            MySQL version of StoredReportReader DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetCommandNotifierDAO">
            <summary>
            MySQL version of EmailNotifierDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetEmailNotifierDAO">
            <summary>
            MSSQL version of EmailNotifierDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetSmsNotifierDAO">
            <summary>
            MySQL version of SmsNotifierDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetChannelNotifierDAO">
            <summary>
            MySQL version of ChannelNotifierDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetUserAttributeNotifierDAO">
            <summary>
            MySQL version of UserAttributeNotifierDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetUserAttributeNotifierReaderDAO">
            <summary>
            MySQL version of UserAttributeNotifierReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetMessageTemplateReaderDAO">
            <summary>
            MySQL version of MessageTemplateReaderDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetFatFreakPostProcessorDAO">
            <summary>
            MySQL version of FatFreakPostProcessorDAOSQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetTemplateCmdReaderDAO">
            <summary>
            MySQL version of TemplateCmdReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetTemplateCmdWriterDAO">
            <summary>
            MySQL version of TemplateCmdWriterDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetGateCmdBagReaderDAO">
            <summary>
            Returns MySQL version of GateCmdBagReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetServicePluginDAO">
            <summary>
            Returns MSSQL version of ServicePluginDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetServicePluginReaderDAO">
            <summary>
            Returns MSSQL version of ServicePluginReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetProviderBagReaderDAO">
            <summary>
            Returns MySQL version of ProviderBagReaderDAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.DAO.GateMySQLDAOFactory.GetProviderBagWriterDAO">
            <summary>
            Returns MySQL version of ProviderBagWriterDAO
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupCollectionDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupCollectionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="option"></param>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupCollectionDAOMSSQL.GetItemType">
            <summary>
            Returns typeof(BuddyGroupDAOMSSQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupCollectionDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupCollectionDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="option"></param>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupCollectionDAOMySQL.GetItemType">
            <summary>
            Returns typeof(BuddyGroupDAOMySQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupDAOSQL">
            <summary>
            BuddyGroup DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupDAOMSSQL.IsPublic">
            <summary>
            group.public_flag (Not that this field is named "public" for MySQL, and "public_flag" for MSSQL.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.DAO.BuddyGroupDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.BuddyGroup">
            <summary>
            A BuddyGroup handles routing of position data between a set of <see cref="T:GpsGate.Online.GateUser"/> objects.
            Users in the BuddyGroup must be invited and accept an invitation.
            </summary>
            <threadsafty static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Directory.GateGroup">
            <summary>
            All group classes in GpsGate.Online dereives from GateGroup.
            E.g. <see cref="!:BodyGroup"/> and <see cref="T:GpsGate.Online.VehicleGroup"/>
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GpsGate.Online.Directory.GateGroup.m_dicGroupRights" -->
        <!-- Badly formed XML comment ignored for member "F:GpsGate.Online.Directory.GateGroup.m_dicConfig" -->
        <member name="F:GpsGate.Online.Directory.GateGroup.GroupRightOwner">
            <summary>
            "Owner"
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroup.GroupRightMember">
            <summary>
            "Member"
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroup.GroupRightPending">
            <summary>
            "Pending"
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroup.GroupRightReader">
            <summary>
            "Reader"
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroup.GroupRightWriter">
            <summary>
            "Writer"
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroup.GroupRightReaderWriter">
            <summary>
            "ReaderWriter"
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroup.GroupRightNoDataRights">
            <summary>
            "NoDataRights"
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroup.GateGroupNamespace">
            <summary>
            "GpsGate.Online"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.CreateGroupRights">
            <summary>
            Must be called when GpsGateApplication starts
            Will make sure group_rights is properly populated to support GateGroup
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.m_init">
            <summary>
            Called by all constructors.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.DoAddNmeaConnection(GpsGate.Online.Net.NmeaConnection,Franson.Directory.GroupRights)">
            <summary>
            Must be overrided by the deriving class. Will be called
            </summary>
            <param name="nmeaConn">Authenticated NmeaConnection</param>
            <param name="rights">The GroupRights the logged in user has on this group.</param>
            <returns>True if derived class accepts this NmeaConnection</returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.AddNmeaConnection(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Called with an authenticated NmeaConnection as argument. Tries to add this connection to this group
            for data routing.
            </summary>
            <param name="nmeaConnection">Authenticated <see cref="T:GpsGate.Online.Net.NmeaConnection"/></param>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.DoFRRDT(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRRDT,Franson.Directory.GroupRights)">
            <summary>
            Implemented by class that derives from GateGroup. Will be called when FRRDT is received in an
            added NmeaConnection
            </summary>
            <param name="nmeaConn">NmeaConnection that received FRRDT</param>
            <param name="frwdt">FRRDT</param>
            <param name="rights">GroupRights for this NmeaConnection in this gateGroup</param>
            <returns>Returns true if FRRDT was accepted</returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.DoFRWDT(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRWDT,Franson.Directory.GroupRights)">
            <summary>
            Implemented by class deriving from gateGroup. Will be called when FRWDT is received from an 
            added NmeaConnection
            </summary>
            <param name="nmeaConn">NmeaConnection that received FRWDT</param>
            <param name="frwdt">FRWDT</param>
            <param name="rights">GroupRights for this NmeaConnection in this gateGroup</param>
            <returns>Returns true if FRWDT was accepted</returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.nmeaConnection_NmeaData(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.Sentence)">
            <summary>
            Called when NMEA data is received from an authenticated <see cref="!:NmeaConenction"/>
            </summary>
            <param name="nmeaConn">From which connection data was received</param>
            <param name="nmeaSentence">Which data.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.DoDisconnect(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Will be called right before an NmeaConnection is disconnected from this group.
            This is typically the case when the NmeaConnection is beeing disposed.
            Can be overridden to clean up resources related to connection being removed.
            </summary>
            <param name="nmeaConn">Connection that is disconnected from group</param>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.ConnectionRights(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Returns the GroupRights for the authenticated connection on this group.
            If NmeaConnection isn't successfully added to this group, null is returned.
            </summary>
            <param name="nmeaConn"><see cref="T:GpsGate.Online.Net.NmeaConnection"/></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.ConnectionConfig(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Returns the FRRDT or FRWDT object associated with the connection. If there is none, null is returned.
            </summary>
            <param name="nmeaConn"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.DoDispose">
            <summary>
            Should be implemented by derived class if it wants to implement some disposal code.
            Will be called when Dispose() is called in a thread safe way
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.IsDisposed">
            <summary>
            Returns true if object is disposed. Meaning the socket is closed due to an error or on purpose.
            </summary>
            <returns></returns>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroup.m_bDisposed">
            <summary>
            True if object as been disposed.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroup.m_bIsDisposing">
            <summary>
            Set to true during the Dispose() method is executing to avoid several threads from
            disposing the same object several times.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroup.Dispose">
            <summary>
            Closes all connections to this GateGroup. The object cannot be used after beeing disposed.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Directory.GateGroup.NoConnectionsInGroup">
            <summary>
            Event fired when no more authenticated NmeaConnections are present in this GateGroup
            </summary>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.#ctor(GpsGate.Online.GateUser,Franson.Directory.Application)">
            <summary>
            Create a new BuddyGroup with gateUser as owner. The name and description of the group will default to
            some text derived from the GateUser
            </summary>
            <param name="gateUser"></param>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.AddMemberOneWay(GpsGate.Online.GateUser)">
            <summary>
            Add a member to this group. The owner of this group will not automatically be a member 
            of the BuddyList the added member owns. This means that this does not build a two way 
            membership, but rather a one way membership.
            This is the case for users like BotUser for example, which
            don't want to be a member of any other user's groups, but want a lot of users in its own group
            </summary>
            <param name="gateUser">User to add to this (BotUser's) group.</param>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.RemoveUserOneWay(GpsGate.Online.GateUser)">
            <summary>
            Remove a user from this group without removing the user from the buddylist that the user
            which are beeing removed owns. This means that any two way relationship will be removed to a single relation.
            </summary>
            <param name="gateUserToRemove">User to remove from this group</param>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.InviteMember(GpsGate.Online.GateUser)">
            <summary>
            Invite other GateUser to this BuddyGroup. The other user must accept the membership.
            </summary>
            <param name="gateUser"></param>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.AcceptMembership(GpsGate.Online.GateUser)">
            <summary>
            Used to accept an invitation to this BuddyGroup. 
            </summary>
            <param name="gateUser">GateUser that accepted the invitation.</param>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.DeclineMembership(GpsGate.Online.GateUser)">
            <summary>
            Decline a membership to this group. Can be called to decline an invitation or to remove
            a user from a group.
            </summary>
            <param name="gateUser">User that declines the mebership.</param>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.SetGroupRightsToUser(Franson.Directory.User,Franson.Directory.GroupRights)">
            <summary>
            Set new group rights to user in this group.
            </summary>
            <param name="user">User to change rights to</param>
            <param name="groupRights">New </param>
            <exception cref="T:Franson.Directory.GroupRightsNotSupportedByGroup">If <see cref="T:Franson.Directory.GroupRights"/> value isn't valid for this group.</exception>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.AddUser(Franson.Directory.User)">
            <summary>
            Do not use. Use InviteMember() instead.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.GetByGroupRight(Franson.Directory.GroupRights)">
            <summary>
            Returns a collection of GateUser's with a specific right in this BuddyGroup
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.LoadByOwner(Franson.Directory.User,Franson.Directory.Application)">
            <summary>
            Loads the buddy list that belongs to gateUser
            </summary>
            <param name="gateUser"></param>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.m_LoadByOwner(System.Int32,System.Int32)">
            <summary>
            Loads the buddy list that belongs to gateUser
            </summary>
            <param name="gateUser"></param>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.Update">
            <summary>
            Saves changes to DB.
            </summary>
            <exception cref="!:BuddyGroupInvalidSetup">If no GateUser is set as Owner to this BuddyGroup</exception>
        </member>
        <member name="M:GpsGate.Online.BuddyGroup.DoAddNmeaConnection(GpsGate.Online.Net.NmeaConnection,Franson.Directory.GroupRights)">
            <summary>
            Add connection to this BuddyGroup.
            </summary>
            <param name="nmeaConnection">Connection to add.</param>
        </member>
        <member name="P:GpsGate.Online.BuddyGroup.Owner">
            <summary>
            GateUser that owns this BuddyGroup. Only one owner is allowed.
            You cannot change the owner of an existing BuddyGroup
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.BuddyGroupCollection.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.BuddyGroupCollection.GetItemType">
            <summary>
            Returns typeof <see cref="T:GpsGate.Online.BuddyGroup"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Buddy.BuddyGroupManager">
            <summary>
            Handles BuddyGroups which are used for community position sharing.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:GpsGate.Online.Directory.GateGroupManager">
            <summary>
            Base class for all group managers like <see cref="!:BuddyGroupManager"/> etc.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroupManager.LoadGateGroups(GpsGate.Online.GateUser)">
            <summary>
            Should be overloaded by deriving class and return a collection of GateGroups of the right 
            type which GateUser has a relationship to.
            </summary>
            <param name="gateUser">GateUser to load groups for</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroupManager.AddNmeaConnection(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Adds a <see cref="T:GpsGate.Online.Net.NmeaConnection"/> to this GateGroupManager. The manager will add the connection to the
            GateGroups it is member of.
            The connection must be authenticated before it is added.
            </summary>
            <param name="nmeaConnection">Connection to add</param>
            <exception cref="!:ConnectionNotAuthenticated">If connection isn't authenticated</exception>
            <exception cref="T:System.ArgumentException">If null argument.</exception>
            <exception cref="T:Franson.Threading.LockTimeoutException">Connection could not be added because of a dead lock.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroupManager.DoDispose">
            <summary>
            Override if derived class needs to dispose some resources
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroupManager.IsDisposed">
            <summary>
            Returns true if object is disposed. Meaning the socket is closed due to an error or on purpose.
            </summary>
            <returns></returns>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroupManager.m_bDisposed">
            <summary>
            True if object as been disposed.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GateGroupManager.m_bIsDisposing">
            <summary>
            Set to true during the Dispose() method is executing to avoid several threads from
            disposing the same object several times.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateGroupManager.Dispose">
            <summary>
            Disposes all GateGroup objects managed by this GateGroupManager. The manager cannot be reused after being disposed.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.BuddyGroupManager.#ctor">
            <summary>
            Create a BuddyGroup Manager. Handles BuddyGroups which are used for community position sharing.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Buddy.BuddyGroupManager.LoadGateGroups(GpsGate.Online.GateUser)">
            <summary>
            Loads all <see cref="T:GpsGate.Online.BuddyGroup"/>s this <see cref="T:GpsGate.Online.GateUser"/> is an active member of.
            </summary>
            <param name="gateUser">User to load groups for</param>
            <returns>Collection of groups</returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Command.AddDeviceCmdBuilder">
            <summary>
            Command used to add a new <see cref="T:GpsGate.Online.Directory.Device"/> to the system.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.AddDeviceCmdBuilder.#ctor(System.Int32,System.String,System.String,Franson.Message.MSISDN,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new command to add new device.
            </summary>
            <param name="iOwnerId">The <see cref="T:GpsGate.Online.GateUser"/> to set as owner to the <see cref="T:GpsGate.Online.Directory.Device"/>. Required parameter.</param>
            <param name="strDeviceName">The name of the <see cref="T:GpsGate.Online.Directory.Device"/>. Required parameter.</param>
            <param name="strIMEI">The IMEI or identifier of the <see cref="T:GpsGate.Online.Directory.Device"/>. Required parameter.</param>
            <param name="msisdn">The Phone Number of the device. Optional parameter, set new empty MSISDN to ignore.</param>
            <param name="strStaticIP">Static IP where this device can be found..</param>
            <param name="iStaticPort">Static Port where this device can be found.</param>
            <param name="strAPN">The APN the <see cref="T:GpsGate.Online.Directory.Device"/> uses. Optional parameter.</param>
            <param name="strGRPSUsername">The GPRS Username the <see cref="T:GpsGate.Online.Directory.Device"/> uses. Optional parameter.</param>
            <param name="strGPRSPassword">The GPRS Username the <see cref="T:GpsGate.Online.Directory.Device"/> uses. Optional parameter.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.AddDeviceCmdBuilder.#ctor(System.Int32,System.String,System.String,Franson.Message.MSISDN,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new command to add new device.
            </summary>
            <param name="iOwnerId">The <see cref="T:GpsGate.Online.GateUser"/> to set as owner to the <see cref="T:GpsGate.Online.Directory.Device"/>. Required parameter.</param>
            <param name="strDeviceName">The name of the <see cref="T:GpsGate.Online.Directory.Device"/>. Required parameter.</param>
            <param name="strIMEI">The IMEI or identifier of the <see cref="T:GpsGate.Online.Directory.Device"/>. Required parameter.</param>
            <param name="msisdn">The Phone Number of the device. Optional parameter, set new empty MSISDN to ignore.</param>
            <param name="strStaticIP">Static IP where this device can be found..</param>
            <param name="iStaticPort">Static Port where this device can be found.</param>
            <param name="strAPN">The APN the <see cref="T:GpsGate.Online.Directory.Device"/> uses. Optional parameter.</param>
            <param name="strGRPSUsername">The GPRS Username the <see cref="T:GpsGate.Online.Directory.Device"/> uses. Optional parameter.</param>
            <param name="strGPRSPassword">The GPRS Username the <see cref="T:GpsGate.Online.Directory.Device"/> uses. Optional parameter.</param>
            <param name="iDeviceMapperID">The id of the <see cref="!:DeviceMapper"/> associated to the <see cref="T:GpsGate.Online.Directory.Device"/></param>
            <param name="iMobileNetworkID">ID of the mobile network</param>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.AddOrUpdateDeviceCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.AddOrUpdateDeviceCmdExe.Commit">
            <summary>
            Writes device updates to database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.AddOrUpdateDeviceCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.AddOrUpdateDeviceCmdExe.Name">
            <summary>
            Returns "_AddOrUpdateDevice"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.AddOrUpdateDeviceCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.AddOrUpdateDeviceCmdExe.Outgoing">
            <summary>
            This is an incoming command. Returns false.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Command.LoginCmdExe">
            <summary>
            _Login
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.LoginCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.LoginCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Called for each argument sentence
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.LoginCmdExe.Commit">
            <summary>
            Routes message and returns response to client.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.LoginCmdExe.Rollback">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.LoginCmdExe.PermitAnonymousAccess">
            <summary>
            Can be executed by an anonymous connection.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.LoginCmdExe.Name">
            <summary>
            Returns name of command. "_Login"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.LoginCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Command.RemoveDeviceCmdBuilder">
            <summary>
            Command used to Remove a <see cref="T:GpsGate.Online.Directory.Device"/> to the system.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveDeviceCmdBuilder.#ctor(System.Int32)">
            <summary>
            Constructor to create a new <see cref="T:GpsGate.Online.Directory.Command.RemoveDeviceCmdBuilder"/>
            </summary>
            <param name="iDeviceId">The ID of the <see cref="T:GpsGate.Online.Directory.Device"/> to remove.</param>
        </member>
        <member name="T:GpsGate.Online.Directory.Command.RemoveDeviceCmdExe">
            <summary>
            System command to remove a <see cref="T:GpsGate.Online.Directory.Device"/> from the system.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveDeviceCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveDeviceCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Receive arguments
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveDeviceCmdExe.Commit">
            <summary>
            Execute command.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveDeviceCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.RemoveDeviceCmdExe.Name">
            <summary>
            Returns "_RemoveDevice"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.RemoveDeviceCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.RemoveDeviceCmdExe.Outgoing">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Command.RemoveUserCmdBuilder">
            <summary>
            Command used to Remove a <see cref="!:User"/> from an application. If user is not memeber of any
            application after removal from the application, it is deleted included all recources belonging to user.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveUserCmdBuilder.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="iUserID">User to delete</param>
            <param name="iTimeout">Timeout in miliseconds before method returns with an error.</param>
        </member>
        <member name="T:GpsGate.Online.Directory.Command.RemoveUserCmdExe">
            <summary>
            System command to remove a <see cref="T:Franson.Directory.User"/> from the system.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveUserCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveUserCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Receive arguments
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveUserCmdExe.Commit">
            <summary>
            Execute command
            </summary>
            <exception cref="T:GpsGate.Online.GateCmdException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.RemoveUserCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.RemoveUserCmdExe.Name">
            <summary>
            Returns "_RemoveUser"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.RemoveUserCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Command.RemoveUserCmdExe.Outgoing">
            <summary>
            Returns "Outgoing"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Command.UpdateDeviceCmdBuilder">
            <summary>
            Command to update an existing <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.UpdateDeviceCmdBuilder.#ctor(System.Int32,System.String,System.String,Franson.Message.MSISDN,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new command to update a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
            <param name="iDeviceID">The ID of the <see cref="T:GpsGate.Online.Directory.Device"/>. Required parameter.</param>
            <param name="strDeviceName">The name of the <see cref="T:GpsGate.Online.Directory.Device"/>.</param>
            <param name="strIMEI">The IMEI or identifier of the <see cref="T:GpsGate.Online.Directory.Device"/>.</param>
            <param name="msisdn">The Phone Number of the device.</param>
            <param name="strStaticIP">Static IP where this device can be found..</param>
            <param name="iStaticPort">Static Port where this device can be found.</param>
            <param name="strAPN">The APN the <see cref="T:GpsGate.Online.Directory.Device"/> uses.</param>
            <param name="strGRPSUsername">The GPRS Username the <see cref="T:GpsGate.Online.Directory.Device"/> uses.</param>
            <param name="strGPRSPassword">The GPRS Password the <see cref="T:GpsGate.Online.Directory.Device"/> uses.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.Command.UpdateDeviceCmdBuilder.#ctor(System.Int32,System.String,System.String,Franson.Message.MSISDN,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new command to update a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
            <param name="iDeviceID">The ID of the <see cref="T:GpsGate.Online.Directory.Device"/>. Required parameter.</param>
            <param name="strDeviceName">The name of the <see cref="T:GpsGate.Online.Directory.Device"/>.</param>
            <param name="strIMEI">The IMEI or identifier of the <see cref="T:GpsGate.Online.Directory.Device"/>.</param>
            <param name="msisdn">The Phone Number of the device.</param>
            <param name="strStaticIP">Static IP where this device can be found..</param>
            <param name="iStaticPort">Static Port where this device can be found.</param>
            <param name="strAPN">The APN the <see cref="T:GpsGate.Online.Directory.Device"/> uses.</param>
            <param name="strGRPSUsername">The GPRS Username the <see cref="T:GpsGate.Online.Directory.Device"/> uses.</param>
            <param name="strGPRSPassword">The GPRS Username the <see cref="T:GpsGate.Online.Directory.Device"/> uses.</param>
            <param name="iDeviceMapperID">The id of the <see cref="!:DeviceMapper"/> associated to the <see cref="T:GpsGate.Online.Directory.Device"/></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.ApplicationDefinitionReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.ApplicationDefinitionReaderDAOSQL">
            <summary>
            ApplicationDefinitionReader DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ApplicationDefinitionReaderDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="connection"></param>
            <param name="command"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ApplicationDefinitionReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns SQL command which loads all application definitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ApplicationDefinitionReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.ApplicationDefinitionReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ApplicationDefinitionReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.ApplicationDefinitionWriterDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ApplicationDefinitionWriterDAOSQL.Add(GpsGate.Online.Directory.ApplicationDefinition)">
            <summary>
            Synchronize a ApplicationDefinition object with the database.
            
            TODO: Can only add new ReportViewer and EventChannels, need to implement removing from db
            </summary>
            <param name="appDef"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ApplicationDefinitionWriterDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.ApplicationDefinitionWriterDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ApplicationDefinitionWriterDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceDAOSQL">
            <summary>
            Device DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load by ID.
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOSQL.LoadByIMEI(System.String)">
            <summary>
            See BO.
            </summary>
            <param name="strIMEI"></param>
            <exception cref="T:GpsGate.Online.DeviceNotFoundException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOSQL.LoadByEmail(System.String)">
            <summary>
            See BO.
            </summary>
            <param name="strEmail"></param>
            <exception cref="T:GpsGate.Online.DeviceNotFoundException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOSQL.LoadByPartialImeiAndProtocolID(System.String,System.String)">
            <summary>
            See BO.
            </summary>
            <param name="strPartialImei"></param>
            <param name="strProtocolID"></param>
            <exception cref="T:GpsGate.Online.DeviceNotFoundException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOSQL.LoadByMSISDN(Franson.Message.MSISDN)">
            <summary>
            See BO.
            </summary>
            <param name="strIMEI"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOSQL.LoadByNameAndOwnerID(System.String,System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="strName"></param>
            <param name="iOwnerID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOSQL.Update">
            <summary>
            Checks for duplicate IMEI number.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.OutgoingTransport">
            <summary>
            device.outgoing_transport
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.Created">
            <summary>
            device.created
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.DeviceName">
            <summary>
            device.device_name
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.DeviceOwnerID">
            <summary>
            device.owner_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.HidePosition">
            <summary>
            device.hide_position (not used)
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.Proximity">
            <summary>
            device.proximity (not used)
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.IMEI">
            <summary>
            device.IMEI
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.Email">
            <summary>
            device.email
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.MSISDN">
            <summary>
            device.phone_number
            </summary>
            <exception cref="T:System.FormatException">If phone number isn't conformant to MSISDN standards.</exception>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.MobileNetworkID">
            <summary>
            device.mobile_network_id Referencec mobile_network.
            Set to null on delete.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.LastIP">
            <summary>
            device.last_ip
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.LastPort">
            <summary>
            device.last_port
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.StaticIP">
            <summary>
            device.static_ip
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.StaticPort">
            <summary>
            device.static_port
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.TrackPoint">
            <summary>
            Last track point for device. Valid or not valid.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.ProtocolID">
            <summary>
            device.protocol_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.ProtocolVersionID">
            <summary>
            device.protocol_version_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.DeviceDefinitionID">
            <summary>
            device.dev_def_id.
            
            Foreign key to device_def. 
            Used to specifies the capabilities and characteristics of a device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.MessageFieldDictionaryID">
            <summary>
            device.msg_field_dict_id.
            
            Foreign key to msg_field_dictionary. 
            Used to specify how this device messges should be mapped to generic ones.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.APN">
            <summary>
            device.apn. varchar(128)
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.GPRSUsername">
            <summary>
            device.gprs_username. varchar(32)
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDAOSQL.GPRSPassword">
            <summary>
            device.gprs_password. varchar(32)
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL">
            <summary>
            DeviceDefinition DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.RegisterCommand(System.Int32,System.String[],System.Boolean)">
            <summary>
            Add, update or delete a gate command for this device definition.
            </summary>
            <param name="iGateCmdID"></param>
            <param name="arrTransports"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.LoadByName(System.String)">
            <summary>
            Avoid using this method as 
            </summary>
            <param name="strName"></param>
            <param name="strNamespaceName"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.Exists(System.String)">
            <summary>
            Returns true if this device definition name exists in database.
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load by device_def.dev_def_id
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.LoadByBO(System.String)">
            <summary>
            Load by BO type.
            </summary>
            <param name="strTypeName"></param>
            <exception cref="T:Franson.DAO.NotFoundException"></exception>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.DeviceName">
            <summary>
            device_def.device_name
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.Description">
            <summary>
            device_def.description
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.NamespaceId">
            <summary>
            device_def.msg_ns_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.DeviceMessageMapperTemplateID">
            <summary>
            template_msg_field_dict_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOSQL.Upgradable">
            <summary>
            device_def.upgradable
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOSQL">
            <summary>
            DeviceDefinitionCollection DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOSQL.GetByID(System.Int32)">
            <summary>
            Read one device definition by database ID.
            </summary>
            <param name="iDeviceDefinitionID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOSQL.LoadByNameAndNamespace(System.String,System.String)">
            <summary>
            Do not use!
            </summary>
            <param name="strName"></param>
            <param name="strNamespaceName"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOSQL.LoadByProtocol(System.String)">
            <summary>
            Set SQL query to load all device definitions for specified protocol.
            </summary>
            <param name="strProtocol"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOSQL.LoadAll">
            <summary>
            Load all device definitions from database. Ordered by name.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOSQL.LoadAllForProtocols">
            <summary>
            Loads DeviceDefinition for enabled/existing protocols. Result ordered by name.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOSQL.LoadByMessageFieldDictionaries(System.Int32[])">
            <summary>
            Loads DeviceDefinition for the given MessageFieldDictionaries (device mappers)
            </summary>
            <param name="iMessageFieldDictionaryIDs"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOSQL.LoadByType(System.String)">
            <summary>
            Loads DeviceDefinitions of the given type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceDefinitionReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.#ctor">
            <summary>
            Create Device reader DAO
            </summary>
            <param name="connection"></param>
            <param name="command"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.GetByOwnerID(System.Int32)">
            <summary>
            Load all devices connected to specified user.
            </summary>
            <param name="iUserID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.GetByMessageFieldDictionary(System.Int32)">
            <summary>
            Get all devices using the given deive mapper.
            </summary>
            <param name="iMsgFieldDictID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.GetByDeviceDefinition(System.Int32)">
            <summary>
            Get all devices using the given device definition.
            </summary>
            <param name="iDeviceDefinitionID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.GetByDeviceTypeInTags(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get all devices of the given type found in the given set of tags.
            </summary>
            <param name="iDeviceDefinitionID"></param>
            <param name="TagsIDs"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.GetByDeviceTypeInApplication(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get all devices of the specified type in the given applications.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.GetByTags(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get all devices found for users member of the given tags.
            </summary>
            <param name="TagIDs"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.GetByApplication(System.Int32)">
            <summary>
            Get all devices in the given application.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.GetByQuery(System.String)">
            <summary>
            Get all devices matching the specified query.
            </summary>
            <param name="strQuery"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.ReaderToBag(System.Data.IDataReader)">
            <summary>
            IDataReader to DeviceBag.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOSQL.ReaderToBag(System.Data.IDataReader,System.Boolean)">
            <summary>
            IDataReader to DeviceBag with (optional) additional data.
            </summary>
            <param name="reader"></param>
            <param name="bAdditionalInfo"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceReaderDAOMSSQL">
            <summary>
            MS SQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceSearchDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceSearchDAOSQL">
            <summary>
            DeviceSearch DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceSearchDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceSearchDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.DeviceSearchDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.DeviceSearchDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GateUserCollectionDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GateUserCollectionDAOSQL">
            <summary>
            GateUserCollection DAO
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserCollectionDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserCollectionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserCollectionDAOMSSQL.GetItemType">
            <summary>
            Returns typeof(GateUserDAOMSSQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GateUserCollectionDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserCollectionDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserCollectionDAOMySQL.GetItemType">
            <summary>
            Returns typeof(GateUserDAOMySQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GateUserDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GateUserDAOSQL">
            <summary>
            GateUser DAO. For "gate_user" table.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Resolves gate_user.user_id
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserDAOSQL.OnLoaded(System.String)">
            <summary>
            Loads information from gate_user table in complement to users table.
            </summary>
            <param name="strLoadedTableName"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserDAOSQL.Remove">
            <summary>
            Make sure gate_user record is deleted as well.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.Longitude">
            <summary>
            gate_user.longitude
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.Latitude">
            <summary>
            gate_user.latitude
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.GroundSpeed">
            <summary>
            gate_user.ground_speed
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.Altitude">
            <summary>
            gate_user.altitude
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.Heading">
            <summary>
            gate_user.heading
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.UtcTimeStamp">
            <summary>
            gate_user.time_stamp
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.ServerUtcTimeStamp">
            <summary>
            gate_user.server_time_stamp
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.Delay">
            <summary>
            gate_user.delay
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.DeviceActivity">
            <summary>
            gate_user.device_activity
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserDAOSQL.LastTransport">
            <summary>
            gate_user.last_transport
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GateUserDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="concurrencyOption"></param>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GateUserSearchDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL">
            <summary>
            The UserDAO class represents the Data Access Object of the User class 
            in the business tier. The SQL queries in this class should be platform
            independent, i.e. on both MS SQL and MySql.  
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL.LoadGateUsers(System.Int32,System.String[])">
            <summary>
            Load by Group and GroupRights.
            </summary>
            <param name="iGroupsID">ID of groups that selected user should be in</param>
            <param name="arrGroupRights">Array of group rights.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL.LoadGateUsersByRangeAndGroup(System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads GateUsers from a specific range and a specific group. The start is not included, the end is included. 
            </summary>
            <param name="iStart">Start + 1 is the first record in the range to be returned.</param>
            <param name="iStop">Stop is the last record in the range to be returned.</param>
            <param name="iGroupID">Loads GateUsers that are members (independent of there state) in this group.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL.LoadGateUserByRangeTimeSpanAndGroup(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads GateUsers from a specific range, time span and a specific group. The start is not included, the end is included. 
            </summary>
            <param name="iStart">Start + 1 is the first record in the range to be returned.</param>
            <param name="iStop">Stop is the last record in the range to be returned.</param>
            <param name="iTimeSpan">GateUsers that have time span older than this will not be included.</param>
            <param name="iGroupID">Loads GateUsers that are members (independent of there state) in this group.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL.ToFRPOS">
            <summary>
            Converts loaded DataSet to an array of FRPOS. Only users with a valid position are inserted in the array.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL.ToUsernameArray">
            <summary>
            Returns array of all usernames of loaded result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL.ToGateUserStructArray">
            <summary>
            Returns an array of vehicles. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL.m_BuildRightsSQL(System.String[])">
            <summary>
            A helper method that converts an array of string values to a comma separated string with paranteces around
            e.g. " ('Reader', 'ReaderWriter') " for use in a SQL query.
            </summary>
            <param name="arrRights">Array with string values to be placed in list.</param>
            <returns>String to be inserted in SQL query.</returns>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserSearchDAOSQL.PublicFieldName">
            <summary>
            Returns "public"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GateUserSearchDAOMSSQL.PublicFieldName">
            <summary>
            Returns "public_flag"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GateUserSearchDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GateUserSearchDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GroupSearchDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL">
            <summary>
            The UserDAO class represents the Data Access Object of the User class 
            in the business tier. The SQL queries in this class should be platform
            independent, i.e. on both MS SQL and MySql.  
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupsByUser(System.Int32)">
            <summary>
            Loads all groups that the specified user is member in. 
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupsByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Loads all groups that the specified user is member in and belongs to a specific application. 
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupWithAdminRightsByUserAndGroupIdAndApplication(System.Int32,System.Int32,System.Int32)">
            <summary>
            See <see cref="!:GpsGate.Online.Directory.FetchGroupWithAdminRightsByUserAndGroupIdAndApplication"/>
            </summary>
            <param name="iUserId"></param>
            <param name="iGroupId"></param>
            <param name="iApplicationId"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupsAndAdminRightsByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Loads all Groups where user are member. If group type BTBuddyGroup we only load the group where user are owner.
            </summary>
            <param name="iUserID"></param>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupsWithRightsRelationsByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Fills a dataset with:
             1. A group table with groups by user_id and application_id 
             2. A group_rights table with all group rights
            </summary>
            <param name="iUserID"></param>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupsByApplication(System.Int32)">
            <summary>
            Fills a dataset with:
             1. A group table with groups by user_id and application_id 
             2. A group_rights table with all group rights
            </summary>
            <param name="iUserID"></param>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupsByApplicationAndType(System.Int32,System.String)">
            <summary>
            Fills a dataset with:
             1. A group table with groups by user_id and application_id 
             2. A group_rights table with all group rights
            </summary>
            <param name="iUserID"></param>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupByApplicationAndType(System.Int32,System.String,System.Int32)">
            <summary>
            Fills a dataset with:
             1. A group table with groups by user_id and application_id 
             2. A group_rights table with all group rights
            </summary>
            <param name="iUserID"></param>
            <param name="iApplicationID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupsByApplicationAndTypeWithRelationTables(System.Int32,System.String)">
            <summary>
            Load all groups an relation helper tables;
            </summary>
            <param name="iApplicationId"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.LoadGroupByApplicationAndTypeWithRelationTables(System.Int32,System.String,System.Int32)">
            <summary>
            Load all groups an relation helper tables;
            </summary>
            <param name="iApplicationId"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOSQL.ToBagArray">
            <summary>
            Returns an array of vehicles. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.GroupSearchDAOMSSQL.PublicFieldName">
            <summary>
            Returns "public_flag" which overrides that default field name "public" for group.public
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.GroupSearchDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GroupSearchDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOMySQL">
            <summary>
            MySQL implementation
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL">
            <summary>
            Generic SQL implementation
            <see cref="T:GpsGate.Online.Directory.MobileNetworkReader"/>
            
            Depends on the "country" and "mobile_network" tables 
            added in the GpsGateServerModule_2.0.1.1070 DB-module
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL.m_strSQL">
            <summary>
            The currently active SQL-command
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL.GetByID(System.Int32)">
            <summary>
            Gets the network by ID.
            </summary>
            <param name="iID">The network's ID.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Command object not set</exception>
            <exception cref="T:Franson.DAO.ReaderDBException">Error reading from database.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">Failed to get a connection to database.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL.GetByCountry(System.String)">
            <summary>
            Gets the networks available in a certain country.
            </summary>
            <param name="strCountry">The country.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Command object not set</exception>
            <exception cref="T:Franson.DAO.ReaderDBException">Error reading from database.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">Failed to get a connection to database.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL.GetByOperator(System.String)">
            <summary>
            Gets all the networks belonging to a certain operator.
            </summary>
            <param name="strOperator">The operator.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Command object not set</exception>
            <exception cref="T:Franson.DAO.ReaderDBException">Error reading from database.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">Failed to get a connection to database.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL.GetAvailableCountries">
            <summary>
            Gets all the available countries.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Command object not set</exception>
            <exception cref="T:Franson.DAO.ReaderDBException">Error reading from database.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">Failed to get a connection to database.</exception>		
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL.ReaderToBag(System.Data.IDataReader)">
            <summary>
            Extracts a typed MobileNetworkBag object from an IDataReader
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns SQL command to be executed by <see cref="!:Execute"/>.
            Derived DAO object should override this abstract method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOMySQL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOMySQL"/> class.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOMSSQL">
            <summary>
            MS SQL implementation
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOMSSQL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GpsGate.Online.Directory.DAO.MobileNetworkReaderDAOMSSQL"/> class.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="T:GpsGate.Online.Directory.DAO.ProtocolReaderDAOSQL">
            <summary>
            Protocol DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ProtocolReaderDAOSQL.#ctor">
            <summary>
            Create reader
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ProtocolReaderDAOSQL.GetAll">
            <summary>
            Reads all protocols from database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ProtocolReaderDAOSQL.ExecureProtocolReader">
            <summary>
            Executes and creates bags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ProtocolReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns SQL string for execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.TagReaderDAOSQL`1.GetByApplication(System.Int32)">
            <summary>
            Returns all tags in specified applicaiton. Ordered be name.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.TagReaderDAOSQL`1.GetByIDs(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns all tags with the given IDs
            </summary>
            <param name="iTagIDs"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.TagReaderDAOSQL`1.GetReferenceTable">
            <summary>
            Implementing classes should return link table to ID of object which are tagged.
            
            E.g: UserTagReader return "tag_users"
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.TagReaderDAOSQL`1.GetReferenceColumn">
            <summary>
            Implementing classes should return the column name of the column in reference table which contains 
            the IDs for the object which are tagged.
            
            E.g: UserTagReader returns "user_id"
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.TagWriterDAOSQL.Name">
            <summary>
            Name of the tag. Max 64 characters.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.TagWriterDAOSQL.Description">
            <summary>
            Description of the tag.
            Max 255 Characters
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.TagWriterDAOSQL.ApplicationID">
            <summary>
            The id of the application this tag is associated to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.TagWriterDAOSQL.ChildObjectIDs">
            <summary>
            Get the list of users associated to this tag.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.DAO.GeofenceTagWriterDAOSQL.m_iFlaggedForRemoveTmpID">
            <summary>
            Must store ID before calling base.Remove. We cant access properties on rows flaged removed.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GeofenceTagWriterDAOSQL.Remove">
            <summary>
            Overridden to check for Remove constraints.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.GeofenceTagWriterDAOSQL.Update">
            <summary>
            Override to check for referencing expressions before removing tag.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DAO.ViewWriterDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load the cview writer for edit of an existing view identified by its unique ID.
            </summary>
            <param name="iID"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.ViewWriterDAOSQL.Name">
            <summary>
            Name of the View. Max 64 characters.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.ViewWriterDAOSQL.Description">
            <summary>
            Description of the View.
            Max 255 Characters
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.ViewWriterDAOSQL.ApplicationID">
            <summary>
            The id of the application this View is associated to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DAO.ViewWriterDAOSQL.TagIDs">
            <summary>
            Get the list of users associated to this tag.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Email.EmailDeviceDefinition">
            <summary>
            Defines an Plain text email device.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceDefinition">
            <summary>
            Describe capabilities and properties of a device Model.
            
            Ex. MessageFields and Command Support
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.Load">
            <summary>
            Loads from database by bo type.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.Install(Franson.Reflection.LoadableType)">
            <summary>
            Install MessageFields, device mapper and other device model specific properties.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.Install(Franson.Reflection.LoadableType,System.Boolean)">
            <summary>
            Install MessageFields, device mapper and other device model specific properties.
            </summary>
            <param name="typeInfo"></param>
            <param name="bUpgradable">Change default value for the Upgradable property.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.Upgrade(Franson.Reflection.LoadableType)">
            <summary>
            Called if version number of plugin has increased. Goes through all instances of the given type and upgrades them separately.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.UpgradeInstance(System.Int32)">
            <summary>
            Updates the given device definition. Will add any additional fields and mappings.
            </summary>
            <param name="iDeviceDefinitionID"></param>
            <returns>Whether an update actually occurred (the Upgradable property could have been false).</returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.ToString">
            <summary>
            Returns <see cref="P:GpsGate.Online.Directory.DeviceDefinition.Name"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.InstallMessageFields(Franson.Message.MessageNamespace)">
            <summary>
            This method is called during installation to get a list of the device definitions <see cref="T:Franson.Message.MessageField"/>
            </summary>
            <param name="deviceNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.InstallMessageFields(Franson.Message.MessageNamespace,System.Collections.Generic.List{GpsGate.Online.Directory.DeviceFieldProperty})">
            <summary>
            Called during installation to add <see cref="T:Franson.Message.MessageField"/>s to this device definition.
            </summary>
            <param name="deviceNamespace"></param>
            <param name="listField"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.InstallDefaultMapperEntryFor(Franson.Message.MessageField,Franson.Message.MessageFieldDictionary)">
            <summary>
            Method is used to create the default device mapper for the device definition.
            This method will be called during installation of the <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/> for each <see cref="T:Franson.Message.MessageField"/> returned by InstallMessageFields method.
            Return a <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/> to create an map entry in the default <see cref="T:GpsGate.Online.Directory.DeviceDefinitionMapperTemplate"/> for this DeviceDefinition
            </summary>
            <param name="inField">The device <see cref="T:Franson.Message.MessageField"/> be mapped to an out field for the default mapper.</param>
            <param name="defaultMapper">An instance of the default mapper the <see cref="T:Franson.Message.MessageFieldDictionaryEntry"/> are going to be added to.</param>
            <returns>Return null if this field not are going to be included in the default mapper.</returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.RegisterCommad(GpsGate.Online.Command.GateCmd)">
            <summary>
            Called when base class RegisterCommand is called to let derived classes return the
            support and transport for command.
            </summary>
            <param name="gateCommand"></param>
            <returns>Return null if not supported, else return a CommandProperty struct</returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.InstallDefaultMessageFields(Franson.Message.MessageNamespace)">
            <summary>
            Installs default <see cref="T:Franson.Message.MessageField"/> for a <see cref="!:DeviceDefintion"/>
            Fields: Speed, Heading and Altitude
            Note! Override this if fields not are supported.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.InstallDefaultMapperEntryForDefaultMessageField(Franson.Message.MessageField,Franson.Message.MessageFieldDictionary)">
            <summary>
            Installs mapping for the default fields. Currently no default mapping is made.
            Override this to change mapping for default fields in the default mapper.
            </summary>
            <param name="inField"></param>
            <param name="defaultMapper"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.RegisterCustomCommand(GpsGate.Online.Command.GateCmd,System.String[])">
            <summary>
            Register a command that was not supported by the original device definition, this could for example be a Temnplate Command.
            <see cref="!:Update"/> is called.
            </summary>
            <param name="gateCmd"></param>
            <param name="strTransport"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.UnregisterCustomCommand(GpsGate.Online.Command.GateCmd)">
            <summary>
            Unregister a custom command that was not supported by the original device definition.
            An original command will not be unregistered with this method.
            <see cref="!:Update"/> is called.
            </summary>
            <param name="gateCmd"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.RegisterCommands(System.Collections.Generic.IEnumerable{GpsGate.Online.Command.GateCmd})">
            <summary>
            Register outgoing original command that this device definition supports.
            The device definition plugin is first asked if the command is supported or not.
            <see cref="!:Update"/> is called within this method.
            </summary>
            <param name="gateCommand"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.GetAvailableCommands">
            <summary>
            Gets all the commands that are available for this device definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.GetAvailableMsgFieldDictEntries">
            <summary>
            Gets the message field dictionary entries that are available for this device definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.AddMessageFieldEntry(System.Int32,System.Boolean)">
            <summary>
            Add a message field dictionary entry.
            </summary>
            <param name="iFieldID"></param>
            <param name="bDefaultSaveChangesOnly"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinition.RemoveMessageFieldEntry(System.Int32)">
            <summary>
            Remove a message field dictionary entry.
            </summary>
            <param name="iFieldID"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.Name">
            <summary>
            The name of the DeviceDefinition which will be set during the installation. (e.g TR 151)
            This is a constant for the device definition class. See <see cref="P:GpsGate.Online.Directory.DeviceDefinition.DisplayName"/> for the database value.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.DisplayName">
            <summary>
            Database name. This is the name that should be displayed. Can be changed. Defaults to <see cref="P:GpsGate.Online.Directory.DeviceDefinition.Name"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.Description">
            <summary>
            Description. This is a constant string from the device definition class. See <see cref="P:GpsGate.Online.Directory.DeviceDefinition.DisplayDescription"/> for value
            to edit and display.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.DisplayDescription">
            <summary>
            Editable description. Value is taken from database. Use this value when you display the description. 
            Defaults to <see cref="P:GpsGate.Online.Directory.DeviceDefinition.Description"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.SupportsStaticIP">
            <summary>
            Returns the device support of static IP address.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.SupportDeviceMapper">
            <summary>
            Indicates if this DeviceDefinition supports device mappers.
            Devices such as email devices do not.
            
            Override this and return false to disable DeviceMappers.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.NamespaceName">
            <summary>
            Override and return namespace for message fields. Note that this is not necessarily the same as ProtocolID.
            If the <see cref="T:Franson.Message.MessageNamespace"/> does not exist a new one will be added with this name.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.ProtocolID">
            <summary>
            Override and return ProtocolID for this device definition. 
            Note that this is not the same thing as message namespace.
            By default <see cref="P:GpsGate.Online.Directory.DeviceDefinition.NamespaceName"/> is returned.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.RequireGuiInput">
             <summary>
             Defines which fields to enable in the device manager GUI.
             
             Possible values:
             "NAME" - Enables the name input field.
             "IMEI" - Enables the input field for imei number.
             "MSISDN" - Enables the input field for msisdn (phone number)
             "EMAIL" - Enables the input field for email address.
             
             Default values are: "NAME", "IMEI", MSISDN"
             
             To change the default values override this method.
            
             Rrturn null to disable GUI for this device.
             
             Note! You must decorate the property with [Franson.Serialization.Serialize] attribute.
             </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.ID">
            <summary>
            Id of the <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.NamespaceId">
            <summary>
            The Id of the <see cref="T:Franson.Message.MessageNamespace"/> this <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/> is member of.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.Namespace">
            <summary>
            Returns the complete <see cref="T:Franson.Message.MessageNamespace"/> object.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.DeviceIdentifierLabel">
            <summary>
            Returns "IMEI". Override if a device is identified by something else than IMEI. This label will be written in the
            device management GUI.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.DeviceMessageMapperTemplate">
            <summary>
            Returns the <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/>'s default "device message mapper"
            
            Returns NULL if no mapper is specified for the device definition.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.DeviceMessageMapperTemplateID">
            <summary>
            Returns database ID of default Device Message Mapper for this device definition.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.Upgradable">
            <summary>
            Returns whether or not this device definition is upgradable.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.DeviceFieldProperties">
            <summary>
            List of <see cref="T:Franson.Message.MessageField"/> the device model supports.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.SupportedCommands">
            <summary>
            Returns a IEnumerable of supported GateCommands and for which transport protocols.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.SupportedTransports">
            <summary>
            Returns array of supported transports for this device type. By default transports for listeners of the
            device types protocol is returned. If no supported transport are found null is returned.
            Override if device type has a more limited transport support than default.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.DAO">
            <summary>
            Data access object.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.NamespaceNameWrapper">
            <summary>
            Public accessor to NamespaceName.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinition.ProtocolIDWrapper">
            <summary>
            Public accessor to ProtocolID.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Email.EmailDeviceDefinition.InstallDefaultMapperEntryFor(Franson.Message.MessageField,Franson.Message.MessageFieldDictionary)">
            <summary>
            NOP - Email Device do not have MessageFieldsDictionary
            </summary>
            <param name="inField"></param>
            <param name="defaultMapper"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.Email.EmailDeviceDefinition.RegisterCommad(GpsGate.Online.Command.GateCmd)">
            <summary>
            NOP - Email Device do not have any commands.
            </summary>
            <param name="gateCommand"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.Email.EmailDeviceDefinition.Name">
            <summary>
            Returns Email Device
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Email.EmailDeviceDefinition.Description">
            <summary>
            Describes the email device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Email.EmailDeviceDefinition.NamespaceName">
            <summary>
            returns Plain
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Email.EmailDeviceDefinition.ProtocolID">
            <summary>
            returns Plain
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Email.EmailDeviceDefinition.SupportDeviceMapper">
            <summary>
            Do not support device mappers.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Email.EmailDeviceDefinition.RequireGuiInput">
            <summary>
            Defines which fields to enable in the device manager GUI.
            
            Returns. null
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.ReferenceDevice.GenericDeviceDefinition">
            <summary>
            Defines the capabilities of a GpsGate Generic Device such as MessageFields, Default Mapper and Command support
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ReferenceDevice.GenericDeviceDefinition.InstallMessageFields(Franson.Message.MessageNamespace)">
            <summary>
            No fields in GpsGate. Returns null.
            </summary>
            <param name="deviceNamespace"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.ReferenceDevice.GenericDeviceDefinition.InstallDefaultMapperEntryFor(Franson.Message.MessageField,Franson.Message.MessageFieldDictionary)">
            <summary>
            Returns null. No default mapper entries for GpsGate.
            </summary>
            <param name="inField"></param>
            <param name="defaultMapper"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.ReferenceDevice.GenericDeviceDefinition.RegisterCommad(GpsGate.Online.Command.GateCmd)">
            <summary>
            Returns null. No commands available for GpsGate.
            </summary>
            <param name="gateCommand"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.ReferenceDevice.GenericDeviceDefinition.Name">
            <summary>
            Name of the Device Model
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ReferenceDevice.GenericDeviceDefinition.Description">
            <summary>
            Device model description
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ReferenceDevice.GenericDeviceDefinition.NamespaceName">
            <summary>
            Message namespace. Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ReferenceDevice.GenericDeviceDefinition.ProtocolID">
            <summary>
            Protocol. Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.ReferenceDevice.TrackerOneDeviceDefinition">
            <summary>
            Defines the capabilities of GpsGate TrackerOne device such as MessageFields, Default Mapper and Command support
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ReferenceDevice.TrackerOneDeviceDefinition.InstallDefaultMapperEntryFor(Franson.Message.MessageField,Franson.Message.MessageFieldDictionary)">
            <summary>
            Default mapping
            </summary>
            <param name="inField"></param>
            <param name="defaultMapper"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.ReferenceDevice.TrackerOneDeviceDefinition.Name">
            <summary>
            Returns "GpsGate TrackerOne".
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ReferenceDevice.TrackerOneDeviceDefinition.Description">
            <summary>
            Device model description
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ReferenceDevice.TrackerOneDeviceDefinition.NamespaceName">
            <summary>
            Message namespace. Returns "GpsGateDevice"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ReferenceDevice.TrackerOneDeviceDefinition.ProtocolID">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Security.DeviceManagementAuthorize">
            <summary>
            Authorize Track management operations.
            Including:
            - Read/Edit DeviceDefinitions
            - Read/Edit Devices
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.DeviceManagementAuthorize.#ctor(System.Boolean)">
            <summary>
            Used for site wide authorization. No application belonging is checked.
            </summary>
            <param name="bRequireWrite">Set to true to check write priviledges.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.DeviceManagementAuthorize.#ctor(System.Int32,System.Boolean)">
            <summary>
            Used for application based authorization. Checks if device's owner, to which to operation is performed.
            And the logged in user are in the same application.
            </summary>
            <param name="iDeviceOwnerID">Device on which operation should be performed.</param>
            <param name="bRequireWrite">Set to true to check write priviledges.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.DeviceManagementAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Returns true if logged in user in session may perform the operation.
            Depending on the used constructor a site or application context is used for authorization.
            If logged in user has priviledge "_EditDeviceAll" true is returned for write operations.
            For "_EditDeviceOwner" true is returned for write operations on own device.
            For "_ReadDeviceAll" true is returned for read operations.
            For "_ReadDeviceOwner" true is returned for read operations on own device.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Security.DeviceMapperAuthorize">
            <summary>
            Authorize Device Mapper operations.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.DeviceMapperAuthorize.#ctor(System.Boolean)">
            <summary>
            Create new DeviceMapper Authorizer
            </summary>
            <param name="bRequireWrite"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.DeviceMapperAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Authorize the session.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Security.GroupAuthorize">
            <summary>
            Authenticates group operations.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.GroupAuthorize.#ctor(System.String)">
            <summary>
            Create new Group authorizor
            </summary>
            <param name="strGroupName"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.GroupAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            If _ReadGroupMember user must be in group. 
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Security.ResetCommandQueueAuthorize">
            <summary>
            Checks if the user (current session) has the right to abort a template command.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.ResetCommandQueueAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Checks _ResetCommandQueue privileges for the specified session.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Security.ViewAuthorize">
            <summary>
            Authorize view operations.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.ViewAuthorize.#ctor(System.Boolean)">
            <summary>
            Create a new Authorize operation.
            </summary>
            <param name="bWriteAccess">Write access reequired</param>
        </member>
        <member name="M:GpsGate.Online.Directory.Security.ViewAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Authorize operation.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Service.DAO.ServicePluginDAO">
            <summary>
            DAO to handle database paramaters
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.DAO.ServicePluginDAO.#ctor">
            <summary>
            Create DAO.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.DAO.ServicePluginDAO.LoadByID(System.Int32)">
            <summary>
            Loads item from service_plugin
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException"></exception>
        </member>
        <member name="P:GpsGate.Online.Directory.Service.DAO.ServicePluginDAO.Enabled">
            <summary>
            service_plugin.enabled
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Service.DAO.ServicePluginReaderDAO">
            <summary>
            DAO.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.DAO.ServicePluginReaderDAO.LoadEnabled(System.Boolean)">
            <summary>
            See BO.
            </summary>
            <param name="bEnabled"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.DAO.ServicePluginReaderDAO.GetSqlCommand">
            <summary>
            Returns SQL statement to load all loadable service plugins.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Service.ServicePlugin">
            <summary>
            All service plugins inhertirs from this class. A service plugin adds real time core functionallity
            to NMEA Service.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePlugin.#ctor">
            <summary>
            Sets DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePlugin.Start">
            <summary>
            Called when service plugin is started. Will call <see cref="M:GpsGate.Online.Directory.Service.ServicePlugin.OnStart"/>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePlugin.OnStart">
            <summary>
            Called when service plugin is started. Overrride to implement custom functionallity.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePlugin.Stop">
            <summary>
            Called when service plugin is stopped. Will call <see cref="M:GpsGate.Online.Directory.Service.ServicePlugin.OnStop"/>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePlugin.OnStop">
            <summary>
            Called when service plugin is stopped. Override to implement custom functionallity.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePlugin.Install(Franson.Reflection.LoadableType)">
            <summary>
            Install plugin,
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePlugin.ToBag">
            <summary>
            Returns read only bag.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.Service.ServicePlugin.Enabled">
            <summary>
            Returns true if service plugin is enabled.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Service.ServicePluginBag">
            <summary>
            Read only information about a service plugin.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePluginBag.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Create bag.
            </summary>
            <param name="iID"></param>
            <param name="strName"></param>
            <param name="bEnabled"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.Service.ServicePluginBag.ID">
            <summary>
            Database ID.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Service.ServicePluginBag.Description">
            <summary>
            Free text description.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Service.ServicePluginBag.Enabled">
            <summary>
            True if enabled, and started when NMEA Service starts.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Service.ServicePluginReader">
            <summary>
            Reads service plugins from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePluginReader.#ctor">
            <summary>
            Create reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePluginReader.LoadEnabled(System.Boolean)">
            <summary>
            Call with true as argument to only load enabled service plugins from database.
            Use false as argument to load all service plugins from database. Default false.
            </summary>
            <param name="bEnabled"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Service.ServicePluginReader.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns "service_plugin_id"
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOSQL">
            <summary>
            DAO for table sms_proxy.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOSQL.#ctor">
            <summary>
            Create DAO.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load by database ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">If ID isn't found.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOSQL.LoadByOwnerID(System.Int32)">
            <summary>
            Load SMS proxy by owner.
            </summary>
            <param name="iUserID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">If user doesn't own any proxy.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOSQL.LoadSiteProxy">
            <summary>
            Loads the default site proxy instance .
            
            NOTE: This method assume first record is site proxy instance.
            	  This routine must be rewritten when multiple instances of proxies are allowed in the system.	
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOSQL.OwnerID">
            <summary>
            sms_proxy.owner_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOSQL.MSISDN">
            <summary>
            sms_proxy.phone_number
            </summary>
            <exception cref="T:System.FormatException">If the phone number string is misformed</exception>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOSQL.Enabled">
            <summary>
            sms_proxy.enabled
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOSQL">
            <summary>
            SmsProxyQueue DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOSQL.LoadBySmsProxyAndMessageProvider(System.Int32,System.Int32)">
            <summary>
            Load sms_proxy_queue and provider_message_queue tables.
            </summary>
            <param name="iSmsProxyID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOSQL.OnLoaded(System.String)">
            <summary>
            Loads info from sms_proxy_queue table.
            </summary>
            <param name="strTableName"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Resolves sms_queue.provider_message_queue_id for new queue.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOSQL.SmsProxyID">
            <summary>
            sms_proxy_queue.sms_proxy_id
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.DAO.SmsProxyQueueDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.Security.SmsProxyAuthorize">
            <summary>
            Authorize SMS Proxy  operations.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.Security.SmsProxyAuthorize.#ctor(System.Boolean)">
            <summary>
            Create a new Authorizer to authorize SmsProxy operations.
            </summary>
            <param name="bRequireWrite"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.CellPhoneDeviceDefinition">
            <summary>
            A device capable of receiving and or sending plain text SMS messages
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.CellPhoneDeviceDefinition.InstallDefaultMapperEntryFor(Franson.Message.MessageField,Franson.Message.MessageFieldDictionary)">
            <summary>
            Overridden. Cell Phone device do not have MessageFieldsDictionary.
            </summary>
            <param name="inField"></param>
            <param name="defaultMapper"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.CellPhoneDeviceDefinition.RegisterCommad(GpsGate.Online.Command.GateCmd)">
            <summary>
            Overridden. Cell Phone device does not have commands.
            </summary>
            <param name="gateCommand"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.CellPhoneDeviceDefinition.Name">
            <summary>
            Name of this device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.CellPhoneDeviceDefinition.Description">
            <summary>
            Description of this device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.CellPhoneDeviceDefinition.NamespaceName">
            <summary>
            returns "Plain"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.CellPhoneDeviceDefinition.ProtocolID">
            <summary>
            The encoding protocol of the message. Returns "Plain".
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.CellPhoneDeviceDefinition.SupportDeviceMapper">
            <summary>
            Do not support device mappers.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.CellPhoneDeviceDefinition.RequireGuiInput">
            <summary>
            Defines which fields to enable in the device manager GUI.
            
            Returns null
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.SmsProxy">
            <summary>
            Representation of a SMS-proxy used to receive and send SMS to and from GpsGate Server.
            Used to set and get properties for a SMS-Proxy.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.SmsProxy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.SmsProxy.LoadByOwnerID(System.Int32)">
            <summary>
            Load SMS Proxy settings by owner ID (User ID).
            </summary>
            <param name="iUserID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">If user does not own any SMS proxy</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.SmsProxy.LoadSiteProxy">
            <summary>
            Loads default SMS proxy for site.
            </summary>
            <exception cref="T:Franson.DAO.NotFoundException">If there is no default SMS proxy for site.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.SmsProxy.ToString">
            <summary>
            Returns "SmsProxy MSISDN: phone number"
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.SmsProxy.OwnerID">
            <summary>
            User database ID for owner of this SMS proxy.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.SmsProxy.Owner">
            <summary>
            Returns the Owner of this SmsProxy.
            
            Note: This property will load the user from database.
            If the id of the useris sufficent use that property instead.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.SmsProxy.MSISDN">
            <summary>
            Proxy phone number.
            </summary>
            <exception cref="T:System.FormatException">If the phone number string is misformed</exception>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.SmsProxy.Enabled">
            <summary>
            If proxy is enabled or not.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.SmsProxy.DAO">
            <summary>
            Object to access database through.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Sms.SmsProxyQueue">
            <summary>
            Manage a queue of SMS to one SMS Proxy.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Directory.Sms.SmsProxyQueue.#ctor(GpsGate.Online.Directory.Sms.SmsProxy,GpsGate.Online.Net.QueuedMessageProvider,Franson.Message.IQueueSender,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads queue for specified SMS proxy, if the queue doesn't exit it is created.
            </summary>
            <param name="smsProxy">Proxy to load/create queue for</param>
            <param name="msgProv">Message provider that sends messages from this SMS queue.</param>
            <param name="bOutgoing">Direction of queue</param>
            <param name="bCreateIfNotFound">If set to true a queue is created if not found, if false an exception is thorwn if not found.</param>
            <param name="bRemoveDuplicates">If true duplicate SMS will not be queued</param>
            <exception cref="!:DaoException">Unexpected error when loading or creating queue.</exception>
            <exception cref="T:System.ArgumentException">Argument is null</exception>
            <exception cref="T:Franson.DAO.NotFoundException">Queue not found, and bCreateIfNotFound set to false.</exception>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.SmsProxyQueue.MaxOutgoingItemsPerHour">
            <summary>
            Returns MaxSMSPerProxyHour setting.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.SmsProxyQueue.SmsProxyID">
            <summary>
            Database ID for SMS Proxy using this queue.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.SmsProxyQueue.ProviderID">
            <summary>
            Database ID for provider using this queue.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Sms.SmsProxyQueue.QueueItemDAO">
            <summary>
            DAO to read and write single messages to queue
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupCollectionDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupCollectionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="option"></param>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupCollectionDAOMSSQL.GetItemType">
            <summary>
            Returns typeof(VehicleGroupDAOMSSQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupCollectionDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupCollectionDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="option"></param>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupCollectionDAOMySQL.GetItemType">
            <summary>
            Returns typeof(VehicleGroupDAOMySQL)
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupDAOSQL">
            <summary>
            VehicleGroup DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="option"></param>
            <param name="conn"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupDAOMSSQL.IsPublic">
            <summary>
            group.public_flag (Not that this field is named "public" for MySQL, and "public_flag" for MSSQL.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.DAO.VehicleGroupDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="option"></param>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.VehicleGroup">
            <summary>
            Routes data in among a set of GateUsers with many writers and few readers. This is typically the case when
            a group of vehicles reports their position to a central place.
            
            Business rules: 
            1. Ownership
            1.1 This group must have at least one owner.
            1.2 Group can have several owners
            
            2. Remove users:
            2.1 Only Moderators and Owners can remove users that are Member, Pending and Prospect 
            2.2 You can remove your self
            2.3 Only Owners can remove other Owners and Moderators
            2.4 You can not remove the last owner of the group
            
            3. Add user / Accept users
            3.1 All users can apply to group if they not already is a Member, Moderator or Owner. If they are an exception will be thrown 
            3.1 Only Operators and Moderators can Accepts a Prospect to Member
            3.2 Only Owners can Accept a prospect as Moderator or Owner
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Online.VehicleGroup.m_listBuddiesReaders">
            <summary>
            NmeaConnections that read data from "_buddies"
            </summary>
        </member>
        <member name="F:GpsGate.Online.VehicleGroup.bFlagedForDeleteGroup">
            <summary>
            Is true when group are flagged for delete.
            Used for disabling remove the last owner constraints when erasing the whole group
            </summary>
        </member>
        <member name="M:GpsGate.Online.VehicleGroup.DoFRRDT(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.FRRDT,Franson.Directory.GroupRights)">
            <summary>
            
            </summary>
            <param name="nmeaConn">Authenticated connection</param>
            <param name="frrdt">Read request</param>
            <returns>Returns true if the connection is added as a reader from this group</returns>
        </member>
        <member name="M:GpsGate.Online.VehicleGroup.AddOwner(Franson.Directory.User)">
            <summary>
            Owner can only be added through this method if it does not
            already have an owner.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:GpsGate.Online.VehicleGroup.AddUser(Franson.Directory.User,Franson.Directory.Rights)">
            <summary>
            Add new user to this group
            </summary>
            <param name="user">User to add</param>
            <param name="rights">Rights. Can be "Reader", "Writer" or "ReaderWriter"</param>
            <exception cref="T:Franson.Directory.GroupRightsNotSupportedByGroup">GroupRights not supported</exception>
            <exception cref="T:System.NullReferenceException">An argument was null</exception>
        </member>
        <member name="M:GpsGate.Online.VehicleGroup.ApplyToGroup(Franson.Directory.User)">
            <summary>
            Adds a user to this group as Prospect. 
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:GpsGate.Online.VehicleGroup.AcceptAsMember(Franson.Directory.User,Franson.Directory.User)">
            <summary>
            Accepts an prospecting or pending user as member of this group
            </summary>
            <param name="userToAccept">User to accept as member</param>
            <param name="userThatAdds">User that Accept the user. Must be owner or moderator</param>
        </member>
        <member name="M:GpsGate.Online.VehicleGroup.AcceptAsModerator(Franson.Directory.User,Franson.Directory.User)">
            <summary>
            Accepts an prospecting user as moderator of this group
            </summary>
            <param name="user"></param>
            <param name="group"></param>
        </member>
        <member name="M:GpsGate.Online.VehicleGroup.AcceptAsOwner(Franson.Directory.User,Franson.Directory.User)">
            <summary>
            Accepts an prospecting user as moderator of this group
            </summary>
            <param name="user"></param>
            <param name="group"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.VehicleGroupCollection.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.VehicleGroupCollection.GetItemType">
            <summary>
            Returns typeof <see cref="T:GpsGate.Online.VehicleGroup"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Vehicle.VehicleGroupManager">
            <summary>
            Manages all <see cref="T:GpsGate.Online.VehicleGroup"/> objects in an <see cref="T:GpsGate.Online.GateApplication"/> instance.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.VehicleGroupManager.#ctor">
            <summary>
            Create manager. This is typically done in a class derived from <see cref="T:GpsGate.Online.GateApplication"/> before
            <see cref="M:GpsGate.Online.GateApplication.Start"/> is called.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Vehicle.VehicleGroupManager.LoadGateGroups(GpsGate.Online.GateUser)">
            <summary>
            Loads the VechicleGroups for specified GateUser.
            </summary>
            <param name="gateUser">GateUser for which to return VehicleGroups for</param>
            <returns>A <see cref="T:GpsGate.Online.Directory.Vehicle.VehicleGroupCollection"/> which has gateUser as a member.</returns>
        </member>
        <member name="T:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL">
            <summary>
            OutgoingWebService DAO. Handles table outgoing_web_services
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.#ctor">
            <summary>
            Create DAO from BO object.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.#ctor(System.Data.DataRow)">
            <summary>
            Create DAO from BO list.
            </summary>
            <param name="dataRow"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load by ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">If entry not found in database</exception>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.Namespace">
            <summary>
            outgoing_web_service.namespace
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.Url">
            <summary>
            outgoing_web_service.url
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.Username">
            <summary>
            outgoing_web_service.username
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.Password">
            <summary>
            outgoing_web_service.password
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.CallInterval">
            <summary>
            outgoing_web_service.call_interval
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.CustomString">
            <summary>
            outgoing_web_service.custom_string
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.CustomLong">
            <summary>
            outgoing_web_service.custom_long
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.Timeout">
            <summary>
            outgoing_web_service.timeout
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL.BOType">
            <summary>
            voids the use of BO type. Returns null.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceListDAOSQL">
            <summary>
            OutgoingWebServiceList DAO
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceListDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceListDAOSQL.LoadByNamespace(System.String)">
            <summary>
            Loads all outgoing web services in specified namespace.
            </summary>
            <param name="strNamespace"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceListDAOSQL.GetItemType">
            <summary>
            Returns <see cref="T:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceListDAOSQL.Item(System.Int32)">
            <summary>
            Returns new DAO object representing item in list
            </summary>
            <param name="index"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index out of range.</exception>
            <exception cref="T:System.NotImplementedException">Tried to set value.</exception>
        </member>
        <member name="T:GpsGate.Online.Directory.WebService.OutgoingWebService">
            <summary>
            A outgoing web service entry. Only keeps data and no functionallity. DAO class is <see cref="T:GpsGate.Online.Directory.WebService.DAO.OutgoingWebServiceDAOSQL"/>
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.WebService.OutgoingWebService.#ctor">
            <summary>
            Create object.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.OutgoingWebService.Namespace">
            <summary>
            Namespace which assign this web service to some feature in GpsGate Server.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.OutgoingWebService.Url">
            <summary>
            URL to external web service.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.OutgoingWebService.Username">
            <summary>
            Username to external web service.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.OutgoingWebService.Password">
            <summary>
            Password to external web service.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.OutgoingWebService.CallInterval">
            <summary>
            Call interval in seconds.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.OutgoingWebService.CustomString">
            <summary>
            Custom string to keep state.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.OutgoingWebService.CustomLong">
            <summary>
            Custom long to keep state
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.OutgoingWebService.Timeout">
            <summary>
            Timout for web service request.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.WebService.OutgoingWebService.m_DAO">
            <summary>
            Returns casted DAO object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.WebService.OutgoingWebServiceList">
            <summary>
            A list of outgoing web service entries. Only keeps data and no functionallity
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.WebService.OutgoingWebServiceList.LoadByNamespace(System.String)">
            <summary>
            Load list by namespace
            </summary>
            <param name="strNamespace"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.WebService.OutgoingWebServiceList.GetItemType">
            <summary>
            Returns typeof(OutgoingWebService)
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.ApplicationDefinition">
            <summary>
            Specifies an Applications e.g VehicleTracker capabilities such as <see cref="T:GpsGate.Online.Event.EventChannel"/>'s e.tc. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinition.SetupApplication(Franson.Directory.Application)">
            <summary>
            Setup application with information from the definition. 
            Installs <see cref="!:EventChannels"/> and other things.
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinition.AppliesTo(System.String)">
            <summary>
            Returns true if this <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/> applies to the given <see cref="T:System.Type"/>
            </summary>
            <param name="applicatinType"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinition.AppliesTo(System.Type)">
            <summary>
            Returns true if this <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/> applies to the given <see cref="T:System.Type"/> of aaplication
            </summary>
            <param name="applicatinType"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinition.Load(Franson.Reflection.LoadableType)">
            <summary>
            Called when object created.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinition.Install(Franson.Reflection.LoadableType)">
            <summary>
            Installs application definition.
            </summary>
            <param name="loadableType"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinition.Upgrade(Franson.Reflection.LoadableType)">
            <summary>
            NOP implementation
            Upgrades a ILoadable of type ApplicationDefinition
            Override this to support upgrade functionality
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.ApplicationDefinition.Name">
            <summary>
            Name of the this <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/> defines.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ApplicationDefinition.Description">
            <summary>
            Description of the this <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/> defines.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ApplicationDefinition.TypeId">
            <summary>
            loadable_type.type_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ApplicationDefinition.ReportViewers">
            <summary>
            Returns the <see cref="!:EventChannels"/> this definition supports.
            DataBase table this property reflects is: appliation_def_gate_event_channels
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ApplicationDefinition.Channels">
            <summary>
            Returns the <see cref="!:EventChannels"/> this definition supports.
            DataBase table this property reflects is: appliation_def_gate_event_channels
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ApplicationDefinition.InstallChannels">
            <summary>
            Defines the <see cref="T:GpsGate.Online.Event.EventChannel"/>'s the applications this <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/> defines should support.
            Stubs for channels in JavaScript proxys and GUI components of the 
            application will be affected by which channels an application supports.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ApplicationDefinition.Dependencies">
            <summary>
            No Dependencies
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.ApplicationDefinitionFactory">
            <summary>
            Provides fast cached smethods to recievi <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/>.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinitionFactory.ResolveApplicationDefinition(System.Type)">
            <summary>
            Loads a ApplicationDefinition from any type deriving from ApplicationDefinition
            </summary>
            <param name="tApplicationDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinitionFactory.GetApplicationDefinition(System.Type)">
            <summary>
            Returns the <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/> for the given type.
            </summary>
            <param name="strTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinitionFactory.GetApplicationDefinition(System.String)">
            <summary>
            Returns the <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/> for the given type.
            </summary>
            <param name="strTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.ApplicationDefinitionFactory.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Return 0. Application definition does not have a integer primary key.
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.Device">
             <summary>
             This class represents a tracking device. A user typically have one or more devices assigned.
             </summary>
             <example>
             <code lang="C#">
             using GpsGate.Online.Directory;
             using GpsGate.Online;
             using Franson.DAO;
            
             public int AddDevice(string strUsername, string strIMEI, string strDeviceName)
             {
                 // Add a new device to user in GpsGate Server 2.0
                 // Can be useful when you integrate some custom system to GpsGate Server.
                 // NOTE! This is demo code only, and is not complete in any way!
            
                 int iDeviceID = 0;
            
                 // Load user or vehicle
                 GateUser gUser = new GateUser();
            
                 // Start transaction
                 Transaction trans = gUser.BeginTransaction();
            
                 try
                 {
                     gUser.LoadByUsername(strUsername);
            
                     // The new device we want to add to user
                     Device devNew = new Device();
                     devNew.IMEI = strIMEI;
                     devNew.DeviceName = strDeviceName;
                     devNew.DeviceOwnerID = gUser.ID;
                     // There are many more properties on Device as well, please check ref manual...
                     devNew.Update();
            
                     // THE DATABASE ID
                     iDeviceID = devNew.ID;
            
                     trans.Commit();
                 }
                 catch (Exception)
                 {
                     trans.Rollback();
                     throw;
                 }
            
                 return iDeviceID;
             }
             </code>
             </example>
             <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.Device.LoadByIMEI(System.String)">
             <summary>
             Loads device by its IMEI number. 
             </summary>
             <param name="strIMEI">IMEI number</param>
             <example>
             <code>
             try
             {
                 Device dev = new Device();
                 dev.LoadByIMEI("353358011995961");
            
                 // Device exists
             }
             catch (DeviceNotFoundException)
             {
                 // Device not found
             }
             </code>
             </example>
             <exception cref="T:GpsGate.Online.DeviceNotFoundException">Thrown if no device in DB exists by this IMEI</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Directory.Device.LoadByEmail(System.String)" -->
        <member name="M:GpsGate.Online.Directory.Device.LoadByPartialImeiAndProtocol(System.String,System.String)">
            <summary>
            Loads device by a part of its IMEI number + protocol ID. Can typically be used for devices that only 
            only sends parts of its IMEI number for authentication.
            </summary>
            <param name="strPartialIMEI"></param>
            <exception cref="T:GpsGate.Online.DeviceNotFoundException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.Device.LoadByMSISDN(Franson.Message.MSISDN)">
            <summary>
            Load device by phone number
            </summary>
            <param name="strPhoneNumber"></param>
            <exception cref="T:GpsGate.Online.DeviceNotFoundException">If no device with specified phone number found.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.Device.LoadByNameAndOwner(System.String,GpsGate.Online.GateUser)">
            <summary>
            Load device by dvice name and owner (user).
            </summary>
            <param name="strName">Device name</param>
            <param name="guOwner">User</param>
            <exception cref="T:GpsGate.Online.DeviceNotFoundException">If no device found.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.Device.Remove">
            <summary>
            Marks this device for removal upon next Update()
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Device.Update">
            <summary>
            Save changes to database. If <see cref="P:GpsGate.Online.Directory.Device.DeviceOwner"/>, <see cref="P:GpsGate.Online.Directory.Device.Protocol"/> or <see cref="P:GpsGate.Online.Directory.Device.ProtocolVersion"/> is
            assigned new objects not yet stored into database, this objects will be saved first to get IDs.
            </summary>
            <exception cref="T:GpsGate.Online.DeviceAlreadyExistsException">Device with same IMEI already exists in database.</exception>
            <exception cref="T:GpsGate.Online.DevicePhoneNumberAlreadyExistsException">Device with same phone number (MSISDN) already exists in database.</exception>
            <exception cref="T:GpsGate.Online.DeviceEmailAlreadyExistsException">Device with same email already exists in database.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.Device.m_DAO_Loaded(Franson.DAO.DAOBase,System.String)">
            <summary>
            Called when object is reloaded.
            </summary>
            <param name="daoBase"></param>
            <param name="strTableName"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Device.ToString">
            <summary>
            Return device name
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.Device.GetParameter(System.String)">
            <summary>
            Resolves valuse related for this device based on paramater names. This is use for example to resolve temaple command
            expressions, and terminal message expressions.
            </summary>
            <param name="strKey"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.Device.ToBag">
            <summary>
            Return device data as light weight read only bag object.
            Creates new bag object each call.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.OutgoingTransport">
            <summary>
            If set this transport should be used for ourgoing commands to device.
            Can be set to e.g. "sms", "tcp", "udp", "http" etc...
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.Created">
            <summary>
            Time stamp when this device was created in database.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.DeviceOwnerID">
            <summary>
            Mandatory. ID of GateUser this device belongs to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.DeviceName">
            <summary>
            Name of device. Is typically set in the web UI.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.DeviceOwner">
            <summary>
            Returns the user which owns this Device. If no owner is assigned, null is returned.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.HidePosition">
            <summary>
            If true the user's position will not be updated by this device. By default this property is false.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.Proximity">
            <summary>
            In meters within which radius from the position in meters the device is.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.IMEI">
            <summary>
            Hardware IMEI number for this device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.Email">
            <summary>
            Email address to this device.
            Not mandatory. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.MSISDN">
            <summary>
            Phone number
            </summary>
            <exception cref="T:System.FormatException">If phone number isn't conformant to MSISDN standards.</exception>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.MobileNetworkID">
            <summary>
            The ID of the mobile network operator this device was configured with.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.LastIP">
            <summary>
            Last IP address client used.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.LastPort">
            <summary>
            Last port this device connected from
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.StaticIP">
            <summary>
            Static IP where this device can be found.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.StaticPort">
            <summary>
            Static port where this device can be found.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.TrackPoint">
            <summary>
            Last valid or invalid track point for device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.ProtocolID">
            <summary>
            String ID for protocol used by this device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.Protocol">
            <summary>
            Returns <see cref="P:GpsGate.Online.Directory.Device.Protocol"/> used by this Device. If no Protocol is assigned, null is returned.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.ProtocolVersionID">
            <summary>
            ID for <see cref="P:GpsGate.Online.Directory.Device.ProtocolVersion"/> used by device. 0 if no protocol version assigned to device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.ProtocolVersion">
            <summary>
            Returns <see cref="P:GpsGate.Online.Directory.Device.ProtocolVersion"/> used by this Device. If no ProtocolVersion is assigned, null is returned.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.DeviceDefinitionID">
            <summary>
            Set and Get the ID of the <see cref="!:DeviceDefinnition"/> associated to this Device
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.DeviceDefinition">
            <summary>
            Gets or sets the <see cref="P:GpsGate.Online.Directory.Device.DeviceDefinition"/> associated to the device.
            
            Returns NULL if not set.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.DeviceMessageMapperID">
            <summary>
            Get or set the ID of the "Device Mapper" associated with this device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.DeviceMessageMapper">
            <summary>
            Gets or sets the "Device Mapping" associated with the device
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.APN">
            <summary>
            The APN the device uses.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.GPRSUsername">
            <summary>
            The Username the device uses to login to the GPRS network.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Device.GPRSPassword">
            <summary>
            The Password the device uses to login to the the GPRS network.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceBag">
            <summary>
            Light weight read only Device representation
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceBag.#ctor(System.Int32,System.DateTime,System.String,System.Boolean,System.Double,System.String,Franson.Message.MSISDN,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="iID"></param>
            <param name="dtCreated"></param>
            <param name="strDeviceName"></param>
            <param name="bHidePosition"></param>
            <param name="dblProximity"></param>
            <param name="strIMEI"></param>
            <param name="msisdn"></param>
            <param name="strAPN"></param>
            <param name="strGPRSUsername"></param>
            <param name="strGPRSPassword"></param>
            <param name="strLastIP"></param>
            <param name="iLastPort"></param>
            <param name="strStaticIP"></param>
            <param name="iStaticPort"></param>
            <param name="strProtocolID"></param>
            <param name="iProtocolVersionID"></param>
            <param name="iMsgFieldDictionaryID"></param>
            <param name="iDeviceDefinitionID"></param>
            <param name="iMobileNetwork"></param>
            <param name="iOwnerID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceBag.#ctor(System.Int32,System.DateTime,System.String,System.Boolean,System.Double,System.String,Franson.Message.MSISDN,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.DateTime,System.Int32,System.String,System.String)">
            <summary>
            Constructor for additional data.
            </summary>
            <param name="iID"></param>
            <param name="dtCreated"></param>
            <param name="strDeviceName"></param>
            <param name="bHidePosition"></param>
            <param name="dblProximity"></param>
            <param name="strIMEI"></param>
            <param name="msisdn"></param>
            <param name="strLastIP"></param>
            <param name="iLastPort"></param>
            <param name="strStaticIP"></param>
            <param name="iStaticPort"></param>
            <param name="strProtocolID"></param>
            <param name="iProtocolVersionID"></param>
            <param name="iDeviceDefinitionID"></param>
            <param name="iMobileNetwork"></param>
            <param name="dblLongitude"></param>
            <param name="dblLatitude"></param>
            <param name="dtTimeStamp"></param>
            <param name="iOwnerID"></param>
            <param name="strOwnerUsername"></param>
            <param name="strOwnerEmail"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.ID">
            <summary>
            Reflects the ID property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.Created">
            <summary>
            Reflects the Created property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.Name">
            <summary>
            Reflects the DeviceName property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.HidePosition">
            <summary>
            Reflects the HidePosition property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.Proximity">
            <summary>
            Reflects the Proximity property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.IMEI">
            <summary>
            Reflects the IMEI property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.MSISDN">
            <summary>
            Reflects the MSISDN property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.Email">
            <summary>
            Reflects the Email property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.APN">
            <summary>
            Reflects the APN property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.GPRSUsername">
            <summary>
            Reflects the GPRSUsername property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.GPRSPassword">
            <summary>
            Reflects the GPRSPsasword property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.LastIP">
            <summary>
            Reflects the LastIP property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.LastPort">
            <summary>
            Reflects the LastPort property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.StaticIP">
            <summary>
            Reflects the StaticIP property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.StaticPort">
            <summary>
            Reflects the StaticPort property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.ProtocolID">
            <summary>
            Reflects the ProtocolID property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.ProtocolVersionID">
            <summary>
            Reflects the ProtocolVersionID property of a <see cref="T:GpsGate.Online.Directory.Device"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.MsgFieldDictionaryID">
            <summary>
            Id of the device mapper
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.DeviceDefinitionID">
            <summary>
            Id of the device definition of this device.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.MobileNetworkID">
            <summary>
            Id of the operator this device was created with
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.Longitude">
            <summary>
            Last known longitude
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.Latitude">
            <summary>
            Last known latitude
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.TimeStamp">
            <summary>
            Last position timestamp
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.OwnerID">
            <summary>
            Id of the user (owner) of this device
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.OwnerUsername">
            <summary>
            Username of the user (owner) of this device
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceBag.OwnerEmail">
            <summary>
            Email of the user (owner) of this device
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceDefinitionCommandProperty">
            <summary>
            Represents an outgoing command that a <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/> supports.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionCommandProperty.#ctor(System.String,System.String[])">
            <summary>
            Default constructor to create a DeviceDefinitionCommandProperty entry
            </summary>
            <param name="strCommandName"></param>
            <param name="arrTransport"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinitionCommandProperty.CommandName">
            <summary>
            Name of <see cref="T:GpsGate.Online.Command.GateCmd"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinitionCommandProperty.Transports">
            <summary>
            List of possible transports for the outgoing command
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceFieldProperty">
            <summary>
            Represents a device specific <see cref="P:GpsGate.Online.Directory.DeviceFieldProperty.MessageField"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceFieldProperty.MessageField">
            <summary>
            The <see cref="P:GpsGate.Online.Directory.DeviceFieldProperty.MessageField"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceFieldProperty.SaveChangesOnly">
            <summary>
            The default behavior of the data sent from device tagged with the <see cref="P:GpsGate.Online.Directory.DeviceFieldProperty.MessageField"/>
            if true only changes in data will pass the filter mechanisms. This is probably god choice when
            the device always report a status ex battery level.
            
            If false the data will always be saved. This is god choice when the status data are of "push button" character.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceDefinitionMapperTemplate">
            <summary>
            <see cref="T:Franson.Message.MessageFieldDictionary"/> template.
            Used to create pre defined <see cref="T:Franson.Message.MessageFieldDictionary">MessageFieldDictionaries</see>
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DeviceDefinitionMapper">
            <summary>
            Extends <see cref="T:Franson.Message.MessageFieldDictionary"/> with functionality to link
            a <see cref="T:Franson.Message.MessageFieldDictionary"/> to a <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/>.
            
            This is what is called a "Device Mapper" in the web interface.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DeviceDefinitionMapper.#ctor">
            <summary>
            Create device mapper.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DeviceDefinitionMapper.DeviceDefinitionId">
            <summary>
            Device definition database ID.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionMapperTemplate.Create(Franson.Directory.Group)">
            <summary>
            Creates <see cref="T:Franson.Message.MessageFieldDictionary"/> associated to the provided <see cref="T:Franson.Directory.Group"/>.
            </summary>
            <param name="group">
            Group to associate the <see cref="T:Franson.Message.MessageFieldDictionary"/> to. 
            The group is used to manage privileges to the <see cref="T:Franson.Message.MessageFieldDictionary"/> 
            and associate it to a <see cref="T:Franson.Directory.Application"/>
            </param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceDefinitionReader">
            <summary>
            Collection for loading <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/>'s 
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionReader.#ctor">
            <summary>
            Reads device definitions.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionReader.GetByID(System.Int32)">
            <summary>
            Returns <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/> object of 
            </summary>
            <param name="iDeviceDefinitionID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionReader.LoadByNameAndNamespace(System.String,System.String)">
            <summary>
            Returns a device definition, of correct type, from name and namespace.
            Returns null if not found.
            </summary>
            <param name="strName">Name of device definition. E.g. "GpsGate TrackerOne"</param>
            <param name="strNamespaceName">Message namesapce. (Not necessarily the same as the protocol ID)</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionReader.LoadByProtocol(System.String)">
            <summary>
            Load all device definitions for specified protocol.
            </summary>
            <param name="strProtocol"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionReader.LoadAll">
            <summary>
            Load all <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/>'s
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionReader.LoadAllForProtocols">
            <summary>
            Loads all <see cref="T:GpsGate.Online.Directory.DeviceDefinition"/> with enabled listeners (enabled protocols).
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionReader.LoadByMessageFieldDictionaries(System.Int32[])">
            <summary>
            Load all device definitions for the given MessageFieldDictionaries (device mappers)
            </summary>
            <param name="iMessageFieldDictionaryIDs"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionReader.LoadByType(System.String)">
            <summary>
            Loads DeviceDefinitions of the given type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionReader.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns database ID of object in device_def table.
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinitionReader.DAO">
            <summary>
            Data access object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceDefinitionWrapper">
            <summary>
            Extended DeviceDefinition. DeviceDefinition "factory" and importer/exporter functionality.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionWrapper.#ctor(GpsGate.Online.Directory.DeviceDefinition)">
            <summary>
            Constructor.
            </summary>
            <param name="deviceDefinition"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionWrapper.#ctor(System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="arrDeviceType"></param>
            <param name="iDeviceDefinitionID"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionWrapper.Update(GpsGate.Online.Directory.DeviceDefinitionViewObject)">
            <summary>
            Creates a Device Definition from specified arguments.
            Updates the device definition and its message field dictionary and commands in the DB.
            </summary>
            <param name="ddvo"></param>
            <returns>Returns the ID of the device definition</returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionWrapper.Update(System.String,System.String,System.Boolean,GpsGate.Online.Directory.MsgFieldDictEntryViewObject[],GpsGate.Online.Directory.CommandViewObject[])">
            <summary>
            Creates a Device Definition from specified arguments.
            Updates the device definition and its message field dictionary and commands in the DB.
            </summary>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <param name="commands"></param>
            <param name="msgFieldDict"></param>
            <returns>Returns the ID of the device definition</returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionWrapper.Remove">
            <summary>
            Removes the Device Definition and its related objects from the DB.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionWrapper.Import(System.String,System.Boolean,System.String,System.Int32,System.String,System.String)">
            <summary>
            Converts XML into a DeviceDefinitionViewObject.
            </summary>
            <param name="stream"></param>
            <param name="bOverwrite">If set to true, the following arguments are required to enable overwriting an existing instance.</param>
            <param name="strDeviceType">If bOverwrite is set to false, this argument is ignored.</param>
            <param name="iID">If bOverwrite is set to false, this argument is ignored.</param>
            <param name="strName">If bOverwrite is set to false, this argument is ignored.</param>
            <param name="strDescription">If bOverwrite is set to false, this argument is ignored.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Invalid input.</exception>
            <exception cref="T:System.InvalidOperationException">Cannot overwrite an instance of a different type.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionWrapper.Export(GpsGate.Online.Directory.DeviceDefinitionViewObject)">
            <summary>
            Converts a DeviceDefinitionViewObject into XML.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceDefinitionWrapper.CopyMapper(System.Int32,GpsGate.Online.Directory.MsgFieldDictEntryViewObject[])">
            <summary>
            Copy/overwrite the specified mapper with the given message field dictionary.
            </summary>
            <param name="iMapperID"></param>
            <param name="arrMsgFieldDict"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceDefinitionWrapper.DeviceDefinition">
            <summary>
            The wrapped DeviceDefinition object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceDefinitionViewObject">
            <summary>
            Device definition. This class is used for XML export/import.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.LoadableTypeViewObject">
            <summary>
            Loadable Type. This class is used for XML export/import.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.MsgFieldDictViewObject">
            <summary>
            Message Field Dictionary. This class is used for XML export/import.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.MsgFieldDictEntryViewObject">
            <summary>
            Message Field Dictionary Entry. This class is used for XML export/import.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.CommandViewObject">
            <summary>
            Command. This class is used for XML export/import.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.TemplateCommandStepViewObject">
            <summary>
            Template Command Step. This class is used for XML export/import.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceReader">
            <summary>
            Use to read up device information from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceReader.#ctor">
            <summary>
            Create device reader.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Directory.DeviceReader.GetByOwnerID(System.Int32)" -->
        <member name="M:GpsGate.Online.Directory.DeviceReader.GetByMessageFieldDictionary(System.Int32)">
            <summary>
            Get all devices using the given deive mapper.
            </summary>
            <param name="iMsgFieldDictID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceReader.GetByDeviceDefinition(System.Int32)">
            <summary>
            Get all devices using the given device definition.
            </summary>
            <param name="iDeviceDefinitionID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceReader.GetByDeviceTypeInTags(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get all devices of the given type found in the given set of tags.
            </summary>
            <param name="iDeviceDefinitionID">ID of the DeviceDefinition</param>
            <param name="TagsIDs">Tag IDs.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceReader.GetByDeviceTypeInApplication(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get all devices of the specified type in the given applications.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceReader.GetByTags(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get all devices found for users member of the given tags.
            </summary>
            <param name="TagIDs"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceReader.GetByApplication(System.Int32)">
            <summary>
            Get all devices in the given application.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceReader.GetByQuery(System.String)">
            <summary>
            Get all devices matching the specified query.
            </summary>
            <param name="strQuery"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceReader.DAO">
            <summary>
            DAO.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceSearch">
            <summary>
            Loads a collection of <see cref="T:GpsGate.Online.Directory.Device"/> objects from database. Do not use, use <see cref="T:GpsGate.Online.Directory.DeviceReader"/> instead.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceSearch.#ctor">
            <summary>
            Create search object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceSearch.LoadByUserID(System.Int32)">
            <summary>
            Load all devices owned by specified user to collection.
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.DeviceTrackPoint">
            <summary>
            Used by messages coming from IMEI devices.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceTrackPoint.#ctor">
            <summary>
            Called by derived class
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceTrackPoint.SetDeviceName(System.String)">
            <summary>
            Called by derived class' constructor to set DeviceName
            </summary>
            <param name="strClientName"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceTrackPoint.SetVersion(System.Version)">
            <summary>
            Called by derived class' constructor to set Version
            </summary>
            <param name="ver"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceTrackPoint.SetIMEI(System.String)">
            <summary>
            Called by derived class' constructor to set IMEI
            </summary>
            <param name="strIMEI"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.DeviceTrackPoint.SetOriginalMessage(System.String)">
            <summary>
            Called by derived class' constructor to ser original message.
            </summary>
            <param name="strOriginalMessage"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceTrackPoint.DeviceName">
            <summary>
            Name of client. E.g. PT33, can be null if not determined.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceTrackPoint.Version">
            <summary>
            Version for protocol. Can be null if not determined.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceTrackPoint.IMEI">
            <summary>
            IMEI code of device that sent message. Can be null if not determined.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.DeviceTrackPoint.OriginalMessage">
            <summary>
            Returns original message, or null if not set.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ESN.IsESN(System.String)">
            <summary>
            Returns true if this is a likely ESN
            </summary>
            <param name="strPossibleESN"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.GateUser">
            <summary>
            A user with tracking information.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:GpsGate.Online.GateUser.m_recorderList">
            <summary>
            Manages track recording for this user
            </summary>
        </member>
        <member name="M:GpsGate.Online.GateUser.#ctor">
            <summary>
            Create GateUser
            </summary>
            <param name="concurrencyOption"></param>
        </member>
        <member name="M:GpsGate.Online.GateUser.#ctor(GpsGate.Online.Directory.DAO.GateUserDAOSQL)">
            <summary>
            Create from collection.
            </summary>
            <param name="gateUserDAO"></param>
        </member>
        <member name="P:GpsGate.Online.GateUser.TimeSinceLastPosition">
            <summary>
            Returns a TimeSpan which represents the time between when the last time the
            position was updated for this user and now.
            If HasPosition is false, the time span will be between now and year 1 at 00:00:00
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.HasPosition">
            <summary>
            Will return true if this GateUser has had a position assigned to it at any time before.
            This means that the UtcDateTime has been set at some point.
            If the GateUser is new and has never been updated to the DB, HasPosition returns false until 
            UtcDateTime is set.
            If the GateUser is updated to the DB, without UtcDateTime set, HasPosition will return false
            next time this GateUser is loaded from the DB.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.RMC">
            <summary>
            Get and sets the GateUser's latest known position as a NMEA/RMC sentence.
            If no position is known for the user, null is returned.
            If you set a none valid (RMC.valid == false) RMC sentence, the GateUser is not updated.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.Position">
            <summary>
            Get and set the GateUser's latest known position.
            When setting this property UtcDateTime will also be updated.
            If you want some other value for UtcDateTime, this must be set after Position
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.Velocity">
            <summary>
            Get and set the latest known velocity for this GateUser
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.UtcTimeStamp">
            <summary>
            Get and set the UTC timestamp for the latest known velocity and position for this user.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.ServerUtcTimeStamp">
            <summary>
            Get the UTC timestamp for the latest known velocity and position for this user.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.TrackPoint">
            <summary>
            Last known valid postion for a user.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.DeviceActivity">
            <summary>
            Server time stamp in UTC for last time a device for this user was connected and sent some kind of information.
            Not necessarily a valid position update. Any valid action, like a login, or a status update.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.Delay">
            <summary>
            Delayed position updates in seconds.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.LastTransport">
            <summary>
            Last transport layer data was received over for this user. E.g. "tcp", "udp", "sms" or "http"
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.LifeTrackRecorder">
            <summary>
            Returns the "Life Track" recorder for user. Creates recorder if it does not exists.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateUser.TrackRecorderList">
            <summary>
            Returns all TrackRecorders for logged in user. Returns null if connection isn't authenticated.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.GateUserBag">
            <summary>
            A light-weight struct that contains search results to be serialized. 
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserBag.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,Franson.Geo.TrackPoint,Franson.Directory.DAO.AdminRight,System.Collections.Generic.List{Franson.Directory.AttributeBase})">
            <summary>
            Create bag for <see cref="T:GpsGate.Online.Directory.GateUserSearch"/> result.
            </summary>
            <param name="iID"></param>
            <param name="strUsername"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <param name="tp"></param>
            <param name="adminRight"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserBag.GetStatus(System.Int32)">
            <summary>
            Get the status for the provides user.
            </summary>
            <param name="iIdleTimeout">Seconds since last position to be offline</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserBag.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Called when the object is serialized. 
            todo: why no trackpoint?
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserBag.ReadXml(System.Xml.XmlReader)">
            <summary>
            Called when the object is deserialized. 
            </summary>
            <param name="reader"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserBag.GetSchema">
            <summary>
            Returns null
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.Id">
            <summary>
            User database IDI:\gpsgateonline\dotNET\GpsGate.Online\Directory\GroupSearchBag.cs
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.Username">
            <summary>
            The user name
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.Name">
            <summary>
            The name of the vehicle. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.Surname">
            <summary>
            The surname name of the user. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.Description">
            <summary>
            The description of the vehicle. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.LastTransport">
            <summary>
            The transport protocol the last connection was made over.
            E.g TCP, UDP, SMS
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.Email">
            <summary>
            The email of the user.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.DeviceActivity">
            <summary>
            Server time stamp in UTC for last time a device for this user was connected and sent some kind of information.
            Not necessarily a valid position update. Any valid action, like a login, or a status update.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.TrackPoint">
            <summary>
            The last reported track point for this user. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserBag.AdminRight">
            <summary>
            The AdminRight for this user. 
            Note that AdminRight is group specific. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserCollection.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.GateUserNetStatus">
            <summary>
            Defines which status for a user that should be included in a <see cref="T:GpsGate.Online.Directory.View"/>
            Multiple statuses can be set and will be treated as "OR" by the View.
            E.g: 1 = Sending
            E.g: 3 = Sending OR Connected.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.GateUserReader">
            <summary>
            Reader used to retrieve lightweight representations of users from the DB.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserReader.#ctor">
            <summary>
            Default and only constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserReader.GetUsersByView(GpsGate.Online.Directory.View)">
            <summary>
            Get all users in the given view.
            </summary>
            <param name="iViewID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserReader.GetUsersByIDs(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Get all users for the given IDs
            </summary>
            <param name="iViewID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserReader.GetUsersInTags(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Get all users for a set of tags.
            </summary>
            <param name="tagIDs">ID of the tags</param>
            <param name="iIndex">start index</param>
            <param name="iCount">number of users to get.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserReader.GetUsersByApplicationAndGroup(System.Int32,System.String,System.Boolean)">
            <summary>
            Get all users in a <see cref="!:Group"/> for a given <see cref="!:Application"/>.
            </summary>
            <param name="iApplicationID">ID of the application</param>
            <param name="strGroupName">The name of the group.</param>
            <param name="bFilterNoneFullMember">Set to true to only return users with full membership rights. (Not pending or prospects)</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserReader.GetUsersByApplicationAndGroup(System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Get all users in a <see cref="!:Group"/> for a given <see cref="!:Application"/> and apply a filtering <see cref="T:GpsGate.Online.Directory.View"/>
            </summary>
            <param name="iApplicationID">ID of the application to retrieve from.</param>
            <param name="strGroupName">The name of the group</param>
            <param name="iViewID">The ID of the view to use as filter.</param>
            <param name="bFilterNoneFullMember">Set to true to only return users with full membership rights. (Not pending or prospects)</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserReader.GetUsersByApplicationAndGroup(System.Int32,System.String,System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Get all users in a <see cref="!:Group"/> for a given <see cref="!:Application"/> with position times stamps newer then
            the specified timestamp.
            
            This method support specifying a span of records to retrieve. Use this to load large number of users in smaller chunks.
            </summary>
            <param name="iApplicationID">ID of the application to retrieve from.</param>
            <param name="strGroupName">The name of the group</param>
            <param name="iStart">Starting index of the record set.</param>
            <param name="iEnd">Ending index of the record set.</param>
            <param name="dtUpdatedSince">Restricting users with position updates newer then the given UTC time stamp. 
            If time stamp set to DateTime.MinValu all users will be retrived even those who never has sent an position</param>
            <param name="bFilterNoneFullMember">Set to true to only return users with full membership rights. (Not pending or prospects)</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserReader.GetUsersByApplicationAndGroup(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Get all users in a <see cref="!:Group"/> for a given <see cref="!:Application"/> with position OR tag changes newer then
            the specified timestamp, using <see cref="T:GpsGate.Online.Directory.View"/> to filter the returned users.
            </summary>
            <param name="iApplicationID">ID of the application to retrieve from.</param>
            <param name="strGroupName">The name of the group</param>
            <param name="iStart">Starting index of the record set.</param>
            <param name="iEnd">Ending index of the record set.</param>
            <param name="iViewID">The ID of the view to use as filter.</param>
            <param name="dtUpdatedSince">
            Restricting users with position updates OR tag changes newer then the given UTC time stamp
            If time stamp set to DateTime.MinValue all users will be retrived even those who has never sent a position.
            </param>
            <param name="bFilterNoneFullMember">Set to true to only return users with full membership rights. (Not pending or prospects)</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserReader.GetGateUserByApplication(System.Int32)">
            <summary>
            Get all users associated with a specific <see cref="!:Application"/>
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.GateUserReader.DAO">
            <summary>
            Data Access Object
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserSearch.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserSearch.ToFRPOS">
            <summary>
            Returns result from last query as an array of <see cref="T:Franson.Nmea.FRPOS"/> objects. The user must have a reported
            position to be included in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserSearch.ToUsernameArray">
            <summary>
            Returns a string[] with all loaded usernames
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserSearch.ToGateUserStruct">
            <summary>
            Returns result from last query as a Gate
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserSearch.LoadGroupUsers(System.Int32,System.String[])">
            <summary>
            Returns an array of <see cref="T:Franson.Nmea.FRPOS"/> for all users that; is member of specified group,
            has one of the group rights (data access rights) specified by arrRights, and
            has a valid position.
            </summary>
            <param name="iGroupID">Group</param>
            <param name="arrRights">GroupRights</param>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserSearch.LoadGateUsersByApplication(System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads users in application.
            </summary>
            <param name="iApplicationId"></param>
            <param name="iStart"></param>
            <param name="iStop"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserSearch.FetchGateUsersByRangeAndGroup(System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads GateUsers from a specific range and a specific group. The start is not included, the end is included. 
            </summary>
            <param name="iStart">Start + 1 is the first record in the range to be returned.</param>
            <param name="iStop">Stop is the last record in the range to be returned.</param>
            <param name="iGroupId">Only GateUsers from this group will be included.</param>
            <param name="iExcludeGroupId">A GateUsers that is member in this group will not be included.</param>
        </member>
        <member name="M:GpsGate.Online.Directory.GateUserSearch.FetchGateUsersByRangeTimeSpanAndGroup(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches GateUsers from a specific range, time span and a specific group excluding a specific group. The start is not included, the end is included. 
            </summary>
            <param name="iStart">Start + 1 is the first record in the range to be returned.</param>
            <param name="iStop">Stop is the last record in the range to be returned.</param>
            <param name="iTimeSpan">GateUsers that have time span older than this will not be included.</param>
            <param name="iGroupId">The GateUsers must be members (independent of there state) in this group to be included.</param>
            <param name="iExcludeGroupId">A GateUsers that is member in this group will not be included.</param>
        </member>
        <member name="T:GpsGate.Online.Directory.GroupSearch">
            <summary>
            Used by BuddyTracker to search groups. Do not use for new development!
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearch.#ctor">
            <summary>
            Create group serach object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearch.FetchGroupWithAdminRightsByUserAndGroupIdAndApplication(System.Int32,System.Int32,System.Int32)">
            <summary>
            Typically used to determine <see cref="T:Franson.Directory.AdminRights"/> for one user on a group.
            If the group is public, and the user has no defined relationship with the group, the returned AdminRight will be "Undefined"
            If the group is private and the user has no defined relationship with the group, an empty array is returned. 
            </summary>
            <param name="iUserId"></param>
            <param name="iGroupId"></param>
            <param name="iApplicationId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearch.FetchGroupsWithRightsRelationsByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Loads groups for specified user in specified application.
            </summary>
            <param name="iUserId"></param>
            <param name="iApplicationId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearch.FetchGroupsByApplication(System.Int32)">
            <summary>
            Loads all groups in an application.
            </summary>
            <param name="iApplicationId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearch.FetchGroupsByApplicationAndType(System.Int32,System.String)">
            <summary>
            Loads all groups in specified application, where the group has a specific bo_type. E.g. "GpsGate.Online.VehicleGroup"
            </summary>
            <param name="iApplicationId"></param>
            <param name="strBoType"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearch.FetchGroupsByApplicationAndTypeWithRelationTables(System.Int32,System.String)">
            <summary>
            Loads all groups in specified application, where the group has a specific bo_type. E.g. "GpsGate.Online.VehicleGroup".
            Loads table "user_groups", "group_rights" and "admin_rights" as well.
            </summary>
            <param name="iApplicationId"></param>
            <param name="strBoType"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearch.FetchGroupByApplicationAndTypeWithRelationTables(System.Int32,System.String,System.Int32)">
            <summary>
            Loads one group plus table "user_groups", "group_rights" and "admin_rights" as well.
            </summary>
            <param name="iApplicationId"></param>
            <param name="strBoType"></param>
            <param name="iGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearch.FetchGroupsTopMemberByApplicationAndType(System.Int32,System.String,System.Int32)">
            <summary>
            Loads all groups of a specific bo_type in an application. Limits the number of groups returned.
            </summary>
            <param name="iApplicationId"></param>
            <param name="strBoType"></param>
            <param name="iCount"></param>
        </member>
        <member name="T:GpsGate.Online.Directory.GroupSearchBag">
            <summary>
            A light-weight struct that contains search results to be serialized. 
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Online.Directory.GroupSearchBag.m_iID">
            <summary>
            The user ID;
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GroupSearchBag.m_strName">
            <summary>
            The name of the vehicle. 
            </summary>
        </member>
        <member name="F:GpsGate.Online.Directory.GroupSearchBag.m_strDescription">
            <summary>
            The description of the vehicle. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearchBag.#ctor(System.Int32,System.String,System.String,Franson.Directory.DAO.GroupType,Franson.Directory.DAO.AdminRight)">
            <summary>
            Call to populate structure
            </summary>
            <param name="iID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <param name="groupType"></param>
            <param name="adminRight"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearchBag.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Called when the object is serialized. 
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearchBag.ReadXml(System.Xml.XmlReader)">
            <summary>
            Not implemented.
            </summary>
            <param name="reader"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Directory.GroupSearchBag.GetSchema">
            <summary>
            Returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.GroupSearchBag.Id">
            <summary>
            Group database ID
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GroupSearchBag.Description">
            <summary>
            Group description. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GroupSearchBag.Name">
            <summary>
            Group name.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GroupSearchBag.AdminRight">
            <summary>
            Admin rigths for user on this group.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GroupSearchBag.GroupType">
            <summary>
            The type of group is used to determine if the group 
            is a buddy list or "community" group etc. 
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.IMEI">
            <summary>
            Spec:
            http://en.wikipedia.org/wiki/International_Mobile_Equipment_Identity
            
            http://www.tele-servizi.com/janus/texts/imei.txt
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.IMEI.TryParse(System.String,System.Nullable{GpsGate.Online.Directory.IMEI}@)">
            <summary>
            Tries to parse IMEI string. Returns true if parsing successful.
            </summary>
            <param name="strIMEI"></param>
            <param name="imei"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.IMEI.Parse(System.String)">
            <summary>
            Parses IMEI string.
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.FormatException">Invalid format of string</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.IMEI.ToString">
            <summary>
            Return IMEI as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.IMEI.m_CalculateChecksum(System.String)">
            <summary>
            Luhns algorithm calculate checksum
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.MobileNetworkBag">
            <summary>
            Thin object carrying the properties of the MobileNetworkReader result(s)
            and acts as the front-end to the serialization process.
            (maps to the "mobile_network" table in the database)
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Directory.MobileNetworkBag.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GpsGate.Online.Directory.MobileNetworkBag"/> struct.
            </summary>
            <param name="iID">The ID.</param>
            <param name="strCountry">The country.</param>
            <param name="strOperator">The operator.</param>
            <param name="strUsername">The username.</param>
            <param name="strPassword">The password.</param>
            <param name="strAPN">The APN.</param>
            <param name="strDNS1">The 1st DNS</param>
            <param name="strDNS2">The 2nd DNS</param>
            <param name="strDescription">The description.</param>
        </member>
        <member name="T:GpsGate.Online.Directory.MobileNetworkReader">
            <summary>
            thin wrapper over MobileNetworkReaderDAOSQL (available to sub-classes via the DAO property)
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.MobileNetworkReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GpsGate.Online.Directory.MobileNetworkReader"/> class.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.MobileNetworkReader.GetByID(System.Int32)">
            <summary>
            Gets the network by ID.
            </summary>
            <param name="iID">The networks' ID.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Command object not set</exception>
            <exception cref="T:Franson.DAO.ReaderDBException">Error reading from database.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">Failed to get a connection to database.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.MobileNetworkReader.GetByCountry(System.String)">
            <summary>
            Gets the networks available in a certain country.
            </summary>
            <param name="strCountry">The country.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Command object not set</exception>
            <exception cref="T:Franson.DAO.ReaderDBException">Error reading from database.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">Failed to get a connection to database.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.MobileNetworkReader.GetByOperator(System.String)">
            <summary>
            Gets all the networks belonging to a certain operator.
            </summary>
            <param name="strOperator">The operator.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Command object not set</exception>
            <exception cref="T:Franson.DAO.ReaderDBException">Error reading from database.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">Failed to get a connection to database.</exception>
        </member>
        <member name="M:GpsGate.Online.Directory.MobileNetworkReader.GetAvailableCountries">
            <summary>
            Gets all the available countries.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Command object not set</exception>
            <exception cref="T:Franson.DAO.ReaderDBException">Error reading from database.</exception>
            <exception cref="T:Franson.DAO.ConnectionException">Failed to get a connection to database.</exception>
        </member>
        <member name="P:GpsGate.Online.Directory.MobileNetworkReader.DAO">
            <summary>
            Gets the DAO.
            </summary>
            <value>The DAO.</value>
        </member>
        <member name="T:GpsGate.Online.Directory.ProtocolBag">
            <summary>
            Read only object for <see cref="!:Protocol"/> properties.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ProtocolBag.#ctor(System.String,System.String,System.String,GpsGate.Online.Directory.ProtocolPropertiesBag)">
            <summary>
            Create bag for <see cref="!:Protocol"/>
            </summary>
            <param name="strID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.ProtocolBag.ToString">
            <summary>
            Returns <see cref="P:GpsGate.Online.Directory.ProtocolBag.ID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.ProtocolBag.ID">
            <summary>
            string ID, e.g. "GlobalSat", "Sierra" or "GpsGate".
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ProtocolBag.Name">
            <summary>
            Same as <see cref="P:GpsGate.Online.Directory.ProtocolBag.ID"/>.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ProtocolBag.Description">
            <summary>
            Free text description.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ProtocolBag.ProtocolProperties">
            <summary>
            Returns a Properties object with protocol properties such as supported <see cref="!:GateCommand"/>'s
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.ProtocolReader">
            <summary>
            Reads up Protocol bags from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ProtocolReader.#ctor">
            <summary>
            Create Protocol reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ProtocolReader.GetAll">
            <summary>
            Return all protocols.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.ProtocolReader.DAO">
            <summary>
            DAO object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.GeofenceTag">
            <summary>
            Tag Bag.
            Geofence Tag's are used to group Geofences in to categories.
            The tag is associated to an application.
            One tag can be associated to none - several users and one user can be tagged with none - severals tags.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.Tag.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Default constructor. used by tagReader to create a RO Tag bag object
            </summary>
            <param name="iID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.Tag.Resolve(Franson.Text.TemplateParser,System.String)">
            <summary>
            Resolves template.
            Supported template variables:
            TAG_NAME
            </summary>
            <param name="p"></param>
            <param name="strVariable"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.Tag.ID">
            <summary>
            ID of the tag
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Tag.Name">
            <summary>
            Name of the tag
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Tag.Description">
            <summary>
            Description of the tag
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.Tag.SupportedVariables">
            <summary>
            Supports:
            TAG_NAME
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GeofenceTag.#ctor(System.Int32,System.String,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Default constructor. used by tagReader to create a RO Tag bag object
            </summary>
            <param name="iID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <param name="listUsers"></param>
        </member>
        <member name="P:GpsGate.Online.Directory.GeofenceTag.GeoFenceIDs">
            <summary>
            List of users associated to the tag
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.UserTag">
            <summary>
            Tag Bag struct.
            Tag's are used to group users in to categories.
            The tag is associated to an application.
            One tag can be associated to none - several users and one user can be tagged with none - severals tags.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.UserTag.#ctor(System.Int32,System.String,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Default constructor. used by tagReader to create a RO Tag bag object
            </summary>
            <param name="iID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <param name="listUsers"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.UserTag.HasUsers">
            <summary>
            Validates that the tag has users. 
            Severity: Warn
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.UserTag.UsersIDs">
            <summary>
            List of users associated to the tag
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.UserTagReader">
            <summary>
            Use to read <see cref="T:GpsGate.Online.Directory.UserTag"/>'s from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.UserTagReader.#ctor">
            <summary>
            Create tag reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.UserTagReader.GetByApplication(System.Int32)">
            <summary>
            Returns all <see cref="T:GpsGate.Online.Directory.Tag">Tags</see> in the specified application.
            </summary>
            <param name="iApplicationID">ID of the application to return tags associated to.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.UserTagReader.GetByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Get The tag associated to a user in the given application
            </summary>
            <param name="iUserID">ID of the <see cref="!:User"/></param>
            <param name="iApplicationID">ID of the <see cref="!:Application"/></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.UserTagReader.GetByIDs(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get all tags by their IDs
            </summary>
            <param name="iTagIDs"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.UserTagReader.DAO">
            <summary>
            Data access object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.GeofenceTagReader">
            <summary>
            Use to read <see cref="T:GpsGate.Online.Directory.GeofenceTag"/>'s from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.GeofenceTagReader.#ctor">
            <summary>
            Create tag reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GeofenceTagReader.GetByApplication(System.Int32)">
            <summary>
            Returns all <see cref="T:GpsGate.Online.Directory.Tag">Tags</see> in the specified application.
            </summary>
            <param name="iApplicationID">ID of the application to return tags associated to.</param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.GeofenceTagReader.DAO">
            <summary>
            Data access object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.GeofenceTagWriter">
            <summary>
            Object used to Add, Edit and Remove <see cref="T:GpsGate.Online.Directory.GeofenceTag">GeofenceTags</see>
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.TagWriter">
            <summary>
            Write Tags to the database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.TagWriter.#ctor">
            <summary>
            Default constructor to create  a TagWriter
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.TagWriter.Name">
            <summary>
            Name of the tag.
            Max 255 characters.
            
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.TagWriter.Description">
            <summary>
             Description of the tag.
            Max 255 Characters
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.TagWriter.ApplicationID">
            <summary>
            Id of the application this tag is associated to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.TagWriter.BaseDAO">
            <summary>
            Data access object
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GeofenceTagWriter.SetDAO">
            <summary>
            Sets the GeofenceTagWriter data access object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.GeofenceTagWriter.ToTag">
            <summary>
            Creates a redonly representation of the geofence tag writer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.GeofenceTagWriter.GeofencesIDs">
            <summary>
            List of Geofences associated to this tag.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.GeofenceTagWriter.DAO">
            <summary>
            Data access object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.UserTagWriter">
            <summary>
            Object used to Add, Edit and Remove <see cref="T:GpsGate.Online.Directory.UserTag">UserTags</see>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.UserTagWriter.SetDAO">
            <summary>
            Set the UserTagWriter Data Access Object
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.UserTagWriter.ToTag">
            <summary>
            Creates a readonly version of UserTag
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.UserTagWriter.UserIDs">
            <summary>
            List of users associated to this tag.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.UserTagWriter.DAO">
            <summary>
            Data Access object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.TrackReaderFactory">
            <summary>
            Returns a instance of a ITrackReader implementation by application, user or site.
            
            The factory will first try to find a reader by user based criteria's, then fall back
            to find a reader by application then site, and last a <see cref="T:GpsGate.Online.PostProcessing.FatFreakReader"/> will be returned.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.TrackReaderFactory.GetTrackDataReader">
            <summary>
            Get Site <see cref="T:GpsGate.Tracks.ITrackDataReader"/>
            </summary>
            <returns>Default <see cref="T:GpsGate.Tracks.ITrackDataReader"/> by site if not found then a<see cref="T:GpsGate.Online.PostProcessing.FatFreakReader"/></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.TrackReaderFactory.GetTrackDataReader(System.Int32)">
            <summary>
            Get Application <see cref="T:GpsGate.Tracks.ITrackDataReader"/> fall back to site if not found.
            </summary>
            <param name="iApplicationId">Id of application to find reader of.</param>
            <returns>Default <see cref="T:GpsGate.Tracks.ITrackDataReader"/> by Application if not found;, then site at last<see cref="T:GpsGate.Online.PostProcessing.FatFreakReader"/></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.TrackReaderFactory.GetTrackDataReader(System.Int32,System.Int32)">
            <summary>
            Get User <see cref="T:GpsGate.Tracks.ITrackDataReader"/> fall back to application if not found, then Site and at last <see cref="!:FatfreakReader"/>
            </summary>
            <param name="iUserId">Id of User to find reader of.</param>
            <param name="iApplicationId">Id of the fall back Application to find reader of.</param>
            <returns>Default <see cref="T:GpsGate.Tracks.ITrackDataReader"/> by User if not found; then application, then site and at last<see cref="T:GpsGate.Online.PostProcessing.FatFreakReader"/></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.TrackReaderFactory.GetTrackInfoReader">
            <summary>
            Get Site <see cref="T:GpsGate.Tracks.ITrackInfoReader"/>
            </summary>
            <returns>Default <see cref="T:GpsGate.Tracks.ITrackInfoReader"/> by site if not found then a<see cref="T:GpsGate.Online.PostProcessing.FatFreakReader"/></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.TrackReaderFactory.GetTrackInfoReader(System.Int32)">
            <summary>
            Get Application <see cref="T:GpsGate.Tracks.ITrackInfoReader"/> fall back to site if not found.
            </summary>
            <param name="iApplicationId">Id of application to find reader of.</param>
            <returns>Default <see cref="T:GpsGate.Tracks.ITrackInfoReader"/> by Application if not fobnd;, then site at last<see cref="T:GpsGate.Online.PostProcessing.FatFreakReader"/></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.TrackReaderFactory.GetTrackInfoReader(System.Int32,System.Int32)">
            <summary>
            Get User <see cref="T:GpsGate.Tracks.ITrackInfoReader"/> fall back to application if not found, then Site and at last <see cref="!:FatfreakReader"/>
            </summary>
            <param name="iUserId">Id of User to find reader of.</param>
            <param name="iApplicationId">Id of the fall back Application to find reader of.</param>
            <returns>Default <see cref="T:GpsGate.Tracks.ITrackInfoReader"/> by User if not found; then application, then site and at last<see cref="T:GpsGate.Online.PostProcessing.FatFreakReader"/></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.TrackReaderFactory.GetGateEventReader(System.Int32,System.Int32)">
            <summary>
            Gets the gate event reader.
            </summary>
            <param name="iUserId">The user id.</param>
            <param name="iApplicationId">The application id.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.TrackReaderFactory.m_UseFatFreakReader(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Best effort resolving of the reader by settings depending on the provided parameters.
            </summary>
            <param name="iUserId"></param>
            <param name="iApplicationId"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Directory.View">
            <summary>
            Represents a View used to filter users with.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.View.#ctor(System.Int32,System.String,System.String,System.Int32,System.Collections.Generic.List{System.Int32},System.Boolean,System.Int32)">
            <summary>
            Default constructor to create a new  View instance.
            Used By ViewReader
            </summary>
            <param name="iID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <param name="listTagIDs"></param>
        </member>
        <member name="M:GpsGate.Online.Directory.View.ToString">
            <summary>
            Returns a string representing a View
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.View.Equals(System.Object)">
            <summary>
            Compares a view against another.
            A view is same when name, description and ID are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Directory.View.GetHashCode">
            <summary>
            Returns a hash code for the View.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.View.ID">
            <summary>
            The unique ID of the view
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.View.Name">
            <summary>
            The name of the View
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.View.Description">
            <summary>
            The description of the View.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.View.MatchAllTags">
            <summary>
            Indicates if any or all tags must match.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.View.TagIDs">
            <summary>
            Read only list with the <see cref="T:GpsGate.Online.Directory.Tag">Tag's</see> associated to the View and are used as a filter argument.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.View.ApplicationID">
            <summary>
            Application thois view is associated to.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.ViewReader">
            <summary>
            Use to read <see cref="T:GpsGate.Online.Directory.View">View's</see> from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Directory.ViewReader.#ctor">
            <summary>
            Create new instance of view reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ViewReader.GetByApplication(System.Int32)">
            <summary>
            Returns all <see cref="T:GpsGate.Online.Directory.View">View's</see> in the specified application.
            </summary>
            <param name="iApplicationID">ID of the application to return the View's that are associated to.</param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Directory.ViewReader.DAO">
            <summary>
            Data access object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Directory.ViewWriter">
            <summary>
            Add and Edit view objects.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Directory.ViewWriter.#ctor">
            <summary>
            Default constructor to create a new Instance of a ViewWriter
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ViewWriter.Name">
            <summary>
            The name of the view.
            Max length: 64 Characters
            Allow Null: false
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ViewWriter.Description">
            <summary>
            Description of the View
            Max Length: 255 Characters
            Allow Null: false
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ViewWriter.ApplicationID">
            <summary>
            The application for which this view is associated to
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ViewWriter.StatusFilter">
            <summary>
            Net status filtering
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ViewWriter.MatchAllTags">
            <summary>
            If true; all tags must match else any.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ViewWriter.TagIDs">
            <summary>
            A list of Tag ID's that are associated to this view.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Directory.ViewWriter.DAO">
            <summary>
            Data access object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventExpressionDAOSQL">
            <summary>
            All event expression DAO classes inherit from this class.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventExpressionDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventExpressionDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load by gate_event_expression.gate_event_expression_id
            </summary>
            <param name="iID"></param>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionDAOSQL.BOType">
            <summary>
            Override 
            gate_event_expression should.bo_type does not exist in table, overide to not let it be set.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionDAOSQL.EventExpressionEvaluatorID">
            <summary>
            gate_event_expression.gate_event_expression_evaluator_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionDAOSQL.IsEndExpression">
            <summary>
            Specifies if expression closes events or starts them.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionDAOSQL.OperatorPreviousExpression">
            <summary>
            gate_event_expression.bool_operator_previous_expression.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EvaluatorConditionDAOSQL">
            <summary>
            Base class for all evaluator conditions.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EvaluatorConditionDAOSQL.Name">
            <summary>
            The name of this evaluator condition.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.DayOfWeekPeriodEvaluatorConditionDAOSQL.DayOfWeekPeriods">
            <summary>
            Gets the list of periods. Fills the dataset if it is not up to date.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventArgumentWriterDAOSQL.ChildTableName">
            <summary>
            Deriving classes override this if they have a linked table with custom data.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventChannelReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventChannelReaderDAOSQL">
            <summary>
            EventChannelReader DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventChannelReaderDAOSQL.GetByApplicationDefinitionName(System.String)">
            <summary>
            <see cref="!:GpsGate.Online.Event.GetByApplicationDefinition"/>
            </summary>
            <param name="strAppDefName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventChannelReaderDAOSQL.CreateBag(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader row to a <see cref="T:GpsGate.Online.Event.EventChannel"/> object.
            Gets called for each row by <see cref="M:Franson.DAO.DAOReaderCache.Execute"/>
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventChannelReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventChannelReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventChannelReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventChannelWriterDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventChannelWriterDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventChannelWriterDAOMSSQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventChannelWriterDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventChannelWriterDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventChannelWriterDAOMySQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventDurationEvaluatorConditionDAOSQL.RelationalOperator">
            <summary>
            Gets and sets the relational operator.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventDurationEvaluatorConditionDAOSQL.EventDuration">
            <summary>
            Gets and sets the duration in DateTime ticks.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventExpressionEvaluatorReaderDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="connection"></param>
            <param name="command"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventExpressionEvaluatorWriterDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load by database ID
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException"></exception>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionEvaluatorWriterDAOSQL.Name">
            <summary>
            varchar(64) NOT NULL
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionEvaluatorWriterDAOSQL.Description">
            <summary>
            varchar(255)
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionEvaluatorWriterDAOSQL.ApplicatinID">
            <summary>
            INTEGER NOT NULL
            Foreign Key: applications.application_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionEvaluatorWriterDAOSQL.EvaluationOperator">
            <summary>
            varchar operator for how the expressions are evaluated. OR / AND
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionEvaluatorWriterDAOSQL.EndEvaluationOperator">
            <summary>
            varchar operator for how the end expressions are evaluated. OR / AND
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionEvaluatorWriterDAOSQL.ChannelIDs">
            <summary>
            List of <see cref="!:EnvetChannel"/>'s.
            linked using gate_event_expression_evaluator_channels
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.EventExpressionEvaluatorWriterDAOSQL.TagIDs">
            <summary>
            List of int tag ids
            linked using gate_event_expression_evaluator_users
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventExpressionStateWriterDAO.#ctor">
            <summary>
            Create expression state writer.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventExpressionStateWriterDAO.Update(GpsGate.Online.Event.EventExpressionStateBag)">
            <summary>
            Writes expression state to database. Returns new bag if it is updated. E.g. database ID is set when new record is created.
            </summary>
            <param name="stateBag"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventExpressionStateWriterDAO.Remove(System.Object)">
            <summary>
            Remove StateBag from database.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventExpressionStateWriterDAO.Clear(System.Int32)">
            <summary>
            Clear all states associated to an <see cref="T:GpsGate.Online.Event.EventExpression"/>
            </summary>
            <param name="iExpressionID">ID of the <see cref="T:GpsGate.Online.Event.EventExpression"/></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventExpressionStateWriterDAO.GetItemType">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventStateReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventStateReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventStateReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventStateReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventStateWriterDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventStateWriterDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventStateWriterDAOMSSQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.EventStateWriterDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventStateWriterDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.EventStateWriterDAOMySQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.GateEventReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventReaderDAOSQL.GetLatestEvents(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.String,System.Int64,System.Int32)">
            <summary>
            Get the latest event by users and event evaluator. Where state indicates:
            NEW: latest created
            CLOSED: latest closed
            </summary>
            <param name="iUserIDs">array of user database IDs</param>
            <param name="iEventExpressionEvaluatorID">database ID of the event evaluator</param>
            <param name="strState">
            NEW: latest created
            CLOSED: latest closed
            </param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventReaderDAOSQL.GetGateEvent(System.Int32,System.DateTime,System.Int32,System.Nullable{GpsGate.Online.Directory.View},System.Int64,System.Int32,System.Boolean)">
            <summary>
            Poll Method
            </summary>
            <param name="iApplicationId">ID of the application for which events should be read.</param>
            <param name="dtUTCServerTimeStamp">UTC Server TimeStamp</param>
            <param name="iPostProcessorID"></param>
            <param name="view"></param>
            <param name="lngIndex">Start index</param>
            <param name="iCount">Number of events</param>
            <param name="bAscending">Sort order: true = Ascending false = Descending</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventReaderDAOSQL.GetGateEvent(System.Int32,System.DateTime,System.Int32,System.String[],System.Int32,System.Nullable{GpsGate.Online.Directory.View},System.Int64,System.Int32,System.Boolean)">
            <summary>
            Poll Method
            </summary>
            <param name="iApplicationId">ID of the application for which events should be read.</param>
            <param name="dtUTCServerTimeStamp">UTC Server TimeStamp</param>
            <param name="iPostProcessorID"></param>
            <param name="iStateID">Load Event where latest log state = provided id. -1 ignores this.</param>
            <param name="view"></param>
            <param name="lngIndex">Start index</param>
            <param name="iCount">Number of events</param>
            <param name="bAscending">Sort order: true = Ascending false = Descending</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventReaderDAOSQL.GetGateEventByIDs(System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.Int32)">
            <summary>
            See BO
            </summary>
            <param name="eventIDs"></param>
            <param name="lStartIndex"></param>
            <param name="iCount"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventReaderDAOSQL.GetGateEvent(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get GateEvents
            </summary>
            <param name="iApplicationId"></param>
            <param name="lStartIndex"></param>
            <param name="iCount"></param>
            <param name="utcStart"></param>
            <param name="utcEnd"></param>
            <param name="iEventExpressionEvaluatorID"></param>
            <param name="iUserID"></param>
            <param name="iPostProcessorID"></param>
            <param name="bAscending"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.GateEventReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.GateEventWriterDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventWriterDAOSQL.LoadByID(System.Int32)">
            <summary>
            Do not use.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
            
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventWriterDAOSQL.LoadByLongID(System.Int64)">
            <summary>
            Load GateEvent from database by ID
            </summary>
            <param name="longID"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventWriterDAOSQL.ContainsState(System.Int32)">
            <summary>
            Returns True if the DataSet contains the provided state id, False otherwise.
            Will fill dataset with log records for this event id if not already filled.
            </summary>
            <param name="iStateId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventWriterDAOSQL.InitTables">
            <summary>
            Adds child log table and setup the relations lazy
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventWriterDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Resolves foreign key between gate_event_log and gate_event tables.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.GateEventWriterDAOSQL.ID">
            <summary>
            Throws exception
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.GateEventWriterDAOSQL.LongID">
            <summary>
            gate_event.gate_event_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.GateEventWriterDAOSQL.BOType">
            <summary>
            GateEvent does not implement bo_type
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventWriterDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Event.DAO.GateEventWriterDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GateEventWriterDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GeofenceEventExpressionDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Resolves geofence_event_expression.event_expression_id
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.GeofenceEventExpressionDAOSQL.OnLoaded(System.String)">
            <summary>
            Loads information from geofence_event_expression table in complement to users table.
            </summary>
            <param name="strLoadedTableName"></param>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.IntegrityEventExpressionDAOSQL.MaxDelta">
            <summary>
            Delay in seconds
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DAO.StringCompareExpressionDAO.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DAO.StringCompareExpressionDAO.CompareString">
            <summary>
            gate_event_expression.value_string
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.Security.GateEventAuthorize">
            <summary>
            Authorize GateEvent operations.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.Security.GateEventAuthorize.#ctor(System.Boolean)">
            <summary>
            TODO: Check application ID of event instead of membership of user created.
            Create new GateEvent Authorizer
            
            No Owner ID is passed which means that the Authorizator ignores in which application context the Event exists in.
            Only use this when event for multiple owners are beeing athrized in combination with reader only reading from a specified application.
            </summary>
            <param name="bRequireWrite"></param>
        </member>
        <member name="M:GpsGate.Online.Event.Security.GateEventAuthorize.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a new Event Authorizer.
            </summary>
            <param name="iApplicationID">ID of the application the event belongs.</param>
            <param name="bRequireWrite"></param>
        </member>
        <member name="M:GpsGate.Online.Event.Security.GateEventAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Authorize the operation.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Event.AnalogMessageExpression">
            <summary>
            Expression used to evaluate simple analog expressions.
            E.g. Set compare value to 10 and boolean evaluator to GREATER; then the incomming messages for the specified
            <see cref="T:Franson.Message.MessageField"/> with value &gt; 10 will evaluate as true.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.MessageEventExpression">
            <summary>
            Base class for EventExpression evaluating data in Message records
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventExpression">
            <summary>
            Base class for Expressions used to evaluate incoming message.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpression.#ctor">
            <summary>
            Create a new EventExpression
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpression.Evaluate(GpsGate.Online.Message.GateMessage)">
            <summary>
            Deriving classes implement the evaluate logic in this method. See <see cref="P:GpsGate.Online.Event.EventExpression.CustomState"/>, <see cref="M:GpsGate.Online.Event.EventExpression.UpdateCustomState(System.String)"/>,
            <see cref="P:GpsGate.Online.Event.EventExpression.LastEvent"/> etc. for state handling.
            </summary>
            <param name="gmToProcess">The incoming message</param>
            <returns>True if expression is true</returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpression.CollectArguments">
            <summary>
            Deriving classes return a List of <see cref="!:EventArguments"/> to be passed with the <see cref="T:GpsGate.Online.Event.GateEvent"/>
            
            Arguments will be collected when Evaluate has return true.
            </summary>
            <returns>
            Return null if no argument else a List of <see cref="T:GpsGate.Online.Event.EventArgument"/>
            </returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpression.UpdateCustomState(System.String)">
            <summary>
            Call this method to update the custom state in state bag passed to next call to <see cref="M:GpsGate.Online.Event.EventExpression.Evaluate(GpsGate.Online.Message.GateMessage)"/>.
            The new state is written to the database.
            </summary>
            <param name="strState"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpression.SetEvaluatingContext(GpsGate.Online.Event.IEventExpressionEvaluationContext)">
            <summary>
            Use by evaluator to set last event before expression executes.
            </summary>
            <param name="evLast"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpression.Equals(System.Object)">
            <summary>
            Equal Comparing Hash code.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpression.EventExpressionEvaluatorID">
            <summary>
            ID of the expression.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpression.IsEndExpression">
            <summary>
            Specifies if expression closes events or starts them.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpression.Name">
            <summary>
            Implementing classes should return the name of the expression.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpression.VirtualASCXFilePath">
            <summary>
            Virtual path to GUI 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpression.CustomState">
            <summary>
            Used to keep state for an event expression for a specific user. Return value of last call to <see cref="M:GpsGate.Online.Event.EventExpression.UpdateCustomState(System.String)"/>
            or null if event is new or no previous custom state is set.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpression.LastEvent">
            <summary>
            Last processed event for evaluator this expression is part of.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpression.Context">
            <summary>
            Get the context for which the EventExpression is executed within.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpression.DAOBase">
            <summary>
            Data access object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.MessageEventExpression.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.MessageEventExpression.MessageFieldID">
            <summary>
            The <see cref="!:MessageField"/> for which value to compare.
            Either this property or trackPointField must be set.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.MessageEventExpression.RelationalOperator">
            <summary>
            Set the operand used to compare the CompareValue with the message value.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.MessageEventExpression.DAOMessage">
            <summary>
            Data access object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.AnalogMessageExpression.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.AnalogMessageExpression.CollectArguments">
            <summary>
            Analog Expression does not return arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.AnalogMessageExpression.Evaluate(GpsGate.Online.Message.GateMessage)">
            <summary>
            Evaluate this expression. 
            Will look for the specified <see cref="T:Franson.Message.MessageField"/> in the provided <see cref="T:GpsGate.Online.Message.GateMessageWriter"/> and compare
            the value against the specified CompareValue with the specified <see cref="T:GpsGate.Online.Event.RelationalOperator"/>
            </summary>
            <param name="currentGateMessage"></param>
            <param name="messageHistory"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.AnalogMessageExpression.Install(Franson.Reflection.LoadableType)">
            <summary>
            NOP Installation. 
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Event.AnalogMessageExpression.GetHashCode">
            <summary>
            Custom hash code.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Event.AnalogMessageExpression.Resolve(Franson.Text.TemplateParser,System.String)" -->
        <member name="P:GpsGate.Online.Event.AnalogMessageExpression.CompareValue">
            <summary>
            Analog value to compare the value of the specified <see cref="T:Franson.Message.MessageField"/> in the incoming <see cref="T:GpsGate.Online.Message.GateMessage"/> data with.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.AnalogMessageExpression.Name">
            <summary>
            The name of this Expression type
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.AnalogMessageExpression.VirtualASCXFilePath">
            <summary>
            Virtual file path to the GUI component to modify this expression instance.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.AnalogMessageExpression.SupportedVariables">
            <summary>
            Returns a list of template variables that can be resolved.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.AnalogMessageExpression.MessageFieldLocaleKey">
            <summary>
            The messagefield locale key of this expression. Set by the Evaluate method and may return null.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition">
            <summary>
            An event rule pre condition evaluating whether or not an incoming message (UTC) is within a (local) day of week and time of day.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EvaluatorPreCondition">
            <summary>
            Used by a GateEventExpressionEvaluator for pre judgement whether it should create events or not.
            A pre condition can be used to improve performance of computing intensive event rules, for example by
            causing the rule expressions not to be evaluated if an incoming message is on a weekend, or if its position is in
            a certain geographical area.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EvaluatorCondition">
            <summary>
            Used by a GateEventExpressionEvaluator for judgement whether it should create events or not.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EvaluatorCondition.Name">
            <summary>
            varchar(64) NOT NULL
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EvaluatorCondition.DAOBase">
            <summary>
            Data access object for the condition.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EvaluatorCondition.VirtualASCXFilePath">
            <summary>
            Virtual path to GUI. 
            E.g: ~/WebControls/Notifiers/MyNotifier.ashx
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.IPreCondition">
            <summary>
            Defines the methods of an evaluator pre condition
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition.#ctor">
            <summary>
            Creates at PeriodEvaluatorPreCondition
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition.Evaluate(GpsGate.Online.GateUser,GpsGate.Online.Message.GateMessage,System.Int32,GpsGate.Online.Message.GateMessageHandle)">
            <summary>
            Returns True if any of the (local time) periods contains the (UTC) time point of the message, otherwise False.
            </summary>
            <param name="gateUser"></param>
            <param name="gateMessageCurrent"></param>
            <param name="iApplicationID">The application id used to create an instance of a TimeZone object for use in evaluating the precondition.</param>
            <param name="messageHandle"></param>
            <returns>True if any of the periods contains the time point of the message, otherwise returns False</returns>
        </member>
        <member name="M:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition.Equals(System.Object)">
            <summary>
            True if all periods are equal, otherwise False.
            </summary>
            <param name="obj"></param>
            <returns>True if all periods are equal, otherwise False.</returns>
        </member>
        <member name="M:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition.GetHashCode">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition.Contains(System.Int32,System.DateTime)">
            <summary>
            Indicates if the provided UTC time point is contained by this (local time) day of week period pre condition.
            </summary>
            <param name="iApplicationID"></param>
            <param name="dtTimePoint"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition.GetStartTimeList(System.Double,System.Int32)">
            <summary>
            Returns a list of UTC DateTime time points indicating the starttimes of the periods of this pre condition, 
            adding the provided offset in seconds (double rounded towards zero).
            </summary>
            <param name="dSecondsOffset">Offset in seconds to be added to the starttimes (double rounded towards zero).</param>
            <returns>List of UTC DateTime time points indicating the starttimes plus offset of the periods of this pre condition.</returns>
        </member>
        <member name="P:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition.Periods">
            <summary>
            The periods defining the day(s) of week and time of day for this pre condition.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition.DAOBase">
            <summary>
            Data access object for the evaluator condition.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DayOfWeekPeriodEvaluatorPreCondition.VirtualASCXFilePath">
            <summary>
            The virtual path to the web control using this post condition.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.DeltaExpressionDenominator">
            <summary>
            Denominator used by <see cref="T:GpsGate.Online.Event.DerivateMessageExpression"/>.
            Defines the DX value.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.DerivateMessageExpression">
            <summary>
            Expression to find abnormalities over time or distance for an analog value
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DerivateMessageExpression.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DerivateMessageExpression.CollectArguments">
            <summary>
            Derive Expression does not return arguments.
            
            Will return null
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DerivateMessageExpression.Evaluate(GpsGate.Online.Message.GateMessage)">
            <summary>
            Evaluates the DX/DY where DX are the difference in Time or Distance specified by the Denominator
            and DY is the difference in the values for the specified <see cref="T:Franson.Message.MessageField"/> where Y2 is the first historical
            value found that exceeds the DeltaMinY value and Y1 are the current incoming value.
            </summary>
            <param name="currentGateMessage">Current incoming message.</param>
            <param name="geLast">Last <see cref="T:GpsGate.Online.Event.GateEvent"/> created by this rule.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DerivateMessageExpression.GetHashCode">
            <summary>
            Compared based on MessageFieldID, CompareValue, MinDeltaY, Denominator and RelationalOperator
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Event.DerivateMessageExpression.Resolve(Franson.Text.TemplateParser,System.String)" -->
        <member name="P:GpsGate.Online.Event.DerivateMessageExpression.Name">
            <summary>
            Name if the expression plugin.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DerivateMessageExpression.CompareValue">
            <summary>
            The value to be compared
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DerivateMessageExpression.MinDeltaY">
            <summary>
            Threads hold value for min changes of Y before we make the compare. 
            Use this to filter out variances in the in data.
            Set this to a value greater then the variance of the in data.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DerivateMessageExpression.Denominator">
            <summary>
            Defines the DY. Set to Time to detect changes over time or Distance to detect changes over Distance.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DerivateMessageExpression.VirtualASCXFilePath">
            <summary>
            Virtual file path to the GUI component to modify this expression instance.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DerivateMessageExpression.DAO">
            <summary>
            Data access object
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DerivateMessageExpression.SupportedVariables">
            <summary>
            Returns a list of template variables that can be resolved.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DerivateMessageExpression.MessageFieldLocaleKey">
            <summary>
            The messagefield locale key of this expression. Set by the Evaluate method and may return null.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.DigitalMessageExpression">
            <summary>
            Expression used to evaluate simple boolean expressions.
            E.g. Set compare value to false and boolean evaluator to EQUAL; then the incomming messages for the specified
            <see cref="T:Franson.Message.MessageField"/> with value false will evaluate as true and value true will evaluate as false.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DigitalMessageExpression.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.DigitalMessageExpression.Evaluate(GpsGate.Online.Message.GateMessage)">
            <summary>
            Evaluate this expression. 
            Will look for the specified <see cref="T:Franson.Message.MessageField"/> in the provided <see cref="T:GpsGate.Online.Message.GateMessageWriter"/> and compare
            the value against the specified CompareValue with the specified <see cref="P:GpsGate.Online.Event.DigitalMessageExpression.RelationalOperator"/>
            </summary>
            <param name="messageHistory"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DigitalMessageExpression.CollectArguments">
            <summary>
            Will return MessagField Name: boolean value
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.DigitalMessageExpression.Install(Franson.Reflection.LoadableType)">
            <summary>
            NOP Installation. 
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Event.DigitalMessageExpression.GetHashCode">
            <summary>
            Based on MessageFieldID, CompareValue and RelationalOperator.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Event.DigitalMessageExpression.Resolve(Franson.Text.TemplateParser,System.String)" -->
        <member name="P:GpsGate.Online.Event.DigitalMessageExpression.CompareValue">
            <summary>
            Boolean value to compare the value of the specified <see cref="T:Franson.Message.MessageField"/> in the incoming <see cref="T:GpsGate.Online.Message.GateMessage"/> data with.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DigitalMessageExpression.RelationalOperator">
            <summary>
            Set the operand used to compare the CompareValue with the message value.
            
            RelationOperator.EQUAL and RelationOperator.NOT_EQUAL are allowed.
            </summary>
            <exception cref="T:System.InvalidOperationException">If not a valid <see cref="P:GpsGate.Online.Event.DigitalMessageExpression.RelationalOperator"/> are set.</exception>
        </member>
        <member name="P:GpsGate.Online.Event.DigitalMessageExpression.Name">
            <summary>
            The name of this Expression type
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DigitalMessageExpression.VirtualASCXFilePath">
            <summary>
            Virtual file path to the GUI component to modify this expression instance.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.DigitalMessageExpression.SupportedVariables">
            <summary>
            Returns a list of template variables that can be resolved.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EvaluatorPostCondition">
            <summary>
            Used by a GateEventExpressionEvaluator for post judgement whether it should create events or not.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.IPostCondition">
            <summary>
            Defines the methods of an evaluator post condition
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventArgument">
            <summary>
            Lightweight representation of a EventArgumentWriter.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventArgument.#ctor(System.Int32,System.Int64,System.String,System.String,System.Object,System.Type,System.String)">
            <summary>
            Constructor used by readers.
            </summary>
            <param name="lngID">ID of gate event argument</param>
            <param name="lngEventID">Event ID</param>
            <param name="strDescription">The Argument Description</param>
            <param name="strBOType">BOType of GateEventArgumentWriter</param>
        </member>
        <member name="M:GpsGate.Online.Event.EventArgument.ToTypedArgument">
            <summary>
            Get <see cref="T:GpsGate.Online.Event.EventArgumentWriter"/> of the BO type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventArgument.ToLocalizedString(Franson.Localization.Locale)">
            <summary>
            Return a localized string representation.
            </summary>
            <param name="locale"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgument.ID">
            <summary>
            ID of the EventArgument
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgument.EventID">
            <summary>
            ID of the <see cref="T:GpsGate.Online.Event.GateEvent"/> this argument belongs to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgument.Description">
            <summary>
            Short free text description used in GUI, Reports etc.
            To get full EventArgument object with all information use ToTypedArgument method.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgument.LocalizationKey">
            <summary>
            Key used to look up translations and measures from localized resources.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgument.Value">
            <summary>
            Generic value of the event argument. Can be null.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgument.Type">
            <summary>
            Type of value.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventArgumentWriter">
            <summary>
            <see cref="T:GpsGate.Online.Event.EventArgument"/> provides further information of interest to a <see cref="T:GpsGate.Online.Event.GateEvent"/>.
            
            Description is a free text field used to display a short version of the event argument in GUI, Reports etc.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventArgumentWriter.#ctor(System.String)">
            <summary>
            Creates a new EventArgumentWriter with a description only.
            </summary>
            <param name="strDescription"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventArgumentWriter.#ctor(System.String,System.Object,System.String)">
            <summary>
            Default Constructor
            </summary>
            <param name="strDescription"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventArgumentWriter.SetNew">
            <summary>
            Makes this Event argument to be new to be able to add it to db even if another event already has saved it
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventArgumentWriter.SetDAO">
            <summary>
            Derived classes with custom table must override this and set the DAO object. 
            E.g. GeofenceEventArgument will set GeofenceEventArgumentDAOSQL.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventArgumentWriter.ToString">
            <summary>
            Returns a string representation.
            Will return Description
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgumentWriter.Description">
            <summary>
            Free text description used in GUI lists etc.
            Max 255 characters.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgumentWriter.EventID">
            <summary>
            The <see cref="T:GpsGate.Online.Event.GateEvent"/> for which this argument belongs to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgumentWriter.Value">
            <summary>
            Set and Get the argument value.
            Supported types are:
            string, double, int, string and DateTime
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgumentWriter.LocalizationKey">
            <summary>
            String used to translate and lookup measurte conversions from localized resource files.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventArgumentWriter.BaseDAO">
            <summary>
            DataAccess object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventChannel">
            <summary>
            All events are labeled with a <see cref="T:GpsGate.Online.Event.EventChannel"/>.
            
            The name of a <see cref="T:GpsGate.Online.Event.EventChannel"/> is constrained to be unique in the database.
            
            The <see cref="T:GpsGate.Online.Event.EventChannel"/> will affect the behavior of the GpsGate Server.
            E.g An event labeld with the ALARM channel will be displayed in the alarm control in VehicleTracker's Web GUI.
            
            An <see cref="T:Franson.Directory.Application"/> supports sets of <see cref="T:GpsGate.Online.Event.EventChannel"/>'s. 
            Those sets are defined by the <see cref="!:ApplicationDefinition"/> of the application type. 
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannel.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Default and only constructor.
            </summary>
            <param name="iID">id</param>
            <param name="strName">name</param>
            <param name="strDescription">short description</param>
        </member>
        <member name="P:GpsGate.Online.Event.EventChannel.ID">
            <summary>
            The id of <see cref="T:GpsGate.Online.Event.EventChannel"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventChannel.Name">
            <summary>
            The name of the <see cref="T:GpsGate.Online.Event.EventChannel"/>.
            Name is constrained to be UNIQUE and max 64 chars.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventChannel.Description">
            <summary>
            Short description of the <see cref="T:GpsGate.Online.Event.EventChannel"/>
            Description is constrained to max 255 chars.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventChannelIDListWrapper">
            <summary>
            Wrapper class for maintaining backward compatibility of the ChannelIDs property of the EventExpressionEvaluatorWriter BO.
            EventChannelIDsWrapper keeps the list of ChannelNotifiers in sync with the IList of channel id:s by reflecting out
            the ChannelNotifiers of the the list of Notifiers
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelIDListWrapper.Remove(System.Int32)">
            <summary>
            Removes first occurence of the provided item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelIDListWrapper.System#Collections#Generic#ICollection{System#Int32}#Remove(System.Int32)">
            <summary>
            Removes first occurence of the provided item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelIDListWrapper.Contains(System.Collections.Generic.List{GpsGate.Online.Notification.Channel.ChannelNotifier},System.Int32)">
            <summary>
            Returns true if channel id exists
            </summary>
            <param name="lstChannelNotifiers"></param>
            <param name="iChannelID"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Event.EventChannelListWrapper">
            <summary>
            Wrapper class for maintaining backward compatibility of the Channels property of the EventExpressionEvaluator BO.
            EventChannelListWrapper keeps the list of ChannelNotifiers in sync with the IList of EventChannels by reflecting out
            the ChannelNotifiers of the the list of Notifiers
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventChannelMappingRule">
            <summary>
            Application rule. Manage execution of event expressions.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Message.ApplicationRule">
            <summary>
            Base class for all application rules.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Message.Rule">
            <summary>
            Base class for Rules such as <see cref="T:GpsGate.Online.Message.RecorderRule"/>'s and <see cref="T:GpsGate.Online.Message.ApplicationRule"/>'s.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.Rule.CreateDefaultChain">
            <summary>
            Implemented by deriving classes to return chain of correct type.
            E.g RecorderRule will return a RecorderRuleChain and 
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.Rule.Name">
            <summary>
            Name of the rule instance
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.Rule.Description">
            <summary>
            Description of the rule instance
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.Rule.Enabled">
            <summary>
            Is this rule instance enabled i.e Should it be executed
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.Rule.ExecutionOrder">
            <summary>
            The execution order in the chain of rules.
            Can't bee same as another rule ExecutionOrder value.
            TODO: Check this order or implement a rule pipe manager which helps inserting of rule and shifting orders etc.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelMappingRule.Process(GpsGate.Online.Message.GateMessage,Franson.Directory.Application,GpsGate.Online.GateUser,System.Collections.Generic.List{GpsGate.Online.Event.GateEventWriter},GpsGate.Online.Message.GateMessageHandle)">
            <summary>
            Rule analyzing incoming <see cref="T:GpsGate.Online.Message.GateMessage">GateMessages</see> and create <see cref="T:GpsGate.Online.Event.GateEvent"/> according
            to the <see cref="T:GpsGate.Online.Event.EventExpression">EventExpressions</see> associated to the connected <see cref="T:GpsGate.Online.GateUser"/>.
            </summary>
            <param name="gateMessage"></param>
            <param name="application"></param>
            <param name="gateUser"></param>
            <param name="gateEvents"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelMappingRule.GetEventExpressionEvaluators(System.Int32,System.Int32)">
            <summary>
            Returns a list of event expression evaluators for specific user in specified application.
            </summary>
            <param name="iApplicationID"></param>
            <param name="iUserID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelMappingRule.Install(Franson.Reflection.LoadableType)">
            <summary>
            Installs this rule.
            
            Add new db instance of this rule to application_rule table.
            
            Installs "NEW", "CLOSED" <see cref="T:GpsGate.Online.Event.EventState"/> if not already in database.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="T:GpsGate.Online.Event.EventChannelReader">
            <summary>
            Reader providing a fast stream like reading of <see cref="T:GpsGate.Online.Event.EventChannel"/>'s from the database.
            
            Usage notes:
            Following methods are thread safe:
            GetChannel(string strName) 
            GetChannel(int iId)
            
            Use those methods in "singleton mode" when you need to load a single <see cref="T:GpsGate.Online.Event.EventChannel"/> with high performance. 
            Those methods uses underlying caches to provide good performance.
            
            Act upon following tables:
            - gate_event_channel
            - gate_event_channel_groups
            - groups
            - application_def_gate_event_channels
            
            </summary>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="F:GpsGate.Online.Event.EventChannelReader.m_channelReaderSingleton">
            <summary>
            Private singleton instance.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.GetReader">
            <summary>
            Get the <see cref="T:GpsGate.Online.Event.EventChannelReader"/> singleton instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.ClearSingleton">
            <summary>
            Create a new singleton instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GpsGate.Online.Event.EventChannelReader.m_listCachedChannel" -->
        <member name="F:GpsGate.Online.Event.EventChannelReader.m_oSync">
            <summary>
            Object used to synchronize threads
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.#ctor">
            <summary>
            Deafult constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.GetAll">
            <summary>
            Loads all EventChannels
            
            Note: Not Thread safe don't use in Singleton mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.GetByApplicationDefinition(GpsGate.Online.Directory.ApplicationDefinition)">
            <summary>
            Loads all <see cref="T:GpsGate.Online.Event.EventChannel"/> 's specified by a given <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/>  
            
            Note: Not Thread safe don't use in Singleton mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.GetByApplication(Franson.Directory.Application)">
            <summary>
            Loads all <see cref="T:GpsGate.Online.Event.EventChannel"/> 's for the given <see cref="T:Franson.Directory.Application"/> instance.
            
            Note: Not Thread safe don't use in Singleton mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.GetChannel(System.String)">
            <summary>
            Get <see cref="T:GpsGate.Online.Event.EventChannel"/> by the unique channel name.
            
            Thread safe and caching.
            </summary>
            <param name="strChannel"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.GetChannel(System.Int32)">
            <summary>
            Get <see cref="T:GpsGate.Online.Event.EventChannel"/> by the unique channel id.
            
            Thread safe and caching.
            </summary>
            <param name="strChannel"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Event.EventChannelReader.ReaderToEventChannel(System.Data.IDataReader)" -->
        <member name="M:GpsGate.Online.Event.EventChannelReader.RemoveChannelFromCache(System.String)">
            <summary>
            Removes the EventChannelDictionary object for the given application from the cache.
            </summary>
            <param name="iApplicationId"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.Clear">
            <summary>
            Renew the singleton instance. 
            Wipeing all caches.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelReader.Remove(System.String)">
            <summary>
            Removes the <see cref="T:GpsGate.Online.Event.EventChannel"/> with the provided name as key from the singletons internal cache.  
            </summary>
            <param name="strKey"></param>
        </member>
        <member name="P:GpsGate.Online.Event.EventChannelReader.DAO">
            <summary>
            Object to interact with the database through.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventChannelWriter">
            <summary>
            Writes <see cref="T:GpsGate.Online.Event.EventChannel"/>'s to the database.
            
            Use any of the methods to add <see cref="T:GpsGate.Online.Event.EventChannel"/>'s to the writer, then call Update() to commit changes to database.
            
            An <see cref="T:GpsGate.Online.Event.EventChannel"/> can be assigned to an <see cref="T:Franson.Directory.Application"/> by a <see cref="T:Franson.Directory.Group"/> where privileges can be deduced. 
            
            Writes to following tables:
            - gate_event_channel
            - gate_event_channel_groups 
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelWriter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelWriter.Add(GpsGate.Online.Event.EventChannel)">
            <summary>
            Add a new <see cref="T:GpsGate.Online.Event.EventChannel"/> to the database.
            
            The Name and ID must both be unique otherwise an Exception will be thrown.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelWriter.AddToGroup(GpsGate.Online.Event.EventChannel,Franson.Directory.Group)">
            <summary>
            Assigne a <see cref="T:GpsGate.Online.Event.EventChannel"/> to a <see cref="T:Franson.Directory.Group"/>.
            
            Through the <see cref="T:Franson.Directory.Group"/> bindings to an <see cref="T:Franson.Directory.Application"/> and privileges can be deduced. 
            </summary>
            <param name="channel"></param>
            <param name="group"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventChannelWriter.GetItemType">
            <summary>
            Type of the object this writer can write.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Event.EventChannelWriter.DAO">
            <summary>
            Object to interact with the database through.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventDurationEvaluatorPostCondition">
            <summary>
            An event rule post condition evaluating whether or not events have lasted a duration of time.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventDurationEvaluatorPostCondition.#ctor">
            <summary>
            Creates a EventDurationEvaluatorPostCondition
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventDurationEvaluatorPostCondition.Equals(System.Object)">
            <summary>
            Equal if hashcodes are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventDurationEvaluatorPostCondition.GetHashCode">
            <summary>
            Gets the hashcode of the EventDuration.
            </summary>
            <returns>The hashcode of the EventDuration.</returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventDurationEvaluatorPostCondition.Evaluate(System.Collections.Generic.IList{GpsGate.Online.Event.GateEventWriter})">
            <summary>
            Evaluates whether the events have lasted longer than the EventDuration of this post condition.
            </summary>
            <param name="lstEvents">The events to be evaluated.</param>
            <returns>True if events have lasted longer than the EventDuration of this post condition, False otherwise.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GpsGate.Online.Event.EventDurationEvaluatorPostCondition.RelationalOperator" -->
        <member name="P:GpsGate.Online.Event.EventDurationEvaluatorPostCondition.EventDuration">
            <summary>
            Gets and sets the event duration specified in DateTime ticks.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventDurationEvaluatorPostCondition.DAOBase">
            <summary>
            Data access object for the evaluator condition.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventDurationEvaluatorPostCondition.VirtualASCXFilePath">
            <summary>
            The virtual path to the web control using this post condition.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventException">
            <summary>
            Base class for exception in GpsGate.Online.Event namespace.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="P:GpsGate.Online.Event.EventException.LanguageKey">
            <summary>
            Key to use for translate the error.
            If not Provided in the constructor, exception name in upper case + EX_ prefix will be used.
            Save ex.message as it is to preserve backwards compatibility
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.NoChannelNotifierException">
            <summary>
            Thrown if EventExpressionEvaluatorWriter does not contain a ChannelNotifier when calling Update(). 
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventExpressionEvaluationContext">
            <summary>
            Represents the context for which the EventExpression is executed within.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.IEventExpressionEvaluationContext">
            <summary>
            Context for which an 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.IEventExpressionEvaluationContext.Evaluator">
            <summary>
            The <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> which executes the <see cref="T:GpsGate.Online.Event.EventExpression"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.IEventExpressionEvaluationContext.LastEvent">
            <summary>
            The LastEvent the rule executing this expression has created.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.IEventExpressionEvaluationContext.User">
            <summary>
            Current executing user.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluationContext.#ctor(GpsGate.Online.Event.EventExpressionEvaluator,GpsGate.Online.Event.GateEventWriter,GpsGate.Online.GateUser)">
            <summary>
            Creates a new EventExpressionEvaluationContext object.
            </summary>
            <param name="evaluator">The event rule executiong the expression.</param>
            <param name="gateEvent">The last event of the rule. May be null</param>
            <param name="user">The currentr user.</param>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluationContext.Evaluator">
            <summary>
            The <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> which executes the <see cref="T:GpsGate.Online.Event.EventExpression"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluationContext.LastEvent">
            <summary>
            The LastEvent the rule executing this expression has created.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluationContext.User">
            <summary>
            Current executing user.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventExpressionEvaluator">
            <summary>
            Evaluates a sequence of <see cref="T:GpsGate.Online.Event.EventExpression"/>'s
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.#ctor(System.Int32,System.Collections.Generic.List{Franson.Reflection.LoadableType},System.Collections.Generic.List{System.Int32},System.String,System.String,GpsGate.Online.Event.BooleanOperator,GpsGate.Online.Event.BooleanOperator,System.Collections.Generic.List{Franson.Reflection.LoadableType},System.Collections.Generic.List{Franson.Reflection.LoadableType},System.Int32)">
            <summary>
            Internal constructor used by <see cref="T:GpsGate.Online.Event.EventExpressionEvaluatorReader"/> to create a new <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/>
            </summary>
            <param name="ID"></param>
            <param name="eventExpSeq"></param>
            <param name="eventChannels"></param>
            <param name="listUserID"></param>
            <param name="strName"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.#ctor(System.Int32,System.Collections.Generic.List{GpsGate.Online.Event.EventExpression},System.Collections.Generic.List{System.Int32},System.String,System.String,GpsGate.Online.Event.BooleanOperator,System.Collections.Generic.IList{GpsGate.Online.Notification.Notifier},System.Collections.Generic.IList{GpsGate.Online.Event.EvaluatorCondition})">
            <summary>
            Create a new EventExpressionEvaluator. Normally the EventExpressionEvaluatorReader is used to get evaluators
            </summary>
            <param name="ID"></param>
            <param name="expressions"></param>
            <param name="listTagID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <param name="evaluatorOperator"></param>
            <param name="notifiers"></param>
            <param name="lstEvaluatorConditions">Evaluator conditions to be used by this instance.</param>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.#ctor(System.Int32,System.Collections.Generic.List{GpsGate.Online.Event.EventExpression},System.Collections.Generic.List{System.Int32},System.String,System.String,GpsGate.Online.Event.BooleanOperator,System.Collections.Generic.IList{GpsGate.Online.Notification.Notifier})">
            <summary>
            Create a new EventExpressionEvaluator. Normally the EventExpressionEvaluatorReader is used to get evaluators
            </summary>
            <param name="ID"></param>
            <param name="expressions"></param>
            <param name="listTagID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <param name="evaluatorOperator"></param>
            <param name="notifiers"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.EvaluatePreConditions(GpsGate.Online.GateUser,GpsGate.Online.Message.GateMessage,System.Int32,GpsGate.Online.Message.GateMessageHandle)">
            <summary>
            Returns false if any of the preconditions are false, otherwise returns true.
            </summary>
            <param name="gateUser"></param>
            <param name="gateMessageCurrent"></param>
            <param name="iApplicationID"></param>
            <param name="messageHandle"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.EvaluatePostConditions(System.Collections.Generic.IList{GpsGate.Online.Event.GateEventWriter})">
            <summary>
            Returns false if any of the preconditions are false, otherwise returns true.
            </summary>
            <param name="lstEvents"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.Evaluate(GpsGate.Online.GateUser,GpsGate.Online.Message.GateMessage,System.Int32,GpsGate.Online.Message.GateMessageHandle)">
            <summary>
            Evaluates the sequence of <see cref="T:GpsGate.Online.Event.EventExpression"/>.
            </summary>
            <param name="gateMessageCurrent">The incoming message</param>
            <param name="iApplicationID">The application ID this evaluator is executing in.</param>
            <param name="gateUser">Logged in user</param>
            <param name="messageHandle">Handler to make changes to gate message.</param>
            <returns>True if the sequence of <see cref="T:GpsGate.Online.Event.EventExpression"/>'s are matched.</returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.Notify(System.Int32,GpsGate.Online.Event.EventExpressionEvaluator.NotifyMode)">
            <summary>
            Fires Notify on all notifiers.
            Returns a list of notes from the notification contexts set by the Notify and NotifyEnd methods.
            </summary>
            <param name="iUserID">Logged in user ID</param>
            <param name="stage">Current event stage</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.AddEventArguments(System.Collections.Generic.List{GpsGate.Online.Event.GateEventWriter},System.String[])">
            <summary>
            Adds the specified notes as event arguments to the specified events.
            </summary>
            <param name="lstLatestEvents"></param>
            <param name="notes"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.GetChannels">
            <summary>
            Returns a list of channels specified by the channel notifiers of this evaluator.
            If no channel notifier exists, the NONE channel is included as a default channel.
            Creates ChannelNotifiers if needed if deprecated Channels property has been used to add channels. 
            </summary>
            <returns>List of channels</returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.LoadEvaluatorConditions">
            <summary>
            Loads the LoadableTypes and adds them to the list of EvaluatorConditions
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.SetEventStateNewIfNotSet(System.Collections.Generic.List{GpsGate.Online.Event.GateEventWriter})">
            <summary>
            Sets the event state to 'NEW' for any event that has event state == null
            </summary>
            <param name="lstGateEventWriter">List of events whos event state will be changed if needed.</param>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.ToString">
            <summary>
            Returns a string representation of the <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/>
            
            Will return Name
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Event.EventExpressionEvaluator.Resolve(Franson.Text.TemplateParser,System.String)" -->
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.ClearScheduleTasks">
            <summary>
            Remove all tasks added by this rule.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.ScheduleTasks">
            <summary>
            Shedule tasks according to the scheduled event expressions of the event expression evaluator
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluator.ScheduleTasksAtDayOfWeekPeriodStartTimes(GpsGate.Online.Event.IntegrityEventExpression)">
            <summary>
            Schedule task(s) to run at the start time (plus max delta of the expression (max delta is the time limit for "offline")) of periods in the the day of week period evaluator pre condition of the event rule.
            Do not schedule if the rule is "always active" according to the day of week pre condition.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.ID">
            <summary>
            The unique ID of this EventExpressionEvaluator
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.TagIDs">
            <summary>
            A list of Tag IDs for which this evaluator applies to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.HasEndExpression">
            <summary>
            Return true if rule contains end expressions;
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.Expressions">
            <summary>
            The sequence of <see cref="T:GpsGate.Online.Event.EventExpression"/>'s
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.Notifiers">
            <summary>
            The list of notifiers that will create notifications upon a new event (e.g. email notification or SOS channel notification).
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.Name">
            <summary>
            The name of this EventExpressionEvaluator
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.Description">
            <summary>
            Description of the evaluator.
            Max 255 Characters.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.EvaluationOperator">
            <summary>
            Set or Get boolean operator for how the expressions are evaluated.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.EndEvaluationOperator">
            <summary>
            Set or Get boolean operator for how the end expressions are evaluated.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.ApplicationID">
            <summary>
            Get the application ID of the event expression evaluator
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluator.SupportedVariables">
            <summary>
            Returns a list of template variables that can be resolved. The list is constructed by asking child TemplateResolvers 
            for their SupportedVariables.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventExpressionEvaluatorReader">
            <summary>
            Reads <see cref="!:GateEventExpressionEvaluator"/> instances.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorReader.GetById(System.Int32)">
            <summary>
            Reads <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> for a specified id.
            This method do not load user data such as EventExpressionState. This should not be used in runtime for evaluating messages.
            </summary>
            <param name="iEventExpressionEvaluatorId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorReader.GetByUserAndApplication(GpsGate.Online.GateUser,Franson.Directory.Application)">
            <summary>
            Reads <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> for a specified user and application.
            </summary>
            <param name="gateUser">User to load by</param>
            <param name="application">Application</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorReader.GetByUserAndApplication(System.Int32,System.Int32)">
            <summary>
            Reads <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> for a specified user and application identified by unique IDs.
            </summary>
            <param name="iUserID"></param>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorReader.GetByApplication(System.Int32)">
            <summary>
            Reads all <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> for the given application.
            This method do not load user data such as EventExpressionState. This should not be used in runtime for evaluating messages.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Event.EventExpressionEvaluatorWriter">
            <summary>
            Writes <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> to database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorWriter.#ctor">
            <summary>
            Create new EventExpressionEvaluatorWriter.
            Default Constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorWriter.Update">
            <summary>
            Commit changes to DB
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorWriter.PublishEventsToObservers(GpsGate.Online.Event.EventExpressionEvaluatorWriter.PublishMode)">
            <summary>
            Publishes events to observers.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorWriter.ToBag">
            <summary>
            Return a read only representation (bag) of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorWriter.HasExpressions">
            <summary>
            Validates that evaluator has at least one expression
            Error if not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorWriter.HasUsersInTags">
            <summary>
            Validates that there is users in the selected tags.
            WARN of not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionEvaluatorWriter.ToString">
            <summary>
            Return name of rule.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.Name">
            <summary>
            Max 64 char NOT NULL
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.Description">
            <summary>
            Max 255 char
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.ApplicatinID">
            <summary>
            INTEGER NOT NULL
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.EvaluationOperator">
            <summary>
            Set or Get boolean operator for how the expressions are evaluated.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.EndEvaluationOperator">
            <summary>
            Set or Get boolean operator for how the end expressions are evaluated.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.ChannelIDs">
            <summary>
            List of <see cref="T:GpsGate.Online.Event.EventChannel"/> ID's for which to create <see cref="T:GpsGate.Online.Event.GateEvent"/>'s in if evaluator evaluated as true.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.TagIDs">
            <summary>
            List of <see cref="T:GpsGate.Online.Directory.Tag"/> ID's. For who this <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> should apply to.
            If none the expression is applied to all.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.Expressions">
            <summary>
            List of <see cref="T:GpsGate.Online.Event.EventExpression"/> with eval order.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.Notifiers">
            <summary>
            List of <see cref="T:GpsGate.Online.Notification.Notifier"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.PreConditions">
            <summary>
            List of <see cref="T:GpsGate.Online.Event.EvaluatorPreCondition"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionEvaluatorWriter.PostConditions">
            <summary>
            List of <see cref="T:GpsGate.Online.Event.EvaluatorPostCondition"/>
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventExpressionState">
            <summary>
            State object to help event expression.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionState.#ctor(System.Nullable{GpsGate.Online.Event.GateEvent})">
            <summary>
            Create event expression state.
            </summary>
            <param name="lastEvent"></param>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionState.LastEvent">
            <summary>
            Last event created by event evaluator.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventExpressionStateBag">
            <summary>
            State object to help event expression. Read only.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionStateBag.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Create event expression state.
            </summary>
            <param name="lastEvent"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionStateBag.SetCustomState(System.String)">
            <summary>
            Returns new bag with new state, or this if unchanged.
            </summary>
            <param name="strNewState"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventExpressionStateBag.SetID(System.Int32)">
            <summary>
            Returns bag with new state ID, or this if unchanged.
            </summary>
            <param name="iID"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionStateBag.EventExpressionStateId">
            <summary>
            Database ID
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionStateBag.EventExpressionId">
            <summary>
            Database ID from event_expression table.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionStateBag.UserId">
            <summary>
            Database ID for user.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventExpressionStateBag.CustomState">
            <summary>
            Custom state as string.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.BooleanOperator">
            <summary>
            BooleanOperators used in <see cref="T:GpsGate.Online.Event.EventExpression"/>'s
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.RelationalOperator">
            <summary>
            Relational Operators used in <see cref="T:GpsGate.Online.Event.EventExpression"/>'s
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.RelationalOperator.EQUAL">
            <summary>
            a == b
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.RelationalOperator.NOT_EQUAL">
            <summary>
            a != b
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.RelationalOperator.GREATER">
            <summary>
             a > b
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GpsGate.Online.Event.RelationalOperator.LESS" -->
        <member name="F:GpsGate.Online.Event.RelationalOperator.GREATER_OR_EQUAL">
            <summary>
            a >= b
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:GpsGate.Online.Event.RelationalOperator.LESS_OR_EQUAL" -->
        <member name="T:GpsGate.Online.Event.MathOperators">
            <summary>
            Math Operators used in <see cref="T:GpsGate.Online.Event.EventExpression"/>'s
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.MathOperators.ADD">
            <summary>
            a + b
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.MathOperators.SUBTRACT">
            <summary>
            a - b
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.MathOperators.MULTIPLY">
            <summary>
            a * b
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.MathOperators.DIVIDE">
            <summary>
            a / b
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.GateEventReader">
            <summary>
            Reader object providing a forward stream like reading of <see cref="T:GpsGate.Online.Event.GateEvent"/>'s from the database.
            
            Act upon following tables:
            - gate_event_log
            - gate_event
            - gate_event_channel
            - gate_event_channel_groups
            - groups
            - gate_message
            - track_data
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.GateEventReader.m_ReaderSingleton">
            <summary>
            Private singleton instance.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventReader.GetReader">
            <summary>
            Get the <see cref="T:GpsGate.Online.Event.GateEventReader"/> singleton instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventReader.ClearSingleton">
            <summary>
            Create a new singleton instance.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventReader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventReader.GetLatestEvents(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.String,System.Int64,System.Int32)">
            <summary>
            Get the latest event by users and event evaluator. Where state indicates:
            NEW: latest created
            CLOSED: latest closed
            </summary>
            <param name="iUserIDs">array of user database IDs</param>
            <param name="iEventExpressionEvaluatorID">database ID of the event evaluator</param>
            <param name="strState">
            NEW: latest created
            CLOSED: latest closed
            </param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventReader.GetGateEventByIDs(System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.Int32)">
            <summary>
            Get events by ID. 
            </summary>
            <param name="eventIDs">array of event database int64 IDs</param>
            <param name="lngIndex">Start index.</param>
            <param name="iCount">Number of events to receive from startIndex.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventReader.GetGateEvent(System.Int32,System.DateTime,System.Int32,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Load <see cref="T:GpsGate.Online.Event.GateEvent"/> for the given application where any <see cref="!:EventLogRecord"/> 
            is newer then the time stamp parameter.
            </summary>
            <param name="iApplicationId">The id of the <see cref="T:Franson.Directory.Application"/> for which <see cref="T:GpsGate.Online.Event.GateEvent"/>'s should be loaded.</param>
            <param name="dtTimeStamp">The UTC Server DateTime to limit the search.</param>
            <param name="lngIndex">Start index</param>
            <param name="iCount">Number of events</param>
            <param name="bAscending">Sort order: true = Ascending false = Descending</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventReader.GetGateEvent(System.Int32,System.DateTime,System.Int32,System.String[],System.Int32,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Load <see cref="T:GpsGate.Online.Event.GateEvent"/> for the given application where any <see cref="!:EventLogRecord"/> 
            is newer then the time stamp parameter.
            </summary>
            <param name="iApplicationId">The id of the <see cref="T:Franson.Directory.Application"/> for which <see cref="T:GpsGate.Online.Event.GateEvent"/>'s should be loaded.</param>
            <param name="dtUTCServerTimeStamp">The UTC Server DateTime to limit the search.</param>
            <param name="iViewID">Id of view to filter result</param>
            <param name="iStateID">Id of EventState to filter. Return all events with current state id equals the provided</param>
            <param name="lngIndex">Start index</param>
            <param name="iCount">Number of events</param>
            <param name="bAscending">Sort order: true = Ascending false = Descending</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventReader.Clear">
            <summary>
            Clears the singleton instance of the <see cref="!:EventReader"/>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventReader.Remove(System.String)">
            <summary>
            Clears the singleton instance of the <see cref="!:EventReader"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventReader.DAO">
            <summary>
            Object to interact with the database through.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventStage">
            <summary>
            Defines the stage of the <see cref="T:GpsGate.Online.Event.GateEvent"/> 
            
            GateEvent can have different stages during its life time.
            When the Event is Pending it still is active and can extends with new Messages until the stage is changed to Finished.
            
            E.g:
            A Speeding alert will create a new Event as soon the speed is over the defined limit.
            The Event will be pending as long as the unit i speeding and the <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> will extend the event with the current <see cref="!:GateMessage"/>.
            As soon the speed are again below the given limit the <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> will change the Stage of the Events to Finished.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.EventStage.Pending">
            <summary>
            Pending while the Event is active
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.EventStage.Finished">
            <summary>
            The event is finished.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.EventStage.Unknown">
            <summary>
            Unknown state.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventState">
             <summary>
             Represents a state of a <see cref="T:GpsGate.Online.Event.GateEvent"/>.
             
             State could be "NEW", "CLOSED" or any other state-indicating label.
            
             The name of an <see cref="T:GpsGate.Online.Event.EventState"/> has to be unique and is restricted through database constraints.
             
             Available states should be registered in the gate_event_state table upon installation of an <see cref="!:ILoadable"/>, 
             regular install script or similar.
             </summary>
             <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Event.EventState.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Default and only constructor
            </summary>
            <param name="iID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
        </member>
        <member name="P:GpsGate.Online.Event.EventState.ID">
            <summary>
            The id of <see cref="T:GpsGate.Online.Event.EventState"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventState.Name">
            <summary>
            The name of the <see cref="T:GpsGate.Online.Event.EventState"/>.
            Name is constrained to be UNIQUE and max 64 chars.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.EventState.Description">
            <summary>
            Short description of the <see cref="T:GpsGate.Online.Event.EventState"/>
            Description is constrained to max 255 chars.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventStateReader">
            <summary>
            Reader object providing a forward stream like reading of <see cref="T:GpsGate.Online.Event.EventState"/>'s from the database.
            
            Act upon following tables:
            - gate_event_state
            
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Online.Event.EventStateReader.m_stateReaderSingleton">
            <summary>
            Private singleton instance.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateReader.GetReader">
            <summary>
            Get the <see cref="T:GpsGate.Online.Event.EventStateReader"/> singleton instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateReader.ClearSingleton">
            <summary>
            Create a new singleton instance.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.EventStateReader.m_cachedState">
            <summary>
            Internal list of cached <see cref="T:GpsGate.Online.Event.EventState"/>'s
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.EventStateReader.m_oSync">
            <summary>
            Object used to synchronize threads
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateReader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateReader.GetState(System.String)">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Event.EventState"/> identified by the unique name.
            </summary>
            <param name="strState">Name of the state</param>
            <returns>Returns null if not found.</returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateReader.GetState(System.Int32)">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Event.EventState"/> identified by the unique id.
            </summary>
            <param name="strState">The unique id of the state to find.</param>
            <returns>Returns null if not found.</returns>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateReader.RemoveStateFromCache(System.String)">
            <summary>
            Removes the <see creg="EventState" /> object from the internal cache.
            </summary>
            <param name="iApplicationId"></param>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateReader.Clear">
            <summary>
            Clears the singleton instance of the <see cref="T:GpsGate.Online.Event.EventStateReader"/>.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateReader.Remove(System.String)">
            <summary>
            Removes the <see cref="T:GpsGate.Online.Event.EventState"/> with the given name from the internal cache.
            </summary>
            <param name="strKey"></param>
        </member>
        <member name="P:GpsGate.Online.Event.EventStateReader.DAO">
            <summary>
            Object to interact with the database through.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.EventStateWriter">
            <summary>
            Writes <see cref="T:GpsGate.Online.Event.EventState"/>'s to the database.
            
            Use any of the methods to add <see cref="T:GpsGate.Online.Event.EventState"/>'s to the writer, then call Update() to commit changes to database.
            
            Writes to following tables:
            - gate_event_state
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateWriter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateWriter.Add(GpsGate.Online.Event.EventState)">
            <summary>
            Add a new <see cref="T:GpsGate.Online.Event.EventState"/> to the database.
            
            The Name and ID must both be unique otherwise an Exception will be thrown.
            </summary>
            <param name="msgField">Field to add</param>
        </member>
        <member name="M:GpsGate.Online.Event.EventStateWriter.GetItemType">
            <summary>
            Type of the object this writer can write.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Event.EventStateWriter.DAO">
            <summary>
            Object to interact with the database through.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.GateEvent">
            <summary>
            Lightweight and thread safe representation of an GateEvent.
            
            See <see cref="T:GpsGate.Online.Event.GateEventWriter"/> for more information.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Event.GateEvent.#ctor(System.Int64,GpsGate.Online.Directory.GateUserBag,System.Collections.Generic.IEnumerable{GpsGate.Online.Event.GateEventLogRecord},System.Collections.Generic.IEnumerable{GpsGate.Online.Event.EventArgument},GpsGate.Online.Event.EventChannel,Franson.Geo.TrackPoint,System.String,GpsGate.Online.Event.EventStage,Franson.Geo.BoundingBox)">
            <summary>
            Default constructor.
            </summary>
            <param name="lngEventId"></param>
            <param name="iUserId"></param>
            <param name="arrEventLog"></param> // todo: could overload on IEnumerable?
            <param name="channel"></param>
            <param name="tp"></param>
            <param name="messageField"></param>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.EventId">
            <summary>
            The id of the <see cref="T:GpsGate.Online.Event.GateEvent"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GpsGate.Online.Event.GateEvent.EventLog" -->
        <member name="P:GpsGate.Online.Event.GateEvent.Arguments">
            <summary>
            Returns a collection with the the event <see cref="T:GpsGate.Online.Event.EventArgument"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.BoundingBox">
            <summary>
            Returns the bounds of this event.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.UserId">
            <summary>
            The id of the <see cref="!:User"/> this event belongs to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.GateUserBag">
            <summary>
            GateUserBag for which this Event was created for.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.Channel">
            <summary>
            The <see cref="T:GpsGate.Online.Event.EventChannel"/> this <see cref="T:GpsGate.Online.Event.GateEvent"/> is assigned to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.TrackPoint">
            <summary>
            <see cref="P:GpsGate.Online.Event.GateEvent.TrackPoint"/> providing geographical information to this event.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.Cause">
            <summary>
            Free text specifies the cause of the Event
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.Stage">
            <summary>
            The stage of the event.
            Pending indicates that event is not yet finished.
            All new messages causing this event should be appended to log.
            Finished indicates that the event is finished.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.LastLogRecord">
            <summary>
            Returns the <see cref="T:GpsGate.Online.Event.GateEventLogRecord"/> for this <see cref="T:GpsGate.Online.Event.GateEvent"/> which the most recent timestamp.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEvent.IsScheduled">
            <summary>
            Returns whether the event is scheduled or not
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.GateEventLogRecord">
            <summary>
            Represents a <see cref="!:GateMessage"/> log record.
            
            A <see cref="!:GateEventLogrecord"/> containing information about the life time of a <see cref="T:GpsGate.Online.Event.GateEvent"/>.
            
            A <see cref="T:GpsGate.Online.Event.GateEvent"/> is handled and acted upon by different <see cref="!:User"/>'s changing the <see cref="T:GpsGate.Online.Event.EventState"/> etc,
            those actions is registered in the log an represented by <see cref="T:GpsGate.Online.Event.GateEventLogRecord"/>.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventLogRecord.#ctor(System.Int64,GpsGate.Online.Directory.GateUserBag,GpsGate.Online.Event.EventState,System.DateTime)">
            <summary>
            Default constructor
            </summary>
            <param name="lngEventLogId"></param>
            <param name="iModByUserId"></param>
            <param name="state"></param>
            <param name="dtTimeStampUTC"></param>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventLogRecord.#ctor(System.Int64,System.Int32,GpsGate.Online.Event.EventState,System.DateTime)">
            <summary>
            Default constructor
            </summary>
            <param name="lngEventLogId"></param>
            <param name="iModByUserId"></param>
            <param name="state"></param>
            <param name="dtTimeStampUTC"></param>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventLogRecord.EventLogId">
            <summary>
            The unique id of the <see cref="T:GpsGate.Online.Event.GateEventLogRecord"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventLogRecord.ModifiedByUserId">
            <summary>
            The id of the <see crerf="User"/> this <see cref="T:GpsGate.Online.Event.GateEventLogRecord"/> was added by.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventLogRecord.ModifiedByUser">
            <summary>
            Lightweight user representation of user modified the gate event.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventLogRecord.UTC">
            <summary>
            An UTC timestamp for when this log record was added.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventLogRecord.State">
            <summary>
            The <see cref="T:GpsGate.Online.Event.EventState"/> of the <see cref="T:GpsGate.Online.Event.GateEventLogRecord"/>.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.GateEventWriter">
            <summary>
            A <see cref="T:GpsGate.Online.Event.GateEventWriter"/> represents a <see cref="T:GpsGate.Online.Event.GateEvent"/> object with Write capabilities, and are used to
            modify the "gate_event" and "gate_event_log" tables
            
            An Event is created when something has happen in the server that other entities could find relevant.
            E.g Alarms, User registrations, e.tc.
            
            An Event is always tied to a <see cref="T:Franson.Directory.Group"/> through an <see cref="T:GpsGate.Online.Event.EventChannel"/> and has been created as a result of the content of a <see cref="T:GpsGate.Online.Message.GateMessage"/>.
            
            A <see cref="T:GpsGate.Online.Event.GateEvent"/> contains <see cref="!:EventLogRecord"/>s which are assigned with a <see cref="T:GpsGate.Online.Event.EventState"/> indicating the current state of the event. E.g NEW / CLOSED / OPEN etc
            of the record. 
            An <see cref="!:EventLogRecord"/> could not be changed after it has been added. A new record should be added with a changed <see cref="T:GpsGate.Online.Event.EventState"/>
            this to keep track of the changes. 
            </summary>
        </member>
        <member name="F:GpsGate.Online.Event.GateEventWriter.m_gateMessage">
            <summary>
            The message which content this event has been created as a result of. E.g. High temperature sensor level causing i alarm.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventWriter.#ctor">
            <summary>
            Use this when creating a GateEvent instance to be loaded from the database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventWriter.#ctor(GpsGate.Online.Event.EventChannel,GpsGate.Online.Message.GateMessage,GpsGate.Online.GateUser,System.String,System.Int32,System.Int32,System.Collections.Generic.List{GpsGate.Online.Event.EventArgumentWriter})">
            <summary>
            Default constructor.
            Use when creating a new Record to insert in database.
            </summary>
            <param name="eventChannel">The channel this event should be placed in.</param>
            <param name="gateMessage">The message which this event was created upon.</param>
            <param name="user">User</param>
            <param name="strCause">Free text field describing the cause. This is usually the <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> name</param>
            <param name="evExpEvalId">The ID of the <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> whio created this event.</param>
            <param name="iApplicationID">ID of the <see cref="T:Franson.Directory.Application"/> this event belongs to.</param>
            <param name="args">List of <see cref="T:GpsGate.Online.Event.EventArgumentWriter">EventArgumentWriters</see></param>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventWriter.ContainsState(System.Int32)">
            <summary>
            Returns True if the DataSet contains the provided state id, False otherwise.
            Will fill dataset with log records for this event id if not already filled.
            </summary>
            <param name="iStateId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventWriter.LoadByID(System.Int32)">
            <summary>
            Use <see cref="M:GpsGate.Online.Event.GateEventWriter.LoadByLongID(System.Int64)"/> instead. Will throw an exception.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventWriter.LoadByLongID(System.Int64)">
            <summary>
            Load GateEvent from database.
            </summary>
            <param name="longID"></param>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventWriter.ChangeState(GpsGate.Online.Event.EventState,Franson.Directory.User)">
            <summary>
            Change the <see cref="T:GpsGate.Online.Event.EventState"/> of the <see cref="T:GpsGate.Online.Event.GateEvent"/>
            </summary>
            <param name="newState">The new state of the event</param>
            <param name="user">The user who performed the change of state.</param>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventWriter.SetStage(GpsGate.Online.Event.EventStage)">
            <summary>
            Change stage of event.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventWriter.AppendMessageToSpan(GpsGate.Online.Message.GateMessage)">
            <summary>
            Appends a new <see cref="T:GpsGate.Online.Message.GateMessage"/> to this event scope.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GpsGate.Online.Event.GateEventWriter.ToString">
            <summary>
            String for logging.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Event.GateEventWriter.Resolve(Franson.Text.TemplateParser,System.String)" -->
        <member name="P:GpsGate.Online.Event.GateEventWriter.ID">
            <summary>
            Not implemented. Use <see cref="P:GpsGate.Online.Event.GateEventWriter.LongID"/>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.LongID">
            <summary>
            Returns ID (long).
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.GateMessageId">
            <summary>
            The id of the <see cref="T:GpsGate.Online.Message.GateMessage"/> the <see cref="T:GpsGate.Online.Event.GateEvent"/> was created as a result of.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.UserId">
            <summary>
            The id of the user this event belongs to.
            Usually the users in the connection session; where the <see cref="T:GpsGate.Online.Message.GateMessage"/> was received over.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.ChannelId">
            <summary>
            The id of the <see cref="T:GpsGate.Online.Event.EventChannel"/> this <see cref="T:GpsGate.Online.Event.GateEvent"/> is registered to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.Cause">
            <summary>
            Free field to specifies the cause of the event. E.g: "Fuel Alarm"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.ApplicationID">
            <summary>
            Id of the application this event belongs to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.CurrentState">
            <summary>
            Get the current interactive state of the <see cref="T:GpsGate.Online.Event.GateEvent"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.Stage">
            <summary>
            Stage can be Pending or Finished.
            An Event is Pending while it is active.
            E.g. An speed alarm is pending until the car is stop speeding.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.BoundingBox">
            <summary>
            Get the bounds of the Event.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.MessageSpanIDs">
            <summary>
            The span of gate message IDs for which this event was pending during.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GateEventWriter.SupportedVariables">
            <summary>
            Returns a list of template variables that can be resolved.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.GenericBOItemsWrapper`2">
            <summary>
            A wrapper class implementing IList of T, letting the type T be reflected out of a source list of type U,
            where T is a BOItem and a subclass of the baseclass U.
            Gives the appearence of working with a List of T when in fact working with a list of U internally.
            BOItems previously marked for removal is not allowed to be added.
            </summary>
            <typeparam name="T">Subclass type</typeparam>
            <typeparam name="U">Baseclass type</typeparam>
        </member>
        <member name="M:GpsGate.Online.Event.GenericBOItemsWrapper`2.Insert(System.Int32,`0)">
            <summary>
            Inserts item at specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <exception cref="T:System.ArgumentException">When adding a BOItem previously marked for removal.</exception>
        </member>
        <member name="M:GpsGate.Online.Event.GenericBOItemsWrapper`2.Add(`0)">
            <summary>
            Adds an item
            </summary>
            <param name="item"></param>
            <exception cref="T:System.ArgumentException">When adding a BOItem previously marked for removal.</exception>
        </member>
        <member name="M:GpsGate.Online.Event.GenericBOItemsWrapper`2.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item at index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <exception cref="T:System.ArgumentException">When adding a BOItem previously marked for removal.</exception>
        </member>
        <member name="M:GpsGate.Online.Event.GenericBOItemsWrapper`2.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item
            </summary>
            <param name="item"></param>
            <exception cref="T:System.ArgumentException">When adding a BOItem previously marked for removal.</exception>
        </member>
        <member name="P:GpsGate.Online.Event.GenericBOItemsWrapper`2.Item(System.Int32)">
            <summary>
            Gets or sets an item at index
            </summary>
            <param name="index"></param>
            <returns>Item at index</returns>
            <exception cref="T:System.ArgumentException">When adding a BOItem previously marked for removal.</exception>
        </member>
        <member name="P:GpsGate.Online.Event.GenericBOItemsWrapper`2.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Gets or sets an item at index
            </summary>
            <param name="index"></param>
            <returns>Item at index</returns>
            <exception cref="T:System.ArgumentException">When adding a BOItem previously marked for removal.</exception>
        </member>
        <member name="M:GpsGate.Online.Event.GeofenceEventExpression.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.GeofenceEventExpression.CollectArguments">
            <summary>
            Return List of <see cref="T:GpsGate.Online.Geofence.GeofenceEventArgument"/> when a <see cref="N:GpsGate.Online.Geofence"/> is Entered or exit depending on the Action property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.GeofenceEventExpression.Evaluate(GpsGate.Online.Message.GateMessage)">
            <summary>
            TODO: Document
            </summary>
            <param name="currentGateMessage"></param>
            <param name="listGateEventLatest"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.GeofenceEventExpression.GetHashCode">
            <summary>
            Based on Action and GeofenceTagID
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Event.GeofenceEventExpression.Resolve(Franson.Text.TemplateParser,System.String)" -->
        <member name="P:GpsGate.Online.Event.GeofenceEventExpression.Name">
            <summary>
            Name of the Expression.
            Returns "Geofence Expression"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GeofenceEventExpression.GeofenceTagID">
            <summary>
            The <see cref="!:GeofenceTag"/> this Expression is valid for.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GeofenceEventExpression.Action">
            <summary>
            Defines <see cref="T:GpsGate.Online.Geofence.GeofenceAction"/> the Expression should monitor.
            E.g: Set GeofenceAction.Inside and the Expression will evealuate as true as soon the position is inside.
            The Evaluator will continuously evaluate as true until the position is outside again. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GeofenceEventExpression.VirtualASCXFilePath">
            <summary>
            Set the virtual search path to Expression Plugin GUI
            Returns: ~/WebControls/EventExpressions/GeofenceExpressionControl.ascx
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GeofenceEventExpression.DAO_GEE">
            <summary>
            Data Access Object
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GeofenceEventExpression.SupportedVariables">
            <summary>
            Returns a list of template variables that can be resolved.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.GeofenceEventExpression.MessageFieldLocaleKey">
            <summary>
            Will throw an exception since this expression does not support any particular message field, but instead works with actual geofences
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.IEventExpressionEvaluatorObserver">
            <summary>
            Observer for the EventExpressionEvaluatorWriter.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.IEventExpressionEvaluatorObserver.OnNew(GpsGate.Online.Event.EventExpressionEvaluator)">
            <summary>
            Implement to hook into the event when a new EventExpressionEvaluator has been created.
            </summary>
            <param name="evaluator">The new EventExpressionEvaluator.</param>
        </member>
        <member name="M:GpsGate.Online.Event.IEventExpressionEvaluatorObserver.OnUpdated(GpsGate.Online.Event.EventExpressionEvaluator)">
            <summary>
            Implement to hook into the event when an EventExpressionEvaluator has been updated.
            </summary>
            <param name="evaluator">The updated EventExpressionEvaluator.</param>
        </member>
        <member name="M:GpsGate.Online.Event.IEventExpressionEvaluatorObserver.OnRemoved">
            <summary>
            Implement to hook into the event when an EventExpressionEvaluator has been removed.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Event.IScheduledEventExpression">
            <summary>
            Defines a scheduled expression.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.IScheduledEventExpression.Trigger">
            <summary>
            Get the trigger for next trigger time.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.IntegrityEventExpression.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.IntegrityEventExpression.Install(Franson.Reflection.LoadableType)">
            <summary>
            NOP Installation. 
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Event.IntegrityEventExpression.Evaluate(GpsGate.Online.Message.GateMessage)">
            <summary>
            Compare the specifed <see cref="!:MessageField"/> or <see cref="!:TrackPoint"/> age with TimeSpanDelay.
            </summary>
            <param name="gmToProcess"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.IntegrityEventExpression.CollectArguments">
            <summary>
            Returns nothing
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.IntegrityEventExpression.Resolve(Franson.Text.TemplateParser,System.String)">
            <summary>
            returns null. 
            This expression does not support variables.
            </summary>
            <param name="p"></param>
            <param name="strVariable"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.IntegrityEventExpression.GetHashCode">
            <summary>
            HashCode from TimeSpanDelay.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Event.IntegrityEventExpression.VirtualASCXFilePath">
            <summary>
            Virtual file path to the GUI component to modify this expression instance.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.IntegrityEventExpression.Name">
            <summary>
            Name of expression.
            returns "Integrity expression"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.IntegrityEventExpression.MaxDelta">
            <summary>
            Delay for max allowed age of gate message in seconds.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.IntegrityEventExpression.MessageFieldLocaleKey">
            <summary>
            Not implemented
            </summary>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="P:GpsGate.Online.Event.IntegrityEventExpression.SupportedVariables">
            <summary>
            Returns empty list. 
            This expression does not support variables.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.IntegrityEventExpression.Trigger">
            <summary>
            Returns a none repeating Interval trigger set to Now + DelayTimeStamp.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.IntegrityEventExpression.DAO">
            <summary>
            Data access object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GpsGate.Online.Event.NotifierListWrapper" -->
        <member name="T:GpsGate.Online.Event.StringCompareExpression">
            <summary>
            Expression used to evaluate simple string compare expressions.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.StringCompareExpression.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Event.StringCompareExpression.Evaluate(GpsGate.Online.Message.GateMessage)">
            <summary>
            True if matching string.
            </summary>
            <param name="gmToProcess"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.StringCompareExpression.CollectArguments">
            <summary>
            Returns matched string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Event.StringCompareExpression.GetHashCode">
            <summary>
            Custom hash code.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Event.StringCompareExpression.Resolve(Franson.Text.TemplateParser,System.String)" -->
        <member name="P:GpsGate.Online.Event.StringCompareExpression.Name">
            <summary>
            Returns name of expression, to be used in drop downs etc.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.StringCompareExpression.VirtualASCXFilePath">
            <summary>
            Web control handling GUI.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.StringCompareExpression.CompareString">
            <summary>
            String to compare to. For equal and not equal Perl5 style reg exp are supported.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.StringCompareExpression.SupportedVariables">
            <summary>
            Returns a list of template variables that can be resolved.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Event.StringCompareExpression.MessageFieldLocaleKey">
            <summary>
            The messagefield locale key of of this expression. Set by the Evaluate method and may return null.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.DAO.GeofenceCollectionDAOSQL.GetByTagAndCheckBoundingBox(System.Int32,Franson.Geo.Position,GpsGate.Online.Geofence.GeofenceAction)">
            <summary>
            Return 
            </summary>
            <param name="iTagID"></param>
            <param name="pos"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Geofence.DAO.GeofenceCollectionDAOSQL.GetByTag(System.Int32)">
            <summary>
            Returns all geofences in a tag.
            </summary>
            <param name="iTagID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Geofence.DAO.GeofenceCollectionDAOSQL.GetByApplication(System.Int32)">
            <summary>
            Return all geofences in application.
            </summary>
            <param name="iAppID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Geofence.DAO.GeofenceCollectionDAOSQL.ExecuteGeofenceReader(Franson.Geo.Position,GpsGate.Online.Geofence.GeofenceAction)">
            <summary>
            Check if current geofence is inside or outside.
            </summary>
            <param name="pos"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Geofence.DAO.GeofenceCollectionDAOSQL.ReadCount">
            <summary>
            Returns number of read record from database. This includes all geo fences, even those filtered out by a bounding box.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Geofence.DAO.PolygonGeofenceDAOMSSQL">
            <summary>
            MSSQL version of PolygonGeofenceDAOSQL.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Geofence.DAO.PolygonGeofenceDAOSQL">
            <summary>
            Polygon Geofence DAO.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.DAO.PolygonGeofenceDAOSQL.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.DAO.PolygonGeofenceDAOSQL.BuildVerticesString(Franson.Geo.Position[])">
            <summary>
            Builds a string from a position array.
            The string will have the following format: "LONG,LAT|LONG,LAT"
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Geofence.DAO.PolygonGeofenceDAOSQL.Vertices">
            <summary>
            Collection of vertices that construct this polygon.
            </summary>
            <exception cref="T:System.FormatException">Thrown if the vertices cannot be parsed on load.</exception>
        </member>
        <member name="P:GpsGate.Online.Geofence.DAO.PolygonGeofenceDAOSQL.ChildTableName">
            <summary>
            Database table name.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Geofence.DAO.PolygonGeofenceDAOMySQL">
            <summary>
            MySQL version of PolygonGeofenceDAOSQL.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Geofence.Security.GeofenceAuthorize">
            <summary>
            Authorize Geofence Operations
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.Security.GeofenceAuthorize.#ctor(System.Boolean)">
            <summary>
            Create new Geofence Authorize Operation.
            </summary>
            <param name="bRequireWrite">true if User require Write Privileges</param>
        </member>
        <member name="M:GpsGate.Online.Geofence.Security.GeofenceAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Authorize the current session.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Geofence.CircularGeofence">
            <summary>
            Defines a circular geo area as a Geofence.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GpsGate.Online.Geofence.Geofence" -->
        <member name="F:GpsGate.Online.Geofence.Geofence.m_bIsFlagedRemove">
            <summary>
            Flag used to avoid setting DAO properties in overridden Update method when base datarow is deleted.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.Geofence.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.Geofence.IsInside(Franson.Geo.Position)">
            <summary>
            Check if the given <see cref="T:Franson.Geo.Position"/> is inside the geofence.
            
            Derived classes implements this method.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Geofence.Geofence.PopulateProperties(System.Collections.IDictionary)">
            <summary>
            Used to populate properties when deserialized.
            
            Dictionary contains same keys attributed with SerializeAtrtribute with new values to be populated.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:GpsGate.Online.Geofence.Geofence.PopulateBaseProperties(System.Collections.IDictionary)">
            <summary>
            Used to populate properties when deserialized.
            
            Dictionary contains same keys as declared in SerializeAtrtribute with new values to be populated.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:GpsGate.Online.Geofence.Geofence.Update">
            <summary>
            Update the object and sync to database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.Geofence.Remove">
            <summary>
            Removes the geofence from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.Geofence.ToString">
            <summary>
            Returns a string representation.
            Will return Name Type: TYPE
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Geofence.Geofence.Name">
            <summary>
            Name of geofence. 
            Max 128 chars
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.Geofence.Description">
            <summary>
            Description of geofence. 
            Max 255 chars
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.Geofence.ApplicationID">
            <summary>
            ID of <see cref="!:Application"/> this geofence is associated to.
            Mandatory.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.Geofence.Tags">
            <summary>
            List of <see cref="T:GpsGate.Online.Directory.GeofenceTag"/> this Geofence is tagged with.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.Geofence.BoundingBox">
            <summary>
            Returns the bounding box of the geofence.
            
            Implemented by derived classes.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.Geofence.BaseDAO">
            <summary>
            Data Access object
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.CircularGeofence.#ctor(System.String,System.String,System.Double,Franson.Geo.Position,System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.CircularGeofence.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.CircularGeofence.IsInside(Franson.Geo.Position)">
            <summary>
            Check if the given position is inside the geofence.
            </summary>
            <param name="position">Position to check against</param>
            <returns>True if inside, elese false</returns>
        </member>
        <member name="P:GpsGate.Online.Geofence.CircularGeofence.Radius">
            <summary>
            Radius of the circular geofence in meter.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.CircularGeofence.Center">
            <summary>
            Center position of the circular geofence.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.CircularGeofence.BoundingBox">
            <summary>
            Get The <see cref="P:GpsGate.Online.Geofence.CircularGeofence.BoundingBox"/> of this geofence.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.CircularGeofence.DAO">
            <summary>
            Data Access Object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Geofence.GeofenceAction">
            <summary>
            Used in <see ref="GeofenceEventArgument" /> to define the action of the geofence breach.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Geofence.GeofenceAction.Undefined">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Geofence.GeofenceAction.Inside">
            <summary>
            Geofence is entered.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Geofence.GeofenceAction.Outside">
            <summary>
            Geofence is exited.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Geofence.GeofenceCollection">
            <summary>
            Reads Geofences.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Geofence.GeofenceCollection.GetByTagAndCheckBoundingBox(System.Int32,Franson.Geo.Position,GpsGate.Online.Geofence.GeofenceAction)" -->
        <member name="M:GpsGate.Online.Geofence.GeofenceCollection.GetByTag(System.Int32)">
            <summary>
            Returns all Geofences for the provided <see cref="T:GpsGate.Online.Directory.GeofenceTag"/> 
            Geofences are return as their BOType. 
            </summary>
            <param name="iTagID">ID of the tag for which geofences should be get for.</param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Geofence.GeofenceCollection.ReadCount">
            <summary>
            Return number of records processed from database. This includes records filtered by bounding box rules.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.GeofenceCollection.DAO">
            <summary>
            data Access Object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Geofence.GeofenceEventArgument">
            <summary>
            Geofence argument is a <see cref="T:GpsGate.Online.Event.EventArgument"/> created as argument for geofence aware <see cref="T:GpsGate.Online.Event.GateEvent">GateEvents"</see>
            
            Usually created by a Geofence <see cref="T:GpsGate.Online.Event.EventExpression"/>
            
            The <see cref="T:GpsGate.Online.Geofence.GeofenceEventArgument"/> contains information about the geofence that has been breached or any other <see cref="T:GpsGate.Online.Geofence.GeofenceAction"/> that has happen.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.GeofenceEventArgument.#ctor(System.String,GpsGate.Online.Geofence.Geofence,GpsGate.Online.Geofence.GeofenceAction)">
            <summary>
            Default constructor
            </summary>
            <param name="strDescription">Free text which will be displayed in GUI/reports etc.</param>
            <param name="geofence">The Geofence of interest</param>
            <param name="action">Enter, Exit or Breached</param>
        </member>
        <member name="M:GpsGate.Online.Geofence.GeofenceEventArgument.SetDAO">
            <summary>
            Base implementation.
            Set the GeofenceEventArgumentDAO object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.GeofenceEventArgument.Equals(System.Object)">
            <summary>
            Used to avoid adding several EventExpression for a rule with multiple Expressoins.
            
            Equal if value and description are same
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Geofence.GeofenceEventArgument.GetHashCode">
            <summary>
            Makes a hash of GeofenceID + Description
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Geofence.GeofenceEventArgument.GeofenceID">
            <summary>
            ID of the <see cref="T:GpsGate.Online.Geofence.Geofence"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.GeofenceEventArgument.Action">
            <summary>
            The action. Enter, Exit, Breached
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.GeofenceEventArgument.DAO">
            <summary>
            Data Access Object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Geofence.PolygonGeofence">
            <summary>
            Defines a polygon geo area as a Geofence.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.PolygonGeofence.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Geofence.PolygonGeofence.IsInside(Franson.Geo.Position)">
            <summary>
            Checks if the given position is inside the geofence.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Geofence.PolygonGeofence.PopulateProperties(System.Collections.IDictionary)">
            <summary>
            Populates the vertices collection from the given dictionary.
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="P:GpsGate.Online.Geofence.PolygonGeofence.Vertices">
            <summary>
            Collection of vertices that construct this polygon.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the vertices appears to be part of a complex (self-intersecting) polygon on save.</exception>
        </member>
        <member name="P:GpsGate.Online.Geofence.PolygonGeofence.BoundingBox">
            <summary>
            Gets the <see cref="P:GpsGate.Online.Geofence.PolygonGeofence.BoundingBox"/> of this geofence.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Geofence.PolygonGeofence.DAO">
            <summary>
            Data Access Object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.ApplicationRuleDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.RuleDAOSQL">
            <summary>
            Base class for all rule DAO:s
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RuleDAOSQL.#ctor">
            <summary>
            Create DAO.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RuleDAOSQL.SetId(System.Int32)">
            <summary>
            Set "rule_id"
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RuleDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load rule data from database.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleDAOSQL.ID">
            <summary>
            Get "rule_id"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleDAOSQL.Name">
            <summary>
            Database field "name"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleDAOSQL.Description">
            <summary>
            Database field "description"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleDAOSQL.Enabled">
            <summary>
            Database field "enabled"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleDAOSQL.ExecutionOrder">
            <summary>
            Database field "exe_order"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleDAOSQL.ChainId">
            <summary>
            Database field "rule_chain_id"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleDAOSQL.TableName">
            <summary>
            Returns name of rule table in database. E.g. "application_rule" or "recorder_rule"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.ApplicationRuleDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.ApplicationRuleDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.ApplicationRuleDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.ApplicationRuleReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.RuleReaderDAOSQL">
            <summary>
            Base class for all rule reader DAO:s
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleReaderDAOSQL.ChainID">
            <summary>
            Returns database ID of rule chain, this reader reads from.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.ApplicationRuleReaderDAOMSSQL.#ctor(System.Int32)">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
            <param name="iChainId"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.ApplicationRuleReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.ApplicationRuleReaderDAOMySQL.#ctor(System.Int32)">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
            <param name="iChainId"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.DeviceDefinitionMapperCollectionDAOMySQL">
            <summary>
            MySQL version of abstract base class.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.DeviceDefinitionMapperCollectionDAOSQL">
            <summary>
            Data access base object to read <see cref="!:MessageFieldDictionarys"/> which are linked to a <see cref="!:DeviceDefinition"/>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperCollectionDAOSQL.#ctor">
            <summary>
            Default constructor from a database connection object.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperCollectionDAOMySQL.#ctor">
            <summary>
            Default constructor from a database connection object.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.DeviceDefinitionMapperCollectionDAOMSSQL">
            <summary>
            MSSQL version of abstract base class.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperCollectionDAOMSSQL.#ctor">
            <summary>
            Default constructor from a database connection object.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.DeviceDefinitionMapperDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.DeviceDefinitionMapperDAOSQL">
            <summary>
            DeviceMapper DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperDAOSQL.#ctor">
            <summary>
            Create DeviceMapper DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Called when a new DeviceMapper is added. Resolves link to msg_field_dictionary table.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperDAOSQL.OnLoaded(System.String)">
            <summary>
            Called when base tabled loaded. Loads contant of help table.
            </summary>
            <param name="strLoadedTableName"></param>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.DeviceDefinitionMapperDAOSQL.DeviceDefinitionId">
            <summary>
            device_def_msg_field_dictionary.dev_def_id
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.DeviceDefinitionMapperDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="option"></param>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.DeviceDefinitionMapperReaderDAOMySQL">
            <summary>
            MySQL version of DeviceDefinitionMapperReaderDAOSQL.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.DeviceDefinitionMapperReaderDAOSQL">
            <summary>
            
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperReaderDAOSQL.GetSqlCommand">
            <summary>
            Get SQL query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperReaderDAOSQL.GetByDeviceDefinition(System.Int32)">
            <summary>
            Get a list of mappers for the specified device definition.
            </summary>
            <param name="iDeviceDefinitionID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.DeviceDefinitionMapperReaderDAOSQL.ReaderToBag(System.Data.IDataReader)">
            <summary>
            Converts an IDataReader into a light weight DeviceDefinitionMapperBag.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.DeviceDefinitionMapperReaderDAOMSSQL">
            <summary>
            MSSQL version of DeviceDefinitionMapperReaderDAOSQL.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.GateMessageReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.GateMessageReaderDAOSQL">
            <summary>
            Reader object to access gate message data.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageReaderDAOSQL.GetGateMessageByTrackInfo(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Return gate messages for a track.
            </summary>
            <param name="iTrackInfoID">Track database ID</param>
            <param name="lStartIndex">Start returning data from this result index.</param>
            <param name="iCount">Number of rows to return in result.</param>
            <param name="utcStart">Start time in UTC</param>
            <param name="utcStop">Stop time in UTC</param>
            <param name="bValid">Set to false to read invalid track points as well.</param>
            <param name="arrVariables">Which GpsGate Variables to read. Null to read all.</param>
            <param name="iPostProcessorID">Database ID from post_processor table of post processing plugin that has processed this track.
            Set to 0 to read unfiltered data.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageReaderDAOSQL.GetGateMessageByUser(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
            <summary>
            Returns GateMessages for a selected user, time and time period.
            </summary>
            <param name="iUserID">User database ID</param>
            <param name="lStartIndex">Start returning data from this result index.</param>
            <param name="iCount">Number of rows to return in result.</param>
            <param name="utcStart">Start time in UTC</param>
            <param name="utcStop">Stop time in UTC</param>
            <param name="bValid">Set to false to read invalid track points as well.</param>
            <param name="arrVariables">Which GpsGate Variables to read. Null to read all.</param>
            <param name="iPostProcessorID">Database ID from post_processor table of post processing plugin that has processed this track.
            Set to 0 to read unfiltered data.</param>
            <param name="bAscending">True for ascending sort.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageReaderDAOSQL.GetByIDs(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Load GateMEssages with the specified IDs
            </summary>
            <param name="enIDs">Enumerator with IDs to load messages by</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageReaderDAOSQL.LoadByUser(System.Int32)">
            <summary>
            Load gate_message_record INNER JOIN gate_message LEFT JOIN track_data for specified user ID.
            On a production system this method will return large amounts of data, and should therefor not be used in such environment.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageReaderDAOSQL.GetGateMessagesInEvent(System.Int64,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Load from gate_message where matching id's found in gate_event_messager_span restricted by gate_event.gate_event_id
            </summary>
            <param name="lngEventID">ID of the event for wicth to load GateMessages</param>
            <param name="iIndex">Start index</param>
            <param name="iCount">Number of Messages to read</param>
            <param name="bSortDesc">Sort order. true = Descending, false = Ascending</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.GateMessageReaderDAOMySQL">
            <summary>
            MySQL DAO.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOMSSQL">
            <summary>
            MySQL version
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOSQL.FindRecord(Franson.Message.MessageField)">
            <summary>
            Returns matching GateMessageRecord or null if not found.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOSQL.FindRecord(System.Int32,System.String)">
            <summary>
            Returns matching GateMessageRecord or null if not found.
            </summary>
            <param name="iNamespaceID"></param>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="F:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOSQL.m_daoMsg">
            <summary>
            Only used to access DataRowToBag. Ugly, should be improved.
            But we cannot make the method static.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOSQL.GetItemType">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOMySQL">
            <summary>
            MySQL version
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.GateMessageWriterDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL">
            <summary>
            Handles database access for GateMessage
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.m_strMessageTableName">
            <summary>
            gate_message table
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.m_strRecordTableName">
            <summary>
            gate_message_record table
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.m_strMessageFieldTableName">
            <summary>
            msg_field table
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.m_listRecords">
            <summary>
            List holding new records (Inserted after load or when GateMessage is new (not yet updated))
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.m_listOldRecords">
            <summary>
            Holding records loaded from database
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.m_listLastInserted">
            <summary>
            List holding record last added to database
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.#ctor">
            <summary>
            Create DAO object.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load gate message by ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.LoadByLongID(System.Int64)">
            <summary>
            Load gate message by database ID.
            </summary>
            <param name="lngID"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.AddRecord(GpsGate.Online.Message.GateMessageRecord)">
            <summary>
            See BO.
            </summary>
            <param name="grStruct"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.m_findRecordRow(System.Int64)">
            <summary>
            Returns matching row from gate_message_record table in DataSet
            </summary>
            <param name="iRecId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.Update">
            <summary>
            Write gate message to database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Called when a new record is instered to database.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.DataRowToBag(System.Data.DataRow,System.Data.DataRow,System.Nullable{Franson.Message.MessageField})">
            <summary>
            Converts a <see cref="T:System.Data.DataRow"/> to a <see cref="T:GpsGate.Online.Message.GateMessageRecordBag"/>.
            </summary>
            <param name="drGateRecord"></param>
            <param name="msgField"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.ID">
            <summary>
            Not supported. Use <see cref="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.LongID"/> instead
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.LongID">
            <summary>
            gate_message.msg_id Primary key.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.TrackPointId">
            <summary>
            gate_message.track_data_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.UserID">
            <summary>
            gate_message.user_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.DeviceID">
            <summary>
            gate_message.device_id
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.GateMessageRecords">
            <summary>
            See BO.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.LastInsertedRecords">
            <summary>
            See BO.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.NewRecordCount">
            <summary>
            Returns number of records added using <see cref="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.AddRecord(GpsGate.Online.Message.GateMessageRecord)"/> to message not yet written to database.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.IsAnyNewRecordFlagged">
            <summary>
            See BO.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.GateMessageWriterDAOSQL.BOType">
            <summary>
            gate_message table has no bo_type field
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.GateMessageWriterDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.GateMessageWriterDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.MessageTemplateReaderDAOSQL.GetByNotifierID(System.Int32)">
            <summary>
            Gets the message template belonging to notifier having iNotifierID.
            </summary>
            <param name="iNotifierID">The id of the notifier owning this message template</param>
            <returns>Message template belonging to notifier having iNotifierID. Null if not found.</returns>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.MessageTemplateReaderDAOSQL.GetByID(System.Int32)">
            <summary>
            Gets the message template belonging to notifier having iNotifierID.
            </summary>
            <param name="iID">The id of the notifier owning this message template</param>
            <returns>Message template belonging to notifier having iNotifierID. Null if not found.</returns>
            <exception cref="T:Franson.DAO.NotFoundException">When not found</exception>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.RecorderRuleDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RecorderRuleDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.RecorderRuleDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RecorderRuleDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.RecorderRuleReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RecorderRuleReaderDAOMSSQL.#ctor(System.Int32)">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
            <param name="iChainId"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.RecorderRuleReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RecorderRuleReaderDAOMySQL.#ctor(System.Int32)">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.RuleChainDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.RuleChainDAOSQL">
            <summary>
            RuleChain DAO
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RuleChainDAOSQL.#ctor">
            <summary>
            Create RuleChain DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RuleChainDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load rule chain by ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">If ID not found in DB</exception>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RuleChainDAOSQL.LoadByName(System.String)">
            <summary>
            Load rule chain by name.
            </summary>
            <param name="strName"></param>
            <exception cref="T:Franson.DAO.NotFoundException">If name not found in DB.</exception>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleChainDAOSQL.Name">
            <summary>
            rule_chain.name
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DAO.RuleChainDAOSQL.Description">
            <summary>
            rule_chain.description
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RuleChainDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DAO.RuleChainDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DAO.RuleChainDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Message.Security.GateMessageAuthorize">
            <summary>
            Authorize read operations on gate messages.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.Security.GateMessageAuthorize.#ctor(System.Boolean)">
            <summary>
            Create a new Authorization object for auhorize read operations
            
            No user ID provided. Require full access
            </summary>
            <param name="iUserID">ID of the user the message belongs to</param>
        </member>
        <member name="M:GpsGate.Online.Message.Security.GateMessageAuthorize.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a new Authorization object for auhorize read operations on historic data such as gate messages
            </summary>
            <param name="iUserID">ID of the user the data belongs to</param>
        </member>
        <member name="M:GpsGate.Online.Message.Security.GateMessageAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Authorize.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Message.ApplicationRuleChain">
            <summary>
            Object used to group <see cref="T:GpsGate.Online.Message.ApplicationRule"/>'s into set of rules.
            Each <see cref="T:GpsGate.Online.Message.ApplicationRule"/> database instance defines one and only one <see cref="T:GpsGate.Online.Message.ApplicationRuleChain"/>. 
            The <see cref="T:GpsGate.Online.Message.ApplicationRuleChain"/> are used by <see cref="!:NmeaConnnection"/> to load 
            a defined set of <see cref="T:GpsGate.Online.Message.ApplicationRule"/>'s
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Message.RuleChain">
            <summary>
            Base class for rule chains.
            A rule Chain is used to group Rules into set of rules to support custom combinations of Rules.
            E.g If a combination (chain) of rules, not are sutable for; say a device implementation. 
            A custom rule chain should be created to define the new combination of rules.
            
            <see cref="T:GpsGate.Online.Message.RuleChain"/> and deriving classes should be kept read only or thread safe.
            
            The rule chain table is populated by install scripts. 
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Message.RuleChain.#ctor(System.String)">
            <summary>
            Create chain. Add new record to database, if this chain does not exist.
            </summary>
            <param name="strName"></param>
        </member>
        <member name="M:GpsGate.Online.Message.RuleChain.GetRule(System.Int32)">
            <summary>
            Returns rule by index. Returns null if iIndex is out of bounds.
            Call to this method are thread safe.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.RuleChain.GetReader">
            <summary>
            Override to Return reader that can read type information about all rules included in this rule chain.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.RuleChain.AddRule(GpsGate.Online.Message.Rule,System.Int32)">
            <summary>
            Adds a rule to this chain at the specified index.
            If another rule already is assigned to the index an <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
            <param name="rule"></param>
            <param name="iExecutionOrder"></param>
        </member>
        <member name="M:GpsGate.Online.Message.RuleChain.LoadByName(System.String)">
            <summary>
            Load rule by name.
            </summary>
            <param name="strName"></param>
            <exception cref="T:Franson.DAO.NotFoundException">If name not found in DB.</exception>
        </member>
        <member name="M:GpsGate.Online.Message.RuleChain.ToString">
            <summary>
            Returns value of <see cref="P:GpsGate.Online.Message.RuleChain.Name"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.RuleChain.Name">
            <summary>
            Name of the chain. E.g Name of GpsGate Server default <see cref="T:GpsGate.Online.Message.ApplicationRuleChain"/> is  "_DEFAUL_RECORDER_CHAIN"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.RuleChain.Description">
            <summary>
            Returns free text description.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.RuleChain.DAO">
            <summary>
            Returns data access object for this business object.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.RuleChain.RuleCount">
            <summary>
            Returns number of rules in this chain.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.ApplicationRuleChain.DEFAULT_APP_CHAIN_NAME">
            <summary>
            Name of the GpsGate Servers default ApplicationRuleChain
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.ApplicationRuleChain.#ctor">
            <summary>
            Creates a "_DEFAUL_APPLICATION_CHAIN" application rule chain
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.ApplicationRuleChain.GetReader">
            <summary>
            Returns a new <see cref="T:GpsGate.Online.Message.ApplicationRuleReader"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Message.ApplicationRuleReader">
            <summary>
            Implementation of <see cref="T:Franson.Reflection.TypeInstanceReader"/> that loads
            <see cref="!:Franson.Reflection.TypeInfo"/> for the <see cref="!:RecordRule"/>'s in
            the given <see cref="T:GpsGate.Online.Message.ApplicationRuleChain"/>
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.RuleReader">
            <summary>
            All rules inherit from this class.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:GpsGate.Online.Message.RuleReader.m_listRuleTypesCache">
            <summary>
            Cache of loadable types.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.RuleReader.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns value if "rule_id" field.
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.RuleReader.GetRules">
            <summary>
            Returns a list of rules e.g. application or recorder rules ordered by ExecutionOrder property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.ApplicationRuleReader.#ctor(GpsGate.Online.Message.ApplicationRuleChain)">
            <summary>
            Deafult Constructor
            </summary>
            <param name="recRuleChain"></param>
        </member>
        <member name="T:GpsGate.Online.Message.ChangeFilterRule">
            <summary>
            This rule removes <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>'s with same content as the last one for the connected <see cref="T:GpsGate.Online.GateUser"/>
            
            Exceptions:
            If <see cref="!:MessageField"/>.UnitName is set to BUTTON message will always pass even if content is equals.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.RecorderRule">
             <summary>
             Base class of a RecorderRule.
             
             The purpose of a RecorderRule is to process  a <see cref="T:GpsGate.Online.Message.GateMessage"/> before the message will be commitesd to the database
             and routed to a applicaton context.
             
             All registered rules executes in a sequential order, defined by the ExecutionOrder property.
             ExecutionOrder have to be unique, an exception will be thrown if inserting a rule at same sequence order as another.
            
             Deriving classes implements the ProcessMessage method. 
             The method passes the original GateMessage (or output of the rule before this one) through the input parameter.
             Rule must return the processed GateMessage. 
             </summary>
             <example>
             // Example of a NOP rule.
            	public override GateMessage ProcessMessage(GateMessage gateMsg)
            	{
            		return gateMsg;
            	}
             </example>
             <threadsafety instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Message.RecorderRule.ProcessMessage(GpsGate.Online.Message.GateMessageWriter,GpsGate.Online.Directory.Device)">
            <summary>
            Implemented by the deriving classes.
            </summary>
            <param name="gateMessage">Incoming GateMessage</param>
            <param name="device">Device on which the GateMessage was received on</param>
            <returns>Processed GateMessage</returns>
        </member>
        <member name="M:GpsGate.Online.Message.ChangeFilterRule.ProcessMessage(GpsGate.Online.Message.GateMessageWriter,GpsGate.Online.Directory.Device)">
            <summary>
            Reverse SaveFlag to false if value hasn't changed since last time.
            </summary>
            <param name="gateMessage"></param>
            <param name="device"></param>
        </member>
        <member name="M:GpsGate.Online.Message.ChangeFilterRule.Install(Franson.Reflection.LoadableType)">
            <summary>
            Adds this rule at execution order 200.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="T:GpsGate.Online.Message.DeviceDefinitionMapperBag">
            <summary>
            Light weight representation of a msg_field_dict table row.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DeviceDefinitionMapperBag.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="iMessageFieldDictID"></param>
            <param name="strName"></param>
        </member>
        <member name="M:GpsGate.Online.Message.DeviceDefinitionMapperBag.ToString">
            <summary>
            ToString override.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.DeviceDefinitionMapperBag.MessageFieldDictID">
            <summary>
            Message field dictionary ID.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DeviceDefinitionMapperBag.Name">
            <summary>
            Message field dictionary name.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DeviceDefinitionMapperBag.ApplicationName">
            <summary>
            Name of the application that this message field dictionary is linked to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.DeviceDefinitionMapperBag.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.DeviceDefinitionMapperReader.GetByDeviceDefinition(System.Int32)">
            <summary>
            Get a list of mappers for the specified device definition.
            </summary>
            <param name="iDeviceDefinitionID"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.DeviceDefinitionMapperReader.DAO">
            <summary>
            Data Access Object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.FieldMappingRule">
            <summary>
            FieldMappingRule is a recorder rule which main purpose is to unify incoming data from different sources, ex Devices.
            The unification is made partly by relabel the device specific <see cref="T:Franson.Message.MessageField"/>'s to generic 
            GpsGate <see cref="T:Franson.Message.MessageField"/>'s and by recalculate the value to standardized values.
            
            The mapping table containing which fields should be mapped to each other is optional defined for each <see cref="T:GpsGate.Online.Directory.Device"/>.
            If not provided, nothing will be done.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.FieldMappingRule.#ctor">
            <summary>
            Create Filed mapping rule.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.FieldMappingRule.ProcessMessage(GpsGate.Online.Message.GateMessageWriter,GpsGate.Online.Directory.Device)">
            <summary>
            Implementation of <see cref="!:RecordRules"/>'s abstract method.
            Will return <see cref="T:GpsGate.Online.Message.GateMessage"/> with the message data unified.
            </summary>
            <param name="gateMessage">Incoming <see cref="T:GpsGate.Online.Message.GateMessage"/></param>
            <param name="device">The <see cref="T:GpsGate.Online.Directory.Device"/> for which the message was received over.</param>
            <returns>Unified <see cref="T:GpsGate.Online.Message.GateMessage"/></returns>
        </member>
        <member name="M:GpsGate.Online.Message.FieldMappingRule.Install(Franson.Reflection.LoadableType)">
            <summary>
            This method is run when this Loadable RecordRule Type is installed.
            Will insert itself in the default recorder chain at execution order 100
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="T:GpsGate.Online.Message.GateMessage">
            <summary>
            Contains the information for one GateMessage. The object is read only.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessage.#ctor(Franson.Geo.TrackPoint,GpsGate.Online.Message.GateMessageRecord[],System.DateTime,System.Int32,System.Int32)">
            <summary>
            Create message.
            </summary>
            <param name="tp"></param>
            <param name="arrRecords"></param>
            <param name="dtUTC"></param>
            <param name="iUserID"></param>
            <param name="iDeviceID"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessage.#ctor(System.Int64,Franson.Geo.TrackPoint,GpsGate.Online.Message.GateMessageRecord[],System.DateTime,System.Int32,System.Int32)">
            <summary>
            Create message.
            </summary>
            <param name="longID">Database ID</param>
            <param name="tp"></param>
            <param name="arrRecords"></param>
            <param name="dtUTC"></param>
            <param name="iUserID"></param>
            <param name="iDeviceID"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessage.GetRecord(System.Int32)">
            <summary>
            Returns record by index. Returns null if out of bounds.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessage.GetRecordByMessageField(System.Int32)">
            <summary>
            Returns record by MessageFieldID. Returns if not exists.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessage.GetRecord(System.String)">
            <summary>
            Returns record by name. Namespace is ignored. Returns null if named record does not exist.
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessage.Equals(System.Object)">
            <summary>
            Returns true if track point and message variables equals.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessage.ToString(System.String)">
            <summary>
            Returns content of gate message for log purposes. Select message namespace to log.
            </summary>
            <param name="strNamespace">Which message namespace to include paramaters from. null includes all.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessage.ToString">
            <summary>
            Returns string for logging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessage.LongID">
            <summary>
            Database ID
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessage.TrackPoint">
            <summary>
            Position for message.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessage.IsMessageSaved">
            <summary>
            Return true if message is synchronized to database, else false.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessage.Records">
            <summary>
            Returns the message records.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessage.RecordCount">
            <summary>
            Number of records in this message.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessage.ServerTimeStamp">
            <summary>
            Time stamp in UTC when server stored this message to database.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessage.UserID">
            <summary>
            User database ID.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessage.DeviceID">
            <summary>
            Device database ID.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessage.IsScheduled">
            <summary>
            Runtime property indicating if the message is scheduled or not
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.GateMessageHandle">
            <summary>
            Gives protected access to a NmeaConnection and GateMessaegWriter object.
            
            E.g. ApplicationRule may need save GateMessages on fly to resolve ID. We don't want to let the ApplicationRule manage 
            write operation by it self. Instead we let the NmeaConnection give the ApplicatuionRule a "Handle" and implement the write operation
            in NmeaConnection by delegate. 
            
            By using anonymous delegate in such manner we avoid passing the whole Connection object.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.GateMessageHandle.m_nmeaConn">
            <summary>
            The protected NmeaConnection
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.GateMessageHandle.m_gateMessage">
            <summary>
            The Gate Message to manage
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageHandle.#ctor(GpsGate.Online.Message.GateMessageWriter,GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Creates a new Message Handle.
            </summary>
            <param name="gateMessage">The <see cref="T:GpsGate.Online.Message.GateMessageWriter"/> that will be passed to delegate method.</param>
            <param name="delHandle">Delegate method</param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageHandle.UpdateGateMessage">
            <summary>
            Saves the current <see cref="T:GpsGate.Online.Message.GateMessageWriter"/> and return a new Read Only <see cref="T:GpsGate.Online.Message.GateMessage"/> with ID resolved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageHandle.TriggerConnectionInfo(System.Object,System.Object)">
            <summary>
            Writes back an info event to the connection. oArgument.ToString() written to this method will for example end up in the
            terminal.  
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageHandle.Dispose">
            <summary>
            Clean up resources.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.GateMessageReader">
            <summary>
            Reads a set of <see cref="T:GpsGate.Online.Message.GateMessage"/>s from database
            </summary>
            <threadsafty static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Message.IGateMessageReader">
            <summary>
            This interface can be implemented by a class that reads <see cref="T:GpsGate.Online.Message.GateMessage"/>s from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.IGateMessageReader.GetGateMessageByTrackInfo(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load <see cref="T:GpsGate.Online.Message.GateMessage"/>s that belongs to a <see cref="!:TrackInfo"/>. You can specify which GpsGate Message Names to be loaded.
            If a specified variable doesn't exists for a track point the track point will be loaded anyway.
            </summary>
            <param name="iTrackInfoID">TrackInfo to load from</param>
            <param name="lStartIndex">StartIndex. Set to 0 to start from beginning.</param>
            <param name="iCount">Number of messages to return. Set to -1 to return all.</param>
            <param name="utcStart">Start of time interval in UTC. Set to DateTime.MinValue to disable start time.</param>
            <param name="utcStop">Stop of time interval in UTC. Set to DateTime.MaxValue to disable stop time.</param>
            <param name="bValid">Set to false to also load invalid track points</param>
            <param name="arrVariables">Message Names to load. Set to null to load all.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.IGateMessageReader.GetGateMessageByUser(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Load <see cref="T:GpsGate.Online.Message.GateMessage"/>s that belongs to a <see cref="!:User"/>. You can specify which GpsGate Message Names to be loaded.
            If a specified variable doesn't exists for a track point the track point will be loaded anyway.
            </summary>
            <param name="iUserID">User to load from</param>
            <param name="lStartIndex">StartIndex. Set to 0 to start from beginning.</param>
            <param name="iCount">Number of messages to return. Set to -1 to return all.</param>
            <param name="utcStart">Start of time interval in UTC. Set to DateTime.MinValue to disable start time.</param>
            <param name="utcStop">Stop of time interval in UTC. Set to DateTime.MaxValue to disable stop time.</param>
            <param name="bValid">Set to false to also load invalid track points</param>
            <param name="arrVariables">Message Names to load. Set to null to load all.</param>
            <param name="bAscending">Set sort order by time stamp of the data.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageReader.#ctor">
            <summary>
            Create reader
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageReader.LoadLatestUniqueRecordsByUser(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="iUserID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageReader.GetGateMessageByTrackInfo(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            See <see cref="M:GpsGate.Online.Message.IGateMessageReader.GetGateMessageByTrackInfo(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String})"/>
            </summary>
            <param name="iTrackInfoID">TrackInfo to load from</param>
            <param name="lStartIndex">StartIndex. Set to 0 to start from beginning.</param>
            <param name="iCount">Number of messages to return. Set to -1 to return all.</param>
            <param name="utcStart">Start of time interval in UTC. Set to DateTime.MinValue to disable start time.</param>
            <param name="utcStop">Stop of time interval in UTC. Set to DateTime.MaxValue to disable stop time.</param>
            <param name="bValid">Set to false to also load invalid track points</param>
            <param name="arrVariables">Message Names to load. Set to null to load all.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageReader.GetGateMessageByUser(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            See <see cref="M:GpsGate.Online.Message.IGateMessageReader.GetGateMessageByUser(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)"/>
            </summary>
            <param name="iUserID">User to load from</param>
            <param name="lStartIndex">StartIndex. Set to 0 to start from beginning.</param>
            <param name="iCount">Number of messages to return. Set to -1 to return all.</param>
            <param name="utcStart">Start of time interval in UTC. Set to DateTime.MinValue to disable start time.</param>
            <param name="utcStop">Stop of time interval in UTC. Set to DateTime.MaxValue to disable stop time.</param>
            <param name="bValid">Set to false to also load invalid track points</param>
            <param name="arrVariables">Message Names to load. Set to null to load all.</param>
            <param name="bAscending">Set sort order by time stamp of the data.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageReader.GetByIDs(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Load GateMEssages with the specified IDs
            </summary>
            <param name="enIDs">Enumerator with IDs to load messages by</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageReader.LoadByUser(System.Int32)">
            <summary>
            Returns all message records and track data for specified users.
            Do not use this method in a production system. Only for unit tests.
            </summary>
            <param name="iUser"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageReader.GetGateMessagesInEvent(System.Int64,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Get <see cref="T:GpsGate.Online.Message.GateMessage">GateMessages</see> in the given <see cref="!:GateEnvet">GateEvents</see> message span.
            </summary>
            <param name="lngEventID">ID of the event for wicth to load GateMessages</param>
            <param name="iIndex">Start index</param>
            <param name="iCount">Number of Messages to read</param>
            <param name="bSortDesc">Sort order. true = Descending, false = Ascending</param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Message.GateMessageRecord">
            <summary>
            Representing a record in  a <see cref="T:GpsGate.Online.Message.GateMessage"/>.
            A record contains two main elements.
            The <see cref="P:GpsGate.Online.Message.GateMessageRecord.RecordData"/> containing the actual data and a <see cref="T:Franson.Message.MessageField"/> labeling the data.
            
            Both <see cref="T:Franson.Message.MessageField"/> and the <see cref="P:GpsGate.Online.Message.GateMessageRecord.RecordData"/> has a type property hich must match,
            therefor there is no public constructor. 
            Instead use <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>.New Record(<see cref="T:Franson.Message.MessageField"/> field, object value) to create a new
            <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>.
            That method will create a <see cref="P:GpsGate.Online.Message.GateMessageRecord.RecordData"/> of the correct type according to the provided <see cref="T:Franson.Message.MessageField"/>.
            </summary>
            <threadsafty static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecord.#ctor(Franson.Message.MessageField,GpsGate.Online.Message.RecordData,System.Boolean,System.Boolean)">
            <summary>
            Constructor for private use
            </summary>
            <param name="messageField">The <see cref="T:Franson.Message.MessageField"/> labeling the Record.</param>
            <param name="data">The <see cref="P:GpsGate.Online.Message.GateMessageRecord.RecordData"/> holding the data.</param>
            <param name="bSave"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecord.#ctor(System.Int64,System.Int64,Franson.Message.MessageField,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Double},System.String,System.Nullable{System.DateTime},System.Boolean,System.Boolean)">
            <summary>
            Internal constructor to create a <see cref="!:GateMessagerecord"/> from database information.
            </summary>
            <param name="lngRecordId"></param>
            <param name="lngMessageId"></param>
            <param name="msgField"></param>
            <param name="bValue"></param>
            <param name="iValue"></param>
            <param name="dblValue"></param>
            <param name="strValue"></param>
            <param name="dtValue"></param>
            <param name="bSaveFlag"></param>
            <param name="bSaveChangesOnly"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecord.SetID(System.Int64)">
            <summary>
            Used to set database ID from new record saved to database. Will only be updated if old ID was 0 (= new).
            </summary>
            <param name="lngID"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecord.m_SetData(GpsGate.Online.Message.RecordData)">
            <summary>
            Internal method to set the correct database field (dao object) accordingly to the type of the <see cref="P:GpsGate.Online.Message.GateMessageRecord.RecordData"/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecord.NewRecord(Franson.Message.MessageField,System.Object,System.Boolean)">
            <summary>
            Factory style method to create a New <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>. 
            SaveFlag will by default be set to false.
            This method will create a <see cref="P:GpsGate.Online.Message.GateMessageRecord.RecordData"/> of proper sub type according to the type information of the 
            <see cref="T:Franson.Message.MessageField"/>. 
            
            A <see cref="T:Franson.Message.MessageField"/> type must match the type of the value.
            </summary>
            <param name="messageField"><see cref="T:Franson.Message.MessageField"/> of the new record.</param>
            <param name="value">data to be stored in <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>. Must match type of <see cref="T:Franson.Message.MessageField"/></param>
            <returns>New <see cref="T:GpsGate.Online.Message.GateMessageRecord"/></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecord.NewRecord(Franson.Message.MessageField,System.Object)">
            <summary>
            Calles <see cref="M:GpsGate.Online.Message.GateMessageRecord.NewRecord(Franson.Message.MessageField,System.Object,System.Boolean)"/> with bSaveChangesOnly set to false.
            </summary>
            <param name="messageField"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecord.ToString">
            <summary>
            Returns suitable information for logging in the format "(Name = Value : Save)"
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecord.ID">
            <summary>
            Database ID.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecord.Field">
            <summary>
            Field type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecord.SaveChangesOnly">
            <summary>
            Set by FieldMappingRule if the record should be saved when changed since last record with same MessageField
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecord.RecordData">
            <summary>
            Get the <see cref="P:GpsGate.Online.Message.GateMessageRecord.RecordData"/> of this <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecord.SaveFlag">
            <summary>
            Flag if this record should be saved by <see cref="!:NmeaConnection"/> when the <see cref="T:GpsGate.Online.Message.GateMessage"/> is committed to database.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecord.Unchanged">
            <summary>
            Flags that this record was present in the original gate message but has been filtered by the 
            ChangesOnly rule due to same value as previous one.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.GateMessageRecordBag">
            <summary>
            Transport object representing structure of a GateMessageRecord. 
            Used as an underlaying data container for GateMessageRecord object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordBag.#ctor(System.Int64,System.Int64,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Double},System.String,System.Nullable{System.DateTime},System.Boolean,Franson.Message.MessageField)">
            <summary>
            Create from parameters.
            </summary>
            <param name="lngRecordId"></param>
            <param name="lngMsgId"></param>
            <param name="iFieldId"></param>
            <param name="bValue"></param>
            <param name="iValue"></param>
            <param name="dblValue"></param>
            <param name="strValue"></param>
            <param name="dtValue"></param>
            <param name="bSaveFlag"></param>
            <param name="messageField"></param>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.RecordId">
            <summary>
            Database ID for record.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.MessageId">
            <summary>
            Database ID for message this record belongs to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.FieldId">
            <summary>
            Database ID for message field type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.DataBool">
            <summary>
            Returns bool value, or null if this record isn't of bool type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.DataInt">
            <summary>
            Returns integer value, or null if record isn't of int type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.DataDouble">
            <summary>
            Returns double, or null if record isn't of double type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.DataString">
            <summary>
            Returns string, or null if record isn't of string type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.DataDateTime">
            <summary>
            Returns UTC <see cref="T:System.DateTime"/>, or null if record isn't of string type.
            Note must be UTC!
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.SaveFlag">
            <summary>
            True if this record should be stored to DB.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordBag.Field">
            <summary>
            Meta information about field.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.GateMessageRecordLatest">
             <summary>
             Keeps the gate_record_latest table synchronized and up to date.
             
             This collection's main purpose is NOT to read from the gate_record_latest. 
             The purpose is to synchronize and keep the gate_record_latest up to date.
             </summary>
             <example><code lang="C#">
                 Franson.Message.MessageFieldReader msgFieldReader = new Franson.Message.MessageFieldReader();
                 Franson.Message.MessageField? msgField = null;
            
                 // Read up collection of latest status values for user.
                 GpsGate.Online.Message.GateMessageRecordLatest recLatest = new GpsGate.Online.Message.GateMessageRecordLatest(m_gateUser1.ID);
                 GpsGate.Online.Message.GateMessageRecord rec = null;
            
                 // Find latest value for Odometer
                 msgField = msgFieldReader.FindMessageField("Odometer", Franson.Message.MessageNamespace.GetDefaultNamespace());
                 rec = recLatest.FindRecord(msgField.Value);
                 double dblOdometer = (double)rec.RecordData.Data;
            
                 // Find latest value for Pressure
                 msgField = msgFieldReader.FindMessageField("Pressure", Franson.Message.MessageNamespace.GetDefaultNamespace());
                 rec = recLatest.FindRecord(msgField.Value);
                 double dblPressure = (double)rec.RecordData.Data;
            
                 // Find latest value for Volume
                 msgField = msgFieldReader.FindMessageField("Volume", Franson.Message.MessageNamespace.GetDefaultNamespace());
                 rec = recLatest.FindRecord(msgField.Value);
                 double dblVolume = (double)rec.RecordData.Data;
             </code></example>
             <threadsafety instance="true" static="true"/>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.GetRecordLatest(System.Int32)">
            <summary>
            Returns one instance of latest message values for specified user. The returned object is thread safe.
            </summary>
            <param name="iUserId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.ClearCache">
            <summary>
            Clear all cached objects.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.#ctor(System.Int32)">
            <summary>
            Public constructor. Will Load the collection by the provided <see cref="T:GpsGate.Online.GateUser"/>.
            </summary>
            <param name="gateUser"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.AddGateRecord(GpsGate.Online.Message.GateMessageRecord,GpsGate.Online.Directory.Device)">
            <summary>
            Adds a new <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>. 
            This method will find the row containing the <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>.<see cref="T:Franson.Message.MessageField"/> and update the data and set new 
            time stamps. 
            If <see cref="T:Franson.Message.MessageField"/> is not found  a new record will be inserted.
            </summary>
            <param name="gateMsgRec"></param>
            <param name="device">Device that the message was received from. Can be NULL</param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.FindRecord(Franson.Message.MessageField)">
            <summary>
            Finds latest GateMessageRecord for the given MessageField
            </summary>
            <param name="inFieldId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.FindRecord(System.Int32,System.String)">
            <summary>
            Find latest GateMessageRecord for a given namespace ID and variable name.
            </summary>
            <param name="iNamespaceID"></param>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.FindRecord(System.String,System.String)">
            <summary>
            Find latest GateMessageRecord for a given namespace and variable name. null is returned if not found.
            </summary>
            <param name="strNamespace"></param>
            <param name="strName"></param>
            <returns></returns>
            <exception cref="T:Franson.DAO.NotFoundException">Namespace not found.</exception>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.Equals(System.Object)">
            <summary>
            Returns true if argument is of <see cref="T:GpsGate.Online.Message.GateMessageRecordLatest"/> type, and has same user id as owner.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageRecordLatest.GetHashCode">
            <summary>
            Calls base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordLatest.Item(System.Int32)">
            <summary>
            Indexer to iterate the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordLatest.UserId">
            <summary>
            User records belong to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageRecordLatest.DAO">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Message.DAO.GateMessageRecordLatestDAOSQL"/> object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.GateMessageWriter">
            <summary>
            Representation of the internal Message format. This class is only used to create and write a message to the database.
            
            GateMessage will carry data in numeric, text, binary or/and bool data together with a position.
            The position as well as the dataContent is optional.
            
            A GateMessage will contain a collection of <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>'s.
            
            GateMessage is thread safe.
            </summary>
            <threadsafety instance="false"/>
        </member>
        <member name="F:GpsGate.Online.Message.GateMessageWriter.m_trackPoint">
            <summary>
            Optional <see cref="P:GpsGate.Online.Message.GateMessageWriter.TrackPoint"/>.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.GateMessageWriter.m_bSaveFlag">
            <summary>
            Indicates if this <see cref="T:GpsGate.Online.Message.GateMessage"/> will be saved.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.GateMessageWriter.m_bSaveIfTrackPointSaved">
            <summary>
            Set to true if marked records should be saved under condition that track point is saved.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Message.GateMessageWriter.m_trackRec">
            <summary>
            Track recorder for this gate message writer.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.#ctor(GpsGate.Online.Directory.Device,Franson.Nmea.CmdBase,System.String)">
            <summary>
            Create a gate message from an inline FRCMD or FRRET
            </summary>
            <param name="device"></param>
            <param name="cmd"></param>
            <param name="strMessageNamespace"></param>
            <exception cref="T:GpsGate.Online.GateCmdException">Invalid format on cmd</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.#ctor(GpsGate.Online.Directory.Device,Franson.Geo.TrackPoint)">
            <summary>
            Should be used if the GateMessage contains a TrackPoint.
            If track point is null a 0, 0 invalid position is used with server UTC time stamp.
            </summary>
            <param name="device">Device this message is sent from.</param>
            <param name="trackPoint"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.#ctor(GpsGate.Online.Directory.Device)">
            <summary>
            Default constructor. Assigned to a track point with an invalid 0,0 position time stamped UTC server time.
            </summary>
            <param name="device">Device this message is sent from.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.SetTrackRecorder(GpsGate.Tracks.TrackRecorder)">
            <summary>
            By default the life track recorder is used to store track points. call this method to replace.
            </summary>
            <param name="trackRec">Custom track recorder.</param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.GetRecord(System.String)">
            <summary>
            Returns named record from GpsGate namespace. Returns null if not found.
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.GetRecord(System.Int32)">
            <summary>
            Returns record for a  MessageField by ID. 
            Returns null if not found.
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.LoadByID(System.Int32)">
            <summary>
            Not supported. GateMessage has a long as ID. Use <see cref="M:GpsGate.Online.Message.GateMessageWriter.LoadByLongID(System.Int64)"/> instead.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.LoadByLongID(System.Int64)">
            <summary>
            Load message by database ID.
            </summary>
            <param name="lngID"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.AddRecord(GpsGate.Online.Message.GateMessageRecord)">
            <summary>
            Adds a new <see cref="T:GpsGate.Online.Message.GateMessageRecord"/> to this message. 
            </summary>
            <param name="rec"></param>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.Update">
            <summary>
            Will update GateMessage to database if <see cref="P:GpsGate.Online.Message.GateMessageWriter.SaveFlag"/> is set to true.
            All GateMessageRecords that are flagged to be saved, are written to database.
            All GateMessageRecords that are not flagged, will be removed from collection, and from database.
            Will save TrackPoint to data base if track recorder includes it or if SaveFlag is true.
            Will save marked records if SaveIfTrackPointSaved is true and track point is saved by track recorder.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.ToString">
            <summary>
            String representation of message for debug and logging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.GateMessageWriter.ToGateMessage">
            <summary>
            Returns immutable GateMessage bag.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.ID">
            <summary>
            Use <see cref="P:GpsGate.Online.Message.GateMessageWriter.LongID"/> instead
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.LongID">
            <summary>
            Primary key.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.TrackPoint">
            <summary>
            Optional <see cref="P:GpsGate.Online.Message.GateMessageWriter.TrackPoint"/> of this message.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.TrackPointId">
            <summary>
            Database ID of track point.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.UserID">
            <summary>
            ID of user that sent this message.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.DeviceID">
            <summary>
            ID of device that sent this message.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.SaveFlag">
            <summary>
            Indicates if this message should be saved by the <see cref="!:NmeaConnection"/>
            
            This property is set by <see cref="T:GpsGate.Online.Message.RecorderRule"/>s that processes this message.
            
            This property is OR:ed with the <see cref="P:GpsGate.Online.Message.GateMessageRecord.SaveFlag"/> property. 
            If a <see cref="T:GpsGate.Online.Message.GateMessageRecord"/> is flagged for saving it won't be saved if this flagged isn't true.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.SaveIfTrackPointSaved">
            <summary>
            If true any marked recordes will be saved if track recorder saves track point.
            <see cref="P:GpsGate.Online.Message.GateMessageWriter.SaveFlag"/> overrides this option.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.IsAnyNewRecordFlagged">
            <summary>
            Returns true if any record is flagged to be saved.
            Can be used to avoid saving a GateMessage to database without any GateMessageRecord's
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.Records">
            <summary>
            <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>'s of this Message. 
            
            The <see cref="!:GateMessageRecords"/> are  collected in a list which is then returned.
            No lazy yield return to make <see cref="T:GpsGate.Online.Message.GateMessage"/> more robust.
            
            We don't want GateMessage to be locked while enumerate which it would have been with a lazy enumerating.
            
            This will also make it safer to call update. With lazy yield return the underlying collections would have
            been modified by .Update() while enumerating them, which would have caused an exception.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.LastInsertedRecords">
            <summary>
            Returns records that were inserted to database at last Update().
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.NewRecordCount">
            <summary>
            Returns number of records added using <see cref="M:GpsGate.Online.Message.GateMessageWriter.AddRecord(GpsGate.Online.Message.GateMessageRecord)"/> to message not yet written to database.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.GateMessageWriter.DAO">
            <summary>
            Returns casted DAO object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.MessageTemplate">
            <summary>
            A MessageTemplate represents a template text together with a mechanism to hook up template parsing functionality 
            so that template variables can be resolved dynamically at runtime. A MessageTemplate is created by a Notifier.
            A typical scenario is a Gate Message arrives at the server and triggers an event rule. A notifier has been specified in the 
            event rule to send a notification to a number of recipients. The template text of the notifier contains template variables 
            that are resolved and translated into the final notification message (An example of a template variable is the signal 
            field name that triggered the event rule)
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Message.MessageTemplate.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a MessageTemplate using the provided message template id, notifier id and template text
            </summary>
            <param name="iID">A message template id</param>
            <param name="iNotifierID">A notifier id</param>
            <param name="strTemplate">A template text</param>
        </member>
        <member name="M:GpsGate.Online.Message.MessageTemplate.Parse(Franson.Text.TemplateParser.ResolveVariableHandle)">
            <summary>
            Parses the template text of this message template using the TemplateParser with the provided delegate.
            </summary>
            <param name="fncResolveVariable">A delegate for parsing the template.</param>
            <returns>The resolved template text</returns>
        </member>
        <member name="M:GpsGate.Online.Message.MessageTemplate.Parse(Franson.Text.TemplateParser.ResolveVariableHandle,Franson.Localization.Locale)">
            <summary>
            Parses and localizes the template text of this message template using the TemplateParser with the provided delegate.
            </summary>
            <param name="fncResolveVariable">A delegate for parsing the template.</param>
            <returns>The resolved template text</returns>
        </member>
        <member name="P:GpsGate.Online.Message.MessageTemplate.ID">
            <summary>
            The ID of this message template
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.MessageTemplate.NotifierID">
            <summary>
            The notifier id of this message template
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.MessageTemplate.TemplateText">
            <summary>
            The template text of this message template
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.MessageTemplate.ResolvedVariables">
            <summary>
            List of template variables that have been resolved by the <see cref="T:Franson.Text.TemplateParser"/> of this message template.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Message.MessageTemplate.UnresolvedVariables">
            <summary>
            Get RO list of variables not resolved.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Message.RecordData">
            <summary>
            Base class holding data for <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>
            Derived and extended to support more data types.
            </summary>
            <threadsafety instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Message.RecordData.GetHashCode">
            <summary>
            Returns base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Message.ValueTypeRecordData`1">
            <summary>
            Implementation of <see cref="!:RecodData"/> that support
            double, bool and DateTime types.
            </summary>
            <typeparam name="T">bool, double or DateTime</typeparam>
            <threadsafety instance="true"/>
        </member>
        <member name="T:GpsGate.Online.Message.TextRecordData">
            <summary>
            Implementation of <see cref="!:RecodData"/> that supports string data
            </summary>
            <threadsafety instance="true"/>
        </member>
        <member name="T:GpsGate.Online.Message.RecorderRuleChain">
            <summary>
            Object used to group <see cref="T:GpsGate.Online.Message.RecorderRule"/>'s into set of rules.
            Each <see cref="T:GpsGate.Online.Message.RecorderRule"/> database instance defines one and only one <see cref="T:GpsGate.Online.Message.RecorderRuleChain"/>. 
            The <see cref="T:GpsGate.Online.Message.RecorderRuleChain"/> are used by <see cref="!:NmeaConnnection"/> to load 
            a defined set of <see cref="T:GpsGate.Online.Message.RecorderRule"/>'s
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:GpsGate.Online.Message.RecorderRuleChain.DEFAULT_REC_CHAIN_NAME">
            <summary>
            Name of the GpsGate Servers default RecorderRuleChain
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.RecorderRuleChain.#ctor">
            <summary>
            Creates a default "_DEFAUL_RECORDER_CHAIN" recorder rule chain.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.RecorderRuleChain.#ctor(System.String)">
            <summary>
            Creates named recorder rule chain.
            </summary>
            <param name="strName"></param>
        </member>
        <member name="M:GpsGate.Online.Message.RecorderRuleChain.GetReader">
            <summary>
            Returns a new <see cref="T:GpsGate.Online.Message.RecorderRuleReader"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Message.RecorderRuleReader">
            <summary>
            Implementation of <see cref="T:Franson.Reflection.TypeInstanceReader"/> that loads
            <see cref="!:Franson.Reflection.TypeInfo"/> for the <see cref="!:RecordRule"/>'s in
            the given <see cref="T:GpsGate.Online.Message.RecorderRuleChain"/>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.RecorderRuleReader.#ctor(GpsGate.Online.Message.RecorderRuleChain)">
            <summary>
            Deafult Constructor
            </summary>
            <param name="recRuleChain"></param>
        </member>
        <member name="T:GpsGate.Online.Message.SaveAllRule">
            <summary>
            Recorder rule that saves all incoming data. By default the rule is disabled.
            It is enabled by setting the boolean setting "SaveAllRule" to true.
            This setting can be at user, group, application of site level.
            This rule will typically be enabled by users which simply wants all 
            data saved. And by unit tests. Which focus on other things than filtering. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.SaveAllRule.#ctor">
            <summary>
            Create SaveAll rule.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.SaveAllRule.ProcessMessage(GpsGate.Online.Message.GateMessageWriter,GpsGate.Online.Directory.Device)">
            <summary>
            Flags all records and the message itself to be saved.
            </summary>
            <param name="gateMessage"></param>
            <param name="device"></param>
        </member>
        <member name="M:GpsGate.Online.Message.SaveAllRule.Install(Franson.Reflection.LoadableType)">
            <summary>
            This method is run when this Loadable RecordRule Type is installed.
            Will insert itself in the default recorder chain at execution order 90000
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="T:GpsGate.Online.Message.TrackRule">
            <summary>
            
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.TrackRule.#ctor">
            <summary>
            Create track rule
            </summary>
        </member>
        <member name="M:GpsGate.Online.Message.TrackRule.ProcessMessage(GpsGate.Online.Message.GateMessageWriter,GpsGate.Online.Directory.Device)">
            <summary>
            Checks Odometer
            </summary>
            <param name="gateMessage"></param>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Message.TrackRule.Install(Franson.Reflection.LoadableType)">
            <summary>
            This method is run when this Loadable RecordRule Type is installed.
            Will insert itself in the default recorder chain at execution order 100000
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="T:GpsGate.Online.Net.Aspx.AspxConnection">
            <summary>
            Uses an aspx page as connection.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnection">
            <summary>
            Base class for all connections to "Franson NMEA Service".
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_dicCustomState">
            <summary>
            List of custom objects accosiated to this conenction.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_lockCustomState">
            <summary>
            Make list of custom state objects thread safe.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_listApplications">
            <summary>
            List of application the user is member of.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_listAppIDs">
            <summary>
            List of application IDs user is member of.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_dtLastDataUtc">
            <summary>
            Last time data was received from connection, in UTC.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_bLoginPending">
            <summary>
            Set to true when there is a login pending
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_session">
            <summary>
            Authenticated Session
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_gateUser">
            <summary>
            Logged in GateUser
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_device">
            <summary>
            If connection was authenticated using a Device object
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_uiInstanceID">
            <summary>
            A unique ID for this object, to be used to track object lifetime in the log file.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_timerKill">
            <summary>
            Used to kill connection on time out.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_listConnInterval">
            <summary>
            Collection of <see cref="T:GpsGate.Online.Net.NmeaConnInterval"/> objects that sends to this connection.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_protocol">
            <summary>
            Protocol object for this connection.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_bFrwdtReceived">
            <summary>
            Set to true if FRWDT is received from client.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_defaultRecorderChain">
            <summary>
            Default Recorder Rule Chain.
            Name: _DEFAUL_RECORDER_CHAIN
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_defaultApplicationChain">
            <summary>
            Default Recorder Rule Chain.
            Name: _DEFAUL_APPLICATION_CHAIN
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_recordCurrent">
            <summary>
            Collection holding and synchronizing latest <see cref="T:GpsGate.Online.Message.GateMessageRecord"/>'s
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_oRouteMessageLock">
            <summary>
            Object used to detect if several threads access RouteGateMessage at the same time.
            Something that should result in an exception
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_oRouteSentenceLock">
            <summary>
            Object used to detect if several threads access RouteSentence at the same time.
            Something that should result in an exception
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_bOutgoing">
            <summary>
            True if this connection was initiated from the server.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_userSender">
            <summary>
            User that uses outgoing connection to execute command or send data. null for incoming connections.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_oLockForWriting">
            <summary>
            
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.m_TriggerAuthenticated">
            <summary>
            Call this method to trigger <see cref="E:GpsGate.Online.Net.NmeaConnection.Authenticated"/> event.
            Will never thorugh any exceptions!
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.m_TriggerDisconnected">
            <summary>
            Call this method to trigger <see cref="E:GpsGate.Online.Net.NmeaConnection.Disconnected"/> event.
            Will never thorugh any exceptions!
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.TriggerConnectionError(System.Exception)">
            <summary>
            Triggers the <see cref="E:GpsGate.Online.Net.NmeaConnection.ConnectionError"/> event. An exception passed to this method
            will for example end up in the terminal. And also other plugins that uses this event for connection state information.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.m_TriggerConnectionError(System.Exception)">
            <summary>
            Call this method to trigger <see cref="E:GpsGate.Online.Net.NmeaConnection.ConnectionError"/> event. If argument is null method returns without action.
            Will never thorugh any exceptions!
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.TriggerConnectionInfo(System.Object,System.Object)">
            <summary>
            Pass information to all listeners of the <see cref="E:GpsGate.Online.Net.NmeaConnection.ConnectionInfo"/> event.
            The terminal does for example write oArgument.ToString() as an Info entry to the terminal.
            </summary>
            <param name="nmeaConn"></param>
            <param name="oSender"></param>
            <param name="oArgument"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.#ctor">
            <summary>
            Base class to handle a connection to a device, or some logged in object.
            Constructor for incoming connection.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.#ctor(GpsGate.Online.Directory.Device,Franson.Directory.User)">
            <summary>
            Outgoing connection
            </summary>
            <param name="devTarget"></param>
            <param name="userSender"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.Start">
            <summary>
            NmeaConnection may not start to send and receive data until this method is called.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.CreateProtocol">
            <summary>
            Override to create a Protocol object that converts from a custom protocol to GpsGate Protocol.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.KeepAlive">
            <summary>
            A call to this method will keep the connection alive for another <see cref="F:GpsGate.Online.GateConfig.CommandTimeout"/> milliseconds
            Updates <see cref="!:GateUser.DeviceActivity"/> and <see cref="!:GateUser.LastTransport"/> if the last activity was 
            more than 10 seconds ago.
            
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.SetConnIntervalForSource(System.String,GpsGate.Online.Net.NmeaConnInterval)">
            <summary>
            A list of all NmeaConnInterval objects that writes to this connection (if it is a sink).
            </summary>
            <param name="strSourceUsername">Username of sending NmeaConnInterval</param>
            <param name="connInerval"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.GetConnIntervalForSource(System.String)">
            <summary>
            Directory
            </summary>
            <param name="strSourceUsername"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.LockForWriting">
            <summary>
            Call this method if you need to write several of sequences of data to a connection without interruption.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.UnlockForWriting">
            <summary>
            Each call to <see cref="M:GpsGate.Online.Net.NmeaConnection.LockForWriting"/> must be followed by a call to this method.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.GpsGateToDevice(System.Byte[])">
            <summary>
            Data written to connection as raw byte array data.
            Override this method if you want data to the connection in raw format.
            </summary>
            <param name="arrData">Byte array to send to connection</param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.GpsGateToProtocol(Franson.Nmea.Sentence)">
            <summary>
            Same thing as calling <see cref="!:Protocol.TranslateToDevice"/>.
            </summary>
            <param name="nmeaSentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.GpsGateToProtocol(Franson.Nmea.CmdBase)">
            <summary>
            Sends an FRRET or FRCMD including argument sentences back to protocol.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.ProtocolToDevice(Franson.Message.ProviderMessage)">
            <summary>
            Sends data to device.
            </summary>
            <param name="msg"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception">Any exception from call to DoProtocolToDevice</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.ProtocolToDevice(System.Byte[])">
            <summary>
            Sends data to device. Override this method for each type of transport.
            Override method should call base to forward data to <see cref="E:GpsGate.Online.Net.NmeaConnection.RawDataToDevice"/> event.
            </summary>
            <param name="arrData"></param>
            <exception cref="T:System.Exception">Any exception from call to DoProtocolToDevice</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.DoProtocolToDevice(System.Byte[])">
            <summary>
            Override by derived class that does the actual sedning of data.
            </summary>
            <param name="arrData"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.DoProtocolToDevice(Franson.Message.ProviderMessage)">
            <summary>
            Override this method if the protocol uses messages for communication to device.
            The default implementation calls <see cref="M:GpsGate.Online.Net.NmeaConnection.DoProtocolToDevice(System.Byte[])"/>
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.ProtocolToDevice(System.String)">
            <summary>
            Convert strData to a ASCII byte array, and calls <see cref="M:GpsGate.Online.Net.NmeaConnection.ProtocolToDevice(System.Byte[])"/>.
            </summary>
            <param name="strData"></param>
            <exception cref="T:GpsGate.Online.MessageQueuedException">If data is queued on server and not delivered.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.DeviceToProtocol(System.Byte[])">
            <summary>
            Sends data to any <see cref="E:GpsGate.Online.Net.NmeaConnection.RawDataToGpsGateEvent"/> handlers.
            Calls <see cref="!:Protocol.TranslateFromDevice"/> on active protocol object.
            </summary>
            <param name="arrData">Data from device to be processed.</param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.DeviceToProtocol(Franson.Message.ProviderMessage)">
            <summary>
            Sends data to any <see cref="E:GpsGate.Online.Net.NmeaConnection.RawDataToGpsGateEvent"/> handlers.
            Calls <see cref="!:Protocol.TranslateFromDevice"/> on active protocol object.
            Fills in device and user DB ID to ProviderMessage.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.SendFRWDT(System.String)">
            <summary>
            Sends FRWDT to Framework.
            </summary>
            <param name="strData">"ALL" or "NMEA"</param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.SendFRRDT(System.Double)">
            <summary>
            Sends FRRDT to Framework
            </summary>
            <param name="dblInterval"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.RouteSentence(Franson.Nmea.Sentence)">
            <summary>
            Routes NMEA sentence to listening connections.
            </summary>
            <param name="nmeaSentence">Sentence to route</param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.Flush">
            <summary>
            Flush data to client. Override for relevant transport.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.DoDispose">
            <summary>
            Will be called by Dispose()
            Override this method if your derived class benefits from being disposed.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.IsDisposed">
            <summary>
            Returns true if object is disposed. Meaning the socket is closed due to an error or on purpose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.IsDisposing">
            <summary>
            This connection is closing down.
            </summary>
            <returns></returns>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_bDisposed">
            <summary>
            True if object as been disposed.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnection.m_bIsDisposing">
            <summary>
            Set to true during the Dispose() method is executing to avoid several threads from
            disposing the same object several times.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.Dispose">
            <summary>
            Must be called when a NmeaConnection isn't used any more. Will remove the conncetion from the
            GpsGate framework.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.CheckDisposed">
            <summary>
            Will throw an exception if this object is disposed
            </summary>
            <exception cref="T:System.ObjectDisposedException">The object is disposed</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.Login(System.String,System.String,System.String)">
            <summary>
            Use username + password to authenticate device.
            </summary>
            <param name="strDomain"></param>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
            <exception cref="T:GpsGate.Online.ClientChangedIDException">Verified an authenticated conneciton, and client had changed ID.</exception>
            <exception cref="T:Franson.Directory.AuthenticationException">Authentication failed.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.Login(GpsGate.Online.Directory.DeviceTrackPoint)">
            <summary>
            Use IMEI or MSISDN to authenticate device.
            </summary>
            <param name="deviceTP"></param>
            <exception cref="T:GpsGate.Online.ClientChangedIDException">Verified an authenticated conneciton, and client had changed ID.</exception>
            <exception cref="T:Franson.Directory.AuthenticationException">Authentication failed.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.Login(GpsGate.Online.GateUser)">
            <summary>
            Assume GateUser is authenticated. And use it to authenticate connection without any additional checks.
            </summary>
            <param name="gateUser"></param>
            <exception cref="T:GpsGate.Online.ClientChangedIDException">Verified an authenticated conneciton, and client had changed ID.</exception>
            <exception cref="T:Franson.Directory.AuthenticationException">Authentication failed.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.DoLogin(System.String,System.String,System.String,GpsGate.Online.GateUser)">
            <summary>
            Override to customize login.
            </summary>
            <param name="strDomain"></param>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
            <param name="gateUser"></param>
            <exception cref="T:GpsGate.Online.ClientChangedIDException">Verified an authenticated conneciton, and client had changed ID.</exception>
            <exception cref="T:Franson.Directory.AuthenticationException">Authentication failed.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.RouteGateMessage(GpsGate.Online.Message.GateMessageWriter)">
            <summary>
            Routes GateMessage to all registered recorder rules.
            <see cref="M:GpsGate.Online.Net.NmeaConnection.UpdateGateMessage(GpsGate.Online.Message.GateMessageWriter)"/> is called to store position and messages to database.
            After that all registered application rules are called.
            </summary>
            <param name="msg"></param>
            <exception cref="T:GpsGate.Online.CouldNotProcessGateMessage">Some kind of error in the recorder rule chain. This means GateMessage is not stored in database.</exception>
            <exception cref="T:Franson.Threading.LockTimeoutException">If more than one thread enters this method at the same time (not allowed)</exception>
            <exception cref="T:System.InvalidOperationException">If there is a pending transaction in thread.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.UpdateGateMessage(GpsGate.Online.Message.GateMessageWriter)">
            <summary>
            Stores information in gateMessage to database.
            </summary>
            <param name="gateMessage"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.DispatchMessageToApplications(GpsGate.Online.Message.GateMessageWriter)">
            <summary>
            Dispatch a <see cref="T:GpsGate.Online.Message.GateMessage"/> to all applications where the connecting user is a member of.
            </summary>
            <param name="gateMessage">Message to dispatch</param>
            <returns>List of GateEvents</returns>
            <exception cref="T:System.InvalidOperationException">If there is a pending transaction in thread.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.ToString">
            <summary>
            String representation of NmeaConnection in the for username@NmeaConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.Equals(System.Object)">
            <summary>
            Returns true if the same object. Or if obj is a Device object which has the same ID as Device assigned to this connection.
            Or if obj is a string which has the same value as <see cref="P:GpsGate.Online.Net.NmeaConnection.ClientAddress"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.GetHashCode">
            <summary>
            Calls object.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.SetCustomObject(System.String,System.Object)">
            <summary>
            Set a custom state object to this connection. Call to this method are thread safe.
            </summary>
            <param name="strKey">Use "namespace.key" to avoid naimng conflicts between plugins.</param>
            <param name="oValue">Custom object</param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnection.GetCustomObject(System.String)">
            <summary>
            Return custom object by key. Call to this method are thread safe.
            </summary>
            <param name="strKey"></param>
            <returns></returns>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaConnection.Authenticated">
            <summary>
            Called when a connection has been authenticated. No more data is received before
            all Authenticated events are processed.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaConnection.Disconnected">
            <summary>
            Called when disconnected or disposed.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaConnection.RawDataToGpsGateEvent">
            <summary>
            Called each time data comes into the connection. No more data is received until
            all RawData event handlers have been processed.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaConnection.NmeaDataToGpsGateEvent">
            <summary>
            Called when a full valid NMEA sentence has been received from connection. No more data is received until
            all NmeaData events have been processed, good to know for synchronization purposes.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaConnection.RawDataToDevice">
            <summary>
            Called for all raw outgoing data. Can be used by plugins to monitor outgoing data.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaConnection.ConnectionError">
            <summary>
            Called when there is a critical error for this connection.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaConnection.GateMessageProcessed">
            <summary>
            Called when a new gate message has been processed by all stages in GpsGate.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaConnection.ConnectionInfo">
            <summary>
            Users of this connection can send information to listeners to this event by calling 
            <see cref="M:GpsGate.Online.Net.NmeaConnection.TriggerConnectionInfo(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.UpdateGateUserWithOlderPosition">
            <summary>
            Tells Protocol if a GateUser's position should be updated with an older position or not.
            By default this property is true. Override to change behavior. A device that uploads batches of data
            may want to change this.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.AppIDs">
            <summary>
            Return array of application DB ID user is member of. Call to this method is thread safe.
            Returns a new array at each call.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.Sender">
            <summary>
            Set for outgoing connections to the user which executes a command or sends data on connection.
            Returns null for incoming connections.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.Outgoing">
            <summary>
            Returns true if connection was originally created as an outgoing connection.
            However a connection is bidirectional, and should handle communication in both direction at the same time.
            This property is mostly informative.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.LastDataUTC">
            <summary>
            UTC for when some data was received from connection.
            When the object is created this property is set to DateTime.UtcNow
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.ClientAddress">
            <summary>
            Returns an identifier of client address. E.g. IP number + port
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.Protocol">
            <summary>
            Protocol object used to convert between a custom protocol and GpsGate Protocol
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.Transport">
            <summary>
            Returns an identifier for which kind of transport this connection uses. E.g. "tcp", "udp", "sms", "email"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.Session">
            <summary>
            The current session that belongs to this NmeaConnection.
            An authenticated NmeaConnection has one Session.
            OK to be accessed after object is disposed.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.GateUser">
            <summary>
            Same as Session.User and Device.DeviceOwner
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.Device">
            <summary>
            Connected device. Will always return a Device object, except if connection isn't authenticated.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.TimeoutBeforeKill">
            <summary>
            Sets a timer that will dispose this NmeaConnection. Value set in miliseconds
            A value of -1 (default) disables the dispose timout. 
            Used to automatically dispose connections, where the client is a fejk, or is failing in some way.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.RecorderChain">
            <summary>
            Override this if a NmeaConnection implementation needs a custom chain of rules
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnection.ApplicationChain">
            <summary>
            Override this if a NmeaConnection implementation needs a custom chain of rules
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnection.AuthenticatedHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaConnection.Authenticated"/>  event
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnection.DisconnectedHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaConnection.Disconnected"/> event.
            </summary>
            <param name="nmeaConnection">Client that was disconnected</param>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnection.RawDataToGpsGateHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaConnection.RawDataToGpsGateEvent"/> event
            </summary>
            <param name="nmeaConnection">Source</param>
            <param name="data">Incoming data</param>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnection.NmeaDataToGpsGateHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaConnection.NmeaDataToGpsGateEvent"/> event.
            </summary>
            <param name="nmeaConnection">Source</param>
            <param name="nmeaSentence">Incoming parsed NMEA sentence</param>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnection.RawDataToDeviceHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaConnection.RawDataToDevice"/>
            </summary>
            <param name="nmeaConn"></param>
            <param name="arrData"></param>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnection.ConnectionErrorHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaConnection.ConnectionError"/>
            </summary>
            <param name="nmeaConn"></param>
            <param name="ex"></param>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnection.GateMessageProcessedHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaConnection.GateMessageProcessed"/>
            </summary>
            <param name="conn"></param>
            <param name="gMsg"></param>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnection.ConnectionInfoHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaConnection.ConnectionInfo"/>
            </summary>
            <param name="nmeaConn">This connection</param>
            <param name="oSender">External object which wants to send info</param>
            <param name="oArgument">Argument object.</param>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxConnection.#ctor(System.Web.HttpRequest,System.Web.HttpResponse)">
            <summary>
            Create a connection object to an ASPX page.
            </summary>
            <param name="request"></param>
            <param name="response"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxConnection.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxConnection.Login(System.String,System.String,System.String)">
            <summary>
            Login to NMEA service, if it exists. Or login localy if NMEA service does not exist.
            </summary>
            <param name="strDomain"></param>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxConnection.SendCommand(Franson.Nmea.FRCMD)">
            <summary>
            Sends command to Franson NMEA Service.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxConnection.DoProtocolToDevice(System.Byte[])">
            <summary>
            Writes back data to HttpResponse
            </summary>
            <param name="strData"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxConnection.DoDispose">
            <summary>
            Disposes connection to NMEA service.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Aspx.AspxConnection.ClientAddress">
            <summary>
            Returns client IP address.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Aspx.AspxConnection.Transport">
            <summary>
            Returns "http"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Aspx.AspxProtocol">
            <summary>
            Handles a HTTP request and translates it to GpsGate Protocol.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Protocol">
            <summary>
            Represents a protocol. Derive from this class when you make a protocol adpater betwen a custom protocol and
            GpsGate Protocol.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_bUseUnsafeIMEI">
            <summary>
            Set to true if IMEI and ESN without valid checksum are allowed.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_cmdExecuting">
            <summary>
            Set to a GateCmd when it is executing.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_verClient">
            <summary>
            Which protocol version the client is using
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_strClientApplicationName">
            <summary>
            Name of client application.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_verMaxServer">
            <summary>
            Which max protocol version the server supports.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_parser">
            <summary>
            NMEA Parser for incoming data.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_dblAltitude">
            <summary>
            Last known altitude.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_bRMCFound">
            <summary>
            Set to true if RMC data found in stream.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_bCompactProtocol">
            <summary>
            If protocol is in $FRCMD,IMEI,Cmd format.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Protocol.m_bHasNoMessageNamespace">
            <summary>
            Set to true if device has no message namespace
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Create a Protocol assigned to a connection.
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.#ctor">
            <summary>
            Create Protocol object
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.TranslateFromDevice(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method will be called with all "streaming" data coming in from the device as argument.
            Streaming data typically comes in over TCP/IP or UDP.
            Override this method to convert from a custom protocol to GpsGate Protocol.
            By default the data is assumed to be a NMEA stream following GpsGate Protocol standard.
            </summary>
            <param name="arrData"></param>
            <param name="iStart"></param>
            <param name="iLength"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.TranslateFromDevice(Franson.Message.ProviderMessage)">
            <summary>
            This method will be called for all message based data from a device.
            Message based data is typically an SMS, email or similar.
            Override this method to convert from a custom protocol to GpsGate Protocol.
            Will by default process data as it came as a byte[] stream.
            </summary>
            <param name="msg">Message to be translated</param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.ToGpsGate(Franson.Nmea.Sentence)">
            <summary>
            Should be called with NMEA sentences which follows the GpsGate Protocol standard.
            The derived class typically converts from a custom protocol to GpsGate Protocol.
            </summary>
            <param name="nmeaSentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.ToGpsGate(Franson.Geo.TrackPoint)">
            <summary>
            Same thing as calling ToGpsGate(GateMessage) with a TrackPoint only message
            </summary>
            <param name="trackPoint"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.ToGpsGate(Franson.Geo.TrackPoint,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Builds a <see cref="T:GpsGate.Online.Message.GateMessageWriter"/> calls ToGpsGate(GateMessage).
            </summary>
            <param name="tp"></param>
            <param name="dicStatus">Status variables</param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.ToGpsGate(GpsGate.Online.Message.GateMessageWriter)">
            <summary>
            Routes GateMessage through recorder and application rules.
            Routes an RMC sentence through GpsGate sentence router.
            GateMessage must have a TrackPoint with a valid time.
            </summary>
            <param name="gateMessage"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.AddDefaultMessageFields(GpsGate.Online.Message.GateMessageWriter)">
            <summary>
            Adds any default variables to gate message. By default Speed, Heading and Altitude is added if present in the device's
            message namespace. Override to change.
            </summary>
            <param name="gateMessage">Gate Message to process</param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.TranslateToDevice(Franson.Nmea.Sentence)">
            <summary>
            Override to translate GpsGate Protocol data to custom protocol, and then send data back to device.
            Call <see cref="!:NmeaConnection.ProtocolToDevice"/> to send translated data back to device.
            </summary>
            <param name="sentence">Data following GpsGate Protocol.</param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.LoadByID(System.String)">
            <summary>
            Load protocol by ID
            </summary>
            <param name="strID"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.ToString">
            <summary>
            Returns protocol name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.Equals(System.Object)">
            <summary>
            Returns true if IDs are identical.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.GetHashCode">
            <summary>
            base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.Dispose">
            <summary>
            Dispose Protocol object. End all activity.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.ProcessPendingCommand(System.Object)">
            <summary>
            Derived protocol class should call this method after authentication to process any pending
            commands for connected device.
            </summary>
            <param name="oArgument"></param>
            <returns>Returns true if any item was processed</returns>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.m_NmeaLogin(Franson.Nmea.Sentence)">
            <summary>
            Try to login using sentence. Unknown sentences are ignored.
            </summary>
            <param name="nmeaSentence"></param>
            <exception cref="T:Franson.Directory.AuthenticationException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.InstallProtocol">
            <summary>
            Called by listener when it starts
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.ProcessPending(Franson.Message.Queue,Franson.Message.QueueItem,System.Object)">
            <summary>
            Process pending command. It is an incoming connection from the tracker that 
            calls this method. In opposite to <see cref="M:GpsGate.Online.Net.Protocol.Send(Franson.Message.Queue,Franson.Message.QueueItem)"/> where the connection from the sender (typically _SYSTEM)
            is the caller.
            </summary>
            <param name="queue"></param>
            <param name="item"></param>
            <param name="oArgument"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.Send(Franson.Message.Queue,Franson.Message.QueueItem)">
            <summary>
            Starts executing command.
            </summary>
            <param name="queue"></param>
            <param name="item"></param>
            <returns></returns>
            <exception cref="T:Franson.Message.QueueFatalError"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.IsOnline(Franson.Message.Queue)">
            <summary>
            Always considered to be online.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Protocol.SupportedTransports(System.String)">
            <summary>
            Returns an array of transports which is supported by default by specified protocol.
            Individual device types using this protocol may have a different oppinion. See <see cref="P:GpsGate.Online.Directory.DeviceDefinition.SupportedTransports"/>
            </summary>
            <param name="strProtocolID"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.UseChecksum">
            <summary>
            Override and return false if NMEA checksum isn't required for GpsGate Protocol dialect. By default true is returned.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.NmeaConnection">
            <summary>
            Connection for this protocol object.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.ClientVersion">
            <summary>
            Returns version of client protocol.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.ClientApplicationName">
            <summary>
            Returns name of client application. This can also contain the client application version, which is not the same 
            thing necessarily as the protocol version returned by <see cref="P:GpsGate.Online.Net.Protocol.ClientVersion"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.CompactProtocol">
            <summary>
            Returns true if connection was authenticated with a compact sentence e.g. $FRCMD,IMEI,_Command
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.StringID">
            <summary>
            Protocol ID. Max 16 bytes long. Each protocol should have a unique ID.
            This ID is for example used as namespace for outgoing commands.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.Name">
            <summary>
            A free text name. Same as StringID by default. Override to change.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.Description">
            <summary>
            Free text description
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.EncapsulateErrors">
            <summary>
            Return true if FRRET/FRERR is returned on command execution.
            Return false if FRERR only is to be returned.
            Default false. Override to change.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.MessageNamespace">
            <summary>
            Returns message namespace. Assumes message namespace is the same as protocol ID. If this is not the case override this method.
            </summary>
            <exception cref="T:Franson.DAO.NotFoundException">If Message Namespace does not exist.</exception>
        </member>
        <member name="P:GpsGate.Online.Net.Protocol.MessageFieldReader">
            <summary>
            Returns message field reader for protocol namespace
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Create GpsGate HTTP protocol object.
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxProtocol.TranslateFromDevice(System.Web.HttpRequest)">
            <summary>
            Translates from a GpsGate HTTP request to GpsGate Protocol.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxProtocol.ParseIMEI(System.Web.HttpRequest)">
            <summary>
            Should return IMEI or null. Used for authentication.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxProtocol.ParseUsername(System.Web.HttpRequest)">
            <summary>
            Should return username or null. Used for authentication.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxProtocol.ParsePassword(System.Web.HttpRequest)">
            <summary>
            Should return password or null. Used for authentication.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.AspxProtocol.ParseGateMessage(System.Web.HttpRequest)">
            <summary>
            Should return a SendMessage command to be sent to Franson NMEA Service.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Aspx.AspxProtocol.AspxConnection">
            <summary>
            Returns casted NmeaConenction to AspxConnection.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Aspx.GpsGateAspxConnection.CreateProtocol">
            <summary>
            Returns a <see cref="!:GpsGateAspXProtocol"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Aspx.GpsGateAspxProtocol.StringID">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.DeleteProviderCmdBuilder">
            <summary>
            _DeleteProvider
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.DeleteProviderCmdBuilder.#ctor(System.Int32)">
            <summary>
            Create command.
            </summary>
            <param name="iListenerID">Database ID of provider to be deleted</param>
        </member>
        <member name="T:GpsGate.Online.Net.Command.DeleteProviderCmdExe">
            <summary>
            Command to delete provider.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.DeleteProviderCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.DeleteProviderCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Command.DeleteProviderCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.DeleteProviderCmdExe.Commit">
            <summary>
            Stops provider
            </summary>
            <exception cref="T:System.ArgumentException">Syntax error in arguments</exception>
            <exception cref="T:GpsGate.Online.GateCmdException">Could not stop provider</exception>
        </member>
        <member name="P:GpsGate.Online.Net.Command.DeleteProviderCmdExe.Name">
            <summary>
            Returns "_StopProvider"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Command.DeleteProviderCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.SelectListenersCmdBuilder">
            <summary>
            _SelectListeners. Request a liste of all listeners. Enabled and disabled.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.SelectListenersCmdBuilder.#ctor">
            <summary>
            Command to request of all listeners. Enabled and disabled.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.SelectListenersCmdExe">
            <summary>
            Command to get a list of all listeners.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.SelectListenersCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.SelectListenersCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Command.SelectListenersCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.SelectListenersCmdExe.Commit">
            <summary>
            Return list of listeners.
            </summary>
            <exception cref="T:System.ArgumentException">Syntax error in arguments</exception>
            <exception cref="T:GpsGate.Online.GateCmdException">Error getting list of listeners</exception>
        </member>
        <member name="P:GpsGate.Online.Net.Command.SelectListenersCmdExe.Name">
            <summary>
            Returns "_SelectListeners"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Command.SelectListenersCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.SelectProvidersCmdBuilder">
            <summary>
            _SelectProviders. Request a liste of all providers. Enabled and disabled.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.SelectProvidersCmdBuilder.#ctor">
            <summary>
            Command to request of all providers. Enabled and disabled.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.SelectProvidersCmdExe">
            <summary>
            Command to get a list of all providers.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.SelectProvidersCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.SelectProvidersCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Command.SelectProvidersCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.StartListenerCmdBuilder">
            <summary>
            _StartListener. Starts listener in service.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartListenerCmdBuilder.#ctor(System.Int32)">
            <summary>
            Command to start a listener
            </summary>
            <param name="iListenerID">Listener database ID.</param>
        </member>
        <member name="T:GpsGate.Online.Net.Command.StartListenerCmdExe">
            <summary>
            Command to start listener.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartListenerCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartListenerCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartListenerCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartListenerCmdExe.Commit">
            <summary>
            Starts listener
            </summary>
            <exception cref="T:System.ArgumentException">Syntax error in arguments</exception>
            <exception cref="T:GpsGate.Online.GateCmdException">Could not start listener</exception>
        </member>
        <member name="P:GpsGate.Online.Net.Command.StartListenerCmdExe.Name">
            <summary>
            Returns "_StartListener"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Command.StartListenerCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.StartProviderCmdBuilder">
            <summary>
            _StartProvider. Starts provider in service.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartProviderCmdBuilder.#ctor(System.Int32)">
            <summary>
            Command to start a provider
            </summary>
            <param name="iListenerID">Provider database ID.</param>
        </member>
        <member name="T:GpsGate.Online.Net.Command.StartProviderCmdExe">
            <summary>
            Command to start provider.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartProviderCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartProviderCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartProviderCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StartProviderCmdExe.Commit">
            <summary>
            Starts provider
            </summary>
            <exception cref="T:System.ArgumentException">Syntax error in arguments</exception>
            <exception cref="T:GpsGate.Online.GateCmdException">Could not start provider</exception>
        </member>
        <member name="P:GpsGate.Online.Net.Command.StartProviderCmdExe.Name">
            <summary>
            Returns "_StartProvider"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Command.StartProviderCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.StopListenerCmdBuilder">
            <summary>
            _StopListener
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopListenerCmdBuilder.#ctor(System.Int32)">
            <summary>
            Create command.
            </summary>
            <param name="iListenerID">Database ID of listener to be stopped</param>
        </member>
        <member name="T:GpsGate.Online.Net.Command.StopListenerCmdExe">
            <summary>
            Command to stop listener.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopListenerCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopListenerCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopListenerCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopListenerCmdExe.Commit">
            <summary>
            Stops listener
            </summary>
            <exception cref="T:System.ArgumentException">Syntax error in arguments</exception>
            <exception cref="T:GpsGate.Online.GateCmdException">Could not stop listener</exception>
        </member>
        <member name="P:GpsGate.Online.Net.Command.StopListenerCmdExe.Name">
            <summary>
            Returns "_StopListener"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Command.StopListenerCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.StopProviderCmdBuilder">
            <summary>
            _StopProvider
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopProviderCmdBuilder.#ctor(System.Int32)">
            <summary>
            Create command.
            </summary>
            <param name="iListenerID">Database ID of provider to be stopped</param>
        </member>
        <member name="T:GpsGate.Online.Net.Command.StopProviderCmdExe">
            <summary>
            Command to stop provider.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopProviderCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopProviderCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            NOP
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopProviderCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.StopProviderCmdExe.Commit">
            <summary>
            Stops provider
            </summary>
            <exception cref="T:System.ArgumentException">Syntax error in arguments</exception>
            <exception cref="T:GpsGate.Online.GateCmdException">Could not stop provider</exception>
        </member>
        <member name="P:GpsGate.Online.Net.Command.StopProviderCmdExe.Name">
            <summary>
            Returns "_StopProvider"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Command.StopProviderCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.UpdateListenerCmdBuilder">
            <summary>
            _UpdateListener. Command to update listener properties.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateListenerCmdBuilder.#ctor(GpsGate.Online.Net.NmeaListenerBag)">
            <summary>
            Command to update listener properties.
            </summary>
            <param name="bag"></param>
        </member>
        <member name="T:GpsGate.Online.Net.Command.UpdateListenerCmdExe">
            <summary>
            _UpdateListener. Command to update listener paramaters.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateListenerCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateListenerCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Receives paramaters to be updated.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:GpsGate.Online.GateCmdException">Syntax error in paramater</exception>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateListenerCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateListenerCmdExe.Commit">
            <summary>
            Updates listener properties.
            </summary>
            <exception cref="T:System.ArgumentException">Syntax error in arguments</exception>
            <exception cref="T:GpsGate.Online.GateCmdException">Could not start listener</exception>
        </member>
        <member name="P:GpsGate.Online.Net.Command.UpdateListenerCmdExe.Name">
            <summary>
            Returns "_UpdateListener"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Command.UpdateListenerCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Command.UpdateProviderCmdBuilder">
            <summary>
            _UpdateProvider. Command to update provider properties.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateProviderCmdBuilder.#ctor(GpsGate.Online.Net.ProviderBag)">
            <summary>
            Command to update provider properties.
            </summary>
            <param name="bag"></param>
        </member>
        <member name="T:GpsGate.Online.Net.Command.UpdateProviderCmdExe">
            <summary>
            _UpdateProvider. Command to update provider paramaters. Will create new instance of the provided TypeID if the ProviderID does not exist.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateProviderCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateProviderCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Receives paramaters to be updated.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:GpsGate.Online.GateCmdException">Syntax error in paramater</exception>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateProviderCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Command.UpdateProviderCmdExe.Commit">
            <summary>
            Updates provider properties.
            </summary>
            <exception cref="T:System.ArgumentException">Syntax error in arguments</exception>
            <exception cref="T:GpsGate.Online.GateCmdException">Could not start provider</exception>
        </member>
        <member name="P:GpsGate.Online.Net.Command.UpdateProviderCmdExe.Name">
            <summary>
            Returns "_UpdateProvider"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Command.UpdateProviderCmdExe.Namespace">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ListenerDAOMSSQL">
            <summary>
            MSSQL adaptions
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ListenerDAOSQL">
            <summary>
            DAO to handle database paratamers for a Listener
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ListenerDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ListenerDAOSQL.LoadByTypeID(System.Int32)">
            <summary>
            Load listener paramaters from database.
            </summary>
            <param name="strName">Command name</param>
            <exception cref="T:Franson.DAO.NotFoundException">Database ID did not exist</exception>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ListenerDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load listener by database ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:Franson.DAO.NotFoundException">Database ID did not exist</exception>
        </member>
        <member name="P:GpsGate.Online.Net.DAO.ListenerDAOSQL.Enabled">
            <summary>
            listener.enabled
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.DAO.ListenerDAOSQL.ServerPort">
            <summary>
            listener.server_port
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.DAO.ListenerDAOSQL.ServerAddress">
            <summary>
            listener.server_address
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ListenerDAOMSSQL.#ctor">
            <summary>
            Create DAO object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ListenerDAOMySQL">
            <summary>
            MySQL adaptions
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ListenerDAOMySQL.#ctor">
            <summary>
            Create DAO object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ListenerReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ListenerReaderDAOSQL">
            <summary>
            Reades listener types from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ListenerReaderDAOSQL.LoadEnabled(System.Boolean)">
            <summary>
            See BO class
            </summary>
            <param name="bEnabled"></param>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ListenerReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns a SQL query that will return all Listener registered in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ListenerReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ListenerReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ListenerReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ProtocolDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ProtocolDAOSQL">
            <summary>
            Protocol DAO
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.DAO.ProtocolDAOSQL.m_strTableName">
            <summary>
            The name of DB table. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProtocolDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProtocolDAOSQL.LoadByID(System.Int32)">
            <summary>
            Do not use. protocol has a string ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotImplementedException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProtocolDAOSQL.LoadByID(System.String)">
            <summary>
            Protocol has a string as ID, and no integer. The ID of the default protocol is "_gpsgate_protocol".
            </summary>
            <param name="strID">ID for category. Default protocol is "_gpsgate_protocol"</param>
            <exception cref="T:GpsGate.Online.ProtocolNotFoundException">If no protocol by this ID is found</exception>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProtocolDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            The DB table does not have an auto increment int as ID.
            It has a string that has to be set before inserted into the DB.
            Therefore this method is overriden, to do nothing.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:GpsGate.Online.Net.DAO.ProtocolDAOSQL.ID">
            <summary>
            TrackCategory uses straing as ID, and not integer.
            </summary>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="P:GpsGate.Online.Net.DAO.ProtocolDAOSQL.StringID">
            <summary>
            Set or get category ID. Must be set when <see cref="!:Update"/> is called.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.DAO.ProtocolDAOSQL.Name">
            <summary>
            Name of protocol. E.g. "GpsGate Protocol"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.DAO.ProtocolDAOSQL.Description">
            <summary>
            Category description
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.DAO.ProtocolDAOSQL.AdapterBoType">
            <summary>
            .NET class name for protocol adapter.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProtocolDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ProtocolDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProtocolDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ProtocolVersionDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ProtocolVersionDAOSQL">
            <summary>
            ProtocolVersion DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProtocolVersionDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProtocolVersionDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ProtocolVersionDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProtocolVersionDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ProviderBagReaderDAO">
            <summary>
            Reader for provider bags.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProviderBagReaderDAO.GetByType(System.Type)">
            <summary>
            Return all providers of specified type.
            </summary>
            <param name="oType"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProviderBagReaderDAO.GetByInstanceID(System.Int32)">
            <summary>
            Return the provider of specified instance id.
            </summary>
            <param name="oType"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProviderBagReaderDAO.GetSqlCommand">
            <summary>
            Returns SQL string
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.DAO.ProviderBagWriterDAO">
            <summary>
            Updates and creates Providers from provider bags.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProviderBagWriterDAO.#ctor">
            <summary>
            Create
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProviderBagWriterDAO.LoadByID(System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.DAO.ProviderBagWriterDAO.Write(GpsGate.Online.Net.ProviderBag)">
            <summary>
            Writes or updates message provider. Updtaes are written to database without the need to call <see cref="!:Update"/>
            </summary>
            <param name="bag"></param>
            <exception cref="T:Franson.DAO.NotFoundException"></exception>
        </member>
        <member name="T:GpsGate.Online.Net.Email.EmailConnection">
            <summary>
            Base class for EmailConnections. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailConnection.#ctor(System.String)">
            <summary>
            Create email connection.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailConnection.DoProtocolToDevice(System.Byte[])">
            <summary>
            Sends email with subject only.
            </summary>
            <param name="arrData"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailConnection.EmailToDevice(GpsGate.Online.Net.Email.EmailMessage)">
            <summary>
            Sends an <see cref="T:GpsGate.Online.Net.Email.EmailMessage"/> to the device.
            </summary>
            <param name="email">Message to send</param>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailConnection.EmailToGpsGate(GpsGate.Online.Net.Email.EmailMessage)">
            <summary>
            Called when an Email has been received from an email device.
            Note: throws NotImplementedException. 
            </summary>
            <param name="email">Message received</param>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailConnection.Start">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailConnection.GetProvider">
            <summary>
            Returns the message provider used to send and receive messages over this connection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailConnection.Transport">
            <summary>
            returns "email"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailConnection.ClientAddress">
            <summary>
            Returns the Email address of the device associated to this connection.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Email.EmailListener">
            <summary>
            Listener for meila based protocols.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.MessageListener">
            <summary>
            Base class for all message based listeners. Like email, sms and satellite.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaListener">
            <summary>
            A NmeaListener listens for data coming in from some source, in some protocol
            and creates one object derived from <see cref="T:GpsGate.Online.Net.NmeaConnection"/> for each connection (session)
            The listener must be registered using <see cref="M:GpsGate.Online.GateApplication.RegisterListener(System.Int32)"/>
            to be activated.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaListener.m_oStarter">
            <summary>
            Used for start/stop lock.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.#ctor">
            <summary>
            Called by constructor in derived class.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.OnStart">
            <summary>
            Start listener. Call <see cref="M:GpsGate.Online.Net.NmeaListener.StartConnection(GpsGate.Online.Net.NmeaConnection)"/> for each new <see cref="T:GpsGate.Online.Net.NmeaConnection"/> that is
            established by listener.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.OnStop">
            <summary>
            Stop listener.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.Start">
            <summary>
            Do not override this method. Override <see cref="M:GpsGate.Online.Net.NmeaListener.OnStart"/> to startup inherited listener.
            </summary>
            <exception cref="T:Franson.Threading.LockTimeoutException">There was a dead lock trying to start up listener.</exception>
            <exception cref="T:System.Exception">Any exception from overrideen OnStart method</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.Stop">
            <summary>
            Disposes all active connections and calls <see cref="M:GpsGate.Online.Net.NmeaListener.OnStop"/>
            </summary>
            <exception cref="T:Franson.Threading.LockTimeoutException">There was a dead lock trying to stop listener.</exception>
            <exception cref="T:System.Exception">Any exception from overrideen OnStop method</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.GetOutgoingConnection(GpsGate.Online.Directory.Device,Franson.Directory.User)">
            <summary>
            Return connection with matching device. Returns null if no active connection found.
            </summary>
            <param name="devTarget">Device this connection should send to.</param>
            <param name="userSender">Sender - user that initiated this outgoing connection.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.GetIncomingConnection(GpsGate.Online.Directory.Device)">
            <summary>
            Returns any active connection for specified device.
            </summary>
            <param name="devTarget"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.StartConnection(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Must be called by derived class when a new NmeaConnection has been established.
            Calls <see cref="M:GpsGate.Online.Net.NmeaConnection.Start"/>
            </summary>
            <param name="nmeaConn"></param>
            <exception cref="T:System.Exception">Exception from connection when calling Start()</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.FindConnection(System.Object)">
            <summary>
            Returns first connection that equals oConn. Returns null if there is no match.
            FindConnection uses <see cref="M:GpsGate.Online.Net.NmeaConnection.Equals(System.Object)"/> to determine if two connections are the same.
            Each type of connection class can impement its own criteria for a macth. <see cref="!:UdpConnection"/>
            checks the IPEndPoint. <see cref="!:SmsConnection"/> checks cleint MSISDN and so on.
            </summary>
            <param name="oConn"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Called when this command is installed in the system.
            Will insert a record in the "listener" table. The listener will be disabled by default.
            Override this method to set default configuration, like port number.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaListener.m_timerConnections">
            <summary>
            Timer that removes disposed or inactive connections from list.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaListener.m_iCleanUpInterval">
            <summary>
            Cleanup interval. Default 5 minutes.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.Equals(System.Object)">
            <summary>
            If object is int, true is returned if obj equals the database ID.
            If object is Type, true is returned if obj equals the listener type.
            If object is NmeaListener, true is returned if obj is the same object as this.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListener.GetHashCode">
            <summary>
            Returns base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListener.NmeaListenerBag">
            <summary>
            Returns or sets properties as a bag.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to set properties and listener is started.</exception>
            <exception cref="T:System.FormatException">Server address is not a valid IP address.</exception>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListener.ActiveConnectionCount">
            <summary>
            Returns number of active connections.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListener.Enabled">
            <summary>
            If true this listener will be started when the NMEA service starts.
            This property does not indicate if the listener is started of not. <see cref="P:GpsGate.Online.Net.NmeaListener.IsStarted"/> to check if the listener is started.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to set properties and listener is started.</exception>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListener.ServerAddress">
            <summary>
            Server address. The listener will bind to this address when started.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to set properties and listener is started.</exception>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListener.ServerPort">
            <summary>
            Server port. The listener will bind to this address when started.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to set properties and listener is started.</exception>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaListener.NewAuthenticatedConnection">
            <summary>
            Called when a new NmeaConnection has be authenticated.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaListener.NewConnection">
            <summary>
            Called when a new connection to server is established. This connection is not yet authenticated.
            This event is called before the <see cref="M:GpsGate.Online.Net.NmeaConnection.Start"/> is called.
            </summary>
        </member>
        <member name="E:GpsGate.Online.Net.NmeaListener.Disconnected">
            <summary>
            Called when a connection is disconnected. Will be called for all connections independent on authentication status.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListener.Transport">
            <summary>
            Returns "sms", "tcp", "udp", "sat", etc. depending on what transport layer the derived listener supports.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListener.ProtocolID">
            <summary>
            Returns protocol identifier. One listener can only handle one protocol over one transport type.
            E.g. "GpsGate", "StarsNav", "GlobalSat", "TeamSharp", "Teltonika".
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListener.IsStarted">
            <summary>
            Returns true when listener is successfully started.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListener.CleanUpInterval">
            <summary>
            Time in milliseconds in which the list of connections is cleaned for inactive connections.
            Disposed connections will be removed, and connections that haven't received any valid NMEA data
            for CleanUpInterval will be disposed and removed.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaListener.NewAuthenticatedConnectionHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaListener.NewAuthenticatedConnection"/>
            </summary>
            <param name="nmeaListener">NmeaListener the new connection comes from</param>
            <param name="nmeaConn">Authenticated connection</param>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaListener.NewConnectionHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaListener.NewConnection"/>
            </summary>
            <param name="?"></param>
            <param name="nmeaConn"></param>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaListener.DisconnectedHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.Net.NmeaListener.Disconnected"/>
            </summary>
            <param name="nmeaListener"></param>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.MessageListener.IsCompatible(Franson.Message.ProviderMessage)">
            <summary>
            Must be implemented by a message based listener
            Will be called by the listener manager. If the listener recognizes the message true should be returned.
            </summary>
            <param name="message"></param>
            <returns>true if message is recognized, otherwise false.</returns>
        </member>
        <member name="M:GpsGate.Online.Net.MessageListener.MessageFromProvider(Franson.Message.ProviderMessage)">
            <summary>
            Must be implemented by a message based listener
            Should forward the message to the right connection object, which in turn should process the message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailListener.IsCompatible(Franson.Message.ProviderMessage)">
            <summary>
            Returns true if client email address matches a register device with this listeners protocol ID.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailListener.CreateEmailConnection(System.String)">
            <summary>
            Override to create email connection for specific protocol.
            </summary>
            <param name="strEmail"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailListener.GetOutgoingConnection(GpsGate.Online.Directory.Device,Franson.Directory.User)">
            <summary>
            Returns outgoing email conenction.
            </summary>
            <param name="devTarget"></param>
            <param name="userSender"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailListener.MessageFromProvider(Franson.Message.ProviderMessage)">
            <summary>
            Pass message from EmailProvider to right connection.
            
            TODO: Implement, need POP
            </summary>
            <param name="message"></param>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailListener.OnStart">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailListener.OnStop">
            <summary>
            NOP
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailListener.Transport">
            <summary>
            returns "email"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Email.EmailMessage">
            <summary>
            Email message.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailMessage.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new Email message.
            </summary>
            <param name="strFrom">Sender email address.</param>
            <param name="strTo">Recipiant email address.</param>
            <param name="strSubject">Subject of this mail message.</param>
            <param name="strBody">Message body.</param>
            <param name="bIsBodyHtml">Value whether the mail message body is in Html</param>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailMessage.ToByteArray">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Not implemented. I.E. cannot use Connection.ProtocolToDevice(byte[]) instead use EmailConnectino.EmailToDevice()</exception>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailMessage.ToString">
            <summary>
            String representation. 
            E.g: From: foo@bar.com To: bar@foo.com Subject: A subject
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailMessage.GetHashCode">
            <summary>
            Get the hash from: "From", "To", "Subject", "Body" and "IsBodyHtml"
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailMessage.From">
            <summary>
            Get the sender email address.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailMessage.To">
            <summary>
            Get the recipiant of this mail message.
            Note. Same as ClientAddress
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailMessage.Message">
            <summary>
            Get the message body.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailMessage.Subject">
            <summary>
            Get the subject of this mail message.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailMessage.ClientAddress">
            <summary>
            Get the recipiant of this mail message.
            Note. Same as To
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailMessage.IsBodyHtml">
            <summary>
            Get a value whether the mail message body is in Html.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailMessage.TimestampClient">
            <summary>
            Timestamp in UTC when message was created.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailMessage.Transport">
            <summary>
            Returns "email"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Email.EmailMessageProvider">
            <summary>
            All email providers should inherit from this. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.EmailMessageProvider.SendEmail(GpsGate.Online.Net.Email.EmailMessage)">
            <summary>
            Sends an email.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Email.EmailMessageProvider.SMTPSettings">
            <summary>
            SMTP server settings.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Email.PlainEmailConnection">
            <summary>
            Email connection for plain text email messages.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.PlainEmailConnection.#ctor(System.String)">
            <summary>
            Creates a new PlainEmailConnection.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.PlainEmailConnection.CreateProtocol">
            <summary>
            Creates a PlainEmailProtocol.
            </summary>
            <returns>returns <see cref="T:GpsGate.Online.Net.Email.PlainEmailProtocol"/></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Email.PlainEmailConnection.GetProvider">
            <summary>
            Get the provider for email delivery.
            </summary>
            <returns>returns <see cref="T:GpsGate.Online.Net.Email.SmtpPopEmailMessageProvider"/></returns>
        </member>
        <member name="T:GpsGate.Online.Net.Email.PlainEmailListener">
            <summary>
            Listener for plain text email protocols.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.PlainEmailListener.OnStart">
            <summary>
            Start the email listener.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.PlainEmailListener.CreateEmailConnection(System.String)">
            <summary>
            Returns a new <see cref="T:GpsGate.Online.Net.Email.PlainEmailConnection"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Email.PlainEmailListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Overide install and enables this Listener by default.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Email.PlainEmailListener.ProtocolID">
            <summary>
            return "Plain"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Email.PlainEmailProtocol">
            <summary>
            Plain text email protocol.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.PlainProtocol">
            <summary>
            Base class for plain text protocol.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.PlainProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Creates a new plain text based protocol.
            Default constructor.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="P:GpsGate.Online.Net.PlainProtocol.UseChecksum">
            <summary>
            returns false.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.PlainProtocol.StringID">
            <summary>
            returns "Plain"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.PlainEmailProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Creates a new PlainEmailProtocol
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Net.Email.SmtpPopEmailMessageProvider">
            <summary>
            Email provider. Sends and received email using one SMTP and POP server.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.SmtpPopEmailMessageProvider.Install(Franson.Reflection.LoadableType)">
            <summary>
            Enables this provider upon install.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Email.SmtpPopEmailMessageProvider.DoStart">
            <summary>
            Start the email provider. Polls the POP server.
            Note: NotImplemented
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Email.SmtpPopEmailMessageProvider.DoStop">
            <summary>
            Stop the email provider.
            /// Note: NotImplemented
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Http.GpsGateHttpConnection">
            <summary>
            Handles incoming GpsGate XML Protocol requestes over HTTP.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Net.Http.HttpNmeaConnection">
            <summary>
            Base class for all HTTP based connections to devices.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Net.Http.HttpNmeaConnection.#ctor(System.Net.HttpListenerContext)">
            <summary>
            Create incoming HTTP connection.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Http.HttpNmeaConnection.DoDispose">
            <summary>
            Closes response object
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Http.HttpNmeaConnection.DoProtocolToDevice(System.Byte[])">
            <summary>
            Not implemented.
            </summary>
            <param name="arrData"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:GpsGate.Online.Net.Http.HttpNmeaConnection.Context">
            <summary>
            Returns request / response context.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Http.HttpNmeaConnection.ClientAddress">
            <summary>
            Returns device IP address + port as string.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Http.HttpNmeaConnection.Transport">
            <summary>
            Returns "http"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Http.GpsGateHttpConnection.#ctor(System.Net.HttpListenerContext)">
            <summary>
            Create GpsGate HTTP connection.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Http.GpsGateHttpConnection.CreateProtocol">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Net.Http.GpsGateHttpProtocol"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.Http.GpsGateHttpListener">
            <summary>
            Implements GpsGate Protocol listener over HTTP.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:GpsGate.Online.Net.Http.HttpNmeaListener">
            <summary>
            Base class for all HTTP protocol listeners.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Net.Http.HttpNmeaListener.OnStart">
            <summary>
            Called when http listener is started.
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">Needs XP SP2, Win2003 or later.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Configuration error.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.Http.HttpNmeaListener.OnStop">
            <summary>
            Stop HTTP listener
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Http.HttpNmeaListener.CreateHttpConnection(System.Net.HttpListenerContext)">
            <summary>
            Override to return connection object for specific protocol.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Http.HttpNmeaListener.GetOutgoingConnection(GpsGate.Online.Directory.Device,Franson.Directory.User)">
            <summary>
            Returns null. Outgoing connection not supported.
            </summary>
            <param name="devTarget"></param>
            <param name="userSender"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Http.HttpNmeaListener.HttpPath">
            <summary>
            Override and return the path this listener should listen to. The returned path should not include any start or end "/".
            E.g. return "Holux" to listen to "http://serveraddress:xx/holux"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Http.HttpNmeaListener.Transport">
            <summary>
            Returns "http"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Http.HttpNmeaListener.UseServerHostname">
            <summary>
            Override and return true if ServerHostname should be used when binding listener.
            By default false is returned and the listener binds to *:port
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Http.GpsGateHttpListener.CreateHttpConnection(System.Net.HttpListenerContext)">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Net.Http.GpsGateHttpConnection"/> object.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Http.GpsGateHttpListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Called when listener type is installed.
            Sets default server port to 8008
            Listener enabled by default.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Http.GpsGateHttpListener.HttpPath">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Http.GpsGateHttpListener.ProtocolID">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Http.GpsGateHttpProtocol.TranslateToDevice(Franson.Nmea.Sentence)">
            <summary>
            Writes back data to HTTP connection.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Http.GpsGateHttpProtocol.UseChecksum">
            <summary>
            Returns false. Does not need checksum.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Http.GpsGateHttpProtocol.StringID">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Http.GpsGateXmlProtocol">
            <summary>
            Implements GpsGate HTTP Protocol.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Net.Http.GpsGateXmlProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Http.GpsGateXmlProtocol.ProcessXML(System.Xml.XmlReader,System.Xml.XmlWriter)">
            <summary>
            Processes incoming GpsGate XML and returns answer to each command.
            </summary>
            <param name="xmlFromDevice"></param>
            <param name="xmlToDevice"></param>
            <exception cref="T:Franson.Nmea.NmeaParserException">Could not parse data.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.Http.GpsGateXmlProtocol.TranslateToDevice(Franson.Nmea.Sentence)">
            <summary>
            Translate from from GpsGate NMEA to GpsGate XML and send back to client.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Http.GpsGateXmlProtocol.TranslateFromDevice(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not implemented.
            </summary>
            <param name="arrData"></param>
            <param name="iStart"></param>
            <param name="iLength"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:GpsGate.Online.Net.Http.GpsGateXmlProtocol.EncapsulateErrors">
            <summary>
            Return FRRET/FRERR response on error.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Http.GpsGateXmlProtocol.StringID">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommAuthenticate">
            <summary>
            Orbcomm AUTHENTICATE message.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommMessage">
            <summary>
            Base class for all Orbcomm messages
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommMessage.#ctor(System.Xml.XmlReader)">
            <summary>
            Starts parsing
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommMessage.ParseElement(System.Xml.XmlReader)">
            <summary>
            Called for each new element, that the base class does not recognize
            </summary>
            <param name="xmlReader"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommMessage.ToString">
            <summary>
            Returns description for log purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommMessage.RESULT">
            <summary>
            Value of RESULT element.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommMessage.EXTEND_DESC">
            <summary>
            Value of EXTEND_DESC element.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommMessage.Message">
            <summary>
            override.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommMessage.ClientAddress">
            <summary>
            override.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommMessage.TimestampClient">
            <summary>
            override.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommMessage.Transport">
            <summary>
            Returns "orb"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommAuthenticate.#ctor(System.Xml.XmlReader)">
            <summary>
            Create from XML stream
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommAuthenticate.ParseElement(System.Xml.XmlReader)">
            <summary>
            Parses AUTHENTICATE specific elements.
            </summary>
            <param name="xmlReader"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommAuthenticate.ToString">
            <summary>
            Returns description for log purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommAuthenticate.SESSION_ID">
            <summary>
            SESSION_ID element.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommConnection">
            <summary>
            All orbcomm connections should inherit from this class.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommConnection.#ctor(System.String)">
            <summary>
            Create new connection over ORBCOMM
            </summary>
            <param name="strMessageFrom"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommConnection.Start">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommConnection.DoProtocolToDevice(System.Byte[])">
            <summary>
            NOP
            </summary>
            <param name="arrData"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommConnection.Equals(System.Object)">
            <summary>
            Used for FindConenction
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommConnection.Transport">
            <summary>
            Returns "orb"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommConnection.ClientAddress">
            <summary>
            Returns "MESSAGE_FROM"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommListener">
            <summary>
            Listener for Orbcomm based protocols.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommListener.CreateOrbcommConnection(System.String)">
            <summary>
            Create new Orbcomm connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommListener.GetOutgoingConnection(GpsGate.Online.Directory.Device,Franson.Directory.User)">
            <summary>
            Outgoing connections not supoprted yet. Returns null.
            </summary>
            <param name="devTarget"></param>
            <param name="userSender"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommListener.IsCompatible(Franson.Message.ProviderMessage)">
            <summary>
            Returns true if a listener that handles a device with IMEI = MESSAGE_FROM and matching ProtocolID
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommListener.MessageFromProvider(Franson.Message.ProviderMessage)">
            <summary>
            Pass on message to right connection.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommListener.OnStart">
            <summary>
            Starts listener. NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommListener.OnStop">
            <summary>
            Stops listener. NOP
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommListener.Transport">
            <summary>
            Returns "orb"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommLogout">
            <summary>
            Orbcomm LOGOUT message.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommLogout.#ctor(System.Xml.XmlReader)">
            <summary>
            Create from XML stream
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommLogout.ParseElement(System.Xml.XmlReader)">
            <summary>
            NOP. Returns true.
            </summary>
            <param name="xmlReader"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommMessageProvider">
            <summary>
            Message provider for Orbcomm. Can route message from one ORBCOMM account to/from several different device and protocol types.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.QueuedMessageProvider">
            <summary>
            Message provider with message queues for in and outgoing messages.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.QueuedMessageProvider.DEFAULT_RETRY_INTERVAL">
            <summary>
            How often to retry sending queued messages.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.QueuedMessageProvider.DEFAULT_KILL_INTERVAL">
            <summary>
            Intervall before a queued item is removed from queue.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.QueuedMessageProvider.m_queueIn">
            <summary>
            Queue for incoming messages
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.QueuedMessageProvider.m_queueOut">
            <summary>
            Queue for outgoing messages
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.QueuedMessageProvider.m_managerOut">
            <summary>
            Manager for outgoing queue.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.QueuedMessageProvider.m_listThreadIncoming">
            <summary>
            List of incoming Thread IDs
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.ProcessPending(Franson.Message.Queue,Franson.Message.QueueItem,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="queue"></param>
            <param name="item"></param>
            <param name="oArgument"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.Send(Franson.Message.Queue,Franson.Message.QueueItem)">
            <summary>
            Handles incoming messages. Calls base.OnMessageReceived()
            Do not override this method. Instead override <see cref="M:GpsGate.Online.Net.QueuedMessageProvider.SendOutgoing(Franson.Message.ProviderMessage)"/> to send outgoing messages.
            </summary>
            <param name="queue"></param>
            <param name="item"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.IsOnline(Franson.Message.Queue)">
            <summary>
            Should return true if provider is online and can send outgoing messages.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.DoStart">
            <summary>
            NOP.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.DoStop">
            <summary>
            Must be called when provider stops.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.SetIncomingQueue(Franson.Message.MessageQueue)">
            <summary>
            Queue used for incoming messages.
            </summary>
            <param name="queue"></param>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.OnMessageReceived(Franson.Message.ProviderMessage)">
            <summary>
            Called by derived class when a new incoming message arrives to the provider.
            </summary>
            <param name="msgIncomming"></param>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.ResetOutgoingQueue(System.Int32)">
            <summary>
            Marks all queued and pending messages from all queues for device as failed.
            </summary>
            <param name="devTarget"></param>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.QueueMessageForSending(Franson.Message.ProviderMessage,GpsGate.Online.Directory.Device,Franson.Directory.User)">
            <summary>
            Called by ProviderManager to send message to device. Message is queued, and <see cref="M:GpsGate.Online.Net.QueuedMessageProvider.Send(Franson.Message.Queue,Franson.Message.QueueItem)"/> is called.
            </summary>
            <param name="provMsg"></param>
            <param name="devTarget"></param>
            <param name="userSender">Sender of message.</param>
            <exception cref="T:System.ArgumentException">Some argument was null.</exception>
            <returns>True if the message was delivered. False if it was queued.</returns>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.SendOutgoing(Franson.Message.ProviderMessage)">
            <summary>
            Override this method to send outgoing messages.
            </summary>
            <param name="provMsg"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.QueuedMessageProvider.RegisterOutgoingQueue(Franson.Message.MessageQueue)">
            <summary>
            Different provider can register queues here. The brooker will route messages from <see cref="!:QueueMessage"/>
            to the first registered queue that accepts the message.
            
            (Currently only one queue exitsts)
            </summary>
            <param name="msgQueue"></param>
        </member>
        <member name="P:GpsGate.Online.Net.QueuedMessageProvider.QueueSendMode">
            <summary>
            Determines how outgoing messages are queued. Default <see cref="!:QueueSendMode.AsyncOnReply"/>
            Override to change.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommMessageProvider.DoStart">
            <summary>
            Starts timers that poll data.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommMessageProvider.DoStop">
            <summary>
            Stop ORBOCOMM connections.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommMessageProvider.m_executeWebService(System.Object)">
            <summary>
            Called one for each web service per interval.
            </summary>
            <param name="oWebService"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommMessageProvider.Install(Franson.Reflection.LoadableType)">
            <summary>
            Installs 
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommMessageFlag">
            <summary>
            Values of MESSAGE_FLAG element
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommMessageStatus">
            <summary>
            Values of MESSAGE_STATUS element
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommMessageEncoding">
            <summary>
            Values of MESSAGE_ENCODING element
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommMessageDirection">
            <summary>
            Values of MESSAGE_DIRECTION element
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommParser">
            <summary>
            Parses ORBCOMM XML stream to <see cref="T:GpsGate.Online.Net.Orbcomm.OrbcommMessage"/> objects.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommParser.ParseDateTime(System.String)">
            <summary>
            Parses a string with format "2009/02/19 15:44:36"
            </summary>
            <param name="strDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommParser.ParseMessageEncoding(System.String)">
            <summary>
            Parse MESSAGE_ENCODING
            </summary>
            <param name="strField"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommParser.ParseMessageFlag(System.String)">
            <summary>
            Parse MESSAGE_FLAG
            </summary>
            <param name="strField"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommParser.ParseMessageDirection(System.String)">
            <summary>
            Parse MESSAGE_DIRECTION
            </summary>
            <param name="strField"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommParser.ParseMessageStatus(System.String)">
            <summary>
            Parse MESSAGE_STATUS
            </summary>
            <param name="strField"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommParser.#ctor(System.Xml.XmlReader)">
            <summary>
            Create parser
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommParser.NextMessage">
            <summary>
            Returns new message or null if there are no more messages in stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage">
            <summary>
            One message in a Orbcomm RETRIEVEMESSAGES reply.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.#ctor(System.Xml.XmlReader)">
            <summary>
            Create MESSAGE object.
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.ParseElement(System.Xml.XmlReader)">
            <summary>
            Parses a MESSAGE inside RETRIEVEMESSAGES. Returns false (not continue) if a MESSAGE is the next element.
            </summary>
            <param name="xmlReader"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.ToString">
            <summary>
            Returns string for logging
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_ID">
            <summary>
            MESSAGE_ID element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_TIME">
            <summary>
            MESSAGE_TIME element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_FROM">
            <summary>
            MESSAGE_FROM element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_TO">
            <summary>
            MESSAGE_TO element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_SUBJECT">
            <summary>
            MESSAGE_SUBJECT element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_ENCODING">
            <summary>
            MESSAGE_ENCODING element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_BODY">
            <summary>
            MESSAGE_BODY element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_FLAG">
            <summary>
            MESSAGE_FLAG element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_STATUS">
            <summary>
            MESSAGE_STATUS element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.NETWORK_ID">
            <summary>
            NETWORK_ID element.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.MESSAGE_DIRECTION">
            <summary>
            MESSAGE_DIRECTION element
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.ClientAddress">
            <summary>
            Returns "MESSAGE_FROM"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.Message">
            <summary>
            Returns MESSAGE_BODY if exists else MESSAGE_SUBJECT
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommRetrieveMessage.TimestampClient">
            <summary>
            Returns MESSAGE_TIME
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Orbcomm.OrbcommSetMessageFlag">
            <summary>
            Orbcomm SETMESSAGEFLAG message.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommSetMessageFlag.#ctor(System.Xml.XmlReader)">
            <summary>
            Create from stream.
            </summary>
            <param name="xmlReader"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Orbcomm.OrbcommSetMessageFlag.ParseElement(System.Xml.XmlReader)">
            <summary>
            NOP. Returns true.
            </summary>
            <param name="xmlReader"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Orbcomm.OrbcommSetMessageFlag.MESSAGES">
            <summary>
            MESSAGE element
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Sms.GpsGateSmsConnection">
            <summary>
            Handles GpsGate formated SMS messages.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.Net.Sms.SmsConnection">
            <summary>
            Base class for connetions that uses SMS for data transfer.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsConnection.#ctor(Franson.Message.MSISDN)">
            <summary>
            Incoming connection.
            </summary>
            <param name="msisdn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsConnection.Start">
            <summary>
            Called when listener takes connection in use.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsConnection.DoDispose">
            <summary>
            Called when connection will not be used anymore.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsConnection.DoProtocolToDevice(System.Byte[])">
            <summary>
            Builds a <see cref="T:Franson.Message.Sms.SmsMessage"/> and calls <see cref="M:GpsGate.Online.Net.Sms.SmsConnection.SmsToDevice(Franson.Message.Sms.SmsMessage,System.Boolean)"/>.
            The byte array of data is assumed to be ASCII encoded.
            </summary>
            <param name="arrData"></param>
            <param name="bRequiresAck">Set to true if this SMS requires an ack before more data can be sent back to device.</param>
            <exception cref="T:GpsGate.Online.MessageQueuedException">If message was queued for later delivery</exception>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsConnection.DoProtocolToDevice(Franson.Message.ProviderMessage)">
            <summary>
            Send message to device.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsConnection.SmsToDevice(Franson.Message.Sms.SmsMessage,System.Boolean)">
            <summary>
            Queues outgoing message. This is a legacy method. Use <see cref="!:ProtocolToDevice"/> instead.
            </summary>
            <param name="smsMsg"></param>
            <param name="bRequiresAck">Argument is ignored</param>
            <exception cref="T:System.InvalidOperationException">MSISDN mismatches between SMS and connection</exception>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsConnection.Equals(System.Object)">
            <summary>
            If argument is a <see cref="P:GpsGate.Online.Net.Sms.SmsConnection.MSISDN"/> with the same number as this SMS connection, true is returned.
            If argument is the same as this, true is returned.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsConnection.ToString">
            <summary>
            Returns a string suitable for logfiles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsConnection.GetHashCode">
            <summary>
            Calls base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Sms.SmsConnection.MSISDN">
            <summary>
            Phone number from sender.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Sms.SmsConnection.ClientAddress">
            <summary>
            Returns MSISDN
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Sms.SmsConnection.Transport">
            <summary>
            Returns "sms"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.GpsGateSmsConnection.#ctor(Franson.Message.MSISDN)">
            <summary>
            Create connection for incoming SMS.
            </summary>
            <param name="numDevice">Device phone number.</param>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.GpsGateSmsConnection.CreateProtocol">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Net.Sms.GpsGateSmsProtocol"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.Sms.GpsGateSmsListener">
            <summary>
            GpsGate SMS listener.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:GpsGate.Online.Net.Sms.SmsListener">
            <summary>
            Base class for all listeners that handles SMS.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsListener.CreateSmsConnection(Franson.Message.MSISDN)">
            <summary>
            Deriving classes implements this to return SmsConnection of proper type like StarsNavSmsConnection
            </summary>
            <param name="messagePipe">Queue to transport messages to the connection through</param>
            <returns>Connection ex. StarsNavSmsConnection</returns>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsListener.GetOutgoingConnection(GpsGate.Online.Directory.Device,Franson.Directory.User)">
            <summary>
            Returns existing SMS connection, or creates new.
            </summary>
            <param name="devTarget"></param>
            <param name="userSender"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsListener.IsCompatible(Franson.Message.ProviderMessage)">
            <summary>
            Returns true if client phone number matches a register device with this listeners protocol ID.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsListener.OnStart">
            <summary>
            Starts listener. NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsListener.OnStop">
            <summary>
            Stops listener. NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.SmsListener.MessageFromProvider(Franson.Message.ProviderMessage)">
            <summary>
            If this listener claims to recognize a message <see cref="M:GpsGate.Online.Net.Sms.SmsListener.IsCompatible(Franson.Message.ProviderMessage)"/>, the ListenerManager call this method
            and pass the ProviderMessage by parameter. 
            
            SmsListener will Enqueue the message to the worker queue, which acts like a buffer between the listener and
            the connections. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Sms.SmsListener.Transport">
            <summary>
            Returns "sms"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.GpsGateSmsListener.CreateSmsConnection(Franson.Message.MSISDN)">
            <summary>
            Returns a new <see cref="T:GpsGate.Online.Net.Sms.GpsGateSmsConnection"/> object.
            </summary>
            <param name="msisdn"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.GpsGateSmsListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Enables GpsGate SMS Listener by default.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Sms.GpsGateSmsListener.ProtocolID">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Sms.GpsGateSmsProtocol">
            <summary>
            GpsGate SMS Protocol. Handles incoming SMS using GpsGate Protocol.
            Not implemented yet.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.GpsGateSmsProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Create protocol adapter for incoming SMS message.
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.GpsGateSmsProtocol.TranslateToDevice(Franson.Nmea.Sentence)">
            <summary>
            Sends NMEA sentence unchanged to client.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Sms.GpsGateSmsProtocol.UseChecksum">
            <summary>
            SMS messages does not require checksum.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Sms.GpsGateSmsProtocol.StringID">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Sms.PlainSmsConnection">
            <summary>
            A plain text SMS connection.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.PlainSmsConnection.#ctor(Franson.Message.MSISDN)">
            <summary>
            Creates a new incoming PlainSmsConnection.
            </summary>
            <param name="msisdn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.PlainSmsConnection.CreateProtocol">
            <summary>
            Returns a PlainSMSProtocol.
            </summary>
            <returns>new PlainSMSProtocol</returns>
        </member>
        <member name="T:GpsGate.Online.Net.Sms.PlainSmsListener">
            <summary>
            Listener for plain text sms.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.PlainSmsListener.OnStart">
            <summary>
            Start the email listener.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.PlainSmsListener.CreateSmsConnection(Franson.Message.MSISDN)">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Net.Sms.PlainSmsConnection"/> object
            </summary>
            <param name="msisdn"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.PlainSmsListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Overide install and enables this Listener by default.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Sms.PlainSmsListener.ProtocolID">
            <summary>
            The protocol that this listener listens to. Returns "Plain".
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Sms.PlainSmsProtocol">
            <summary>
            Plain text SMS protocol.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Sms.PlainSmsProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Creates a new PlainSMSProtocol.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.Net.Tcp.GpsGateTcpConnection">
            <summary>
            Handles a connection to a device/client that uses GpsGate Protocol over TCP/IP
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Tcp.TcpConnection">
            <summary>
            An NmeaConnection that uses a stream - e.g. TCP/IP socket - to communicate with a client
            using the GpsGate NMEA protocol.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Online.Net.Tcp.TcpConnection.m_streamClient">
            <summary>
            The data stream. The stream can not be assumed to be thread safe!!
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Tcp.TcpConnection.m_bStarted">
            <summary>
            Set to true when <see cref="M:GpsGate.Online.Net.Tcp.TcpConnection.Start"/> is called.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.TcpConnection.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Create TCP connection from socket.
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.TcpConnection.#ctor(System.IO.Stream)">
            <summary>
            Takes a general stream rather than a TCP/IP connection. Can typically be used in unit tests.
            The stream will be authenticated by NmeaConenction.
            </summary>
            <param name="streamClient">Stream to read and write data to</param>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.TcpConnection.Start">
            <summary>
            When Start() is called. NmeaConnection will start reading data from the stream specified in the constructor.
            Make sure you have all event handlers set before Start() is called.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.TcpConnection.ToString">
            <summary>
            Returns username@TcpConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.TcpConnection.DoProtocolToDevice(System.Byte[])">
            <summary>
            Write data to NmeaConnection. Will block if last WriteAsync() hasn't finished yet.
            </summary>
            <param name="arrData"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.TcpConnection.DoDispose">
            <summary>
            Called when connection is disposed. Will close socket.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Tcp.TcpConnection.ClientAddress">
            <summary>
            Returns IP address + port
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Tcp.TcpConnection.Transport">
            <summary>
            Returns "tcp"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Tcp.TcpConnection.Socket">
            <summary>
            Active socket.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.GpsGateTcpConnection.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Create incoming connection
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.GpsGateTcpConnection.CreateProtocol">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Net.GpsGateTcpProtocol"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.GpsGateTcpConnection.GpsGateToDevice(System.Byte[])">
            <summary>
            Sends data back to client / device.
            </summary>
            <param name="arrData"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.GpsGateTcpConnection.DoLogin(System.String,System.String,System.String,GpsGate.Online.GateUser)">
            <summary>
            Checks _SYSTEM user login.
            </summary>
            <param name="strDomain"></param>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
            <param name="gateUser"></param>
        </member>
        <member name="T:GpsGate.Online.Net.Tcp.GpsGateTcpListener">
            <summary>
            Listener that handles incoming GpsGate Protocol connections over TCP/IP
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GpsGate.Online.Net.Tcp.TcpNmeaListener" -->
        <member name="M:GpsGate.Online.Net.Tcp.TcpNmeaListener.OnStart">
            <summary>
            Start listening on socket specified in constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.TcpNmeaListener.OnStop">
            <summary>
            Stop listening
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.TcpNmeaListener.CreateTcpConnection(System.Net.Sockets.Socket)">
            <summary>
            This meththod shoudl return a object that can handle a TCP/IP connection.
            </summary>
            <param name="socket">New connection</param>
            <returns>Object derived from <see cref="T:GpsGate.Online.Net.NmeaConnection"/> that implements the protocol</returns>
        </member>
        <member name="P:GpsGate.Online.Net.Tcp.TcpNmeaListener.Transport">
            <summary>
            Returns "tcp"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.GpsGateTcpListener.#ctor">
            <summary>
            Create listener.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.GpsGateTcpListener.OnStart">
            <summary>
            Called when TCP listener has started.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.GpsGateTcpListener.CreateTcpConnection(System.Net.Sockets.Socket)">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Net.Tcp.GpsGateTcpConnection"/> object.
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Tcp.GpsGateTcpListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Called when listener type is installed.
            Sets default server port to 30175
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Tcp.GpsGateTcpListener.ProtocolID">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.GpsGateTcpProtocol">
            <summary>
            Handles GpsGate protocol, with special tweeks for TCP/IP.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.GpsGateTcpProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Create GpsGate TCP protocol object.
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.GpsGateTcpProtocol.TranslateToDevice(Franson.Nmea.Sentence)">
            <summary>
            Sends NMEA sentence unchanged to client.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:GpsGate.Online.Net.GpsGateTcpProtocol.StringID">
            <summary>
            Returns protocol ID - "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Udp.GpsGateUdpConnection">
            <summary>
            Listener that handles incoming GpsGate Protocol connections over UDP
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Udp.UdpConnection">
            <summary>
            Handles UDP datagrams of the form FRLIN + GPRMC or FRLIN + FRPOS
            If you have a UDP based protocol dereive from this class.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpConnection.#ctor(GpsGate.Online.Net.Udp.UdpClientWrapper)">
            <summary>
            Create UdpConnection
            </summary>
            <param name="wrapper"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpConnection.Start">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpConnection.DoProtocolToDevice(System.Byte[])">
            <summary>
            Sends back UDP datagram to client.
            </summary>
            <param name="arrData"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpConnection.ToString">
            <summary>
            Returns username@UdpConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpConnection.Equals(System.Object)">
            <summary>
            If argument is a <see cref="T:System.Net.IPEndPoint"/> with the same address/port as this UDP connection, true is returned.
            If argument is the same as this, true is returned.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpConnection.GetHashCode">
            <summary>
            Calls base.GetHashCode()
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Udp.UdpConnection.Transport">
            <summary>
            Returns "udp"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Udp.UdpConnection.ClientAddress">
            <summary>
            Returns IP address + port as a string.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Udp.UdpConnection.RemoteEP">
            <summary>
            IP address + port of client connected to this object.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Udp.UdpConnection.DatagramCache">
            <summary>
            Keeps a FIFO cache for incoming datagrams.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.Udp.UdpConnection.ProcessingCache">
            <summary>
            Can be used by owner of this object to keep track of if a thread has called <see cref="!:RawDataToGpsGate"/>
            or not.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.GpsGateUdpConnection.#ctor(GpsGate.Online.Net.Udp.UdpClientWrapper)">
            <summary>
            Create listener
            </summary>
            <param name="wrapper"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.GpsGateUdpConnection.CreateProtocol">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Net.GpsGateUdpProtocol"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.Udp.UdpNmeaListener">
            <summary>
            Listens to a UDP port. And creates a <see cref="T:GpsGate.Online.Net.Udp.UdpConnection"/> for each incoming datagram.
            
            To make a listener for your own UDP based protocol, derive from this class.
            To make GpsGate Server accept your custom protocol you need to implement two classes. One
            "listener" which accepts incoming connections, and one "connection", which handles established connections.
            Listeners derive from <see cref="T:GpsGate.Online.Net.NmeaConnection"/> or <see cref="T:GpsGate.Online.Net.Udp.UdpConnection"/>. If you protocol is based on UDP, you can derive from this
            class instead (which in turn derives from NmeaListener). It handles all basics, and you only need
            to override <see cref="M:GpsGate.Online.Net.Udp.UdpNmeaListener.CreateUdpConnection(GpsGate.Online.Net.Udp.UdpClientWrapper)"/> that creates a connection object.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Udp.UdpNmeaListener.m_udpClient">
            <summary>
            UDP listener
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.Udp.UdpNmeaListener.m_uiConnectionCount">
            <summary>
            Count new connections for debugging purposes.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpNmeaListener.OnStart">
            <summary>
            Start UDP listener.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpNmeaListener.OnStop">
            <summary>
            Stop UDP listener
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpNmeaListener.CreateUdpConnection(GpsGate.Online.Net.Udp.UdpClientWrapper)">
            <summary>
            Should return an object that handles an UDP conenction.
            </summary>
            <param name="udpWrapper">Represents UDP clients where connection came from.</param>
            <returns>Object derived from NmeaConnection that implements protocol translation.</returns>
        </member>
        <member name="P:GpsGate.Online.Net.Udp.UdpNmeaListener.Transport">
            <summary>
            Returns "udp"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.GpsGateUdpListener.OnStart">
            <summary>
            Called when UDP listener has started.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.GpsGateUdpListener.CreateUdpConnection(GpsGate.Online.Net.Udp.UdpClientWrapper)">
            <summary>
            Returns a <see cref="T:GpsGate.Online.Net.Udp.GpsGateUdpConnection"/> object.
            </summary>
            <param name="wrapper"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.GpsGateUdpListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Configures to listener to listen to port 30175 by default.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.Net.Udp.GpsGateUdpListener.ProtocolID">
            <summary>
            Returns "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.GpsGateUdpProtocol">
            <summary>
            Handles GpsGate Protocol. With some special tweeks for the UDP version.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.GpsGateUdpProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Create GpsGate protcol object.
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.GpsGateUdpProtocol.TranslateFromDevice(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Takes GpsGate UDP tweeked data, and translates it to pure GpsGate protocol.
            </summary>
            <param name="arrData"></param>
            <param name="iStart"></param>
            <param name="iLength"></param>
        </member>
        <member name="M:GpsGate.Online.Net.GpsGateUdpProtocol.TranslateToDevice(Franson.Nmea.Sentence)">
            <summary>
            Sentence is passed unchanged to device.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="P:GpsGate.Online.Net.GpsGateUdpProtocol.StringID">
            <summary>
            Returns protocol ID - "GpsGate"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.Udp.UdpClientWrapper">
            <summary>
            Used by <see cref="T:GpsGate.Online.Net.Udp.UdpNmeaListener"/> for controlled write backs to client by <see cref="T:GpsGate.Online.Net.Udp.UdpConnection"/>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpClientWrapper.#ctor(GpsGate.Online.Net.Udp.UdpClientWrapper.WriteBack,System.Net.IPEndPoint)">
            <summary>
            Create controlled UDP writeback object.
            </summary>
            <param name="writeback"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpClientWrapper.Write(GpsGate.Online.Net.Udp.UdpConnection,System.Byte[],System.Int32)">
            <summary>
            Call to write back data to client over UDP
            </summary>
            <param name="conn"></param>
            <param name="arrData"></param>
            <param name="iLength"></param>
            <param name="epRemote"></param>
        </member>
        <member name="M:GpsGate.Online.Net.Udp.UdpClientWrapper.ToString">
            <summary>
            Returns client address
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.Udp.UdpClientWrapper.ClientEndPoint">
            <summary>
            UDP clients IP + port.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.ClientMessageProvider">
            <summary>
            Message provider which connects to other GpsGate Server installations to provide 
            message services like SMS.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.ClientMessageProvider.DoStart">
            <summary>
            Start connection to external GGS server ro message services.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:GpsGate.Client.GateConnectException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.ClientMessageProvider.DoStop">
            <summary>
            Disconnect.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.ClientMessageProvider.Install(Franson.Reflection.LoadableType)">
            <summary>
            NOP.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Net.ClientMessageProvider.m_msgClient_MessageFromServer(GpsGate.Client.SmsProxyClient,Franson.Nmea.Command.ProxyMessageCmdBuilder)">
            <summary>
            Called when message is received from remote server.
            </summary>
            <param name="conn"></param>
            <param name="proxyMessage"></param>
        </member>
        <member name="M:GpsGate.Online.Net.ClientMessageProvider.Send(Franson.Message.Queue,Franson.Message.QueueItem)">
            <summary>
            Queues outgoing message for sending.
            Passes on incoming message to GpsGate Framework.
            </summary>
            <param name="queue"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.ClientMessageProvider.IsOnline(Franson.Message.Queue)">
            <summary>
            Returns true if client is connected to remote server.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.ListenerReader">
            <summary>
            Reads loadable Listener types from database
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Net.ListenerReader.#ctor">
            <summary>
            Create listener reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.ListenerReader.LoadEnabled(System.Boolean)">
            <summary>
            Call this method to determine if only enabled listeners should be loaded or not. By default all
            listeners are loaded.
            </summary>
            <param name="bEnabled"></param>
        </member>
        <member name="M:GpsGate.Online.Net.ListenerReader.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns listener.listener_id
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnectionList">
            <summary>
            Keeps a list of <see cref="T:GpsGate.Online.Net.NmeaConnection"/> objects.
            This class is thread safe, and allows multiple readers or one writer at the same time.
            Enumerating throgh list is not thread safe.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.CleanUp(System.TimeSpan)">
            <summary>
            Will remove any disposed <see cref="T:GpsGate.Online.Net.NmeaConnection"/> objects, and any objects that haven't received data in
            a certain timespan.
            </summary>
            <param name="tsTimeout"></param>
            <returns>Number of objects removed from list</returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.GetMatchingConnection(System.Object)">
            <summary>
            Returns matching connection. First connection in list that returns true on Equals(oMatch)
            </summary>
            <param name="oMatch"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Add(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Adds new NmeaConenction to list
            </summary>
            <param name="nmeaConnection"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Contains(System.Object)">
            <summary>
            Returns true if object conatined in list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.IndexOf(System.Object)">
            <summary>
            Returns index of specified object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.IndexOf(System.Object,System.Int32)">
            <summary>
            Returns index of specified object. Starting search at index.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.IndexOf(System.Object,System.Int32,System.Int32)">
            <summary>
            Returns index of specified object inside specified range.
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Remove(System.Object)">
            <summary>
            Remove object from list
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.RemoveAt(System.Int32)">
            <summary>
            Remove object at index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove range of objects.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Add(System.Object)">
            <summary>
            Will throw an exception. Only NmeaConnection objects can be added to this list.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.AddRange(System.Collections.ICollection)">
            <summary>
            Not implemented
            </summary>
            <param name="c"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
            <summary>
            Not implemented
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.BinarySearch(System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.BinarySearch(System.Object,System.Collections.IComparer)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Clone">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Clear">
            <summary>
            Not implemented. Use <see cref="M:GpsGate.Online.Net.NmeaConnectionList.Dispose"/>
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="index"></param>
            <param name="array"></param>
            <param name="arrayIndex"></param>
            <param name="count"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.CopyTo(System.Array)">
            <summary>
            Not implemented
            </summary>
            <param name="array"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.CopyTo(System.Array,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.GetRange(System.Int32,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Insert(System.Int32,System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Not implemented
            </summary>
            <param name="index"></param>
            <param name="c"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.LastIndexOf(System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.LastIndexOf(System.Object,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.LastIndexOf(System.Object,System.Int32,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Reverse">
            <summary>
            Not implemented
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Reverse(System.Int32,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.SetRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Not implemented
            </summary>
            <param name="index"></param>
            <param name="c"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Sort">
            <summary>
            Not implemented
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Not implemented
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="comparer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Sort(System.Collections.IComparer)">
            <summary>
            Not implemented
            </summary>
            <param name="comparer"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.ToArray">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.ToArray(System.Type)">
            <summary>
            Not implemented
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.IsDisposed">
            <summary>
            Returns true if object is disposed. Meaning the socket is closed due to an error or on purpose.
            </summary>
            <returns></returns>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnectionList.m_bDisposed">
            <summary>
            True if object as been disposed.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnectionList.m_bIsDisposing">
            <summary>
            Set to true during the Dispose() method is executing to avoid several threads from
            disposing the same object several times.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnectionList.Dispose">
            <summary>
            Closes all connections in this list.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaConnectionList.Count">
            <summary>
            Returns number of objects in list.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaConnInterval">
            <summary>
            Class which helps to deliver RMC data to a sink on an interval basis
            Criteria
            1. NmeaConnInterval should never send data more often than the interval specified by the sink client (FRRDT)
            2. If the source position is updated it should not be sent to the sink client until the interval time has passed.
            3. If the interval time has passed, and the source position is updated, the new data should be sent to
               the sink client right away and the interval is restarted.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnInterval.m_nmeaConn">
            <summary>
            NmeaConnection this interval object handles
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaConnInterval.m_iInterval">
            <summary>
            Fastest speed to send data in.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnInterval.#ctor(System.Double,GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Will send data in intervals to nmeaConn. The interval is specified by dblInterval.
            Use Write() to write data to NmeaConnInterval, that will in turn pass on data to
            nmeaConn every dblInterval seconds
            </summary>
            <param name="dblInterval">Interval in seconds</param>
            <param name="nmeaConn">NmeaConnection that is sinking (consuming) data.</param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnInterval.Write(Franson.Nmea.RMC)">
            <summary>
            Will forward position data to embedded NmeaConnection in selected interval.
            </summary>
            <param name="rmc"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaConnInterval.Dispose">
            <summary>
            Dispose the NmeaConnInterval will 
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaListenerBag">
            <summary>
            Bag that contains data about a NMEA listener.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaListenerBag.#ctor(System.Int32,System.Boolean,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Create bag of values.
            </summary>
            <param name="iListenerID"></param>
            <param name="bIsStarted"></param>
            <param name="strServerAddress"></param>
            <param name="iServerPort"></param>
            <param name="iConnections"></param>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListenerBag.ListenerID">
            <summary>
            Listener database ID.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListenerBag.IsStarted">
            <summary>
            True if listener is started.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListenerBag.ServerAddress">
            <summary>
            Server address. Must be an IP address.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListenerBag.ServerPort">
            <summary>
            Server port number, which listener listens to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListenerBag.Connections">
            <summary>
            Number of active connections to server.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaListenerBag.Description">
            <summary>
            Free text description of listener.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.RouteDataType">
            <summary>
            What kind of data to route
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.RouteDataType.AllData">
            <summary>
            Unfiltered raw data
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.RouteDataType.GPRMC">
            <summary>
            GPRMC
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.RouteDataType.FRPOS">
            <summary>
            FRPOS
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaRouter">
            <summary>
            Routes NMEA or raw data from one source NmeaConnection to several sink NmeaConnections
            Not thread safe. You need to lock NmeaRouter before accessing it.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaRouter.m_strSourceUserName">
            <summary>
            Username of source connection.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaRouter.m_source">
            <summary>
            NmeaConnection wrting data to this router
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaRouter.m_listNmeaSink">
            <summary>
            Connections that receives NMEA data. NmeaConnectionList is thread safe.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaRouter.m_listRawSink">
            <summary>
            Connections that receives raw data. NmeaConnectionList is thread safe.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.NmeaRouter.m_oLockThis">
            <summary>
            Internal locking object to make object thread safe.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.#ctor(System.String)">
            <summary>
            Creates NmeaRouter.
            </summary>
            <param name="strSourceUserName"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.DoSetupSource(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Called when a new source has been set to router.
            </summary>
            <param name="nmeaConnection">Nwe source</param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.AddNmeaSink(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Add sink to router
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.AddNmeaSink(GpsGate.Online.Net.NmeaConnection,System.Double)">
            <summary>
            Add sink to receive data in intervals
            </summary>
            <param name="nmeaConnection"></param>
            <param name="dblInterval"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.AddNmeaSink(GpsGate.Online.Net.NmeaConnection,System.Double,GpsGate.Online.Net.RouteDataType)">
            <summary>
            Criteria
            1. NmeaRouter should never send data more often than the interval specified by the sink client (FRRDT)
            2. If the source position is updated it should not be sent to the sink client until the interval time has passed.
            3. If the interval time has passed, and the source position is updated, the new data should be sent to
               the sink client right away.
            </summary>
            <param name="nmeaConnection"></param>
            <param name="dblInterval"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.AddRawSink(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Add sink to receive raw data.
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.m_SetupSink(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Will be called for all NmeaConnections that are added as a sink. 
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.RemoveSink(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Remove sink from router
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.m_sink_Disconnected(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Event handler called when a sink is disconnected.
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.GetLatestKnownPosition(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Returns the latest known position as <see cref="T:Franson.Nmea.RMC"/> for nmeaConn.
            </summary>
            <param name="nmeaConn"></param>
            <returns><see cref="T:Franson.Nmea.RMC"/></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.DoDisconnectedSink(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Called when a sink is disconnected. Will be called after the sink is removed from the router.
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.m_source_Disconnected(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Event handler called when source is disconnected.
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.DoDisconnectedSource(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Called when source is disconnected. Will be called after source is removed from the router.
            </summary>
            <param name="nmeaConnection"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.m_source_RawData(GpsGate.Online.Net.NmeaConnection,System.Byte[])">
            <summary>
            Event handler for raw data from source.
            </summary>
            <param name="nmeaConnection"></param>
            <param name="data"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.DoRawData(GpsGate.Online.Net.NmeaConnection,System.Byte[])">
            <summary>
            Called when raw data is received from source connection. By default data is routed to sink connections.
            Override to change default behavior, e.g. to save data to a file.
            All data including NMEA data is passed on as raw data as well.
            </summary>
            <param name="nmeaConnection">Source</param>
            <param name="data">Raw data.</param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.m_source_NmeaData(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.Sentence)">
            <summary>
            Event handler for NMEA data from source.
            </summary>
            <param name="nmeaConnection"></param>
            <param name="nmeaSentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.DoNmeaData(GpsGate.Online.Net.NmeaConnection,Franson.Nmea.Sentence)">
            <summary>
            Called when NMEA data is received from source. By default data is routed to sink connections.
            Override to change behaiviour.
            </summary>
            <param name="nmeaConnection"></param>
            <param name="nmeaSentence"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouter.ToString">
            <summary>
            String representation of router. Will return a string in the format 
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaRouter.SourceConnection">
            <summary>
            <see cref="T:GpsGate.Online.Net.NmeaConnection"/> that is source to this NmeaRouter. An NmeaRouter can only have one source.
            The source will write data to all sinks.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaRouter.RawSinkCount">
            <summary>
            Number of raw data sinks connected to router
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.NmeaRouter.NmeaSinkCount">
            <summary>
            Number of sinks to receiving NMEA data.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.NmeaRouterList">
            <summary>
            Handles a list of <see cref="T:GpsGate.Online.Net.NmeaRouter"/>s
            </summary>
            <threadsafty static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouterList.CreateByUsername(System.String)">
            <summary>
            Returns an existing NmeaRouter that has strUsername as source.
            Or if not found, a new NmeaRouter is created.
            </summary>
            <param name="strUsername">Username</param>
            <returns>A new or existing NmeaRouter that has strUsername as source.</returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouterList.Remove(System.String)">
            <summary>
            Remove NmeaRouter by source username
            </summary>
            <param name="strUsername"></param>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouterList.DoCreateRouter(System.String)">
            <summary>
            Called when a new NmeaRouter object should be created by list. That is username is missing in list.
            Override this method if you use routers deriving from NmeaRouter.
            Returns a <see cref="T:GpsGate.Online.Net.NmeaRouter"/> object by default.
            </summary>
            <param name="strUsername">Username to create router for</param>
            <returns>NmeaRouter object</returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouterList.IsUsernameInList(System.String)">
            <summary>
            Returns true if a router for this username is present in list.
            </summary>
            <param name="strUsername"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.NmeaRouterList.m_FindRouter(System.String)">
            <summary>
            Returns <see cref="T:GpsGate.Online.Net.NmeaRouter"/> for specified username, or null if no router present for that username.
            </summary>
            <param name="strUsername">Username to find NmeaRouter for</param>
            <returns>NmeaRouter or null</returns>
        </member>
        <member name="T:GpsGate.Online.Net.ProtocolVersion">
            <summary>
            Represents a protocol version
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.ProviderBag">
            <summary>
            Read only object representing settings for a message provider.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderBag.SetID(System.Int32)">
            <summary>
            If ID is zero this method can be used to set ID once. Typiclly called after writing a new provider to database.
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderBag.SetCreated(System.DateTime)">
            <summary>
            Will set Created if not already set. Typically used when new provider is created.
            </summary>
            <param name="dtCreated"></param>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.ID">
            <summary>
            Database ID. "message_provider.msg_prov_id"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.BoType">
            <summary>
            BO type. "message_provider.bo_type"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.Name">
            <summary>
            Name. "message_provider.msg_prov_name"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.Enabled">
            <summary>
            Enabled. "message_provider.enabled"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.TypeID">
            <summary>
            Loadable type database ID. "message_provider.type_id"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.Created">
            <summary>
            UTC when record was created. "message_provider.created"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.Url">
            <summary>
            URL which can be used by provider. "message_provider.url"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.Username">
            <summary>
            Username which can be used by provider to log into some external service. "message_provider.username"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.Password">
            <summary>
            Password which can be used by provider to login to external service. "message_provider.password"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.CallInterval">
            <summary>
            If provider is polling data from an external service, this is the poll interval in seconds. "message_provider.call_interval"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.CustomLong">
            <summary>
            Custom value used by provider to keep state. "message_provider.custom_long"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.CustomString">
            <summary>
            Custom string value provider can use to keep state. "message_provider.custom_string"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.Timeout">
            <summary>
            Timeout in seconds provider can use if polling data from external service. "message_provider.timeout"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.RouteLabel">
            <summary>
            Label used for routing messages to this provider.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.DefaultProvider">
            <summary>
            True if this is a default provider. "message_provider.default_provider"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.ProviderBag.IsStarted">
            <summary>
            Returns true if provider is successfully started.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.ProviderBagReader">
            <summary>
            Read Provider bags from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderBagReader.GetByType(System.Type)">
            <summary>
            Return all providers of specified type.
            </summary>
            <param name="oType"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderBagReader.GetByInstanceID(System.Int32)">
            <summary>
            Return the provider of specified instance id.
            </summary>
            <param name="oType"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.ProviderManager">
            <summary>
            Manage message providers and message listeners. Delegates messages from the providers to the registered listeners.
            Messages from all providers are dispatched to all listeners. The fist listener that claims it
            can handle the message by returning true from <see cref="M:GpsGate.Online.Net.MessageListener.IsCompatible(Franson.Message.ProviderMessage)"/> will 
            handle the message after beeing called at <see cref="M:GpsGate.Online.Net.MessageListener.MessageFromProvider(Franson.Message.ProviderMessage)"/>
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.LoadMessageProviders">
            <summary>
            Loads all Registers MessageProvider instances.
            </summary>
            <returns>List of found and enabled MessageProviders</returns>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.AddMessageListener(GpsGate.Online.Net.MessageListener)">
            <summary>
            Add a listener.
            </summary>
            <param name="messageListener"></param>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.RemoveMessageListener(GpsGate.Online.Net.MessageListener)">
            <summary>
            Remove listener.
            </summary>
            <param name="msgListener"></param>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.provider_MessageReceived(Franson.Message.MessageProvider,Franson.Message.ProviderMessage)">
            <summary>
            Dispatches the incoming message to the provider that recognize it.
            </summary>
            <param name="gateProvider"></param>
            <param name="msgIncomming"></param>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.ResetQueue(System.Int32)">
            <summary>
            Removes any pending and queued commands for specified devices in all provider message queues.
            </summary>
            <param name="iDevice"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.QueueMessageForSending(Franson.Message.ProviderMessage,GpsGate.Online.Directory.Device,Franson.Directory.User)">
            <summary>
            Queues message for sending. Route label determines provider to queue message to.
            </summary>
            <param name="msg"></param>
            <param name="devReceiver"></param>
            <param name="usrSender"></param>
            <param name="strRouteLabel">Provider to use. null to use default.</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:Franson.DAO.NotFoundException">No provider found to route message to.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.Start">
            <summary>
            Loads all registered enabled message providers from database, and starts them.
            Listeners are not started.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.Stop">
            <summary>
            Stops providers handled by this manager. Listeners are not stopped.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.GetMessageProvider(System.Type)">
            <summary>
            Returns (first) registered message provider of specified type. If not found null is returned.
            </summary>
            <param name="typeProv">Type of provider to find.</param>
            <returns>Matching provider, or null if not found</returns>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.GetMessageProvider(System.Type,System.Int32)">
            <summary>
            Returns (iIndex) registered message provider of specified type. If not found null is returned.
            </summary>
            <param name="typeProv">Type of provider to find.</param>
            <param name="iIndex">Index of provider to return.</param>
            <returns>Matching provider, or null if not found</returns>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.GetProviderInformation">
            <summary>
            Returns information about all providers, enabled and disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.UpdateProvider(GpsGate.Online.Net.ProviderBag)">
            <summary>
            Updates an existing (by ID) or creates a new provider with properties like enabled, url, username, password, routelabel etc.
            If the provider exists, it is only possible to update if disabled.
            </summary>
            <param name="providerBag"></param>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock.</exception>
            <exception cref="T:System.InvalidOperationException">If provider exists and is enabled</exception>
            <exception cref="T:Franson.DAO.UpdateDBException">Unexpected error when saving update to database.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.ProviderManager.DeleteProvider(System.Int32)">
            <summary>
            Deletes an existing provider by ID from database and removes provider from the manager.
            If the provider exists, it is only possible to update if disabled.
            </summary>
            <param name="iProviderID"></param>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock.</exception>
            <exception cref="T:System.InvalidOperationException">If provider exists and is enabled</exception>
            <exception cref="T:Franson.DAO.UpdateDBException">Unexpected error when saving update to database.</exception>
        </member>
        <member name="T:GpsGate.Online.Net.ProxyMessageProvider">
            <summary>
            Provider that handles communication with an SMS Proxy.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Online.Net.ProxyMessageProvider.MAX_SMS_RESEND">
            <summary>
            The maximum number of times to resend a SMS
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.ProxyMessageProvider.SMS_SEND_TIMEOUT">
            <summary>
            Timeout for sending a SMS
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.ProxyMessageProvider.m_evSmsSent">
            <summary>
            Event set when a FRRET is returned from proxy.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.ProxyMessageProvider.m_errClientProxy">
            <summary>
            Last error on client proxy
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.ProxyMessageProvider.DoStart">
            <summary>
            The provider can now be used.
            </summary>
            <exception cref="T:Franson.DAO.NotFoundException">If no SMS proxy is regsitered.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.ProxyMessageProvider.DoStop">
            <summary>
            Provider stopped.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.ProxyMessageProvider.ReceiveMessageFromProxy(GpsGate.Online.Net.NmeaConnection,Franson.Message.ProxyMessage)">
            <summary>
            Called to source a proxy message to this proxy provider. Is called when a _ProxyMessage
            is sent to the server by a authorized user. A _ProxyMessage can be sent to the server by
            GpsGate SMS Proxy.
            The message will be passed to a compatible listener.
            </summary>
            <param name="connProxy">Connection this proxy message comes from.</param>
            <param name="proxyMessage">Proxy message to enter GpsGate</param>
            <exception cref="T:GpsGate.Online.AuthorizationException">User is not allowed to act as message proxy.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.ProxyMessageProvider.ReceiveResponseFromProxy(GpsGate.Online.Net.NmeaConnection,GpsGate.Online.Command.ProxyMessageRet)">
            <summary>
            Called when FRRET is received from proxy confirming SMS has been sent.
            </summary>
            <param name="connProxy">Connection to proxy</param>
        </member>
        <member name="M:GpsGate.Online.Net.ProxyMessageProvider.RegisterOutgoingProxy(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Register that connection is willing to receive outgoing messages. E.g. SMS messages.
            </summary>
            <param name="connSource"></param>
            <exception cref="T:GpsGate.Online.AuthorizationException">User is not allowed to act as message proxy.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.ProxyMessageProvider.m_Authorize(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Check if logged in user may act as a message proxy.
            </summary>
            <param name="connSource"></param>
            <exception cref="T:GpsGate.Online.AuthorizationException">User is not allowed to act as message proxy.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.ProxyMessageProvider.Install(Franson.Reflection.LoadableType)">
            <summary>
            Installs 
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.Net.ProxyMessageProvider.SendOutgoing(Franson.Message.ProviderMessage)">
            <summary>
            Attempts to send SMS to proxy for outgoing queue.
            And sends SMS to listener via <see cref="T:GpsGate.Online.Net.ProviderManager"/> if incoming queue.
            </summary>
            <param name="queue"></param>
            <param name="provMessage"></param>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Timeout when communicating with proxy.</exception>
        </member>
        <member name="M:GpsGate.Online.Net.ProxyMessageProvider.IsOnline(Franson.Message.Queue)">
            <summary>
            Returns true if a proxy is connected.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Net.QueueSendMode">
            <summary>
            How new items are placed in outgoing queue.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.QueueSendMode.ForceSync">
            <summary>
            Always synchrounous.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.QueueSendMode.ForceAsync">
            <summary>
            Always async.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Net.QueueSendMode.AsyncOnReply">
            <summary>
            Async if outgoing message is result of an incoming message.
            Useful if the provider cannot send and receive a message at the same time.
            This is the default.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.UnknownConnection">
            <summary>
            Handles connection from message with unknown recipient
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownConnection.#ctor(Franson.Message.ProviderMessage)">
            <summary>
            Create connection from one unknow message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownConnection.Start">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownConnection.CreateProtocol">
            <summary>
            Returns a new <see cref="T:GpsGate.Online.Net.UnknownProtocol"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownConnection.DoProtocolToDevice(System.Byte[])">
            <summary>
            Does not support writing back to unknown devices.
            </summary>
            <param name="arrData"></param>
        </member>
        <member name="P:GpsGate.Online.Net.UnknownConnection.ClientAddress">
            <summary>
            Returns ClientAddress from unknown ProviderMessage
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.UnknownConnection.Transport">
            <summary>
            Returns Transport from unknown ProviderMessage
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.UnknownMessageListener">
            <summary>
            Handles messages with unknown destination. Makes sure they are routed through the system to
            plugins like "Terminal" for example.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownMessageListener.IsCompatible(Franson.Message.ProviderMessage)">
            <summary>
            Always returns false.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownMessageListener.MessageFromProvider(Franson.Message.ProviderMessage)">
            <summary>
            Forward message to connection.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownMessageListener.OnStart">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownMessageListener.OnStop">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownMessageListener.Install(Franson.Reflection.LoadableType)">
            <summary>
            Enables Unknown Listener by default.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="E:GpsGate.Online.Net.UnknownMessageListener.UndeliveredMessage">
            <summary>
            Called for all messages that do not have a registered device as recipient.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.UnknownMessageListener.Transport">
            <summary>
            Returns null, as it handles messages of all kind of transports.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Net.UnknownMessageListener.ProtocolID">
            <summary>
            Returns "Unknown"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.UnknownMessageListener.UndeliveredMessageHandle">
            <summary>
            Delegate for <see cref="!:UnknownRecipient"/>
            </summary>
        </member>
        <member name="T:GpsGate.Online.Net.UnknownProtocol">
            <summary>
            Handles messages from unknown trackers, not registered on the server.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownProtocol.#ctor(GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Create.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownProtocol.TranslateFromDevice(Franson.Message.ProviderMessage)">
            <summary>
            Logs message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GpsGate.Online.Net.UnknownProtocol.TranslateFromDevice(System.Byte[],System.Int32,System.Int32)">
            <summary>
            NOP
            </summary>
            <param name="arrData"></param>
            <param name="iStart"></param>
            <param name="iLength"></param>
        </member>
        <member name="P:GpsGate.Online.Net.UnknownProtocol.StringID">
            <summary>
            Returns "Unknown"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.Channel.ChannelNotifier">
            <summary>
            Notifies channels.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.Notifier">
            <summary>
            Base class for notifers. 
            Notifier notifies external entities. 
            E.g: SmsNotifier sends sms to users when an server event has occured.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Notifier.Notify(GpsGate.Online.Notification.NotificationContext)">
            <summary>
            Derived classes implement this method. Runs at the start of this notification (e.g. when an event triggers).
            </summary>
            <param name="context">Context for which the notification was called.</param>
        </member>
        <member name="M:GpsGate.Online.Notification.Notifier.NotifyEnd(GpsGate.Online.Notification.NotificationContext)">
            <summary>
            (Optional) Override to perform an action at the end of this notification (e.g. when an event ends).
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:GpsGate.Online.Notification.Notifier.Equals(System.Object)">
            <summary>
            Implemnting classes must implement equals, where equality are reached when all properties are equals.
            This is essential to be able to detect and save changes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.Notifier.GetHashCode">
            <summary>
            Implementing classes should base their hash code on all read/write properties.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Notification.Notifier.NotifierTypeName">
            <summary>
            The name of the notifier type. 
            E.g: Email notifier. Sms notifier etc.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Notifier.VirtualASCXFilePath">
            <summary>
            Virtual path to GUI. 
            E.g: ~/WebControls/Notifiers/MyNotifier.ascx
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Notifier.DAOBase">
            <summary>
            Data access object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Channel.ChannelNotifier.#ctor">
            <summary>
            Creates a new command based notifier.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Notification.Channel.ChannelNotifier.Notify(GpsGate.Online.Notification.NotificationContext)" -->
        <member name="M:GpsGate.Online.Notification.Channel.ChannelNotifier.Equals(System.Object)">
            <summary>
            Equal if message template text and channel id have same HashCode.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.Channel.ChannelNotifier.GetHashCode">
            <summary>
            Uses the hashcode of the message template text and channel id
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Notification.Channel.ChannelNotifier.MessageTemplate">
            <summary>
            Returns the message template of the this notifier id. Null if not found.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Channel.ChannelNotifier.DAO">
            <summary>
            Data access object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.Command.NotificationCmdBuilder">
            <summary>
            Base class for all Notification command builders.
            
            Notification commands are built up by a tartget device and template from which the content of the notification
            is created.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Command.NotificationCmdBuilder.#ctor(Franson.Nmea.ROUTE,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new notification command.
            </summary>
            <param name="route">Route of the command.</param>
            <param name="strName">Name of the command.</param>
            <param name="iTemplateID">Id of the notification message template.</param>
            <param name="iApplicationID">Id of the application.</param>
        </member>
        <member name="M:GpsGate.Online.Notification.Command.NotificationCmdBuilder.AddTemplateVariable(Franson.Text.TemplateVariable)">
            <summary>
            Adds a new template variable with the resolved value.
            </summary>
            <param name="templateVar">The template variable.</param>
        </member>
        <member name="T:GpsGate.Online.Notification.Command.NotificationCmdExe">
            <summary>
            Executes a notification command.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Notification.Command.NotificationCmdExe.m_iTemplateID">
            <summary>
            ID of the template used to build the notification from.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Notification.Command.NotificationCmdExe.m_lstTemplVars">
            <summary>
            Dictionary holding template variables as key with the resolved values.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Notification.Command.NotificationCmdExe.m_nlog">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Command.NotificationCmdExe.DoProcessSentence(Franson.Nmea.Sentence)">
            <summary>
            Get the parameters out of the command.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Online.Notification.Command.NotificationCmdExe.Commit">
            <summary>
            Parses the template given by command parameter TemplateID and call Execute().
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Command.NotificationCmdExe.Begin">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Command.NotificationCmdExe.Rollback">
            <summary>
            NOP
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Command.NotificationCmdExe.Execute(GpsGate.Online.Net.NmeaConnection,System.String)">
            <summary>
            Send the Plain message.
            </summary>
            <param name="outConn">Outgoing connection to send over.</param>
            <param name="strNotification">Message to send.</param>
        </member>
        <member name="P:GpsGate.Online.Notification.Command.NotificationCmdExe.RequiresAck">
            <summary>
            Plain message command do not by default require ack.
            Returns "false".
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.Email.Command.EmailNotificationCmdBuilder">
            <summary>
            Builds an EmailNotificationCommmand
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Email.Command.EmailNotificationCmdBuilder.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a new email notification command.
            </summary>
            <param name="iEmailDeviceID">ID of the Email device.</param>
            <param name="iTemplateID">ID of the template used to build the body of the message.</param>
            <param name="strSubject">Subject of the email message.</param>
            <param name="bIsContentHtml">Value whether email content is in Html</param>
            <exception cref="T:System.ArgumentException">Device ID must be set</exception>
            <exception cref="T:System.ArgumentException">NotificationCommand must specify a Template</exception>
            <exception cref="T:System.ArgumentException">Must have a subject</exception>
        </member>
        <member name="T:GpsGate.Online.Notification.Email.Command.EmailNotificationCmdExe">
            <summary>
            Executes notifications over Email.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Email.Command.EmailNotificationCmdExe.Execute(GpsGate.Online.Net.NmeaConnection,System.String)">
            <summary>
            Sends the notification over the email connection.
            </summary>
            <param name="outConn">EmailConnection</param>
            <param name="strNotification">Notification to send.</param>
        </member>
        <member name="P:GpsGate.Online.Notification.Email.Command.EmailNotificationCmdExe.QueueExecuteMode">
            <summary>
            Returns <see cref="!:QueueExecuteMode.ForceAsync"/>. Email notifications are always executed async.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Email.Command.EmailNotificationCmdExe.Name">
            <summary>
            "_EmailNotification"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Email.Command.EmailNotificationCmdExe.Namespace">
            <summary>
            "Plain"
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Email.DAO.EmailNotifierDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Resolves email_notifier.notifier_id
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:GpsGate.Online.Notification.Email.EmailNotifier">
            <summary>
            Notifies Email devices.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GpsGate.Online.Notification.CommandNotifier" -->
        <member name="M:GpsGate.Online.Notification.CommandNotifier.#ctor">
            <summary>
            Creates a new command based notifier.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.CommandNotifier.Notify(GpsGate.Online.Notification.NotificationContext)">
            <summary>
            Notifies all devices of the <see cref="T:GpsGate.Online.Directory.DeviceDefinition">DeviceType</see> specified by the DeviceType property found in the set of 
            <see cref="T:GpsGate.Online.Directory.UserTag">tags</see> specified by the RecipiantTag property.
            </summary>
            <param name="context">Context object holding a reference to an <see cref="T:Franson.Text.ITemplateResolver">ITemplateResolver</see>, typically an EventExpressionEvaluator. 
            The context ITemplateResolver Resolve method is used as delegate to the TemplateParser when parsing the template. The context ITemplateResolver 
            will in turn call its own TemplateResolvers if necessary to resolve variables.</param>
            <exception cref="!:GpsGate.Online.Notification.MessageTemplateNotSpecifiedException">If called with message template text null.</exception>
        </member>
        <member name="M:GpsGate.Online.Notification.CommandNotifier.SendCommand(System.Int32,Franson.Nmea.FRCMD)">
            <summary>
            Sends a command.
            TODO: Implement internal way of sending commands.
            </summary>
            <param name="cmd">Command to send</param>
        </member>
        <member name="M:GpsGate.Online.Notification.CommandNotifier.GetRecipiantDevices">
            <summary>
            Return all Devices of the specified type in the tag set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.CommandNotifier.CreateCommand(System.Int32,System.Collections.Generic.List{Franson.Text.TemplateVariable},System.String)">
            <summary>
            Derived classes build the command here.
            </summary>
            <param name="iDeviceID">ID of the recipiant device</param>
            <param name="parameters">Dictionary of the resolved template parameters.</param>
            <param name="strResolvedTemplate">The full resolved notification message.</param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Notification.CommandNotifier.CredentialsTimeout">
            <summary>
            TODO: Move this temporary credentials some where else..
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.CommandNotifier.RecipiantTags">
            <summary>
            List of tags grouping the Recipiants of this notification.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.CommandNotifier.MessageTemplate">
            <summary>
            Returns the message template of the this notifier id. Null if not found.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.CommandNotifier.DeviceType">
            <summary>
            Return the device type for which this notifier is valid.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.CommandNotifier.DAO">
            <summary>
            Data access object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Email.EmailNotifier.CreateCommand(System.Int32,System.Collections.Generic.List{Franson.Text.TemplateVariable},System.String)">
            <summary>
            Creates an EmailNotificationCmd Builder
            </summary>
            <param name="iRecipiantDeviceID">The recipiant deice.</param>
            <param name="parameters">Resolved template varaiables.</param>
            <param name="strResolvedTemplate">Full resolved template. (Not used by EmailNotifier)</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.Email.EmailNotifier.GetDAO">
            <summary>
            Returns the EmailNotifier data access object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.Email.EmailNotifier.Equals(System.Object)">
            <summary>
            Equal if isHTML, subject, recipients and message template text have same HashCode.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.Email.EmailNotifier.GetHashCode">
            <summary>
            Uses the hashcode of the message template text, recipiant tag ids, subject and isHtml flag
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Notification.Email.EmailNotifier.DeviceType">
            <summary>
            Return EmailDeviceDefinition
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Email.EmailNotifier.NotifierTypeName">
            <summary>
            returns NOTIFIER_TYPE_NAME_EMAIL
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Email.EmailNotifier.VirtualASCXFilePath">
            <summary>
            The virtual path to EmailNotifier loadable GUI component.
            
            Returns: ~/WebControls/Notifiers/EmailNotifier.ascx
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Email.EmailNotifier.Subject">
            <summary>
            Sets or Gets the subject of the email message.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Email.EmailNotifier.IsContentHtml">
            <summary>
            Sets or Gets a value whether the content of the email message is in Html.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Email.EmailNotifier.EmailDAO">
            <summary>
            Data access object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Notification.Sms.Command.SmsNotificationCmdBuilder">
            <summary>
            A SMS notification command builder.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Sms.Command.SmsNotificationCmdBuilder.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SmsNotificationCmdBuilder, using "sms" as transport.
            </summary>
            <param name="iSmsDeviceID">The receiver of the notification.</param>
            <param name="iTemplateID">The ID of the message template that is used in the message.</param>
            <param name="iApplicationID">The ID of the application for this command.</param>
        </member>
        <member name="T:GpsGate.Online.Notification.Sms.Command.SmsNotificationCmdExe">
            <summary>
            Executes notifications over SMS.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Sms.Command.SmsNotificationCmdExe.Execute(GpsGate.Online.Net.NmeaConnection,System.String)">
            <summary>
            Queues the message for sending as an SMS to the recipient device of the connection.
            </summary>
            <param name="outConn"></param>
            <param name="strMessage"></param>
        </member>
        <member name="P:GpsGate.Online.Notification.Sms.Command.SmsNotificationCmdExe.QueueExecuteMode">
            <summary>
            Returns <see cref="!:QueueExecuteMode.ForceAsync"/>. Email notifications are always executed async.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Sms.Command.SmsNotificationCmdExe.Name">
            <summary>
            "_SmsNotification"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Sms.Command.SmsNotificationCmdExe.Namespace">
            <summary>
            "Plain"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.Sms.SmsNotifier">
            <summary>
            Notifies SMS devices.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.Sms.SmsNotifier.CreateCommand(System.Int32,System.Collections.Generic.List{Franson.Text.TemplateVariable},System.String)">
            <summary>
            Creates a command that will notifiy a recipient device using provided template variables.
            </summary>
            <param name="iRecipiantDeviceID">The target device for the notification</param>
            <param name="parameters">The template variables to be used when reassembling and localizing the message upon command execution.</param>
            <param name="strResolvedTemplate">Full resolved template. (Not used by SmsNotifier)</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.Sms.SmsNotifier.GetDAO">
            <summary>
            Returns the SmsNotifier data access object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.Sms.SmsNotifier.Equals(System.Object)">
            <summary>
            Equal if recipients and message template text have same HashCode. Message templates are equal if null.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.Sms.SmsNotifier.GetHashCode">
            <summary>
            Uses the hashcode of the message template text and recipiant tag ids
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Notification.Sms.SmsNotifier.DeviceType">
            <summary>
            Gets a CellPhoneDeviceDefinition.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Sms.SmsNotifier.VirtualASCXFilePath">
            <summary>
            The virtual path to SmsNotifier loadable GUI component.
            
            Returns: ~/WebControls/Notifiers/SmsNotfier.ascx
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.Sms.SmsNotifier.NotifierTypeName">
            <summary>
            Returns NOTIFIER_TYPE_NAME_SMS
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL">
            <summary>
            General userattribute_notifier DAO.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Resolves user_attribute_notifier.notifier_id
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.OnLoaded(System.String)">
            <summary>
            Resolves user_attribute_notifier.notifier_id
            </summary>
            <param name="strTableName"></param>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.Update">
            <summary>
            If the header/key has been modified, removes all user attributes related to the old key.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.Remove">
            <summary>
            Removes all related user attribute when the notifier is removed.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.Header">
            <summary>
            User attribute notifier header/description text.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.Type">
            <summary>
            User attribute notifier "render" type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.Key">
            <summary>
            User attribute key.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.StartValue">
            <summary>
            User attribute value when notifier is started.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.EndValue">
            <summary>
            User attribute value when notifier has ended.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierDAOSQL.ApplicationID">
            <summary>
            Application ID.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierReaderDAOSQL.GetColumnsByApplication(System.Int32)">
            <summary>
            Gets all possible user attribute columns for the specified application.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierReaderDAOSQL.HasColumnHeader(System.String,System.Int32)">
            <summary>
            Checks whether the given column header already exists in the specified application.
            </summary>
            <param name="strColumnHeader"></param>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierReaderDAOSQL.ExecuteReader">
            <summary>
            Executes the DataReader and returns <see cref="T:GpsGate.Online.Notification.UserAttribute.UserAttributeColumn"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.DAO.UserAttributeNotifierReaderDAOSQL.CreateUserAttributeColumnFromReader(System.Data.IDataReader)">
            <summary>
            Creates a user attribute column from a data reader.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Notification.UserAttribute.UserAttributeColumn">
            <summary>
            Represents a "column" for a user attribute.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeColumn.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a user attribute column object.
            </summary>
            <param name="strType"></param>
            <param name="strName"></param>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeColumn.Header">
            <summary>
            Column header text.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeColumn.Type">
            <summary>
            Column value type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeColumn.Key">
            <summary>
            User attribute name.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.UserAttribute.UserAttributeColumnIconNotifier">
            <summary>
            User attribute column icon notifier.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier">
            <summary>
            Base user attribute notifier class.
            NotifierTypeName and VirtualASCXFilePath _should_ be overridden in child classes.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.#ctor">
            <summary>
            Creates a new user attribute notifier.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.Notify(GpsGate.Online.Notification.NotificationContext)">
            <summary>
            On Notify, add the specified key and value of this attribute to the database.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.NotifyEnd(GpsGate.Online.Notification.NotificationContext)">
            <summary>
            On NotifyEnd, remove or update this attribute in the database.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.SetUserAttribute(System.Int32,System.String,System.String)">
            <summary>
            Inserts/updates/removes the specified user attribute.
            </summary>
            <param name="iSender"></param>
            <param name="strKey"></param>
            <param name="strStartValue">Set to null or empty string to remove the specified key.</param>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.Equals(System.Object)">
            <summary>
            Compares equality between two UserAttributeNotifier objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.GetHashCode">
            <summary>
            Hash code used for equality comparisons.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.OnNew(GpsGate.Online.Event.EventExpressionEvaluator)">
            <summary>
            Runs when a new EventExpressionEvaluator has been created.
            Initializes the attribute for each user.
            </summary>
            <param name="evaluator">The new EventExpressionEvaluator.</param>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.OnUpdated(GpsGate.Online.Event.EventExpressionEvaluator)">
            <summary>
            Runs when an EventExpressionEvaluator has been updated.
            Initializes the attribute for each user.
            </summary>
            <param name="evaluator">The updated EventExpressionEvaluator.</param>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.OnRemoved">
            <summary>
            Runs when an EventExpressionEvaluator has been removed.
            Removes the attribute from each user.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.GetUserIDs(GpsGate.Online.Event.EventExpressionEvaluator)">
            <summary>
            Gets the users in the specified tags in the evaluator, or all users if no tags has been specified.
            </summary>
            <param name="evaluator"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.Header">
            <summary>
            User attribute notifier header/description text.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.Type">
            <summary>
            User attribute notifier "render" type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.Key">
            <summary>
            User attribute key.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.StartValue">
            <summary>
            User attribute value when notifier is started.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.EndValue">
            <summary>
            User attribute value when notifier has ended.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifier.DAO">
            <summary>
            Data access object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeColumnIconNotifier.#ctor">
            <summary>
            Sets default values for this type. Only Header should be set from outside for this particular type.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeColumnIconNotifier.NotifierTypeName">
            <summary>
            Language key for this notifier.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeColumnIconNotifier.VirtualASCXFilePath">
            <summary>
            Path to the web control.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifierReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifierReader.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifierReader.GetColumnsByApplication(System.Int32)">
            <summary>
            Gets all possible user attribute columns for the specified application.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifierReader.HasColumnHeader(System.String,System.Int32)">
            <summary>
            Checks whether the specified column header already exists.
            </summary>
            <param name="strColumnHeader"></param>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Notification.UserAttribute.UserAttributeNotifierReader.DAO">
            <summary>
            Data Access Object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.NotificationException">
            <summary>
            Base class for exception in GpsGate.Online.Notification namespace.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.NotificationException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="P:GpsGate.Online.Notification.NotificationException.LanguageKey">
            <summary>
            Key to use for translate the error.
            If not Provided in the constructor, exception name in upper case + EX_ prefix will be used.
            Save ex.message as it is to preserve backwards compatibility
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.NoMessageTemplateException">
            <summary>
            Thrown if a message template text has not been specified for a notifier that depends on a 
            message template (e.g. a concrete implentation of CommandNotifier)
            </summary>
        </member>
        <member name="T:GpsGate.Online.Notification.NotificationContext">
            <summary>
            Used to pass context to a Notifier when notifying, and to let notifier pass a custom note back.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Notification.NotificationContext.#ctor(Franson.Text.ITemplateResolver,System.Int32)">
            <summary>
            Creates a NotificationContext object.
            </summary>
            <param name="templateResolver">The ITemplateResolver at the top of the hierarchy of template resolvers.</param>
            <param name="iSender">Sender/trigger user ID.</param>
        </member>
        <member name="P:GpsGate.Online.Notification.NotificationContext.TemplateResolver">
            <summary>
            The ITemplateResolver at the top of the hierarchy of template resolvers.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.NotificationContext.Sender">
            <summary>
            Sender/trigger user ID.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Notification.NotificationContext.Note">
            <summary>
            Custom note settable by notifer, typically the ChannelNotifier will use this to let the
            EventExpressionEvaluator create and add a new argument to the event.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.FatFreakPostProcessorDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.FatFreakPostProcessorDAOSQL.DeleteProcessedTrack(GpsGate.Online.PostProcessing.TrackInfoProcessBag,System.Int32)">
            <summary>
            Deletes all post processor data.
            </summary>
            <param name="tipBag"></param>
            <param name="iPostProcessorID"></param>
            <exception cref="T:Franson.DAO.ExecuteDBException"></exception>
            <exception cref="T:Franson.DAO.ConnectionException"></exception>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.GatePostProcessorDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.DAO.GatePostProcessorDAOSQL.Name">
            <summary>
            post_processor.name
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.DAO.GatePostProcessorDAOSQL.Description">
            <summary>
            post_processor.description
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.GatePostProcessorDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.GatePostProcessorDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.GatePostProcessorDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.GatePostProcessorReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.GatePostProcessorReaderDAOSQL">
            <summary>
            Reads all post processor loadable types from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.GatePostProcessorReaderDAOSQL.#ctor">
            <summary>
            Create reader.
            </summary>
            <param name="connection"></param>
            <param name="command"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.GatePostProcessorReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns SQL query to return all gate command plugins in DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.GatePostProcessorReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.GatePostProcessorReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.GatePostProcessorReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackDataModDAOMSSQL">
            <summary>
            MySQL version.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackDataModWriterDAOSQL">
            <summary>
            Writes modifications to track_data in track_data_mod table.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackDataModWriterDAOSQL.#ctor">
            <summary>
            Create writer DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackDataModWriterDAOSQL.Add(Franson.Geo.TrackPoint,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add modification for a specific track_data entry.
            </summary>
            <param name="tpMod"></param>
            <param name="iTrackInfoID"></param>
            <param name="iPostProcessorID"></param>
            <param name="bDeleted"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackDataModDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackDataModDAOMSSQL.GetItemType">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackDataModDAOMySQL">
            <summary>
            MySQL version.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackDataModDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackDataModDAOMySQL.GetItemType">
            <summary>
            Not implemented.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL">
            <summary>
            Reads mdofied track data and track info from database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL.#ctor">
            <summary>
            Create DAO.
            </summary>
            <param name="connection"></param>
            <param name="command"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL.GetTrackDataByOwner(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="iUserID"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <param name="iPostProcessorID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL.GetTrackDataByTrackInfoId(System.Int32,System.DateTime,System.DateTime,System.Int64,System.Int64,System.Boolean,System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <param name="iStartIndex"></param>
            <param name="iStopIndex"></param>
            <param name="iPostProcessorID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL.GetTrackDataByTrackInfoId(System.Int32,System.Boolean,System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="bValid"></param>
            <param name="iPostProcessorID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL.GetTrackInfoByUser(System.Collections.Generic.IEnumerable{System.Int32},System.DateTime,System.DateTime,System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="iArrUserId">Array of userIDs to read gate message data from</param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <param name="iPostProcessorID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL.GetTrackInfoById(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="iArrTrackInfo"></param>
            <param name="iPostProcessorID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL.ReaderToBag">
            <summary>
            Convert a track info stored in <see cref="T:System.Data.IDataReader"/> row to a <see cref="T:GpsGate.Tracks.TrackInfo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns the current SQL command to be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOSQL">
            <summary>
            DAO to write TrackInfo modifications to database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOSQL.#ctor">
            <summary>
            Create writer DAO.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOSQL.Add(GpsGate.Tracks.TrackInfoBag,System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="tiBag"></param>
            <param name="iPostProcessorID"></param>
            <param name="bDeleted"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOSQL.LoadByTrackInfo(System.Int32,System.Int32)">
            <summary>
            See <see cref="!:GpsGate.Online.PostProcessing.LoadByTrackInfo"/>
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="iPostProcessorID"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOMSSQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackInfoModWriterDAOMySQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="F:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOSQL.m_lLastInsertedId">
            <summary>
            Last inserted track_postprocessor_log_id this instance has inserted.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOSQL.IsTrackInfoProcessed(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            Returns true if track info is post processed.
            </summary>
            <param name="tipBag"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOSQL.WriteStartProcessingEntry(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            Write start entry to indicate this track is undergoing post processing.
            </summary>
            <param name="tipBag"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOSQL.WriteEndProcessingEntry(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            See BO.
            </summary>
            <param name="tipBag"></param>
            <exception cref="T:System.InvalidOperationException">If WriteStartProcessingEntry wasn't called before this method</exception>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOSQL.RemoveTrackInfoEntry(System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="tipBag"></param>
            <exception cref="T:System.InvalidOperationException">If WriteStartProcessingEntry wasn't called before this method</exception>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOSQL.m_IsTableDirty(System.Int32)">
            <summary>
            Checks if any other instance of this GatePostProcessor has inserted data into the table
            since this instance have.
            
            Select the last inserted id and check if it is greater then the last id this instance has insert.
            </summary>
            <param name="iTrackInfoId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOMSSQL.#ctor(System.Int32)">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
            <param name="iPostProcId"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogDAOMySQL.#ctor(System.Int32)">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
            <param name="iPostProcId"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogReaderDAO.GetUnprocessedTrackInfoByID(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="iPostProcessorID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogReaderDAO.GetUnprocessedTrackInfoByUserID(System.Collections.Generic.IEnumerable{System.Int32},System.DateTime,System.DateTime,System.Int32)">
            <summary>
            See BO.
            </summary>
            <param name="iUserID"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <param name="iPostProcessorID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogReaderDAO.ReaderToBag">
            <summary>
            Create a bag from current value in reader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogReaderDAOMSSQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DAO.TrackPostProcessorLogReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.DelayedPosition">
            <summary>
            Can be used to get delayed position updates for users in a specific group.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DelayedPosition.#ctor(System.String,System.Int32)">
            <summary>
            Create object that can generate delayed position updates for a group of users.
            The users to be affected in the group must have <see cref="P:GpsGate.Online.GateUser.Delay"/> set.
            </summary>
            <param name="strGroupName">Group name</param>
            <param name="iAppID">Application ID</param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DelayedPosition.Start">
            <summary>
            Start.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.DelayedPosition.Stop">
            <summary>
            Stop.
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.DelayedPosition.UpdateInterval">
            <summary>
            Update interval in milliseconds. Default 15 000 milliseconds
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.FatFreakPostProcessor">
            <summary>
            Post processing rule that removes "freak" positions from track, and detects and removes fat points.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.TrackPostProcessor">
            <summary>
            Base class for <see cref="T:GpsGate.Online.PostProcessing.GatePostProcessor"/>'s that modifies track data.
            
            Keep track of which track that have been processed or not.
            Provide the implementing classes with a <see cref="!:TrackEditor"/> for track editing.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.GatePostProcessor">
            <summary>
            Base class for objects used to post process gate data such as tracks, gate messages etc.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessor.#ctor">
            <summary>
            Create new post processor.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessor.#ctor(System.Int32)">
            <summary>
            Create post processor with from database ID.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.PostProcessing.GatePostProcessor.Process" -->
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessor.Load(Franson.Reflection.LoadableType)">
            <summary>
            Loads this object in read only 
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessor.Install(Franson.Reflection.LoadableType)">
            <summary>
            Called when this ILoadable is found for the first time.
            Will install this PostProcessor and insert info in 'post_processor' table.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessor.Upgrade(Franson.Reflection.LoadableType)">
            <summary>
            NOP implementation
            Upgrades a ILoadable of type PostProcessor
            Override this to support upgrade functionality
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.GatePostProcessor.ID">
            <summary>
            Database ID for this post processing rule.
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.GatePostProcessor.Name">
            <summary>
            Name of the PostProcessor. 
            Note! Max length = 32 char
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.GatePostProcessor.Description">
            <summary>
            Description of the PostProcessor.
            Note! Max length = 255 char
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.GatePostProcessor.Dependencies">
            <summary>
            No Dependencies
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessor.SetParameters(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Process tracks for one user in a specified time interval.
            </summary>
            <param name="iUserId">User ID for which to process tracks</param>
            <param name="dtFrom">Start time in UTC</param>
            <param name="dtTo">Stop time in UTC</param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessor.SetParameters(System.Collections.Generic.IEnumerable{System.Int32},System.DateTime,System.DateTime)">
            <summary>
            Post process tracks for an array of users in a specified time interval.
            </summary>
            <param name="iArrUserUd">Array of user IDs for which to process tracks</param>
            <param name="utcFrom">Start time in UTC</param>
            <param name="utcTo">End time in UTC</param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessor.SetParameters(System.Int32)">
            <summary>
            Post process one specific track.
            </summary>
            <param name="iTrackInfoId">ID for track to process.</param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessor.SetParameters(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Post process an array of tracks.
            </summary>
            <param name="iArrTrackInfoId">Array of IDs of tracks to process.</param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessor.Process">
            <summary>
            Filter track infos set witch SetTrackInfoSource method. This method makes a best effort to process tracks.
            Any errors are logged but no exception is thrown, except if there is a configuration error, or if
            track info data cannot be read.
            </summary>
            <exception cref="T:System.InvalidOperationException">If parameters not set</exception>
            <exception cref="T:System.Exception">TrackInfo data can not be read. Some serious error in DB.</exception>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessor.DeleteProcessedTrack(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            Will always be called before <see cref="M:GpsGate.Online.PostProcessing.TrackPostProcessor.ProcessTrack(GpsGate.Online.PostProcessing.TrackInfoProcessBag)"/> is called. Should remove any old data from last time
            this track was processed using this post processor. This is necessary for reprocessing a track that has been modified.
            </summary>
            <param name="tipBag"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessor.ProcessTrack(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            Implemented by derived class to post process one track.
            NOTE! This method must handle multiple calls in one thread. It will only be access by one thread at a time.
            But it must clear its state each time it is called.
            The method can also be called again for the same track if it the track has changed. Check 
            <see cref="!:TrackInfoProcessBag.StartTime"/> for the time in UTC from the track should be post processed.
            </summary>
            <param name="trackEditor"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.DeleteProcessedTrack(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            Delete existing post process data for this post processor and specified track info.
            </summary>
            <param name="tipBag"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.ProcessTrack(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            Process unprocessed track. The track is either post processed first time, or the old process infromation has been deleted by a call to
            <see cref="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.DeleteProcessedTrack(GpsGate.Online.PostProcessing.TrackInfoProcessBag)"/>.
            This method will never be called if there is any old post process data left in database.
            </summary>
            <param name="trackEditor"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.m_FreakOutFilter(GpsGate.Online.PostProcessing.ModTrack)">
            <summary>
            Filter freak outs.
            </summary>
            <param name="modTrack"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.m_StayPointFilter(GpsGate.Online.PostProcessing.ModTrack)">
            <summary>
            Find stay points.
            </summary>
            <param name="modTrack"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.m_WhiteNoiseFatPoint(GpsGate.Online.PostProcessing.ModTrack)">
            <summary>
            Process white noise fat point.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.m_CloseWhiteNoiseFatPoint(System.Int32,GpsGate.Tracks.FatPoint,GpsGate.Online.PostProcessing.TrackPointBuffer,GpsGate.Online.PostProcessing.ModTrack)">
            <summary>
            Close a fat point and store it into temporary fat point buffer.
            </summary>
            <param name="iKeepLength"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.m_ModWhiteNoiseTrackPoints(System.Int32,GpsGate.Online.PostProcessing.TrackPointBuffer,GpsGate.Online.PostProcessing.ModTrack)">
            <summary>
            Write modified track points for white noise fat point.
            </summary>
            <param name="iKeepLength"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.m_MergeFatPoints(GpsGate.Online.PostProcessing.ModTrack)">
            <summary>
            Merge clusters of fat points.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.Upgrade(Franson.Reflection.LoadableType)">
            <summary>
            Upgrade default settings
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakPostProcessor.Install(Franson.Reflection.LoadableType)">
            <summary>
            Install default settings.
            </summary>
            <param name="typeInfo"></param>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.FatFreakPostProcessor.Name">
            <summary>
            Returns "FatFreak"
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.FatFreakPostProcessor.Description">
            <summary>
            Returns a free text description.
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.FatFreakReader">
            <summary>
            Fetching track data where "fat-points", "freak-out" and other abnormalities are filtered away.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.TrackGateDataReader">
            <summary>
            Reads post processed track data.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.GateDataReader">
            <summary>
            Base class for data <see cref="T:GpsGate.Online.PostProcessing.GatePostProcessor"/> aware readers.
            
            The reader will execute the registered <see cref="T:GpsGate.Online.PostProcessing.GatePostProcessor"/> before returning data.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GateDataReader.RegisterPostProcessor(GpsGate.Online.PostProcessing.GatePostProcessor)">
            <summary>
            Register a <see cref="T:GpsGate.Online.PostProcessing.GatePostProcessor"/> which will be executed when fetching data.
            Only one post processor can be registered.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GateDataReader.Process">
            <summary>
            Executes each registered processor.
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.GateDataReader.PostProcessor">
            <summary>
            Returns registered post processor.
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.ITrackDataReader">
            <summary>
            Defines a TrackDataReader e.g 
            <see cref="!:FatFreakReader"/> returning filtered track data and <see cref="T:GpsGate.Tracks.TrackDataReader"/> returning raw track data.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.ITrackDataReader.GetTrackDataByTrackInfoId(System.Int32,System.Boolean)">
            <summary>
            Returns track points for one track.
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="bValid"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.ITrackDataReader.GetTrackDataByTrackInfoId(System.Int32,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Returns track points for one track limited to a start and stop index.
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="lStartIndex"></param>
            <param name="lStopIndex"></param>
            <param name="bValid"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.ITrackDataReader.GetTrackDataByTrackInfoId(System.Int32,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Returns track points from one track with a start and stop time.
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="utcStart"></param>
            <param name="utcStop"></param>
            <param name="bValid"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.ITrackDataReader.GetTrackDataByTrackInfoId(System.Int32,System.DateTime,System.DateTime,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return track points from one track limited by start/stop index and start/stop time.
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="utcStart"></param>
            <param name="utcStop"></param>
            <param name="lStartIndex"></param>
            <param name="lStopIndex"></param>
            <param name="bValid"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.ITrackDataReader.GetTrackDataByOwner(System.Int32,System.Boolean)">
            <summary>
            Returns all track points for one user.
            </summary>
            <param name="iOwnerID"></param>
            <param name="bValid"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackGateDataReader.#ctor">
            <summary>
            Create reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackGateDataReader.GetTrackDataByOwner(System.Int32,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Reads post process track for user in specified time interval.
            </summary>
            <param name="iUserID">Which user</param>
            <param name="dtFrom">Start time in UTC</param>
            <param name="dtTo">End time in UTC</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackGateDataReader.GetTrackDataByOwner(System.Int32,System.Boolean)">
            <summary>
            Readpost processed track data for user.
            </summary>
            <param name="iOwnerID"></param>
            <param name="bValid">Set to false to also read invalid track data</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackGateDataReader.GetGateMessageByTrackInfo(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load <see cref="T:GpsGate.Online.Message.GateMessage"/>s that belongs to a <see cref="T:GpsGate.Tracks.TrackInfo"/>. You can specify which GpsGate Message Names to be loaded.
            If a specified variable doesn't exists for a track point the track point will be loaded anyway.
            Uses preprocessed data.
            </summary>
            <param name="iTrackInfoID">TrackInfo to load from</param>
            <param name="lStartIndex">StartIndex. Set to 0 to start from beginning.</param>
            <param name="iCount">Number of messages to return. Set to -1 to return all.</param>
            <param name="utcStart">Start of time interval in UTC. Set to DateTime.MinValue to disable start time.</param>
            <param name="utcStop">Stop of time interval in UTC. Set to DateTime.MaxValue to disable stop time.</param>
            <param name="bValid">Set to false to also load invalid track points</param>
            <param name="arrVariables">Message Names to load. Set to null to load all.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackGateDataReader.GetGateMessageByUser(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Load <see cref="T:GpsGate.Online.Message.GateMessage"/>s that belongs to a <see cref="!:User"/>. You can specify which GpsGate Message Names to be loaded.
            If a specified variable doesn't exists for a track point the track point will be loaded anyway.
            Uses preprocessed data.
            </summary>
            <param name="iUserID">User to load from</param>
            <param name="lStartIndex">StartIndex. Set to 0 to start from beginning.</param>
            <param name="iCount">Number of messages to return. Set to -1 to return all.</param>
            <param name="utcStart">Start of time interval in UTC. Set to DateTime.MinValue to disable start time.</param>
            <param name="utcStop">Stop of time interval in UTC. Set to DateTime.MaxValue to disable stop time.</param>
            <param name="bValid">Set to false to also load invalid track points</param>
            <param name="arrVariables">Message Names to load. Set to null to load all.</param>
            <param name="bAscending">Set sort order by time stamp of the data.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackGateDataReader.GetGateEvent(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get GateEvents for a <see cref="T:GpsGate.Online.GateUser"/> and <see cref="T:GpsGate.Online.Event.EventExpressionEvaluator"/> in the given <see cref="!:Application"/>
            </summary>
            <param name="iApplicationId">ID of application of interest</param>
            <param name="lStartIndex">Start Index</param>
            <param name="iCount">Number of events</param>
            <param name="utcStart">Start Time stamp</param>
            <param name="utcEnd">End Time Stamp</param>
            <param name="iEventExpressionEvaluatorID">Evaluator ID</param>
            <param name="iUserID">User ID</param>
            <param name="bAscending">Sort order</param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.TrackGateDataReader.TrackDAO">
            <summary>
            Returns <see cref="T:GpsGate.Online.PostProcessing.DAO.TrackGateDataReaderDAOSQL"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.TrackGateDataReader.MessageDAO">
            <summary>
            Returns <see cref="!:GateMessageReaderDAO"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.TrackGateDataReader.EventDAO">
            <summary>
            Object to interact with the database through.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakReader.#ctor">
            <summary>
            Create reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakReader.GetTrackDataByOwner(System.Int32,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Returns a track for the given user id's and period of time.
            </summary>
            <param name="iArrUser">Array of user id for which tracks will be fetched</param>
            <param name="dtFrom">UTC time from which data should be read</param>
            <param name="dtTo"></param>
            <param name="bValid">Set to true if only valid track data points are to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakReader.GetTrackDataByOwner(System.Int32,System.Boolean)">
            <summary>
            Make sure track points is processed, and returns all track points for specified user.
            </summary>
            <param name="iOwnerID"></param>
            <param name="bValid">Set to false to also return invalid track points</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakReader.GetGateMessageByTrackInfo(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load <see cref="!:GateMessage"/>s that belongs to a <see cref="T:GpsGate.Tracks.TrackInfo"/>. You can specify which GpsGate Message Names to be loaded.
            If a specified variable doesn't exists for a track point the track point will be loaded anyway.
            The TrackInfo is preprocessed first.
            </summary>
            <param name="iTrackInfoID">TrackInfo to load from</param>
            <param name="lStartIndex">StartIndex. Set to 0 to start from beginning.</param>
            <param name="iCount">Number of messages to return. Set to -1 to return all.</param>
            <param name="utcStart">Start of time interval in UTC. Set to DateTime.MinValue to disable start time.</param>
            <param name="utcStop">Stop of time interval in UTC. Set to DateTime.MaxValue to disable stop time.</param>
            <param name="bValid">Set to false to also load invalid track points</param>
            <param name="arrVariables">Message Names to load. Set to null to load all.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakReader.GetGateMessageByUser(System.Int32,System.Int64,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Load <see cref="!:GateMessage"/>s that belongs to a <see cref="!:User"/>. You can specify which GpsGate Message Names to be loaded.
            If a specified variable doesn't exists for a track point the track point will be loaded anyway.
            The track data is preprocessed first.
            </summary>
            <param name="iUserID">User to load from</param>
            <param name="lStartIndex">StartIndex. Set to 0 to start from beginning.</param>
            <param name="iCount">Number of messages to return. Set to -1 to return all.</param>
            <param name="utcStart">Start of time interval in UTC. Set to DateTime.MinValue to disable start time.</param>
            <param name="utcStop">Stop of time interval in UTC. Set to DateTime.MaxValue to disable stop time.</param>
            <param name="bValid">Set to false to also load invalid track points</param>
            <param name="arrVariables">Message Names to load. Set to null to load all.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatFreakReader.GetFatPointsByTrackInfoAndTimeSpan(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Returns fat points for specified track and time period.
            </summary>
            <param name="iTrackInfoId">Original track info ID</param>
            <param name="dtFrom">From time UTC.</param>
            <param name="dtTo">To time UTC</param>
            <returns></returns>
        </member>
        <member name="F:GpsGate.Online.PostProcessing.FatPointBuffer.m_listFatPoints">
            <summary>
            List of fat points in 
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatPointBuffer.Add(GpsGate.Tracks.FatPoint)">
            <summary>
            Adds fat point to buffer
            </summary>
            <param name="fp"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatPointBuffer.Add(GpsGate.Tracks.FatPoint,System.Double)">
            <summary>
            Add fat point and include distance from last fat point. If fat point overlapps with exitsing fat points in buffer
            it is merged.
            </summary>
            <param name="fp"></param>
            <param name="dblDistanceTo"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatPointBuffer.GetMerged(System.Double,System.Double)">
            <summary>
            Returns merged fat points if they are close enough.
            Reurns null when there are no more fat points to merge.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatPointBuffer.m_FindCluster">
            <summary>
            Returns a clustered fat point if found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.FatPointBuffer.m_BuildCluster(System.Int32)">
            <summary>
            Returns true if a cluster of iClusterSize could be built from stored fat points.
            </summary>
            <param name="iClusterSize"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.FatPointBuffer.FatPoints">
            <summary>
            Returns fat points in buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.GatePostProcessorFactory">
            <summary>
            NOTE!!!
            This class is not in use.
            <see cref="T:GpsGate.Online.PostProcessing.GatePostProcessor"/> are created directley from the <see cref="T:GpsGate.Online.PostProcessing.GatePostProcessorReader"/>
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.GatePostProcessorReader">
            <summary>
            Loads <see cref="T:Franson.Reflection.ILoadable"/>'s of type <see cref="T:GpsGate.Online.PostProcessing.GatePostProcessor"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessorReader.GetReader">
            <summary>
            Returns singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessorReader.ClearSingleton">
            <summary>
            Will replace the singleton object with a new one.
            Call this method if you want to clear any caches, like when making UNIT tests.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessorReader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessorReader.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns "post_processor_id" field
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.GatePostProcessorReader.GetPostProcessor(System.Type)">
            <summary>
            Get a new instance of a <see cref="!:PostProcessor"/> for the given type.
            Takes a .NET <see cref="T:System.Type"/> and returns an instance of the corresponding <see cref="T:Franson.Reflection.LoadableType"/>.
            </summary>
            <param name="typeProcessor">.NET Type to be mapped to a new loadable type instance.</param>
            <returns>Returns null if not a matching loadable type exists.</returns>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.ModTPStatus">
            <summary>
            Status of modified track point.
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.ModTP">
            <summary>
            Modified track point.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.ModTrack.#ctor(GpsGate.Tracks.TrackInfoBag)">
            <summary>
            </summary>
            <param name="tiBag">The TrackInfo being modified.</param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.ModTrack.AddOrgTP(Franson.Geo.TrackPoint)">
            <summary>
            Add original TrackPoint. Must be added in time order.
            </summary>
            <param name="tp"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.ModTrack.AddModTP(GpsGate.Online.PostProcessing.ModTP)">
            <summary>
            Add modified modification.
            </summary>
            <param name="tp"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.ModTrack.GetModTrack(System.Boolean,System.Boolean)">
            <summary>
            Return modified track in time order.
            </summary>
            <param name="bOnlyMod">True if only modified points should be returned.</param>
            <param name="bIncludeDeleted">True if deleted TrackPoints should be included.</param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.ModTrack.OrgTrackInfo">
            <summary>
            TrackInfo being modified.
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.ModTrack.FPBuffer">
            <summary>
            Gets and sets current fat point buffer. Each filter step 
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.PostProcTrackRecorder">
            <summary>
            Post processes tracks when a new track is started.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Tracks.TrackRecorder">
            <summary>
            Handles recording to one track in the database. Will filter data according to user's track recorder rules.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:GpsGate.Tracks.TrackRecorder.m_trackInfo">
            <summary>
            Active TrackInfo for this recorder.
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.TrackRecorder.m_trackDataDAO">
            <summary>
            DAO for saved TrackPoints.
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.TrackRecorder.m_bRecordingModified">
            <summary>
            Set to true if the Recording property is modified.
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.TrackRecorder.m_dblTolerance">
            <summary>
            25% tolerance
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.#ctor">
            <summary>
            Create TrackRecorder.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.SetParamaters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Update track recorder settings from a dictionary of values to change.
            </summary>
            <param name="dicParamaters"></param>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.CopyFilter(GpsGate.Tracks.TrackRecorder)">
            <summary>
            Copies the recording filter from another recorder.
            </summary>
            <param name="recTarget">TrackRecorder to copy from</param>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.LoadLifeTrackRecorderByUserID(System.Int32)">
            <summary>
            Load life track recorder for user.
            </summary>
            <param name="iUserID"></param>
            <exception cref="T:GpsGate.Tracks.DAO.TrackRecorderNotFoundException">Thrown if no life track recorder is created for this user.</exception>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.LoadByOwnerAndID(System.Int32,System.Int32)">
            <summary>
            Loads TrackRecorder by user and ID. This method is used to load a specific recorder and make sure it has a specific 
            owner.
            </summary>
            <param name="iUserID">ID of owner</param>
            <param name="iID">ID</param>
            <exception cref="T:GpsGate.Tracks.DAO.TrackRecorderNotFoundException">Thrown if no record found.</exception>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.AddTrackPoint(Franson.Geo.TrackPoint)">
            <summary>
            Save valid track points. Use filters.
            </summary>
            <param name="tpAdd"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.AddTrackPoint(Franson.Geo.TrackPoint,System.Boolean)">
            <summary>
            Will apply filters and keep <see cref="T:Franson.Geo.TrackPoint"/> if it should be saved according to filters.
            <see cref="M:GpsGate.Tracks.TrackRecorder.Update"/> will write changes to database. The recorder can keep a list of TrackPoints
            before they are stored in the DB using Update.
            If the <see cref="P:GpsGate.Tracks.TrackRecorder.RestartDistance"/> or <see cref="P:GpsGate.Tracks.TrackRecorder.RestartTime"/> creteria are met <see cref="M:GpsGate.Tracks.TrackRecorder.Update"/> is first called
            and a new <see cref="P:GpsGate.Tracks.TrackRecorder.TrackInfo"/> is created to which the TrackPoint is added.
            </summary>
            <param name="trackPoint">TrackPoint to filter.</param>
            <param name="bSaveAlways">If set to true the track point will always be saved</param>
            <returns>True if TrackPoint is kept.</returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.SnapLastPosition(Franson.Geo.TrackPoint)">
            <summary>
            Used by derived class to add a last position to track.
            </summary>
            <param name="tpAdd"></param>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.NewTrackInfo">
            <summary>
            Called when a new <see cref="P:GpsGate.Tracks.TrackRecorder.TrackInfo"/> is created.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.Update">
            <summary>
            Updates DB with TrackRecorder and <see cref="P:GpsGate.Tracks.TrackRecorder.TrackInfo"/> data.
            If the TrackRecorder is new a TrackInfo object is automatically created.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorder.ToString">
            <summary>
            Returns name of track recorder, TrackInfo.
            </summary>
            <returns>Name of TrackRecorder</returns>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.Tolerance">
            <summary>
            This is the tolarance use for recording a new track point. By default this value is set to 0.25, set to 0.00 for no tolerance.
            The track recorder settings are used to configure a device's reporting interval. However, the device selldom keeps that interval.
            Therefor this tolernace value exists for reported positions. Reports under the tolerance value will not be saved.
            
            E.g. Set TimeFilter to 60, this will instruct the device to report every 60 seconds. If it in reallity reports every 50 seconds
            the position report will be saved any way. If reporting every 40 seconds, only every second report will be saved.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.Name">
            <summary>
            Name of this recorder. Can be null.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.OwnerID">
            <summary>
            User this recorder belongs to.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.TrackInfo">
            <summary>
            <see cref="P:GpsGate.Tracks.TrackRecorder.TrackInfo"/> object this TrackRecorder is recording to.
            If you set this property to null the next call to <see cref="M:GpsGate.Tracks.TrackRecorder.AddTrackPoint(Franson.Geo.TrackPoint)"/> will
            create a new track (a new track_info record in the database.
            </summary>
            <exception cref="T:System.ArgumentException">If set to another value than null</exception>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.TrackCategoryID">
            <summary>
            "_main" for default track recorder.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.Recording">
            <summary>
            True if this recorder is active.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.LastValidTrackDataID">
            <summary>
            ID of last saved valid track data. Will not be updated for track data going backward in time.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.LastUncertainTrackDataID">
            <summary>
            ID of last track data saved, that might have been invalid. Will not be updated for track data going backward in time.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.LastAddedTrackDataID">
            <summary>
            ID of last added track data. Also for data going backward in time. Only available after a call to <see cref="M:GpsGate.Tracks.TrackRecorder.Update"/>
            This value is not saved to database, and is only present while the track recorder object is alive.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.SmsTimeFilter">
            <summary>
            Time interval in seconds recommended for device to use if SMS is transport.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.Motion">
            <summary>
            Device is recommended to one send position updates if it is moving. Possibly activated by motion sensor.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.TimeFilter">
            <summary>
            Which time interval in seconds track data should be recorded. 0 to disable. Default is 0.
            E.g. a value of 60 means that a track point will be saved to the database if the
            time difference to the last saved track point is 60 seconds.
            Several filters can be active at once, e.g. distance + time. The filter conditions
            are "OR:ed" together.
            
            The settings values MinTimeFilter (default 60 seconds) and MaxTimeFilter (default 0 - disabled) sets the allowed min/max values.
            If the new value is outside the limits it will be adjusted to one of the closest max/min value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if negative</exception>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.DistanceFilter">
            <summary>
            Which distance interval in meters track data should be recorded. 0 to disable. Default is 0.
            E.g. a value of 100 means that a track point will be saved to the database if the distance
            to the last saved track point is 100 meters or more.
            
            The settings values MinDistanceFilter (default 500 meters) and MaxDistanceFilter (default 0 - disabled) sets the allowed min/max values.
            If the new value is outside the limits it will be adjusted to one of the closest max/min value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if negative</exception>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.DirectionFilter">
            <summary>
            How many degrees the heading has changed since last time a track point was saved to the database.
            0 to disable. Default is 0.
            E.g. a value of 40 means that a track point will be saved to the database if the change
            in heading compared to last saved track point is 40 degrees or more.
            
            The settings values MinDirectionFilter (default 40 degrees) and MaxDirectionFilter (default 0 - disabled) sets the allowed min/max values.
            If the new value is outside the limits it will be adjusted to one of the closest max/min value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if not benween 0 and 180</exception>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.DirectionThreshold">
            <summary>
            A distance interval in meters before <see cref="P:GpsGate.Tracks.TrackRecorder.DirectionFilter"/> should take effect.
            
            The settings values MinDirectionThreshold (default 10 meters) and MaxDirectionThreshold (default 0 - disabled) sets the allowed min/max values.
            If the new value is outside the limits it will be adjusted to one of the closest max/min value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if negative</exception>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.SpeedFilter">
            <summary>
            Change in speed before new track point is saved to DB. In meter per seconds.
            E.g. if set to 10, a change in speed from 3 m/s to 13 m/s will save the track point to DB.
            
            The settings values MinSpeedFilter (default 0 - disabled) and MaxSpeedFilter (default 0 - disabled) sets the allowed min/max values.
            If the new value is outside the limits it will be adjusted to one of the closest max/min value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if negative</exception>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.RestartTime">
            <summary>
            If the time difference in seconds between to added TrackPoints is greater than this value,
            This TrackRecorder will start a new TrackInfo, and end the last
            active TrackInfo.
            
            The settings values MinRestartTime (default 7200 seconds) and MaxRestartTime (default 0 - disabled) sets the allowed min/max values.
            If the new value is outside the limits it will be adjusted to one of the closest max/min value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if negative</exception>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.RestartDistance">
            <summary>
            Same as for <see cref="P:GpsGate.Tracks.TrackRecorder.RestartTime"/>, but will act on distance difference in meters.
            
            The settings values MinRestartDistance (default 0 - disabled) and MaxRestartDistance (default 0 - disabled) sets the allowed min/max values.
            If the new value is outside the limits it will be adjusted to one of the closest max/min value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if negative</exception>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.RestartInterval">
            <summary>
            Interval in seconds when a new TrackInfo will be created for track. 0 to deactivate.
            <see cref="P:GpsGate.Tracks.TrackRecorder.RestartIntervalOffset"/> for more information.
            
            The settings values MinRestartInterval (default 86400 - once every 24 hours) and MaxRestartInterval (default 86400 - once every 24 hours) sets the allowed min/max values.
            If the new value is outside the limits it will be adjusted to one of the closest max/min value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if negative</exception>
        </member>
        <member name="P:GpsGate.Tracks.TrackRecorder.RestartIntervalOffset">
            <summary>
            Offset in seconds from UTC midnight from were <see cref="P:GpsGate.Tracks.TrackRecorder.RestartInterval"/> is started.
            
            E.g. a value of -3600 will restart a track 1 hour before UTC midnight. This is equal to
            CET winter time. East of Greenwich gives a negative offset, west a positive offset.
            This means U.S. has a positive value. And Asia has a negative value.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.PostProcTrackRecorder.NewTrackInfo">
            <summary>
            Called when a new track is track info is created for a track.
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.PostProcTrackRecorderList">
            <summary>
            Handles a list of <see cref="T:GpsGate.Online.PostProcessing.PostProcTrackRecorder"/>
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Tracks.TrackRecorderList">
            <summary>
            Handles a set of <see cref="T:GpsGate.Tracks.TrackRecorder"/> objects
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorderList.#ctor">
            <summary>
            Create track recorder list.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorderList.LoadByRecordingAndOwner(Franson.Directory.User)">
            <summary>
            Loads all <see cref="T:GpsGate.Tracks.TrackRecorder"/> objects for this user that are set to record.
            </summary>
            <param name="user">User to load recorders for.</param>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorderList.LoadByRecordingAndOwner(System.Int32)">
            <summary>
            Loads all <see cref="T:GpsGate.Tracks.TrackRecorder"/> objects for this user that are set to record.
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorderList.AddTrackPoint(Franson.Geo.TrackPoint)">
            <summary>
            Will pass the <see cref="T:Franson.Geo.TrackPoint"/> to all <see cref="T:GpsGate.Tracks.TrackRecorder"/>s loaded
            into this list. Each recorder will decide if the TrackPoint is kept or not given
            its recording filters. The information is saved to the database when <see cref="M:GpsGate.Tracks.TrackRecorderList.Update"/> is called.
            
            </summary>
            <param name="trackPoint">TrackPoint to store in data base.</param>
            <returns>True if trackPoint is saved to any TrackRecorder. If true is returned, <see cref="M:GpsGate.Tracks.TrackRecorderList.Update"/>
            can be called to save information to DB.</returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorderList.GetItemType">
            <summary>
            Returns typeof(TrackRecorder).
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackRecorderList.Update">
            <summary>
            Stores all changes for all recorders to DB.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.PostProcTrackRecorderList.GetItemType">
            <summary>
            Returns typeof(PostProcTrackRecorder)
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.TrackDataModWriter">
            <summary>
            Used by a post processing rule to make modifications to a track.
            "insert", "update" and "delete".
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackDataModWriter.#ctor">
            <summary>
            Create writer. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackDataModWriter.Add(Franson.Geo.TrackPoint,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds track modification.
            To modify exisitng track_data set TrackPoint.ID to original track_data.track_data_id
            To delete existing track_data set bDeleted to true.
            To insert new data set TrackPoint.ID to 0.
            </summary>
            <param name="tpMod">TrackPoint to modify. ID should be tha same as for track_data record that is modified. If 0 a modification is inserted.</param>
            <param name="iTrackInfoID">Original TrackInfo</param>
            <param name="iPostProcessorID">Rule that makes this modification.</param>
            <param name="bDeleted">Set to true if </param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackDataModWriter.GetItemType">
            <summary>
            Returns typeof(TrackDataModWriter)
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.TrackInfoModWriter">
            <summary>
            Used to save results from post processing a track.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackInfoModWriter.#ctor">
            <summary>
            Create writer.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackInfoModWriter.Add(GpsGate.Tracks.TrackInfoBag,System.Int32)">
            <summary>
            Adds track modification.
            To modify exisitng track_info set TrackInfoBag.ID to original track_info.track_info_id
            
            Use <see cref="M:GpsGate.Online.PostProcessing.TrackInfoModWriter.LoadByTrackInfo(System.Int32,System.Int32)"/> to pre-load a track info mod to be modified. Use this when 
            post processing a current track.
            </summary>
            <param name="tiBag"></param>
            <param name="iPostProcessorID"></param>
            <param name="bDeleted"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackInfoModWriter.LoadByTrackInfo(System.Int32,System.Int32)">
            <summary>
            Load existing track info mod to writer for modification. Used to continue working on a modified track info.
            Will return a <see cref="T:GpsGate.Tracks.TrackInfoBag"/> with and ID != 0 if a modification is found.
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="iPostProcessorID"></param>
            <returns>Returns loaded modified track info if found.</returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackInfoModWriter.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Always thrown</exception>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.TrackInfoProcessBag">
            <summary>
            Bag that contains track info data to be post processed.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.PostProcessing.TrackInfoProcessBag.#ctor(GpsGate.Tracks.TrackInfoBag,System.Int32,System.Int32)" -->
        <member name="M:GpsGate.Online.PostProcessing.TrackInfoProcessBag.ToString">
            <summary>
            Returns TrackInfoBag, PostProcessorID, DirtyCount
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.TrackInfoProcessBag.TrackInfoBag">
            <summary>
            TrackInfo for track to be processed.
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.TrackInfoProcessBag.PostProcessorID">
            <summary>
            Dirty time stamp for last time this track was processed. DateTime.MinValue if never processed.
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.TrackInfoProcessBag.DirtyCount">
            <summary>
            Dirty count last time this track info was post processed.
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.TrackPointBuffer">
            <summary>
            Circular buffer used when modifying tracks.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.#ctor(System.Int32)">
            <summary>
            Create buffer.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.Add(Franson.Geo.TrackPoint)">
            <summary>
            Add "old" track point from track_data table to end of buffer.
            </summary>
            <param name="tpOld"></param>
            <exception cref="T:System.InvalidOperationException">If buffer is full.</exception>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.GetFirst">
            <summary>
            Returns and removes first track point in buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.Reset">
            <summary>
            Removes all track points from buffer.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.Peek(System.Int32)">
            <summary>
            Returns track point by index into circular buffer. Does not remove track point from buffer.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.PeekInvalidPeer(System.Int32)">
            <summary>
            Returns the invalid peer for specific index. Returns null if no such track point exists.
            The "invalid peer" is next invalid track point following a valid track point, if such exists.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.PeekEnd(System.Int32)">
            <summary>
            Returns track point with index from end of buffer.
            </summary>
            <param name="iIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.HeadingChange(System.Int32,System.Double)">
            <summary>
            The avarage heading change for the last iCount track points. A high number makes it a more likely fat point.
            Heading changes for moves less than GPS accuracy (default 3 meters, can be changed by settings) 
            are considered to be 180 degrees.
            </summary>
            <param name="iCount">Number of points to include in calculation.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.DistanceRatio(System.Int32)">
            <summary>
            Divide the total travelled distance between end points, and the length of the track.
            A straigh track without turns returns 1.0
            A freakout returns a value close to 0.
            </summary>
            <param name="iCount">Number of points to consider from end of track.</param>
            <returns>A value beween 0 and 1.0</returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.GreatestDistance(System.Int32)">
            <summary>
            Returns greatest distance between two points in specified range.
            </summary>
            <param name="iCount">Number of points in range, from end of buffer.</param>
            <returns>Distance in meters.</returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.GreatestSpeed(System.Int32)">
            <summary>
            Return greatest speed between two points in specified range. Count from end of buffer.
            </summary>
            <param name="iCount"></param>
            <returns>Speed in meters per second.</returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPointBuffer.AveragePosition(System.Int32,System.Int32)">
            <summary>
            Returns the avarage position for specified range. Longitude, latitude and altitude are averaged.
            </summary>
            <param name="iCount"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.TrackPointBuffer.Count">
            <summary>
            Number of track points in buffer.
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.TrackPointBuffer.BufferSize">
            <summary>
            Total buffer size
            </summary>
        </member>
        <member name="P:GpsGate.Online.PostProcessing.TrackPointBuffer.IsFull">
            <summary>
            Returns true if buffer is full and cannot store any more track data.
            </summary>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.TrackPostProcessorLog">
            <summary>
            Manage the 'track_post_processor_log' table.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessorLog.GetTrackPostProcessorLog(System.Int32)">
            <summary>
            Get an instance of a TrackPostProcessingLog belonging to the provided PostProcessor
            </summary>
            <param name="iPostProcId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessorLog.#ctor(System.Int32)">
            <summary>
            Default private constructor. This object should be accessed by singleton factory style.
            Will load log records for this pos processor.
            </summary>
            <param name="iPostProcId"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessorLog.IsTrackInfoProcessed(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            Checks if this trackInfo is processed. 
            Should be found in table track_post_process_log
            </summary>
            <param name="tipBag"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessorLog.WriteStartProcessingEntry(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            Write entry to 'track_post_processor_log'
            Set the 'track_info_id', 'post_processor_id' and 'start_time_stamp' fields.
            </summary>
            <param name="tipBag"></param>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessorLog.WriteEndProcessingEntry(GpsGate.Online.PostProcessing.TrackInfoProcessBag)">
            <summary>
            Writes entry to 'track_post_processor_log' and set the 'finish_time_stamp' field.
            </summary>
            <param name="tipBag"></param>
        </member>
        <member name="T:GpsGate.Online.PostProcessing.TrackPostProcessorLogReader">
            <summary>
            Reads up information from database related to track post processor log.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessorLogReader.#ctor">
            <summary>
            Create reader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessorLogReader.GetUnprocessedTrackInfoByID(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Return track info, if it is unprocessed or partly unprocessed.
            </summary>
            <param name="iTrackInfoID">TrackInfo ID in DB</param>
            <param name="iPostProcessorID">Post processor ID in DB</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessorLogReader.GetUnprocessedTrackInfoByUserID(System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Returns all unprocessed or partly unprocessed track infos for user.
            </summary>
            <param name="iUserID">User</param>
            <param name="dtFrom">Start of interval in UTC</param>
            <param name="dtTo">End of interval in UTC</param>
            <param name="iPostProcessorID">Post processor</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.PostProcessing.TrackPostProcessorLogReader.GetUnprocessedTrackInfoByUserID(System.Collections.Generic.IEnumerable{System.Int32},System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Returns all unprocessed or partly unprocessed track infos for a set of users.
            </summary>
            <param name="iUserID">array with user id's</param>
            <param name="dtFrom">Start of interval in UTC</param>
            <param name="dtTo">End of interval in UTC</param>
            <param name="iPostProcessorID">Post processor</param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Online.Reporting.DAO.ReportViewerDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DAO.ReportViewerDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="P:GpsGate.Online.Reporting.DAO.ReportViewerDAOSQL.Name">
            <summary>
            Name 0 - 45, NOT NULL
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.DAO.ReportViewerDAOSQL.Description">
            <summary>
            Description 0 - 255 chars or NULL
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DAO.ReportViewerDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Reporting.DAO.ReportViewerDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DAO.ReportViewerDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Reporting.DAO.ReportViewerInstanceReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DAO.ReportViewerInstanceReaderDAOSQL.CreateBag(System.Data.IDataReader)">
            <summary>
            Add database application ID to instance arguments.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.DAO.ReportViewerInstanceReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Reporting.DAO.ReportViewerInstanceReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DAO.ReportViewerInstanceReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Online.Reporting.DAO.StoredReportDAOMSSQL">
            <summary>
            MySQL Implementation of ReportTemplate DAO
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DAO.StoredReportDAOSQL.#ctor">
            <summary>
            Create new ReportTemplate Data access object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DAO.StoredReportDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load ReportTemplate identified by unique ID
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.DAO.StoredReportDAOSQL.m_SetParameterRow(System.Data.DataRow,System.String,GpsGate.Online.Reporting.ReportParameter)">
            <summary>
            Set parameter child table row. 
            Using XxmlSerializer to write parameter value.
            </summary>
            <param name="drParam"></param>
            <param name="strName"></param>
            <param name="param"></param>
        </member>
        <member name="T:GpsGate.Online.Reporting.DAO.StoredReportDAOMySQL">
            <summary>
            MySQL Implementation of ReportTemplate DAO
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.DateGrouping">
            <summary>
            Used as argument when grouping of data on date parameters is available.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.HtmlReportViewer">
            <summary>
            Extended <see cref="T:GpsGate.Online.Reporting.ReportViewer"/> to supply HTML specific properties such as web paths.
            
            Extend this class when creating a custom <see cref="!:ReportVierwer"/> that should be shown in the 
            web application GUI.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.ReportViewer">
            <summary>
            Represents a viewable report.
            
            Implement this base class to create a custom report.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GpsGate.Online.Reporting.IReportViewer" -->
        <member name="P:GpsGate.Online.Reporting.IReportViewer.ID">
            <summary>
            Unique database ID of the ReportViewer.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportViewer.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportViewer.Load(Franson.Reflection.LoadableType)">
            <summary>
            Called when object is created.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportViewer.Install(Franson.Reflection.LoadableType)">
            <summary>
            Install report.
            </summary>
            <param name="loadableType"></param>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewer.Source">
            <summary>
            Derived classes should return the <see cref="T:GpsGate.Online.Reporting.ReportSource"/> for which this report viewer should display.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewer.InstallName">
            <summary>
            Name of the report which it will be first installed as.
            Max 45chars
            Allows NULL = false
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewer.InstallDescription">
            <summary>
            Description of the report which it will be first installed as.
            Max 255chars.
            Allows NULL = true
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GpsGate.Online.Reporting.ReportViewer.SupportedApplicationDefinitions" -->
        <member name="P:GpsGate.Online.Reporting.ReportViewer.Type">
            <summary>
            The type of the report.
            If set to HTML it will be plugged-in in web pages.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewer.Name">
            <summary>
            Name of the report. Max 45char.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewer.Description">
            <summary>
            Description of the report which it will be first installed as.
            Max 255chars.
            Allows NULL = true
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewer.ApplicationId">
            <summary>
            The id of the application this viewer are created for.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewer.Dependencies">
            <summary>
            Dependent of the ApplicationDefinitions to support defined by SupportedApplicationDefinitions property.
            The application definitions must be installed before this and therefor returned as dependencies.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewer.DAO">
            <summary>
            Object to access database through
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.HtmlReportViewer.Type">
            <summary>
            Return ViewerType.Html
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.HtmlReportViewer.ReportBasePath">
            <summary>
            The base path where the Report markup is.
            
            The default is "~/Reports/"
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.HtmlReportViewer.ReportFilePath">
            <summary>
            Path of the specific report file.
            
            E.g. "return /DistanceReport.aspx"
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.IStoreableReport">
            <summary>
            Interface defining a report that can be stored.
            
            ReportViewer must implement this interface to get store functionallity.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.IStoreableReport.LoadReport(System.Collections.Generic.Dictionary{System.String,GpsGate.Online.Reporting.ReportParameter},GpsGate.Online.Reporting.ReportContext)">
            <summary>
            Called when the <see cref="T:GpsGate.Online.Reporting.ReportViewer"/> is loaded through <see cref="T:GpsGate.Online.Reporting.StoredReport"/> from the database.
            Set all required <see cref="T:GpsGate.Online.Reporting.ReportParameter">ReportParameters</see> here.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="T:GpsGate.Online.Reporting.ReportContext">
            <summary>
            Contains contextual information where a report executes in.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportContext.#ctor(System.Int32,Franson.Localization.Locale,System.Globalization.CultureInfo,System.TimeSpan)">
            <summary>
            Create a new context object.
            </summary>
            <param name="iAppliationID">ID of the application for which the report is executed.</param>
            <param name="locale">Localization object containg translation and measurement information.</param>
            <param name="culture">Current executing users .NET Culture.</param>
            <param name="tsClientUtcOffset">Current executing users time offset to UTC.</param>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportContext.ApplicationID">
            <summary>
            ID of the application for which the report is executed.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportContext.Locale">
            <summary>
            Localization object containg translation and measurement information.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportContext.ClientCulture">
            <summary>
            Current executing users .NET Culture.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportContext.LocalTimeOffset">
            <summary>
            The Clients time offset to UTC. 
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.ReportException">
            <summary>
            Exception thrown on Reporting errors.
            </summary>
        </member>
        <member name="T:GpsGate.Online.GpsGateOnlineException">
            <summary>
            Base class for exception in GpsGate.Online namespace.
            </summary>
        </member>
        <member name="M:GpsGate.Online.GpsGateOnlineException.LogInnerExceptions(System.Exception)">
            <summary>
            Will log an inner exceptions.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:GpsGate.Online.GpsGateOnlineException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:GpsGate.Online.GpsGateOnlineException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="M:GpsGate.Online.GpsGateOnlineException.#ctor(System.String,System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
            <param name="strLanguageKey"></param>
        </member>
        <member name="P:GpsGate.Online.GpsGateOnlineException.LanguageKey">
            <summary>
            Key to use for translate the error.
            If not Provided in the constructor, exception name in upper case + EX_ prefix will be used.
            Save ex.message as it is to preserve backwards compatibility
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportException.#ctor(System.String)">
            <summary>
            Create a new ReportException.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new ReportException with a message and a inner exception
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportException.#ctor(System.String,System.String)">
            <summary>
            Create a new REportException with a message and a translation key fort the error.
            </summary>
            <param name="strMessage"></param>
            <param name="strLanguageKey"></param>
        </member>
        <member name="T:GpsGate.Online.Reporting.MonthlyReportParameter">
            <summary>
            ReportParameter representing a period of one month.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.DaysInWeekPeriodicalParameter">
            <summary>
            Base Class for Periodical parameters that consider days in week.
            E.g. WeeklyReportParameter.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.PeroidicalParameter">
            <summary>
            Base Class for Periodical parameters like Weekly-, Monthly- and DailyReportParameter
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.ReportParameter">
            <summary>
            Base class for report parameter.
            Report parameter handling store and restore of parameters used for reporting.
            
            Report parameter utalize serialization to store and restore the parameter value and name.
            This means that anny value must be serializable to be stored.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Reporting.PeroidicalParameter.m_lTimeSpanStart">
            <summary>
            Use for serialization of time span only. Do not use.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Reporting.PeroidicalParameter.m_lTimeSpanEnd">
            <summary>
            Use for serialization of time span only. Do not use.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.PeroidicalParameter.#ctor(System.TimeSpan,System.TimeSpan,System.Int32,Franson.Localization.TimeZone)">
            <summary>
            Create a new Periodical parameter.
            </summary>
            <param name="iPeroidOffset">Initial period offset. For weekly period -2 offset means two weeks before current week.</param>
            <param name="timeZone">TimeZone.</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.PeroidicalParameter.AddPeriod(System.Int32)">
            <summary>
            Implement by concrete classes to offset the period.
            E.g: DailyReportParameter will add one day if iOffset = 1.
            </summary>
            <param name="iOffset"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.PeroidicalParameter.ShiftTimeZone(Franson.Localization.TimeZone)">
            <summary>
            Creates a new PeriodicalParameter for the given time zone
            </summary>
            <param name="timeZone"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.PeroidicalParameter.Previous">
            <summary>
            Get the previous Period. (prev week, prev month etc)
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.PeroidicalParameter.Next">
            <summary>
            Get the nect Period. (next week, next month etc)
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.PeroidicalParameter.TimeZone">
            <summary>
            TimeZone
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.PeroidicalParameter.PeriodOffset">
            <summary>
            Period offset from current period.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.PeroidicalParameter.TimeOfDayStart">
            <summary>
            Note! Time of day in local time!
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.PeroidicalParameter.TimeOfDayEnd">
            <summary>
            Note! Time of day in local time!
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.PeroidicalParameter.PeriodStart">
            <summary>
            Get the period start date and time.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.PeroidicalParameter.PeriodEnd">
            <summary>
            Get the period end date and time.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.PeroidicalParameter.IsFullDay">
            <summary>
            Return if the Period cosider full day or only part of day.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DaysInWeekPeriodicalParameter.#ctor(System.TimeSpan,System.TimeSpan,GpsGate.Online.Reporting.DaysInWeek,System.Int32,Franson.Localization.TimeZone)">
            <summary>
            Create a new "Day aware" parameter.
            </summary>
            <param name="iPeriodOffset"></param>
            <param name="timeZone"></param>
            <param name="days"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.DaysInWeekPeriodicalParameter.IsInside(System.DateTime)">
            <summary>
            Checkl if between period start and end and between start and end timespans.
            Also check that day in week for the date matches the parameter Days property.
            </summary>
            <param name="dtUTC"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.DaysInWeekPeriodicalParameter.IsInWeekDays(System.DateTime)">
            <summary>
            Check if day in week of the date matches the parameters chriteria.
            </summary>
            <param name="dtUTC"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.DaysInWeekPeriodicalParameter.Days">
            <summary>
            Days to consider.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.MonthlyReportParameter.#ctor">
            <summary>
            Create a new MonthlyReportParameter with 0 offset (current month) and all days included (DayOfWeek.All)
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.MonthlyReportParameter.#ctor(GpsGate.Online.Reporting.DaysInWeek)">
            <summary>
            Create a new MonthlyReportParameter with 0 offset (current month) and given days.
            </summary>
            <param name="days">Dys in week to consider.</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.MonthlyReportParameter.#ctor(System.TimeSpan,System.TimeSpan,GpsGate.Online.Reporting.DaysInWeek)">
            <summary>
            Create a new MonthlyReportParameter with 0 offset (current month) with days specified.
            </summary>
            <param name="days">Days in week to consider.</param>
            <param name="tsSpanEnd">Daily span start time</param>
            <param name="tsSpanStart">Daily span end time.</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.MonthlyReportParameter.#ctor(System.TimeSpan,System.TimeSpan,GpsGate.Online.Reporting.DaysInWeek,System.Int32,Franson.Localization.TimeZone)">
            <summary>
            Creates a new MonthlyReportParameter with an offset in month from current and days to consider specified.
            </summary>
            <param name="iPeriodOffset">Number of months offset.</param>
            <param name="days">Days in week to consider.</param>
            <param name="tsSpanEnd">Daily span start time.</param>
            <param name="tsSpanStart">Daily span end time.</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.MonthlyReportParameter.ShiftTimeZone(Franson.Localization.TimeZone)">
            <summary>
            Create a new MontlyReportParameter for the given timeZone
            </summary>
            <param name="timeZone"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.MonthlyReportParameter.AddPeriod(System.Int32)">
            <summary>
            Return a new MonthlyReportParameter with an offset period.
            
            E.g.
            <code>
            	// return a new parameter with two weeks subtracted.
            	MonthlyReportParameter twoMonthAgo = monthlyParam.AddPeriod(-2);
            </code>
            </summary>
            <param name="iOffset"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.MonthlyReportParameter.PeriodStart">
            <summary>
            Get the start of the period.
            Always 00:00:00.00000 at the first day in month.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.MonthlyReportParameter.PeriodEnd">
            <summary>
            Get the end of the period.
            Always 23.59.59.9999 at the last day in month.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.WeeklyReportParameter">
            <summary>
            ReportParameter representing a period of one week.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.WeeklyReportParameter.#ctor">
            <summary>
            Create a new WeeklyReport Parameter with 0 offset (current week) and all days included (DayOfWeek.All) and full days span.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.WeeklyReportParameter.#ctor(GpsGate.Online.Reporting.DaysInWeek)">
            <summary>
            Create a new WeeklyReport Parameter with 0 offset (current week) with days and given daily time span.
            </summary>
            <param name="days">Days in week to consider.</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.WeeklyReportParameter.#ctor(System.TimeSpan,System.TimeSpan,GpsGate.Online.Reporting.DaysInWeek)">
            <summary>
            Create a new WeeklyReport Parameter with 0 offset (current week) with days and given daily time span.
            </summary>
            <param name="days">Days in week to consider.</param>
            <param name="tsSpanEnd">Daily span start time.</param>
            <param name="tsSpanStart">Daily span end time.</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.WeeklyReportParameter.#ctor(System.TimeSpan,System.TimeSpan,System.Int32,Franson.Localization.TimeZone,GpsGate.Online.Reporting.DaysInWeek)">
            <summary>
            Creates a new WeeklyReport Parameter with an offset in weeks from current week and with days specified.
            </summary>
            <param name="iPeriodOffset">Number of weeks offset from current week.</param>
            <param name="days">Days in week to consider.</param>
            <param name="tsSpanEnd">Daily span start time.</param>
            <param name="tsSpanStart">Daily span end time.</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.WeeklyReportParameter.ShiftTimeZone(Franson.Localization.TimeZone)">
            <summary>
            Create a new MontlyReportParameter for the given timeZone
            </summary>
            <param name="timeZone"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.WeeklyReportParameter.AddPeriod(System.Int32)">
            <summary>
            Return a new WeeklyReportParameter with an offset period.
            
            E.g.
            <code>
            	// return a new parameter with two weeks subtracted.
            	WeeklyReportParameter twoWeeksAgo = weeklyParma.AddPeriod(-2);
            </code>
            </summary>
            <param name="iOffset">Offset in weeks.</param>
            <returns>A new WeeklyReportParameter</returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.WeeklyReportParameter.PeriodStart">
            <summary>
            Get the start of the period.
            Always 00:00:00.00000 at a Monday.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.WeeklyReportParameter.PeriodEnd">
            <summary>
            Get the end of the period.
            Always 23.59.59.9999 at a Sunday.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.DailyReportParameter">
            <summary>
            ReportParameter representing a period of one day.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DailyReportParameter.#ctor">
            <summary>
            Creates a new DailyReportParameter fith full day span and 0 periods offset and 0 time offset.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.DailyReportParameter.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a new DailyReportParameter fith full day span and 0 periods offset and 0 time offset.
            </summary>
            <param name="tsSpanEnd">Daily span start time.</param>
            <param name="tsSpanStart">Daily span end time.</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.DailyReportParameter.#ctor(System.TimeSpan,System.TimeSpan,System.Int32,Franson.Localization.TimeZone)">
            <summary>
            Create a new DailyREportParameter with a given Period offset and a given Time offset.
            </summary>
            <param name="tsSpanEnd">Daily span start time.</param>
            <param name="tsSpanStart">Daily span end time.</param>
            <param name="iPeriodOffset">Period Offset to initiate with. E.g -1 means yesterday, +1 tomorow.</param>
            <param name="timeZone"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.DailyReportParameter.ShiftTimeZone(Franson.Localization.TimeZone)">
            <summary>
            Creates a new DailyReportParameter for the given time zone
            </summary>
            <param name="timeZone"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.DailyReportParameter.AddPeriod(System.Int32)">
            <summary>
            Return a new DailyReportParameter with an offset period.
            
            E.g.
            <code>
            	// return a new parameter with one day added (i.e tomorrow).
            	PeroidicalParameter tomorrow = dailyParma.AddPeriod(1);
            </code>
            </summary>
            <param name="iOffset">Offset in days.</param>
            <returns>A new DailyReportParameter</returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.DailyReportParameter.PeriodStart">
            <summary>
            Period start. Time always at 00:00:00
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.DailyReportParameter.PeriodEnd">
            <summary>
            Period start. Time always at 23:59:59.999
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.CustomPeriodParameter">
            <summary>
            Custom perdio parameter. Creates a period between two dates.
            </summary>
        </member>
        <member name="F:GpsGate.Online.Reporting.CustomPeriodParameter.m_dtStart">
            <summary>
            Public for serialization purpose only!
            </summary>
        </member>
        <member name="F:GpsGate.Online.Reporting.CustomPeriodParameter.m_dtEnd">
            <summary>
            Public for serialization purpose only!
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.CustomPeriodParameter.#ctor">
            <summary>
            Creates a new CustomPeriodParameter from DateTime.Min to DateTime.Max.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.CustomPeriodParameter.#ctor(System.DateTime,System.DateTime,GpsGate.Online.Reporting.DaysInWeek)">
            <summary>
            Creates a new Period
            </summary>
            <param name="dtStart">Start of period</param>
            <param name="dtEnd">End of period</param>
            <param name="days">DaysInWeek to include</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.CustomPeriodParameter.#ctor(System.DateTime,System.DateTime,System.TimeSpan,System.TimeSpan,GpsGate.Online.Reporting.DaysInWeek,System.Int32,Franson.Localization.TimeZone)">
            <summary>
            Creates a new period
            </summary>
            <param name="dtStart">Start of period</param>
            <param name="dtEnd">End of period</param>
            <param name="tsSpanStart">Start of time of day</param>
            <param name="tsSpanEnd">End of time of day</param>
            <param name="days">DaysInWeek to include</param>
            <param name="iPeriodOffset">Period offset. E.g. Period [2009-09-01 -> 2009-09-03] offset 2 -> [2009-09-06 -> 2009-09-09]</param>
            <param name="timeZone">TimeZone</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.CustomPeriodParameter.ShiftTimeZone(Franson.Localization.TimeZone)">
            <summary>
            Create a new CustomPeriodParameter for the given timeZone
            </summary>
            <param name="timeZone"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.CustomPeriodParameter.AddPeriod(System.Int32)">
            <summary>
            Create a new Period for the new offset.
            </summary>
            <param name="iOffset"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.CustomPeriodParameter.PeriodStart">
            <summary>
            UTC Start of period. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.CustomPeriodParameter.PeriodEnd">
            <summary>
            UTC end of period.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.ArrayReportParameter">
             <summary>
             Report parameter handling store and restore of array like data.
            
             The value must be serializable to be stored.
             </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.ArrayReportParameter.#ctor">
            <summary>
            Create a new Array Report Parameter.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.ArrayReportParameter.#ctor(System.Object[])">
            <summary>
            Create a new Array Report parameter with a initialize value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:GpsGate.Online.Reporting.ArrayReportParameter.Value">
            <summary>
            Get or Set parameter value.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.GenericReportParameter">
            <summary>
            Report parameter handling store and restore of simple data like 
            string, integers, boolean, DateTimes and other serializable objects, primitives and structures.
            
            The value must be serializable to be stored.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.GenericReportParameter.#ctor">
            <summary>
            Create a new Generic Report Parameter.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.GenericReportParameter.#ctor(System.Object)">
            <summary>
            Create a new Generic Report parameter with a initialize value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:GpsGate.Online.Reporting.GenericReportParameter.Value">
            <summary>
            Get or Set parameter value.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.ReportSource">
            <summary>
            Report source base class. Implement this class when creating custom sources.
            
            This class contains some generic data source methods suitable to create reports, receiving (eg. users) and 
            <see cref="T:GpsGate.Online.Reporting.ReportTrip"/>,
            and helper methods for localization, grouping, xml conversion and calculating of data.
            
            This class also provide the XML-data from the WriteXml() implementation as XPathDocument and XPathNavigator through 
            respective properties. 
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="iAppId">Id of the application this <see cref="T:GpsGate.Online.Reporting.ReportSource"/> are being generated to.</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.#ctor(System.Int32,System.Globalization.CultureInfo,System.TimeSpan,Franson.Localization.Locale)">
            <summary>
            Default constructor with localization parameters.
            </summary>
            <param name="iAppId">Id of the application this <see cref="T:GpsGate.Online.Reporting.ReportSource"/> are being generated to.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> used when formatting data such as <see cref="!:DarteTime"/> etc.</param>
            <param name="tsLocalTimeOffset">OBSOLETE! TimeZone included in locale object instead.</param>
            <param name="locale">Localization object containg Langugae and Measurements. Get this from ReportPage.WebContext.Locale</param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.GetReportTrips(GpsGate.Online.Directory.GateUserBag,System.DateTime,System.DateTime)">
            <summary>
            Return all <see cref="T:GpsGate.Online.Reporting.ReportTrip"/>'s for the given user and timespan.
            
            The <see cref="T:GpsGate.Online.Reporting.ReportTrip"/>'s returned are splitted based by <see cref="T:GpsGate.Tracks.FatPoint"/> and <see cref="T:GpsGate.Tracks.TrackInfo"/> data.
            </summary>
            <param name="user"></param>
            <param name="dtUtcStart"></param>
            <param name="dtUtcEnd"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.GetReportTrips(GpsGate.Online.Directory.GateUserBag,GpsGate.Online.Reporting.PeroidicalParameter)">
            <summary>
            Return all <see cref="T:GpsGate.Online.Reporting.ReportTrip"/>'s for the given user and timespan.
            
            The <see cref="T:GpsGate.Online.Reporting.ReportTrip"/>'s returned are splitted based by <see cref="T:GpsGate.Tracks.FatPoint"/> and <see cref="T:GpsGate.Tracks.TrackInfo"/> data.
            </summary>
            <param name="user"></param>
            <param name="dtUtcStart"></param>
            <param name="dtUtcEnd"></param>
            <param name="dtTimeFilterStart"></param>
            <param name="dtTimeFilterEnd"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.GroupReportTrips(System.Collections.Generic.IEnumerable{GpsGate.Online.Reporting.ReportTrip},GpsGate.Online.Reporting.DateGrouping)">
            <summary>
            Grouping multiple <see cref="T:GpsGate.Online.Reporting.ReportTrip"/>'s into <see cref="T:GpsGate.Online.Reporting.ReportTrip"/>'s based on the <see cref="T:GpsGate.Online.Reporting.DateGrouping"/> parameter, 
            containing some basic statistics for the group of tracks.
            </summary>
            <param name="tracks"></param>
            <param name="grouping"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.m_GroupTripsByDay(System.Collections.Generic.IEnumerable{GpsGate.Online.Reporting.ReportTrip})">
            <summary>
            Create a new <see cref="T:GpsGate.Online.Reporting.ReportTrip"/> for each day.
            
            E.g: If 2 TrackTrips starts on Monday and 1 on Tuesday. A list with two TrackTrip's will be returned
            with info for the whole day.
            </summary>
            <param name="trips"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GpsGate.Online.Reporting.ReportSource.m_CalcTrackTimeBounds(System.Collections.Generic.List{GpsGate.Tracks.FatPoint},System.DateTime,System.DateTime,GpsGate.Tracks.TrackInfoBag)" -->
        <member name="M:GpsGate.Online.Reporting.ReportSource.WriteTrip(System.Xml.XmlWriter,GpsGate.Online.Reporting.ReportTrip)">
            <summary>
            Writes a <see cref="T:GpsGate.Online.Reporting.ReportTrip"/> as XML
            </summary>
            <param name="writer"></param>
            <param name="trip"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.WriteTrip(System.Xml.XmlWriter,GpsGate.Online.Reporting.ReportTrip,System.Boolean)">
            <summary>
            Writes a <see cref="T:GpsGate.Online.Reporting.ReportTrip"/> as XML with Idle time info and optional address (not implemented will 
            write empty address tags)
            </summary>
            <param name="writer"></param>
            <param name="trip"></param>
            <param name="tsIdlePrev"></param>
            <param name="bWithAddress"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.WritePosition(System.Xml.XmlWriter,Franson.Geo.TrackPoint)">
            <summary>
            Writes a Position as XML
            </summary>
            <param name="writer"></param>
            <param name="tp"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.WriteAddress(System.Xml.XmlWriter,Franson.Geo.TrackPoint)">
            <summary>
            Note Reversed geo-coding is not implemented. Writes empty tags.
            </summary>
            <param name="writer"></param>
            <param name="tp"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.GetLocaleMeasure(System.String,System.Double)">
            <summary>
            Converts SI value to local value and unit using Locale object.
            
            Conversions and units are defined in .measure files in ~/Resources/Languages directory.
            
            If Locale object not is provded through the constructor the value will not be converted and Unit will be unknown.
            </summary>
            <param name="strMeasureKey">Key for the Measurement. Defined in current .measure file.</param>
            <param name="dblValue">SI value</param>
            <returns><see cref="T:Franson.Localization.Measure"/> containing value converted to local unit.</returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.Translate(System.String,System.String)">
            <summary>
            Get the translated Phrase for the given key defined in ~/Resources/*.lang.
            </summary>
            <param name="strLanguageLey">Language key</param>
            <param name="strLangModule">Module name to get translation from. If NULL "Reports" module is used.</param>
            <returns>Phrase translated to local language.</returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.GetWeekDayName(System.DateTime)">
            <summary>
            Returns the name of the weekday for a provided date.
            todo: move to DateTime module (make static)
            </summary>
            <param name="dtLocal"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.GetLocalDateTime(System.DateTime)">
            <summary>
            Convert an UTC DateTime to LocalTime using the <see cref="T:System.Globalization.CultureInfo"/> and the <see cref="T:System.TimeSpan"/> 
            object provided in the constructor. If not provided the Systems CurrentCulture is used.
            todo: move to DateTime module (make static)
            </summary>
            <param name="dtUTC">UTC time</param>
            <returns>Local time.</returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportSource.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Derived classes implements this method and writes the XML this source should contains.
            
            The output xml provided here are the foundation of thye report. The <see cref="T:GpsGate.Online.Reporting.ReportViewer"/> will use this
            xml to create the GUI output.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportSource.Users">
            <summary>
            Returns the users in the <see cref="P:GpsGate.Online.Reporting.ReportSource.Application"/> for which id this <see cref="T:GpsGate.Online.Reporting.ReportSource"/> was constructed from.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportSource.Application">
            <summary>
            Get the instance of application.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportSource.Geocoder">
            <summary>
            Get a Geocoder for reverse geocoding.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportSource.Locale">
            <summary>
            Locale holding localized data such as Translation tables and measurement conversions.
            
            Set through constructor.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportSource.Format">
            <summary>
            get the current CultureInfo used to formatting DateTime's, numbers etc.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportSource.RawXml">
            <summary>
            Returns the XML data of this <see cref="T:GpsGate.Online.Reporting.ReportSource"/> as plain XML.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportSource.XPathDocument">
            <summary>
            Returns the XML data of this <see cref="T:GpsGate.Online.Reporting.ReportSource"/> as an XPathDocument.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportSource.XPathNavigator">
            <summary>
            Returns the XML data of this <see cref="T:GpsGate.Online.Reporting.ReportSource"/> as an XPathNavigator.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.ReportTrip">
            <summary>
            A <see cref="!:ReporTtrip"/> represents a track with additional statistics information suitable for reports.
            
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportTrip.#ctor(System.Double,System.Double,System.Int64,Franson.Geo.TrackPoint,Franson.Geo.TrackPoint,System.TimeSpan)">
            <summary>
            Creates a new ReportTrip.
            </summary>
            <param name="dblMaxSpeed"></param>
            <param name="dblDistance"></param>
            <param name="lngBuildPoints"></param>
            <param name="tpStart"></param>
            <param name="tpEnd"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportTrip.#ctor(System.Double,System.Double,System.Int64,System.TimeSpan,Franson.Geo.TrackPoint,Franson.Geo.TrackPoint,System.Collections.Generic.List{GpsGate.Online.Reporting.ReportTrip})">
            <summary>
            Creates a new ReportTrip.
            </summary>
            <param name="dblMaxSpeed"></param>
            <param name="dblDistance"></param>
            <param name="lngBuildPoints"></param>
            <param name="tpStart"></param>
            <param name="tpEnd"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportTrip.Extend(GpsGate.Online.Reporting.ReportTrip)">
            <summary>
            Extend this <see cref="T:GpsGate.Online.Reporting.ReportTrip"/> with additional information from another ReportTrip object.
            The statistics, bounds etc will be based on the sum of all inner <see cref="!:ReportTrips"/>
            
            Only the outer information from the given trip will be used when extending this new one. 
            The Reporttrips.InnerTrips of the <See ref="ReportTrip"/> used to extend this one with will not be added to this <see cref="T:GpsGate.Online.Reporting.ReportTrip"/>.InnerTrips.
            </summary>
            <param name="trip"></param>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportTrip.ToString">
            <summary>
            Returns start and stop time of report trip as string. Used for logging and debugging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportTrip.Equals(System.Object)">
            <summary>
            Indicates if this ReportTrip is Equal to another ReportTrip instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportTrip.GetHashCode">
            <summary>
            Get hash code of this ReportTrip instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.MaxTime">
            <summary>
            MaxTime bound of this trip
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.MinTime">
            <summary>
            Min time bound of this trip
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.StartTrackPoint">
            <summary>
            The <see cref="T:Franson.Geo.TrackPoint"/> where this trip starts. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.EndTrackPoint">
            <summary>
            The <see cref="T:Franson.Geo.TrackPoint"/> where this trip ends. 
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.Distance">
            <summary>
            The total distance of this trip.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.AvgSpeed">
            <summary>
            The average speed of this trip.
            
            The Average speed are calculated based on distance and time. Not the <see cref="T:Franson.Geo.TrackPoint"/>'s GroupnSpeed property.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.MaxSpeed">
            <summary>
            The Max speed of this trip.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.BuildPoints">
            <summary>
            Total number of <see cref="T:Franson.Geo.TrackPoint"/>'s within this trip.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.TravelTime">
            <summary>
            The total time of movements.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.IdleTime">
            <summary>
            The total time of idling.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.TotalTime">
            <summary>
            The total time for this trip.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.IdlePreviousTrip">
            <summary>
            Get the idle time to previous trip.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportTrip.InnerTrips">
            <summary>
            The trips for which this trip has been extended with.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.ReportViewerTypeInstanceReader">
            <summary>
            Reader to recive ReportViewer instances from the database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportViewerTypeInstanceReader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportViewerTypeInstanceReader.GetByApplication(System.Int32)">
            <summary>
            Returns <see cref="T:GpsGate.Online.Reporting.ReportViewer"/>'s which has been registered for an <see cref="T:Franson.Directory.Application"/>.
            If no one is registered the default set of <see cref="T:GpsGate.Online.Reporting.ReportViewer"/>'s will be received from <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/>.
            If no default reports are defined empty list will be returned.
            </summary>
            <param name="iAppId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportViewerTypeInstanceReader.GetByApplicationDefinition(GpsGate.Online.Directory.ApplicationDefinition)">
            <summary>
            Returns <see cref="T:GpsGate.Online.Reporting.ReportViewer"/> for the given <see cref="T:GpsGate.Online.Directory.ApplicationDefinition"/> 
            </summary>
            <param name="appDef"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportViewerTypeInstanceReader.GetAll">
            <summary>
            Returns all <see cref="T:GpsGate.Online.Reporting.ReportViewer"/>'s in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportViewerTypeInstanceReader.GetByID(System.Int32)">
            <summary>
            Returns a <see cref="!:ReportViwer"/> identified by ID.
            </summary>
            <param name="iID"></param>
            <returns></returns>
            <exception cref="!:NotFoundException">Thrown when <see cref="!:ReportViwer"/> was not found in database.</exception>
        </member>
        <member name="M:GpsGate.Online.Reporting.ReportViewerTypeInstanceReader.GetInstanceID(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns "report_viewer_id" field
            </summary>
            <param name="dicArguments"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewerTypeInstanceReader.ReportViewerInstances">
            <summary>
            Return the loaded ILoadables as ReportViewer.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.ReportViewerTypeInstanceReader.DAO">
            <summary>
            Object used to interact with the database through.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.StoredReport">
            <summary>
            Handle storing of a <see cref="!:IStorableReport">StoredReport</see>.
            Store and Restore the required report parameters and instanciate the <see cref="!:IStorableReport"/>.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.StoredReport.#ctor(System.Int32,GpsGate.Online.Reporting.IStoreableReport)">
            <summary>
            Create a new StoredReport.
            </summary>
            <param name="iApplicationID">ID of the application for which this stored report belongs.</param>
            <param name="report">The report to be stored.</param>
            <exception cref="T:System.ArgumentException">Invalid Application ID. Application ID must be grteater than 0 (valid application)</exception>
            <exception cref="T:System.ArgumentException">Stored Report cannot be null and must be loded. StoredReport must have a IStoreableReport with ID greater than 0 (i.e loaded)</exception>
        </member>
        <member name="M:GpsGate.Online.Reporting.StoredReport.#ctor">
            <summary>
            Constructor use to loading an existing StoredReport.
            <code>
            	StoredReport report = new StoredReport();
            	report.LoadByID(1);
            </code>
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.StoredReport.LoadReport(GpsGate.Online.Reporting.ReportContext)">
            <summary>
            Loads the <see cref="!:IStorableReport"/> this template is associated to and call IStoreableReport.LoadReport(params, context).
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.Reporting.StoredReport.ToString">
            <summary>
            Returns a string reporesentation of the <see cref="T:GpsGate.Online.Reporting.StoredReport"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReport.Name">
            <summary>
            Set and Get the name.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReport.Description">
            <summary>
            Set and Get the description.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReport.IStoreableReportID">
            <summary>
            Get the ID of the ReportViwer this is a template of.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReport.ApplicationID">
            <summary>
            Get the ID of the application for which this stored report belongs to.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReport.Parameters">
            <summary>
            The reports parameters.
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReport.DAO">
            <summary>
            Data access object
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.StoredReportBag">
            <summary>
            Lightweight representation of <see cref="T:GpsGate.Online.Reporting.StoredReport"/>.
            Serilizable.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.StoredReportBag.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Create a new lightweigh <see cref="T:GpsGate.Online.Reporting.StoredReport"/> reporesentation.
            </summary>
            <param name="iReportID">Unique ID of stored report.</param>
            <param name="strName">name  of the stored report.</param>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReportBag.ID">
            <summary>
            Get Unique ID of the <see cref="T:GpsGate.Online.Reporting.StoredReport"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReportBag.ReportViewerID">
            <summary>
            Get ID of the <see cref="T:GpsGate.Online.Reporting.ReportViewer"/>
            </summary>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReportBag.Name">
            <summary>
            Get name of the <see cref="T:GpsGate.Online.Reporting.StoredReport"/>
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.StoredReportReader">
            <summary>
            Reader to read <see cref="T:GpsGate.Online.Reporting.StoredReportBag">StoredReportBags</see> from the database.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.StoredReportReader.#ctor">
            <summary>
            Create a new StoredReportReader.
            </summary>
        </member>
        <member name="M:GpsGate.Online.Reporting.StoredReportReader.GetByApplication(System.Int32)">
            <summary>
            Get all StoredReports for the given application.
            </summary>
            <param name="iApplicationID"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Online.Reporting.StoredReportReader.DAO">
            <summary>
            Data Access Object.
            </summary>
        </member>
        <member name="T:GpsGate.Online.Reporting.ViewerType">
            <summary>
            Type of a <see cref="T:GpsGate.Online.Reporting.ReportViewer"/> 
            Only Html are available. may bee PDF, XSL etc.
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.FatPointReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:GpsGate.Tracks.DAO.FatPointReaderDAOSQL">
            <summary>
            Fat point reader DAO. Streams fat point data from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:GpsGate.Tracks.DAO.FatPointReaderDAOSQL.m_nlog">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointReaderDAOSQL.GetByTrackInfoAndTimeSpan(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Returns fat points for a specified track within a given time span
            </summary>
            <param name="iTrackInfoId"></param>
            <param name="dtStart"></param>
            <param name="dtStop"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointReaderDAOSQL.GetByUserID(System.Int32)">
            <summary>
            Returns all fat points for specified user.
            </summary>
            <param name="iUserID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointReaderDAOSQL.GetByUserID(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Returns all fat points for specified user during specified time interval.
            Part of the end points time interval must be inside the specified argument time interval.
            </summary>
            <param name="iUserID"></param>
            <param name="dtStart"></param>
            <param name="dtEnd"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns current SQL query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Tracks.DAO.FatPointReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Tracks.DAO.FatPointWriterDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.FatPointWriterDAOSQL">
            <summary>
            FatPointWriter DAO.
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.FatPointWriterDAOSQL.m_nlog">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.FatPointWriterDAOSQL.m_longTempID">
            <summary>
            To avoid new IDs from DB to overlap tmp IDs created by ADO.NET
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointWriterDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointWriterDAOSQL.Add(System.Object)">
            <summary>
            Add a <see cref="T:GpsGate.Tracks.FatPoint"/> object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointWriterDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointWriterDAOMSSQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Tracks.DAO.FatPointWriterDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointWriterDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.FatPointWriterDAOMySQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackCategoryDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackCategoryDAOSQL">
            <summary>
            TrackCategory DAO
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackCategoryDAOSQL.m_strTableName">
            <summary>
            The name of DB table. 
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackCategoryDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackCategoryDAOSQL.LoadByID(System.Int32)">
            <summary>
            Do not use. track_category has a string ID.
            </summary>
            <param name="iID"></param>
            <exception cref="T:System.NotImplementedException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackCategoryDAOSQL.LoadByID(System.String)">
            <summary>
            TrackCategory has a string as ID, and no integer. The ID of the default category is "_main".
            </summary>
            <param name="strID">ID for category. Default category is "_main"</param>
            <exception cref="T:GpsGate.Tracks.DAO.TrackCategoryNotFoundException">If no category by this ID is found</exception>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackCategoryDAOSQL.OnRowInserted(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            The DB table does not have an auto increment int as ID.
            It has a string that has to be set before inserted into the DB.
            Therefore this method is overriden, to do nothing.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackCategoryDAOSQL.ID">
            <summary>
            TrackCategory uses straing as ID, and not integer.
            </summary>
            <exception cref="T:System.NotImplementedException">Always thrown.</exception>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackCategoryDAOSQL.StringID">
            <summary>
            Set or get category ID. Must be set when <see cref="!:Update"/> is called.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackCategoryDAOSQL.Name">
            <summary>
            Name of category
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackCategoryDAOSQL.Description">
            <summary>
            Category description
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackCategoryDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackCategoryDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackCategoryDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackInfoNotFoundException">
            <summary>
            Requested TrackInfo not found in database.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoNotFoundException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackRecorderNotFoundException">
            <summary>
            Requested TrackRecorder not found in database.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderNotFoundException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDAOFactory.GetTrackRecorderDAO">
            <summary>
            Database specific factory must override this method.
            </summary>
            <param name="option">Option on how to resolve update collisions.</param>
            <returns><see cref="T:GpsGate.Tracks.DAO.TrackRecorderDAOSQL"/></returns>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDAOFactory.GetDAOFactory">
            <summary>
            Get DAO factory class for GpsGate.Tracks namespace
            </summary>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">No database type specified in App.Config</exception>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackDataListDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackDataListDAOSQL">
            <summary>
            TrackDataList DAO
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackDataListDAOSQL.m_strTableName">
            <summary>
            The name of DB table. 
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackDataListDAOSQL.m_tpLastValid">
            <summary>
            Last valid track point.
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackDataListDAOSQL.m_tpLastUncertain">
            <summary>
            Last track point, valid or not valid.
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackDataListDAOSQL.m_rowLastValid">
            <summary>
            last row in record set with a valid position
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackDataListDAOSQL.m_rowLastUncertain">
            <summary>
            last row in record set with valid or unvalid position
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackDataListDAOSQL.m_rowLastAdded">
            <summary>
            Last added row. Info about this row will not be stored in database.
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackDataListDAOSQL.m_longTempID">
            <summary>
            To avoid new IDs from DB to overlap tmp IDs created by ADO.NET
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataListDAOSQL.#ctor">
            <summary>
            Create TrackDataListDAOSQL object.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataListDAOSQL.OnLoaded(System.String)">
            <summary>
            Called when new data has been fetched from database.
            </summary>
            <param name="strTableName"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataListDAOSQL.LoadLastByID(System.Int64,System.Int64)">
            <summary>
            Load the last valid and uncertain track data into list.
            </summary>
            <param name="longValidID">ID of valid track_data</param>
            <param name="longUncertainID">ID of uncertain trac_data</param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataListDAOSQL.Add(System.Object)">
            <summary>
            Add a <see cref="T:Franson.Geo.TrackPoint"/> to track_data table. Call <see cref="M:GpsGate.Tracks.DAO.TrackDataListDAOSQL.Update"/> to commit to DB.
            </summary>
            <param name="value"><see cref="T:Franson.Geo.TrackPoint"/> to add</param>
            <returns>Index of added TrackPoint</returns>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataListDAOSQL.Update">
            <summary>
            Sets track_info_id to new records and writes changes to database.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackDataListDAOSQL.LastValidTrackPoint">
            <summary>
            Last added valid TrackPoint
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackDataListDAOSQL.LastUncertainTrackPoint">
            <summary>
            Last added uncertain TrackPoint
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackDataListDAOSQL.LastValidTrackDataID">
            <summary>
            Returns ID of last added TrackPoint. <see cref="M:GpsGate.Tracks.DAO.TrackDataListDAOSQL.Update"/> must have been called or else the ID sin't valid.
            Will not be updated for TrackPoints going backward in time.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackDataListDAOSQL.LastUncertainTrackDataID">
            <summary>
            ID of last TrackPoint added that either was invalid or valid.
            Will not be updated for TrackPoints going backward in time.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackDataListDAOSQL.LastAddedTrackDataID">
            <summary>
            ID of last added row. Will be updated even if TrackPoint goes backward in time.
            This value is only available directly after a call to <see cref="M:GpsGate.Tracks.DAO.TrackDataListDAOSQL.Update"/>.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackDataListDAOSQL.TrackInfoID">
            <summary>
            To which track_info track_data should belong to.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataListDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataListDAOMSSQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackDataListDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataListDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataListDAOMySQL.GetItemType">
            <summary>
            Not implemented
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackDataReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackDataReaderDAOSQL">
            <summary>
            TrackDataReader DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOSQL.#ctor">
            <summary>
            Create DAO
            </summary>
            <param name="connection"></param>
            <param name="command"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOSQL.GetSqlCommand">
            <summary>
            Returns current SQL command string internally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOSQL.SetSqlCommand(System.String)">
            <summary>
            Called by derived class if overrides SQL string to be executed.
            </summary>
            <param name="strSQL"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOSQL.GetTrackDataByTrackInfoId(System.Int32,System.Boolean)">
            <summary>
            Loads all valid track data in one track. Use with care! a track can contain loads of data.
            The data is sorted in the order they were recorded. Oldest data first.
            </summary>
            <param name="iTrackInfoID">ID for track.</param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOSQL.GetTrackDataByTrackInfoId(System.Int32,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Loads all track data in one track.
            </summary>
            <param name="iTrackInfoID">ID of track to load</param>
            <param name="bValid">Set to true if only valid positions should be loaded</param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOSQL.GetTrackDataByTrackInfoId(System.Int32,System.DateTime,System.DateTime,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Loads valid track data for a track between start and stop time, and limit the result by the given to the given index 
            </summary>
            <param name="iTrackId"></param>
            <param name="start"></param>
            <param name="stop"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOSQL.GetTrackDataByOwner(System.Int32,System.Boolean)">
            <summary>
            Load all track data, including invalid, for specified user.
            </summary>
            <param name="iOwner">User ID</param>
            <param name="bValid">True if only valid data should be loaded.</param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOSQL.GetTrackDataByTrackInfoId(System.Int32,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Loads valid track data for a track between start and stop time. 
            </summary>
            <param name="iTrackId"></param>
            <param name="start"></param>
            <param name="stop"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackDataReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackDataReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackInfoDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackInfoDAOSQL">
            <summary>
            TrackInfo DAO
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackInfoDAOSQL.m_strTableName">
            <summary>
            The name of DB table. 
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoDAOSQL.#ctor">
            <summary>
            Create new object for DB access.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load TrackInfo by ID.
            </summary>
            <param name="iID">ID</param>
            <exception cref="T:GpsGate.Tracks.DAO.TrackInfoNotFoundException">No record found in DB with this ID.</exception>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoDAOSQL.Update">
            <summary>
            Save changes to database. Will always increase track_info.dirty_count by one.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoDAOSQL.OnLoaded(System.String)">
            <summary>
            Called after Fill has finished.
            </summary>
            <param name="strTableName"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoDAOSQL.GetTrackVisibilityInGroup(System.String,System.Int32)">
            <summary>
            See <see cref="!:GpsGate.Tracks.GetTrackVisibilityInGroup"/>
            </summary>
            <param name="strGroupName"></param>
            <param name="iAppId"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.Name">
            <summary>
            track_info.name
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.Description">
            <summary>
            track_info.description
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.OwnerID">
            <summary>
            track_info.owner_id
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.TrackCategoryID">
            <summary>
            track_info.track_category_id
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.MinLongitude">
            <summary>
            track_info.min_longitude
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.MaxLongitude">
            <summary>
            track_info.max_longitude
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.MinLatitude">
            <summary>
            track_info.min_latitude
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.MaxLatitude">
            <summary>
            track_info.max_latitude
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.MinAltitude">
            <summary>
            track_info.min_altitude
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.MaxAltitude">
            <summary>
            track_info.max_altitude
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.MinTimeStamp">
            <summary>
            track_info.min_time_stamp, min_milliseconds
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.MaxTimeStamp">
            <summary>
            track_info.max_time_stamp, max_milliseconds
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.DirtyCount">
            <summary>
            track_info.dirty_count
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.TotalDistance">
            <summary>
            track_info.total_distance
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.Deleted">
            <summary>
            track_info.deleted
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackInfoDAOSQL.BoundingBox">
            <summary>
            Min and max values as a BoundingBox
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackInfoDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackInfoReaderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoReaderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackInfoReaderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackInfoReaderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackRecorderDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackRecorderDAOSQL">
            <summary>
            TrackRecorder DAO
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.m_strTableName">
            <summary>
            Table name.
            </summary>
        </member>
        <member name="F:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.m_nlog">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.#ctor">
            <summary>
            Create TrackRecorder DAO object.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.LoadByID(System.Int32)">
            <summary>
            Load track_recorder row from DB by ID.
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.LoadLifeTrackRecorderByUserID(System.Int32)">
            <summary>
            Load default track_recorder row from DB for a specific user.
            </summary>
            <param name="iUserID">"owner_id"</param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.LoadByOwnerAndID(System.Int32,System.Int32)">
            <summary>
            Load track_recorder row that matches owner_id and track_recorder_id.
            </summary>
            <param name="iUserID">owner_id</param>
            <param name="iID">track_recorder_id</param>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.Name">
            <summary>
            track_recorder.name
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.OwnerID">
            <summary>
            track_recorder.owner_id
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.TrackInfoID">
            <summary>
            track_recorder.track_info_id. If set to 0, database value will be null.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.TrackCategoryID">
            <summary>
            "track_recorder.track_category_id" field
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.Recording">
            <summary>
            "track_recorder.recording" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.LastValidTrackDataID">
            <summary>
            "track_recorder.last_track_data_id" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.LastUncertainTrackDataID">
            <summary>
            "track_recorder.last_uncertain_track_data_id" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.TimeFilter">
            <summary>
            "track_recorder.time_filter" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.DistanceFilter">
            <summary>
            "track_recorder.distance_filter" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.DirectionFilter">
            <summary>
            "track_recorder.direction_filter" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.DirectionThreshold">
            <summary>
            "track_recorder.direction_threshold" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.SpeedFilter">
            <summary>
            "track_recorder.speed_filter" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.RestartTime">
            <summary>
            "track_recorder.restart_time" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.RestartDistance">
            <summary>
            "track_recorder.restart_distance" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.RestartInterval">
            <summary>
            "track_recorder.restart_interval" field.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.RestartIntervalOffset">
            <summary>
            "track_recorder.restart_interval_offset" field
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.SmsTimeFilter">
            <summary>
            track_recorder.sms_time_filter
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.DAO.TrackRecorderDAOSQL.Motion">
            <summary>
            track_recorder.motion
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackRecorderDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackRecorderListDAOMSSQL">
            <summary>
            MSSQL DAO
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackRecorderListDAOSQL">
            <summary>
            TrackRecorderList DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderListDAOSQL.LoadByRecordingAndOwnerID(System.Int32)">
            <summary>
            Loads recording <see cref="T:GpsGate.Tracks.TrackRecorder"/>s by User ID.
            </summary>
            <param name="iUserID"></param>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderListDAOMSSQL.#ctor">
            <summary>
            Create MSSQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderListDAOMSSQL.GetItemType">
            <summary>
            Returns typeof(TrackRecorderDAOMSSQL);
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Tracks.DAO.TrackRecorderListDAOMySQL">
            <summary>
            MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderListDAOMySQL.#ctor">
            <summary>
            Create MySQL DAO
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.DAO.TrackRecorderListDAOMySQL.GetItemType">
            <summary>
            Returns typeof(TrackRecorderDAOMySQL);
            </summary>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Tracks.Security.ExportAuthorize">
            <summary>
            Authorize exporting of track and message data.
            
            Check that The loged in user has Privilege: _Export and that 
            all owners of the given TrackInfos is in the same application for which the session was authenticated through.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.Security.ExportAuthorize.#ctor(System.Collections.Generic.IEnumerable{GpsGate.Tracks.TrackInfoBag})">
            <summary>
            Creates a new Export Authorize
            </summary>
            <param name="trackInfos">List of trackInfo to be exported</param>
        </member>
        <member name="M:GpsGate.Tracks.Security.ExportAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Authenticate.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Tracks.Security.TrackAuthorize">
            <summary>
            Authorize read operations on tracks.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.Security.TrackAuthorize.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a new Authorization object for auhorize edit operations on tracks
            </summary>
            <param name="trackInfo"></param>
        </member>
        <member name="M:GpsGate.Tracks.Security.TrackAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Authorize.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.Security.TrackRecorderAuthorize.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates new Authorize object to authorize TrackRecorder operations.
            
            </summary>
            <param name="iRecorderOwnerID">ID of the <see cref="T:Franson.Directory.User"/> that owns the <see cref="T:GpsGate.Tracks.TrackRecorder"/></param>
        </member>
        <member name="M:GpsGate.Tracks.Security.TrackRecorderAuthorize.Authorize(Franson.Directory.Session)">
            <summary>
            Authorize the TrackRecorder operation.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Tracks.FatPoint">
            <summary>
            Represents a point where a user or vehicle has been standing still for a longer period of time.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Tracks.FatPoint.#ctor(Franson.Geo.Position,System.DateTime,System.DateTime)">
            <summary>
            Create a fat point object.
            </summary>
            <param name="posCenter">Center of fat point</param>
            <param name="dtUtcStart">When this fat point was started in UTC.</param>
            <param name="dtUtcEnd">When this fat point was ended in UTC.</param>
        </member>
        <member name="M:GpsGate.Tracks.FatPoint.#ctor(Franson.Geo.Position,System.DateTime,System.DateTime,System.Double,System.Int32,System.Int64,System.Int32,System.Int64,System.Int64)">
            <summary>
            Create a fat point from paramaters
            </summary>
            <param name="posCenter">Center of fat point</param>
            <param name="dtUtcStart">When this fat point was started in UTC.</param>
            <param name="dtUtcEnd">When this fat point was ended in UTC.</param>
            <param name="dblErrorRadius">Radius error</param>
            <param name="iBuildDots">Points used to build fat point</param>
            <param name="longFatPointID">Database ID for fat point, 0 if new fat point.</param>
            <param name="iTrackInfoID">TrackInfo from which data to this fat point was used.</param>
            <param name="longStartTrackDataID">Start of track data</param>
            <param name="longEndTrackDataID">End of track data</param>
        </member>
        <member name="M:GpsGate.Tracks.FatPoint.ToString">
            <summary>
            Returns "StartTime,EndTime"
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Tracks.FatPoint.Position">
            <summary>
            Center of fat point
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.FatPoint.StartTime">
            <summary>
            Start time in UTC when this fat point was entered.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.FatPoint.EndTime">
            <summary>
            End time in UTC when this fat point was left.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.FatPoint.ErrorRadius">
            <summary>
            Error in meters from beeing "perfect" fat point
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.FatPoint.BuildDots">
            <summary>
            Number of positions that were used to build up fat point.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.FatPoint.FatPointID">
            <summary>
            Database ID for this fat point. 0 if unsaved.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.FatPoint.TrackInfoID">
            <summary>
            Original TrackInfo for track data behind this fat point.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.FatPoint.StartTrackDataID">
            <summary>
            ID of start TrackData for this fat point.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.FatPoint.EndTrackDataID">
            <summary>
            ID of end TrackData for this fat point.
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.FatPointReader">
            <summary>
            Streams fat points from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Tracks.FatPointReader.#ctor">
            <summary>
            Create reader
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.FatPointReader.GetByUserID(System.Int32)">
            <summary>
            Stream all fat points for one specified user. Will not tricgger filter.
            </summary>
            <param name="iUserID">Database ID for user.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.FatPointReader.GetByUserID(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Returns enum of fat points for one user during specified time period. Will not trigger filter.
            </summary>
            <param name="iUserID"></param>
            <param name="dtStart">Start of interval in UTC</param>
            <param name="dtEnd">End of interval in UTC</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.FatPointReader.LoadByTrackInfoAndTimeSpan(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Streams fat points for a specified track within a given time span. Will not trigger filter.
            </summary>
            <param name="iTrackInfoId"></param>
            <param name="dtStart"></param>
            <param name="dtStop"></param>
            <returns></returns>
        </member>
        <member name="T:GpsGate.Tracks.FatPointWriter">
            <summary>
            Writes <see cref="T:GpsGate.Tracks.FatPoint"/> objects to the database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Tracks.FatPointWriter.#ctor">
            <summary>
            Create fat point writer.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.FatPointWriter.Add(System.Object)">
            <summary>
            Add <see cref="T:GpsGate.Tracks.FatPoint"/> to be saved to database
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.FatPointWriter.GetItemType">
            <summary>
            Returns typeof(FatPointWriter)
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackCategory.#ctor">
            <summary>
            Creates a new empty TrackCategory instance. 
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackCategory.LoadByID(System.String)">
            <summary>
            TrackCategory has a string as ID, and no integer. The ID of the default category is "_main".
            </summary>
            <param name="strID">ID for category. Default category is "_main"</param>
            <exception cref="T:GpsGate.Tracks.DAO.TrackCategoryNotFoundException">If no category by this ID is found</exception>
        </member>
        <member name="M:GpsGate.Tracks.TrackCategory.ToString">
            <summary>
            TrackCategory name.
            </summary>
            <returns>Name</returns>
        </member>
        <member name="P:GpsGate.Tracks.TrackCategory.StringID">
            <summary>
            Set or get category ID. Must be set when <see cref="!:Update"/> is called.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackCategory.Name">
            <summary>
            Name of TrackCategory.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackCategory.Description">
            <summary>
            TrackCategory description.
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.TrackExporter">
            <summary>
            Base class to export Gate Data such as Tracks and GateMessages
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackExporter.#ctor(GpsGate.Tracks.ITrackInfoReader,GpsGate.Online.Message.IGateMessageReader)">
            <summary>
            Creates a new Exporter
            </summary>
            <param name="trackInfoReader">Reader to read TrackInfos with.</param>
            <param name="messageReader">Reader for reading GateMessages</param>
        </member>
        <member name="M:GpsGate.Tracks.TrackExporter.Export(System.IO.Stream)">
            <summary>
            Derived classes implement the export logic. CsvExporter exporter wites data in CSV format to stream. KmlExporter writes KML foramtted data etc.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:GpsGate.Tracks.TrackExporter.GetTrackInfos">
            <summary>
            Return The track infos the exporter was loaded with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackExporter.GetMessageData(System.Int32)">
            <summary>
            Return GateMessages for the given TrackInfo
            </summary>
            <param name="iTrackInfoID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackExporter.Load(System.Int32[],System.String[])">
            <summary>
            Loads The track info in with id's provided in the arrTrackInfoID array.
            </summary>
            <param name="arrTrackInfoID">TrackInfo ID's to load.</param>
            <param name="fields">Array of fields name to restrict the loaded data. Set to null to include all.</param>
        </member>
        <member name="M:GpsGate.Tracks.TrackExporter.Load(System.Int32[],System.DateTime,System.DateTime,System.String[])">
            <summary>
            Loads The track info in with id's provided in the arrTrackInfoID array.
            </summary>
            <param name="arrTrackInfoID">TrackInfo ID's to load.</param>
            <param name="utcFrom">Start DateTime in UTC</param>
            <param name="utcTo">End DateTime in UTC</param>
            <param name="fields">Array of fields name to restrict the loaded data. Set to null to include all.</param>
        </member>
        <member name="M:GpsGate.Tracks.TrackExporter.Load(System.Int32[],System.DateTime,System.DateTime,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String[])">
            <summary>
            Loads The track info in with id's provided in the arrTrackInfoID array.
            </summary>
            <param name="arrTrackInfoID">TrackInfo ID's to load.</param>
            <param name="utcFrom">Start DateTime in UTC</param>
            <param name="utcTo">End DateTime in UTC</param>
            <param name="speedFilterFrom">Speed filter min value in M/S. Set to null to exclude.</param>
            <param name="speedFilterTo">Speed filter max value in M/S. Set to null to exclude</param>
            <param name="altFilterFrom">Altitude filter min value in meter. Set to null to exclude</param>
            <param name="altFilterFrom">Altitude filter max value in meter. Set to null to exclude</param>
            <param name="fields">Array of fields name to restrict the loaded data. Set to null to include all.</param>
        </member>
        <member name="M:GpsGate.Tracks.TrackExporter.OnChunkExported(GpsGate.Tracks.ExporterEventArgs)">
            <summary>
            Called be implementing classes when a data chunk has been exported.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:GpsGate.Tracks.TrackExporter.Filter(System.Collections.Generic.IEnumerable{GpsGate.Online.Message.GateMessage})">
            <summary>
            Filters the data by the given paramters in set in Load methods
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="E:GpsGate.Tracks.TrackExporter.ChunkExported">
            <summary>
            Called for each TrackInfo exported.
            Use this to flush stream.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackExporter.TrackDataFormat">
            <summary>
            IFormatProvider use to write numbers.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackExporter.Fields">
            <summary>
            Get the fields to export. Return null if null and all should be exported.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackDataReader.Distance(System.Int32,System.Int64,System.Int64)">
            <summary>
            TODO: Move to better place
            </summary>
            <param name="iTrackInfoId"></param>
            <param name="?"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackDataReader.GetTrackDataByTrackInfoId(System.Int32,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Loads all track data, including invalid, for one track info.
            </summary>
            <param name="iTrackInfoID"></param>
            <param name="bValid">Set to true if only valid track data should be loaded</param>
        </member>
        <member name="M:GpsGate.Tracks.TrackDataReader.GetTrackDataByOwner(System.Int32,System.Boolean)">
            <summary>
            Load all track data for one user, including invalid.
            </summary>
            <param name="iOwner">User to load track data for</param>
            <param name="bValid">True if only valid data should be loaded.</param>
        </member>
        <member name="T:GpsGate.Tracks.ExporterEventArgs">
            <summary>
            Event argument while exporting. Used for progress bar(?)
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfo.#ctor">
            <summary>
            Creates a new empty TrackInfo instance. 
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfo.GetTrackVisibilityInGroup(System.String,System.Int32)">
            <summary>
            Returns true if this track info is visible in specified group.
            </summary>
            <param name="strGroupName">Group name</param>
            <param name="iAppId">Application ID</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfo.ToString">
            <summary>
            BoundingBox info
            </summary>
            <returns>Name</returns>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.Name">
            <summary>
            Name of track.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.OwnerID">
            <summary>
            Track owner.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.TrackCategoryID">
            <summary>
            <see cref="T:GpsGate.Tracks.TrackCategory"/> ID. String value. Is "_main" for life track. Is "_buffered" for 
            tracks created with the _CreateTrackRecorder.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.BoundingBox">
            <summary>
            Bounding box in time and space this track spans over.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.TotalDistance">
            <summary>
            Total distance in meters.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.MinTimeStamp">
            <summary>
            When this track was started, in UTC.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.MaxTimeStamp">
            <summary>
            Wne this track was ended in UTC.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.DirtyCount">
            <summary>
            This will be increased by one each time Update is called. Zero means the TrackInfo hasn't been stored to DB yet.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfo.Deleted">
            <summary>
            Mark track as deleted
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.TrackInfoBag">
            <summary>
            Light weight "bag" for TrackInfo data.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfoBag.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.Double,System.Int32,Franson.Geo.BoundingBox,System.Int32)">
            <summary>
            Create light weight track info bag.
            </summary>
            <param name="iID"></param>
            <param name="iOwnerID"></param>
            <param name="strCategoryID"></param>
            <param name="strName"></param>
            <param name="strDescription"></param>
            <param name="dblTotalDistance"></param>
            <param name="bbBag"></param>
            <param name="iDirtyCount"></param>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfoBag.ToString">
            <summary>
            Returns name and bounding box as string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfoBag.ID">
            <summary>
            Database ID.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfoBag.OwnerId">
            <summary>
            Owner ID
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfoBag.TrackCategoryID">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfoBag.Name">
            <summary>
            Track name.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfoBag.Description">
            <summary>
            Free text description.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfoBag.TotalDistance">
            <summary>
            Will always return -1
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfoBag.BoundingBox">
            <summary>
            Bounding box in time and space.
            </summary>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfoBag.DirtyCount">
            <summary>
            Will increase one step each time a modification is made to this track. Can be used by post processing rules for dirty checking.
            </summary>
        </member>
        <member name="T:GpsGate.Tracks.TrackInfoReader">
            <summary>
            Read raw (not postprocessed) track info objects from database.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfoReader.#ctor">
            <summary>
            Create reader.
            </summary>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfoReader.GetTrackInfoById(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Read all track infos with specified database IDs.
            </summary>
            <param name="iArrTrackInfoIds"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfoReader.GetTrackInfoByUser(System.Int32)">
            <summary>
            Read all track info for specified user.
            </summary>
            <param name="iUserId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfoReader.GetTrackInfoByUser(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Read all track infos for a range of users.
            </summary>
            <param name="iArrUserId"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfoReader.GetTrackInfoByUser(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Read track infos inside time interval for specified user.
            </summary>
            <param name="iUserId"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Tracks.TrackInfoReader.GetTrackInfoByUser(System.Collections.Generic.IEnumerable{System.Int32},System.DateTime,System.DateTime)">
            <summary>
            Read track info inside time interval for range of users.
            </summary>
            <param name="iArrUserId"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Tracks.TrackInfoReader.DAO">
            <summary>
            DAO.
            </summary>
        </member>
        <member name="T:GpsGate.Online.GateApplication">
            <summary>
            Handles a set of listeners and group managers. Those build up an "application" that routes data.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_iPingInterval">
            <summary>
            In miliseconds how often the DB ping is made.
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_timerPing">
            <summary>
            A timer that is used to ping the database every m_iPingInterval milisecond
            MySQL needs this to not disconnect. And who knows maybe other databases
            have the same characteristics
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_bIsStarted">
            <summary>
            Set to true if application is started
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_listGroupManagers">
            <summary>
            Registered group managers
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_listListeners">
            <summary>
            Registered listeners
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_listServicePlugins">
            <summary>
            Registered service plugins.
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_providerManager">
            <summary>
            One listener manager that keeps track of all message based listeners.
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_evCancelTryStart">
            <summary>
            Set by Stop when any startup attempts should be canceled.
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_bWaitingDbToGetOnline">
            <summary>
            Set to true when waiting for DB to get online
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_iTryToRestartInterval">
            <summary>
            Interval to try to start application if there is no database online.
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_delayedPos">
            <summary>
            Carbon Black style delayed group.
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateApplication.m_SchedulerManager">
            <summary>
            Keeps track of all scheduler instances.
            </summary>
        </member>
        <member name="M:GpsGate.Online.GateApplication.GetServicePluginInformation">
            <summary>
            Return information about all enabled service plugins. Array with read only bags is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.GetServicePluginInformation(System.Type)">
            <summary>
            Returns array of enabled service plugins of specified type.
            </summary>
            <param name="typePlugin">Type to return. null to return all.</param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.GetServicePlugin(System.Int32)">
            <summary>
            Returns a service plugin instance by its database ID.
            </summary>
            <param name="iID"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_LoadAndStartServicePlugins">
            <summary>
            Called at startup. Loads and starts enabled service plugins.
            </summary>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_UnloadAndStopServicePlugins">
            <summary>
            Unload and stop service plugins. Called at service shutdown.
            </summary>
        </member>
        <member name="M:GpsGate.Online.GateApplication.GetListenerInformation">
            <summary>
            Returns information about all listeners, enabled and disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.GetListener(System.String)">
            <summary>
            Returns listener instance based on its type. Returns null if not found. If several instances of a listener exists, 
            the first in list is returned.
            </summary>
            <param name="strType"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.UpdateListener(GpsGate.Online.Net.NmeaListenerBag)">
            <summary>
            Updates listeners properties like enabled, server address, port etc.
            It is only possible to update a disabled listener.
            </summary>
            <param name="listenerBag"></param>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock.</exception>
            <exception cref="T:System.InvalidOperationException">If listener is enabled</exception>
            <exception cref="T:Franson.DAO.NotFoundException">Listener is not registered in database</exception>
            <exception cref="T:Franson.DAO.UpdateDBException">Unexcepted error when saving update to database.</exception>
        </member>
        <member name="M:GpsGate.Online.GateApplication.RegisterListener(System.Int32)">
            <summary>
            Loads listener from database and tries to start it. If listener is successfully started the state is changed to enabled in the 
            database and it will also be started automatically next time the service starts.
            If it is already started, nothing is done.
            </summary>
            <param name="iListenerID"></param>
            <returns>True if listener could be loaded and started, or if it already started.</returns>
            <exception cref="T:Franson.DAO.NotFoundException">If listener wasn't found in database.</exception>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock.</exception>
            <exception cref="T:GpsGate.Online.CouldNotStartException">Listener could not be started.</exception>
        </member>
        <member name="M:GpsGate.Online.GateApplication.RegisterListener(GpsGate.Online.Net.NmeaListener)">
            <summary>
            If application isn't started, the listener will be started when the application starts.
            If the application is started, the listener is started right away.
            The enabled state in database will not be modified.
            </summary>
            <param name="listener">Listener to be registered</param>
            <returns>True if listener was success fully registered (and started)</returns>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock.</exception>
        </member>
        <member name="M:GpsGate.Online.GateApplication.UnregisterListener(System.Int32)">
            <summary>
            Stop and remove listener. Disable listener in database. Listener will not be started next time service starts.
            </summary>
            <param name="iListenerID"></param>
            <returns>True if the listener was enabled.</returns>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock.</exception>
            <exception cref="T:System.InvalidOperationException">If you try to stop the GpsGate TCP/IP listener</exception>
        </member>
        <member name="M:GpsGate.Online.GateApplication.UnregisterListener(GpsGate.Online.Net.NmeaListener)">
            <summary>
            Stops listener, and removes it from service. The enabled state in database will not be modified.
            </summary>
            <param name="listener"></param>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock.</exception>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_StartListener(GpsGate.Online.Net.NmeaListener)">
            <summary>
            Tries to start listener. If failure, error is logged and false is returned.
            </summary>
            <param name="listener"></param>
            <returns>True if started successfully</returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_StopListener(GpsGate.Online.Net.NmeaListener)">
            <summary>
            Stops listener.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_RemoveListener(GpsGate.Online.Net.NmeaListener)">
            <summary>
            Removes listener from lists. Stop listener first if started.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_StartEnabledListeners">
            <summary>
            Start up all enabled listeners.
            </summary>
        </member>
        <member name="M:GpsGate.Online.GateApplication.RegisterGroupManager(GpsGate.Online.Directory.GateGroupManager)">
            <summary>
            Register a class that handles data routing. Must be called before <see cref="M:GpsGate.Online.GateApplication.Start"/>
            is called. After calling <see cref="M:GpsGate.Online.GateApplication.Stop"/>, the manager must be registered again.
            </summary>
            <param name="groupManager">Manager to be registered and used when Start is called</param>
            <exception cref="T:System.InvalidOperationException">Thrown if Start() has been called.</exception>
        </member>
        <member name="M:GpsGate.Online.GateApplication.GetOutgoingConnection(GpsGate.Online.Directory.Device,System.String,Franson.Directory.User)">
            <summary>
            Returns a connection to be used for outgoing command. If outgoing commands isn't supported for the specific
            device protocol + transport layer then null is returned.
            
            The application must be started. This method is thread safe.
            </summary>
            <param name="devTarget">Device</param>
            <param name="strTransport">E.g. "sms", "tcp", "udp", "sat", "http" or "email"</param>
            <param name="userSender">User executing command that resulted in this outgoing connection.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Application not started.</exception>
            <exception cref="T:System.ArgumentException">Device must hav an assigned protocol.</exception>
        </member>
        <member name="M:GpsGate.Online.GateApplication.GetIncomingConnections(GpsGate.Online.Directory.Device)">
            <summary>
            Return array of all incoming active connections for device.
            </summary>
            <param name="devTarget"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.GetListenerPort(System.String,System.String)">
            <summary>
            Returns the port for a enabled listener. Returns 0 for a disabled listener.
            </summary>
            <param name="strProtocolID"></param>
            <param name="strTransport"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_FindListener(System.String,System.String)">
            <summary>
            Finds enabled listener that matches protocol id + transport.
            </summary>
            <param name="strProtocolID"></param>
            <param name="strTransport"></param>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.GetSchedulerManager">
            <summary>
            Get the scheduler manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_BackGroundStartup(System.Object)">
            <summary>
            Handles slow starting database at boot.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:GpsGate.Online.GateApplication.ClearAllCaches">
            <summary>
            Clears all chaches in service.
            </summary>
        </member>
        <member name="M:GpsGate.Online.GateApplication.Start">
            <summary>
            Start GpsGate Online Application
            </summary>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock.</exception>
        </member>
        <member name="M:GpsGate.Online.GateApplication.Stop">
            <summary>
            Stops GpsGate Online Application. The application cannot be started again after it was stopped.
            </summary>
            <exception cref="T:Franson.Threading.LockTimeoutException">Deadlock.</exception>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_nmeaListener_NewAuthenticatedConnection(GpsGate.Online.Net.NmeaListener,GpsGate.Online.Net.NmeaConnection)">
            <summary>
            Will be called each time we got a new authenticated connection by one of the registered
            <see cref="T:GpsGate.Online.Net.NmeaListener"/>s.
            </summary>
            <param name="nmeaConn"></param>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_InstallSystemUser">
            <summary>
            Makes sure _SYSTEM user is installed.
            </summary>
        </member>
        <member name="M:GpsGate.Online.GateApplication.m_InstallSmsTestGateUser">
            <summary>
            Makes sure _SMSTEST user is installed.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateApplication.ProviderManager">
            <summary>
            Returns message provider manager for this applicaiton.
            </summary>
        </member>
        <member name="P:GpsGate.Online.GateApplication.IsStarted">
            <summary>
            Returns true if the application is started.
            </summary>
        </member>
        <member name="E:GpsGate.Online.GateApplication.NewConnection">
            <summary>
            Called when a new connection is made to this service. The connection is not yet authenticated.
            </summary>
        </member>
        <member name="E:GpsGate.Online.GateApplication.NewAuthenticatedConnection">
            <summary>
            Called when a connection is authenticated.
            </summary>
        </member>
        <member name="E:GpsGate.Online.GateApplication.Disconnected">
            <summary>
            Called when a device disconnects from the service.
            </summary>
        </member>
        <member name="T:GpsGate.Online.GateApplication.NewConnectionHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.GateApplication.NewConnection"/>
            </summary>
            <param name="service"></param>
            <param name="nmeaListener"></param>
            <param name="nmeaConn"></param>
        </member>
        <member name="T:GpsGate.Online.GateApplication.NewAuthenticatedConnectionHandler">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.GateApplication.NewAuthenticatedConnection"/>
            </summary>
            <param name="service"></param>
            <param name="nmeaListener"></param>
            <param name="nmeaConn"></param>
        </member>
        <member name="T:GpsGate.Online.GateApplication.DisconnectedHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Online.GateApplication.Disconnected"/>
            </summary>
            <param name="service"></param>
            <param name="nmeaListern"></param>
            <param name="nmeaConn"></param>
        </member>
        <member name="T:GpsGate.Online.GateConfig">
            <summary>
            GpsGate Online configuration
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateConfig.AuthenticationTimeout">
            <summary>
            Default time out from connection is made to it should be authenticated.
            </summary>
        </member>
        <member name="F:GpsGate.Online.GateConfig.CommandTimeout">
            <summary>
            Time out if no command is sent after connection is authenticated. Default 5 minutes.
            </summary>
        </member>
        <member name="T:GpsGate.Online.NmeaServiceApplication">
            <summary>
            Main service in GpsGate Server.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Online.NmeaServiceApplication.GetNmeaServiceApplicationSingleton">
            <summary>
            Returns NMEA Service application singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GpsGate.Online.NmeaServiceApplication.ClearSingleton">
            <summary>
            Removes cached singleton object. Next call to <see cref="M:GpsGate.Online.NmeaServiceApplication.GetNmeaServiceApplicationSingleton"/>
            will return a new object.
            </summary>
        </member>
        <member name="M:GpsGate.Online.NmeaServiceApplication.Start">
            <summary>
            Start "Franson NMEA Service"
            </summary>
        </member>
        <member name="T:GpsGate.Online.ClientChangedIDException">
            <summary>
            The tracker sending data to GGS changed ID.
            </summary>
        </member>
        <member name="M:GpsGate.Online.ClientChangedIDException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:GpsGate.Online.CouldNotProcessGateMessage">
            <summary>
            Could not process a GateMessage. No data is stored to database.
            </summary>
        </member>
        <member name="T:GpsGate.Online.CouldNotStartException">
            <summary>
            If a plugin or similar couldn't be started.
            </summary>
        </member>
        <member name="M:GpsGate.Online.CouldNotStartException.#ctor(System.String)">
            <summary>
            Create
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="M:GpsGate.Online.CouldNotStartException.#ctor(System.String,System.Exception)">
            <summary>
            Create
            </summary>
            <param name="strMessage">Message</param>
            <param name="exInner">Inner exception</param>
        </member>
        <member name="T:GpsGate.Online.AuthorizationException">
            <summary>
            Logged in user is not allowed to perform this operation.
            </summary>
        </member>
        <member name="M:GpsGate.Online.AuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage">Message</param>
            <param name="exInner">Inner exception</param>
        </member>
        <member name="M:GpsGate.Online.AuthorizationException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage">Message</param>
        </member>
        <member name="T:GpsGate.Online.GateCmdException">
            <summary>
            Error executing GpsGate Command.
            </summary>
        </member>
        <member name="M:GpsGate.Online.GateCmdException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="T:GpsGate.Online.MessageQueuedException">
            <summary>
            Thrown when a outgoing connection queues a message rather than deliver it.
            </summary>
        </member>
        <member name="M:GpsGate.Online.MessageQueuedException.#ctor(System.String)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:GpsGate.Online.NmeaRouterException">
            <summary>
            Some error in the NmeaRouter. It cannot route data under the current circumstances.
            </summary>
        </member>
        <member name="T:GpsGate.Online.BuddyGroupInvalidSetupException">
            <summary>
            Thrown if a BuddyGroup has an invalid setup, like two owners, that it cannot easly recover from.
            </summary>
        </member>
        <member name="T:GpsGate.Online.VehicleGroupInvalidSetupException">
            <summary>
            Thrown if a VehicleGroup has an invalid setup, like no owners, that it cannot easly recover from.
            </summary>
        </member>
        <member name="T:GpsGate.Online.MethodNotSupportedException">
            <summary>
            Can for example be thrown if an overloaded method no longer may be called for a specific sub class.
            </summary>
        </member>
        <member name="T:GpsGate.Online.InvalidGroupOperationException">
            <summary>
            Can for example be thrown if you try to Accept an user that is not pending or a prospect
            </summary>
        </member>
        <member name="T:GpsGate.Online.GroupAccessViolationException">
            <summary>
            Can for example be thrown if you try to Accept an user that is not pending or a prospect
            </summary>
        </member>
        <member name="T:GpsGate.Online.InviteOwnerException">
            <summary>
            Can for example be thrown if you are trying to invite your self to a buddylist.
            </summary>
        </member>
        <member name="T:GpsGate.Online.InviteMemberException">
            <summary>
            Can for example be thrown if you are trying to invite your self to a buddylist.
            </summary>
        </member>
        <member name="T:GpsGate.Online.InvitePendingException">
            <summary>
            Can for example be thrown if you are trying to invite your self to a buddylist.
            </summary>
        </member>
        <member name="T:GpsGate.Online.ConnectionNotAuthenticatedException">
            <summary>
            Thrown when an NmeaConnection is used without beeing autheticated in a context it must be authenticated.
            </summary>
        </member>
        <member name="T:GpsGate.Online.ClientClosedConnectionException">
            <summary>
            Thrown when the client closed an NmeaConnection
            </summary>
        </member>
        <member name="T:GpsGate.Online.DevicePhoneNumberAlreadyExistsException">
            <summary>
            Thrown when a phone number already exists for another device in the device table
            </summary>
        </member>
        <member name="T:GpsGate.Online.DeviceEmailAlreadyExistsException">
            <summary>
            Thrown when an email address already exists for another device in the device table
            </summary>
        </member>
        <member name="T:GpsGate.Online.DeviceAlreadyExistsException">
            <summary>
            Thrown when IMEI number already exists
            </summary>
        </member>
        <member name="T:GpsGate.Online.ProtocolNotFoundException">
            <summary>
            If protocol wasn't found in database.
            </summary>
        </member>
        <member name="T:GpsGate.Online.ProtocolVersionNotFoundException">
            <summary>
            If protocol version wasn't found in database.
            </summary>
        </member>
        <member name="T:GpsGate.Online.DeviceNotFoundException">
            <summary>
            If device wasn't found.
            </summary>
        </member>
        <member name="T:GpsGate.Online.GeofenceNotFoundException">
            <summary>
            If geofence wasn't found.
            </summary>
        </member>
        <member name="T:GpsGate.Online.EventArgumentNotFoundException">
            <summary>
            If EventArgument wasn't found.
            </summary>
        </member>
        <member name="T:GpsGate.Online.GeofenceException">
            <summary>
            Thrown on Geofence errors
            </summary>
        </member>
        <member name="T:GpsGate.Client.GateException">
            <summary>
            All specific GpsGateClient exceptions derives from this class
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage">Error message</param>
        </member>
        <member name="M:GpsGate.Client.GateException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="exInner">Inner exception.</param>
        </member>
        <member name="T:GpsGate.Client.GateParseException">
            <summary>
            Error parsing a serialized GpsGate Command.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateParseException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:GpsGate.Client.GateParseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with innner exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="T:GpsGate.Client.GateConnectException">
            <summary>
            Failed to connect to server
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateConnectException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
            <param name="exInner"></param>
        </member>
        <member name="M:GpsGate.Client.GateConnectException.#ctor(System.String)">
            <summary>
            Create exception.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="T:GpsGate.Client.GateAuthenticationException">
            <summary>
            Wrong username or password
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateAuthenticationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage">Error message</param>
        </member>
        <member name="T:GpsGate.Client.GateDisconnectedException">
            <summary>
            Client was disconnected from server.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateDisconnectedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage">Error message</param>
        </member>
        <member name="M:GpsGate.Client.GateDisconnectedException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception
            </summary>
            <param name="strMessage">Message</param>
            <param name="exInner">Inner exception</param>
        </member>
        <member name="T:GpsGate.Client.GateNoResponseException">
            <summary>
            No response from server socket. Or a command that times out.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateNoResponseException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMessage">Error message</param>
        </member>
        <member name="T:GpsGate.Client.GateCommandException">
            <summary>
            Error when executing command on server.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GateCommandException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strCode">Error code from server FRERR response</param>
            <param name="strMessage">Free text message.</param>
        </member>
        <member name="P:GpsGate.Client.GateCommandException.Code">
            <summary>
            The original code from FRERR.Code
            </summary>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient">
            <summary>
            The GpsGateClient is used to connect to GpsGate.com or a GpsGate Server installation.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_parser">
            <summary>
            NMEA Parser for incoming data.
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_bIsConnectAsync">
            <summary>
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_bConnecting">
            <summary>
            True from ConnectAsync() or Connect() is called until the connection failed or succeeded.
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_listTrackPoints">
            <summary>
            List of last known TrackPoint for each username. The keys are set to lower case.
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_listUsernames">
             <summary>
            The original usernames. Not lowercase.
             </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.#ctor(System.String,System.Int32)">
            <summary>
            Create GpsGate Client that will contect to a custom GpsGate Server.
            </summary>
            <param name="strHostname">Server to connect to. Use "online.gpsgate.com" to connect to GpsGate.com</param>
            <param name="iPort">Server port. Usually 30175</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.#ctor">
            <summary>
            Create a client that connects to GpsGate.com
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String)">
            <summary>
            Connects to and tries to login to the server specified in the constructor.
            Some send or request method must be called latest 20 seconds after the connection 
            is made, otherwise the server will disconnect.
            </summary>
            <example>
            <code lang="C#">
            // In this sample we connect to GpsGate.com
            // You can also connect to your own GpsGate Server installation.
            GpsGateClient client = new GpsGateClient("online.gpsgate.com", 30175);
            
            // The user must be created on the server first
            // Replace "username" and "password" by the real user name and password
            client.Connect("username", "password");
            
            // We are now connected. Lets send a position
            client.SendTrackPoint(new TrackPoint(new Position(30, 40), null, DateTime.UtcNow));
            
            // You can do as many operations as you like here...
            
            // And disconnect
            client.Disconnect();
            </code>
            </example>
            <remarks></remarks>
            <param name="strUsername">Username</param>
            <param name="strPassword">Password</param>
            <exception cref="T:System.Net.Sockets.SocketException">Failed to connect to server on a socket level.</exception>
            <exception cref="T:System.ArgumentNullException">Hostname was set to null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">iPort set in the constructor is not a valid socket port.</exception>
            <exception cref="T:System.InvalidOperationException">Client was already connected.</exception>
            <exception cref="T:GpsGate.Client.GateNoResponseException">The server socket was found, but the server is not responding.</exception>
            <exception cref="T:GpsGate.Client.GateDisconnectedException">Server closed the socket.</exception>
            <exception cref="T:GpsGate.Client.GateAuthenticationException">Wrong username or password.</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String,System.String)">
            <summary>
            Connect to server. <see cref="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String)"/> for more information.
            Set namespace to "IMEI" for an IMEI number based login.
            </summary>
            <param name="strDomain">Domain name</param>
            <param name="strUsername">User name</param>
            <param name="strPassword">Password</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.Connect">
            <summary>
            Connect to server without logging in. This can be useful if you want to send a _Login command instead and
            not use the old v1.1 way of logging in.
            </summary>
            <exception cref="T:GpsGate.Client.GateConnectException">Failed to connect.</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.ConnectAsync(System.String,System.String)">
            <summary>
            Connects and tries to login to server specified in constructor. Will return instantly 
            <see cref="M:GpsGate.Client.GpsGateClient.OnConnected"/> is called if the login was successful. 
            <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> followed by <see cref="M:GpsGate.Client.GpsGateClient.OnDisconnected"/> is 
            called if some kind of error happend. If you don't derive from GpsGateClient and overload the
            OnXyz() methods, the events <see cref="E:GpsGate.Client.GpsGateClient.Connected"/>, <see cref="E:GpsGate.Client.GpsGateClient.Error"/> and <see cref="E:GpsGate.Client.GpsGateClient.Disconnected"/>
            will be called. The argument to <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> or <see cref="E:GpsGate.Client.GpsGateClient.Error"/> will be the same as the exceptions
            described under <see cref="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String)"/>.
            </summary>
            <example>
            <code lanuage="C#">
            // Derive from GpsGateClient to override OnConnected() etc.
            class MyClient : GpsGateClient
            {
                public 
            
                protected void override OnConnected()
                {
                    // Successfully connected!
                }
            
                protected void override OnError(Exception ex)
                {
                    // There was an error
                }
            
                protected void override OnDisconnected()
                {
                    // Client was disconnected from server
                }
            }
            
            // Some code using the derived class above
            // 
            MyClient myClient = new MyClient("online.gpsgate.com", 30175);
            
            // The user must be created on the server first
            // Replace "username" and "password" by the real user name and password
            client.ConnectAsync("username", "password");
            
            // You cannot send or receive anything from the server until OnConnected() is called.
            </code>
            </example>
            <param name="strUsername">Username</param>
            <param name="strPassword">Password</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.ConnectAsync(System.String,System.String,System.String)">
            <summary>
            Same as <see cref="M:GpsGate.Client.GpsGateClient.Connect(System.String,System.String)"/> but also include namespace.
            Set namespace to "IMEI" for an IMEI number based login.
            </summary>
            <param name="strDomain"></param>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnConnected">
            <summary>
            Called when GpsGateClient has successfully connected and logged into the server.
            The default implementation will call the event <see cref="E:GpsGate.Client.GpsGateClient.Connected"/>. 
            A class that derives from GpsGateClient typically overrides this method.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)">
            <summary>
            Called when there is some kind of error between client and server.
            The default implementation will call the event <see cref="E:GpsGate.Client.GpsGateClient.Error"/>.
            A class that derives from GpsGateClient typically overrides this method to catch errors.
            </summary>
            <param name="ex">Exception that describes the error.</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.Disconnect">
            <summary>
            Disconnects client from server.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.DisconnectAsync">
            <summary>
            Starts disconnecting from server. Returns instantly.
            <see cref="M:GpsGate.Client.GpsGateClient.OnDisconnected"/> is called when client is disconnected from server.
            </summary>
        </member>
        <member name="F:GpsGate.Client.GpsGateClient.m_bDisconnectCalled">
            <summary>
            Set to true when Disconnect() or DisconnectAsync() is called.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnDisconnected">
            <summary>
            Called when the client has disconnected from the server. The default
            implementation will call the event <see cref="E:GpsGate.Client.GpsGateClient.Disconnected"/>. A class that derives
            from GpsGateClient will typically override this method.
            OnDisconnected() is only called if OnConnected() has been called. If there is an error
            <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> is called first, then this method.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.SendTrackPoint(Franson.Geo.TrackPoint)">
            <summary>
            Sends a <see cref="T:Franson.Geo.TrackPoint"/> for the logged in user to the server.
            The current position and velocity for this user will be updated on the server,
            and also transmitted to any other clients listening for changes of this user.
            The client must be connected to the server.
            The client may not have called <see cref="M:GpsGate.Client.GpsGateClient.RequestTrackPoints(System.String,System.Double)"/> or <see cref="M:GpsGate.Client.GpsGateClient.RequestBuddyListTrackPoints(System.Double)"/>
            before the call to SendTrackPoint. To switch between request and send mode, the client must
            disconnect and connect again. A suceessful call to SendTrackPoint does not guarantee that the server
            has received the new position. It only guarantees it was successfully written to the local socket.
            To have a guaranteed transaction you can have one more GpsGateClient object that requests
            the same users current position, and compares it with the latest sent.
            </summary>
            <param name="trackPoint">TrackPoint</param>
            <exception cref="T:System.InvalidOperationException">If the client is disconnected or in request mode.</exception>
            <exception cref="T:System.IO.IOException">If socket is lost in an unexpected way</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.SendTrackPointAsync(Franson.Geo.TrackPoint)">
            <summary>
            Same as <see cref="M:GpsGate.Client.GpsGateClient.SendTrackPoint(Franson.Geo.TrackPoint)"/>, but the call will return instantly.
            <see cref="M:GpsGate.Client.GpsGateClient.OnTrackPointSent(Franson.Geo.TrackPoint)"/> is called when the data is written to the socket.
            <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> is called if there is an error.
            </summary>
            <param name="trackPoint">TrackPoint to send.</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnTrackPointSent(Franson.Geo.TrackPoint)">
            <summary>
            Called when a TrackPoint is sent. The default imlpementation will call the event
            <see cref="E:GpsGate.Client.GpsGateClient.TrackPointSent"/>. A class that derives from GpsGateClient will typically override 
            this method.
            </summary>
            <param name="trackPoint">The TrackPoint that was sent.</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.RequestTrackPoints(System.String,System.Double)">
            <summary>
            Call this method to request TrackPoints from a specific user.
            Each time a new TrackPoint is sent from the server <see cref="M:GpsGate.Client.GpsGateClient.OnTrackPointReceived(Franson.Geo.TrackPoint,System.String)"/>
            is called.
            To request data from a new user, you must reconnect first.
            </summary>
            <param name="strUsername">Username to receive data from</param>
            <param name="dblInterval">Interval in seconds.</param>
            <exception cref="T:System.InvalidOperationException">If not connected, or if some request or send method 
            has been called before</exception>
            <example><code language="C#">
            
            public class MyForm : System.Windows.Forms.Form
            {
                private GpsGateClient m_client = new GpsGateClient("online.gpsgate.com", 30175);    
            
                void MyForm()
                {
                    m_client.TrackPointReceived += new TrackPointReceivedHandle(MyForm_TrackPointReceived);
                }
            
                public void Start()
                {
                    // The user must be created on the server first
                    // Replace "username" and "password" by the real user name and password
                    // Connect to the server.
                    m_client.Connect("username", "password");
                    
                    // Request TrackPoints from a known user, with a fastest interval of 10 seconds
                    m_client.RequestTrackPoints("someuser", 10);
                }
            
                protected override void MyForm_TrackPointReceived(GpsGateClient client, TrackPoint trackPoint, string strUsername)
                {
                    // This even handler will be called (in a new thread) each time "someuser" has updated his position
                    // But never more often than every 10 seconds.
                    // Note that you need to use Invoke() to synchronize data to the GUI thread.
                }
            }
            </code></example>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.RequestBuddyListTrackPoints(System.Double)">
            <summary>
            Call this method to request TrackPoints from all users that you have the right to see. (Your "buddies").
            Each time a new TrackPoint is sent from the server <see cref="M:GpsGate.Client.GpsGateClient.OnTrackPointReceived(Franson.Geo.TrackPoint,System.String)"/>
            </summary>
            <param name="dblInterval">Interval in seconds.</param>
            <exception cref="T:System.InvalidOperationException">If not connected, or if some request or send method 
            has been called before</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.GetLastTrackPoint(System.String)">
            <summary>
            Get the last known <see cref="T:Franson.Geo.TrackPoint"/> for a known username. You must have connected to the server
            and requested the position for this user first.
            </summary>
            <param name="strUsername">Username to get the last known <see cref="T:Franson.Geo.TrackPoint"/> for</param>
            <returns>Last known TrackPoint</returns>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnTrackPointReceived(Franson.Geo.TrackPoint,System.String)">
            <summary>
            OnTrackPointReceived() is always called in a new thread from the ThreadPool
            </summary>
            <param name="trackPoint"></param>
            <param name="strUsername"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.SendCustomSentence(Franson.Nmea.Sentence)">
            <summary>
            Can be used to implement future aspects of the protocol.
            </summary>
            <param name="sentence"></param>
            <exception cref="T:GpsGate.Client.GateConnectException">Client not connected to server</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.OnCustomNmeaDataReceived(Franson.Nmea.Sentence)">
            <summary>
            A custom sentence received from server. Override to implement future aspects of protocol.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClient.ToString">
            <summary>
            Returns a string with the format user@hostname
            </summary>
            <returns></returns>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.ConnectTimeout">
            <summary>
            Time in miliseconds before an attempt to connect to a server should time out. Default 30000 miliseconds
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.Connected">
            <summary>
            Called when GpsGateClient has successfully connected and logged into the server.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.Error">
            <summary>
            Called when there is some kind of error between client and server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.IsConnected">
            <summary>
            Returns true if there is a valid logged in connection between client and server without any errors.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.Disconnected">
            <summary>
            Called when the client has disconnected from the server.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.TrackPointSent">
            <summary>
            Called when a TrackPoint is sent.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClient.TrackPointReceived">
            <summary>
            Called when a new <see cref="T:Franson.Geo.TrackPoint"/> is received from the server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.ReceiveUsernameList">
            <summary>
            Returns an array of strings with all usernames for whom a position has been sent from the server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.Username">
            <summary>
            Username used when connecting to server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.Hostname">
            <summary>
            Returns name of server client will connect to.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClient.Port">
            <summary>
            Returns port number client will connect to.
            </summary>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.ConnectedHandle">
            <summary>
            Delagate used for the Connected event.
            </summary>
            <param name="client"></param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.ErrorHandle">
            <summary>
            Delegate used by the Error event
            </summary>
            <param name="client">The sender of the event</param>
            <param name="ex">The exception describing the error</param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.DisconnectedHandle">
            <summary>
            Delegate used by the Disconnected event
            </summary>
            <param name="client">The sender of the event</param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.TrackPointSentHandle">
            <summary>
            Delegate used by the TrackPointSent event
            </summary>
            <param name="client">The sender of the event</param>
            <param name="trackPoint">The send <see cref="T:Franson.Geo.TrackPoint"/> object</param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClient.TrackPointReceivedHandle">
            <summary>
            Delegate used by <see cref="E:GpsGate.Client.GpsGateClient.TrackPointReceived"/> event
            </summary>
            <param name="client">The sender of event</param>
            <param name="trackPoint">Received <see cref="T:Franson.Geo.TrackPoint"/></param>
            <param name="strUsername">Username TrackPoint belongs to</param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClientCmd">
            <summary>
            Class use for command based communication with server.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.#ctor">
            <summary>
            Create a client that will connect to GpsGate.com
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.#ctor(System.String,System.Int32)">
            <summary>
            Create a client that will connect to a custom server.
            </summary>
            <param name="strHostname"></param>
            <param name="iPort"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create client that will connect to a custom server.
            If you are using a "Device Mapper" on the server, the device name must match with the one registered on the server.
            </summary>
            <param name="strHostname">Server to connect to</param>
            <param name="iPort">Server port</param>
            <param name="strDeviceName">Device name (on server)</param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnConnected">
            <summary>
            Sends version handshake to server. Announces client uses v1.1 of GpsGate protocol.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnRetFromServer(Franson.Nmea.Command.GenericCmd,Franson.Nmea.FRERR)">
            <summary>
            Called when a response is received from server. By default the event <see cref="E:GpsGate.Client.GpsGateClientCmd.RetFromServer"/> is called.
            </summary>
            <param name="retFromServer"></param>
            <param name="errFromServer"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnCmdFromServer(Franson.Nmea.Command.GenericCmd)">
            <summary>
            Called when an outgoing command is received from server. By default the event <see cref="E:GpsGate.Client.GpsGateClientCmd.CmdFromServer"/> is called.
            </summary>
            <param name="cmdFromServer"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.CmdToServerAsync(Franson.Nmea.FRCMD)">
             <summary>
             Send command to server. This is an asynchronous call and will return instantly. To get the answer from the server you 
             either need to override <see cref="M:GpsGate.Client.GpsGateClientCmd.OnRetFromServer(Franson.Nmea.Command.GenericCmd,Franson.Nmea.FRERR)"/> or listen to the <see cref="E:GpsGate.Client.GpsGateClientCmd.RetFromServer"/> event.
             If there is some kind of connection error <see cref="M:GpsGate.Client.GpsGateClient.OnError(System.Exception)"/> and <see cref="E:GpsGate.Client.GpsGateClient.Error"/> will be called.
             If the client is disconnected <see cref="M:GpsGate.Client.GpsGateClient.OnDisconnected"/> and <see cref="E:GpsGate.Client.GpsGateClient.Disconnected"/> will be called.
             </summary>
             <param name="cmdToSend"></param>
             <example>
             <code lanuage="C#">
             
             using Franson.Nmea.Command;
             using Franson.Nmea;
             using GpsGate.Client;
             
             private AutoResetEvent m_evCmdFromServer = null;
             private FRERR m_errLast = null;
             private GenericCmd m_cmdLast = null;
             
             public void TestPing()
             {
                 GpsGateClientCmd clientCmd = new GpsGateClientCmd("localhost", 30175);
                 // This event will be called when server has executed command.
                 clientCmd.RetFromServer += new GpsGateClientCmd.RetFromServerHandle(clientCmd_CmdFromServer);
                 // Login to server
                 clientCmd.Connect("username", "password");
             
                 // Send _Ping command
                 Ping ping = new Ping();
                 clientCmd.CmdToServerAsync(ping);
             
                 // Wait for reply from server.                        
                 m_evCmdFromServer.WaitOne(5000, false);
             
                 // m_cmdLast contains result from server, m_errlast contains error from server
             
                 // More commands can be executed here...
             
                 clientCmd.Disconnect();
             }
             
             private void clientCmd_CmdFromServer(GpsGateClient client, GenericCmd cmdFromServer, FRERR errFromServer)
             {
                 m_cmdLast = cmdFromServer;
                 m_errLast = errFromServer;
            
                 m_evCmdFromServer.Set();
             }
             </code>
             </example>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.CmdToServer(Franson.Nmea.FRCMD)">
            <summary>
            Executes command on server. This call is synchronously, which means it locks, and returns when the response from server has been received.
            If there are any errors, and exception is thrown. <see cref="M:GpsGate.Client.GpsGateClientCmd.CmdToServerAsync(Franson.Nmea.FRCMD)"/>
            </summary>
            <param name="cmdToServer">Command to execute on server.</param>
            <returns>Response from server.</returns>
            <exception cref="T:GpsGate.Client.GateNoResponseException">There was no response from server.</exception>
            <exception cref="T:GpsGate.Client.GateDisconnectedException">Client was disconencted. Due to error or a call to Disconnect</exception>
            <exception cref="T:GpsGate.Client.GateCommandException">Error executing command on server.</exception>
            <example>
            <code lanuage="C#">
            
            using Franson.Nmea.Command;
            using Franson.Nmea;
            using Franson.Geo;
            using GpsGate.Client;
            
            public void TestSendMessage()
            {
                // Replace "localhost" if "Franson NMEA Service" is running on another computer.
                GpsGateClientCmd clientCmd = new GpsGateClientCmd("localhost", 30175);
                // Login to server
                clientCmd.Connect("username", "password");
            
                // Send _SendMessage command
                // Use the "Device Mapper" in vehicle Tracker to map signals to alarms etc.
            
                TrackPoint tp = new TrackPoint(new Position(1, 2), new Velocity(3, 4), DateTime.UtcNow);
                SendMessage builder = new SendMessage(tp, "GpsGateDevice");
                builder.AddMessageRecord("Switch1", true);
            
                // Note that this call can throw exceptions if there are any kind of error.
                clientCmd.CmdToServer(builder);
            
                // More commands can be executed here...
            
                clientCmd.Disconnect();
            }
            </code>
            </example>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.RetToServer(Franson.Nmea.FRRET,Franson.Nmea.FRERR)">
            <summary>
            Send a response to server. Either a FRRET based response valid execution or FRERR on error.
            </summary>
            <param name="retToSend"></param>
            <param name="errToSend"></param>
            <exception cref="T:System.InvalidOperationException">If both arguments are null, or both are set.</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnCustomNmeaDataReceived(Franson.Nmea.Sentence)">
            <summary>
            Called when a sentence is received from server.
            </summary>
            <param name="sentence"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.m_cmdParser_ErrorFound(Franson.Nmea.Command.CmdParser,Franson.Nmea.FRERR)">
            <summary>
            
            </summary>
            <param name="parser"></param>
            <param name="err"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.m_cmdParser_GenericCmdFound(Franson.Nmea.Command.CmdParser,Franson.Nmea.Command.GenericCmd)">
            <summary>
            Called by command parser, when a complete $FRRET or $FRCMD found. Including argument sentences.
            </summary>
            <param name="parser"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.GetLastTrackPoint(System.String)">
            <summary>
            Do not use in command mode.
            </summary>
            <param name="strUsername"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnTrackPointReceived(Franson.Geo.TrackPoint,System.String)">
            <summary>
            Do not use in command mode.
            </summary>
            <param name="trackPoint"></param>
            <param name="strUsername"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.OnTrackPointSent(Franson.Geo.TrackPoint)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="trackPoint"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.RequestBuddyListTrackPoints(System.Double)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="dblInterval"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.RequestTrackPoints(System.String,System.Double)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="strUsername"></param>
            <param name="dblInterval"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.SendTrackPoint(Franson.Geo.TrackPoint)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="trackPoint"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientCmd.SendTrackPointAsync(Franson.Geo.TrackPoint)">
            <summary>
            Do not use in command mode
            </summary>
            <param name="trackPoint"></param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientCmd.ServerName">
            <summary>
            Returns name and version to connected server. Returns null if not yet connected.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClientCmd.RetFromServer">
            <summary>
            Event called when there is a response from server, for a command sent from client.
            </summary>
        </member>
        <member name="E:GpsGate.Client.GpsGateClientCmd.CmdFromServer">
            <summary>
            Event called when there is a outgoing command from server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientCmd.ReceiveUsernameList">
            <summary>
            Do not use in command mode
            </summary>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
        </member>
        <member name="T:GpsGate.Client.GpsGateClientCmd.RetFromServerHandle">
            <summary>
            Delegate to handle response from server, for a command sent from client.
            </summary>
        </member>
        <member name="T:GpsGate.Client.GpsGateClientCmd.CmdFromServerHandle">
            <summary>
            Delegate to handle outgoing command from server.
            </summary>
            <param name="client"></param>
            <param name="cmdFromServer"></param>
        </member>
        <member name="T:GpsGate.Client.GpsGateClientHttp">
            <summary>
            GpsGate Client to send commands to GpsGate Server over HTTP.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="F:GpsGate.Client.GpsGateClientHttp.m_listCmds">
            <summary>
            Array of commands to be sent to server at next call to Execute
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientHttp.#ctor(System.String,System.Int32)">
            <summary>
            Connects to a GpsGate Server using HTTP. The default port is 8008. The host name should not include path.
            The URL will be http://strHostName:iPort/GpsGate/
            </summary>
            <param name="strHostName">Server address not including path or "http://" </param>
            <param name="iPort">Use port 8008</param>
            <exception cref="T:System.ArgumentException">Invalid argument</exception>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientHttp.#ctor">
            <summary>
            Create client that connects to GpsGate.com using HTTP.
            </summary>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientHttp.AddCmd(Franson.Nmea.CmdBase)">
            <summary>
            Add a command to be sent to server at next call to <see cref="M:GpsGate.Client.GpsGateClientHttp.Execute"/> 
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:GpsGate.Client.GpsGateClientHttp.Execute">
            <summary>
            Send all commands to server.
            </summary>
            <returns>Array of answers to each command sent to server.</returns>
            <exception cref="T:GpsGate.Client.GateConnectException">Could not connect to server, or posted data was in bad format.</exception>
            <exception cref="T:GpsGate.Client.GateParseException">Could not understand response from server.</exception>
            <exception cref="T:System.InvalidOperationException">Could not build XML from commands.</exception>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientHttp.ServerUrl">
            <summary>
            Server URL. Default "http://online.gpsgate.com:8008/GpsGate/"
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientHttp.ServerHostName">
            <summary>
            Host name. Default "online.gpsgate.com"
            </summary>
        </member>
        <member name="P:GpsGate.Client.GpsGateClientHttp.ServerPort">
            <summary>
            Server port. Default 8008
            </summary>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient">
            <summary>
            Handles SMS exchange with GpsGate Server. This class can be used when integrating GpsGate Server to a new
            SMS provider. E.g. Vodafone has their own API:s to send an receive bulk SMS. Use this calss when integrating
            GpsGate Server to such provider.
            
            Or you might have a GSM modem connected to your computer, a web service, or similar. This is the class to
            use to integrate such SMS provider to GpsGate Server.
            
            You should NOT use this class to integrate one particular device that uses SMS. This is rather a class
            that acts as a proxy for all SMS messages between GpsGate Server and an SMS provider. Independent of
            what is contained in the SMS.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.SERVER_RESPONSE_TIMEOUT">
            <summary>
            30 seconds server timeout.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_iRetryConnectDelay">
            <summary>
            Wait 60 seconds before reconnecting in "fire and forget" mode.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_iPingInterval">
            <summary>
            Ping interval.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_strServerAddress">
            <summary>
            GpsGate Server address.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_iPort">
            <summary>
            GpsGate Server port.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_strUsername">
            <summary>
            Credentials to login to server.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_ggClient">
            <summary>
            Handles communication with server.
            </summary>
        </member>
        <member name="F:GpsGate.Client.SmsProxyClient.m_bAcceptedAsSmsProxy">
            <summary>
            Set to true if confirmed from server we are accepted as SMS Proxy
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.#ctor(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Create object that handles SMS exchange with GpsGate Server.
            </summary>
            <param name="strServerAddress">Address to server</param>
            <param name="iPort">Server port</param>
            <param name="strUsername">Username. Must be set as a SMS Proxy user on server</param>
            <param name="strPassword">Password</param>
            <param name="bFireAndForget">Set fire and forget mode.</param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.Connect(System.Boolean)">
            <summary>
            Connect to server. Waits until connection is successful or fails.
            If "fire and forget" mode is true, then SmsProxyClient will try to reconnect to
            the server if the connection is lost, until <see cref="M:GpsGate.Client.SmsProxyClient.Disconnect"/> is called.
            </summary>
            <param name="bAcceptOutgoingSMS">Set to true to accept outgoing SMS from server.</param>
            <exception cref="T:GpsGate.Client.GateConnectException">Failed to connect to server, when "fire and forget" not active.</exception>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.m_DisconnectAndRetry">
            <summary>
            Disconnects from server if connected. Starts a timer to retry if in "fire and forget mode".
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.Disconnect">
            <summary>
            Disconnect from server.
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.ExecuteCommand(Franson.Nmea.FRCMD)">
            <summary>
            Sends command to server and waits for answer before return. If client not connected and attempt to connect will be made.
            If there is an error, an exception is thrown.
            Exception is thrown in "fire and forget" mode as well.
            </summary>
            <param name="cmdToSend"></param>
            <exception cref="T:System.ArgumentException">Any of the argument is null</exception>
            <exception cref="T:GpsGate.Client.GateCommandException">If server returns an error when executing command.</exception>
            <exception cref="T:GpsGate.Client.GateConnectException">If client fails to connect to server. Or if response from server timed out.</exception>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.m_cmdFromServer(GpsGate.Client.GpsGateClient,Franson.Nmea.Command.GenericCmd)">
            <summary>
            Outgoing command from server received.
            </summary>
            <param name="client"></param>
            <param name="cmdFromServer"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.m_cmd_RetFromServer(GpsGate.Client.GpsGateClient,Franson.Nmea.Command.GenericCmd,Franson.Nmea.FRERR)">
            <summary>
            Response on command from client received.
            </summary>
            <param name="client"></param>
            <param name="retFromServer"></param>
            <param name="errFromServer"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.m_cmd_Error(GpsGate.Client.GpsGateClient,System.Exception)">
            <summary>
            Error in connection to server
            </summary>
            <param name="client"></param>
            <param name="ex"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.OnConnected">
            <summary>
            Called when a connection to server is established.
            By default the <see cref="E:GpsGate.Client.SmsProxyClient.Connected"/> event is called.
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.OnDisconnected">
            <summary>
            Called when disconnected from server.
            By default <see cref="E:GpsGate.Client.SmsProxyClient.Disconnected"/> event is called.
            </summary>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.OnMessageFromServer(Franson.Nmea.Command.ProxyMessageCmdBuilder)">
            <summary>
            Called when a message is received from server.
            By default <see cref="E:GpsGate.Client.SmsProxyClient.MessageFromServer"/> is called.
            
            If overridden, throw an exception if failing to process message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.OnConnectionError(System.Exception)">
            <summary>
            Called when there is an error in connection to server.
            By default <see cref="E:GpsGate.Client.SmsProxyClient.ConnectionError"/> is called, and a retry timer is started if in "fire and forget mode".
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:GpsGate.Client.SmsProxyClient.TestServerConnection(System.String,System.Int32,System.String,System.String)">
            <summary>
            Tests connection to server. Returns true if server accepts client as outgoing SMS Proxy.
            </summary>
            <param name="strServerAddress"></param>
            <param name="iPort"></param>
            <param name="strUsername"></param>
            <param name="strPassword"></param>
            <returns></returns>
        </member>
        <member name="E:GpsGate.Client.SmsProxyClient.Connected">
            <summary>
            Called when a connection to server is established.
            </summary>
        </member>
        <member name="E:GpsGate.Client.SmsProxyClient.Disconnected">
            <summary>
            Called when disconnected from server.
            </summary>
        </member>
        <member name="E:GpsGate.Client.SmsProxyClient.MessageFromServer">
            <summary>
            Called when a new message has been received from server.
            The event handler should throw an exception if it fails to process the message (e.g. fails to send it)
            </summary>
        </member>
        <member name="E:GpsGate.Client.SmsProxyClient.ConnectionError">
            <summary>
            Called when the connection to server fails unexpectedly.
            </summary>
        </member>
        <member name="P:GpsGate.Client.SmsProxyClient.IsConnected">
            <summary>
            Returns true if client connected to server.
            </summary>
        </member>
        <member name="P:GpsGate.Client.SmsProxyClient.RetryConnectDelay">
            <summary>
            Delay in milliseconds before an attempt to reconnect to server is made in "fire and forget" mode.
            Default 60 * 1000 = 1 minute
            </summary>
        </member>
        <member name="P:GpsGate.Client.SmsProxyClient.PingInterval">
            <summary>
            Milliseconds between _Ping command to server to keep connection alive. 
            Default 3 * 60 * 1000 = 3 minutes.
            </summary>
        </member>
        <member name="P:GpsGate.Client.SmsProxyClient.AcceptedAsSmsProxy">
            <summary>
            Returns true if server accepted proxy as outgoing SMS proxy.
            </summary>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient.ConnectedHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Client.SmsProxyClient.Connected"/>
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient.DisconnectedHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Client.SmsProxyClient.Disconnected"/>
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient.MessageFromServerHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Client.SmsProxyClient.MessageFromServer"/>
            </summary>
            <param name="conn"></param>
            <param name="proxyMessage"></param>
        </member>
        <member name="T:GpsGate.Client.SmsProxyClient.ConnectionErrorHandle">
            <summary>
            Delegate for <see cref="E:GpsGate.Client.SmsProxyClient.ConnectionError"/>
            </summary>
            <param name="conn"></param>
            <param name="ex"></param>
        </member>
    </members>
</doc>
