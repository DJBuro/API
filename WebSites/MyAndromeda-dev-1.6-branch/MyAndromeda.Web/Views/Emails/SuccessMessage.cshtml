@model MyAndromeda.Services.Orders.Emails.SuccessMessage
@using System.Collections.Generic;
@using MyAndromeda.Data.DataWarehouse.Models;
@using AndroAdminDataAccess.Domain.WebOrderingSetup;
@using MyAndromeda.Services.Orders.Helpers;

@{
    this.Layout = "_CustomerOrderEmailLayout.cshtml";
    var translator = Html.GetTranslator();
    //line item includes price of item x quantity
    var linesTotal = Model.Order.OrderLines.Sum(orderLine => 
        (orderLine.Price.Value + orderLine.Qty.GetValueOrDefault(1) * orderLine.modifiers.Sum(modifier => modifier.Price.Value))
    );
    
    var baseStyle = "margin:0; padding:0; font-size: 16px; line-height:17px;";
    var paragraphStyle = baseStyle + "text-align: left;";
    var paragraphStyleRight = baseStyle + "text-align: right;";
    var boldParagraphStyle = baseStyle + "font-weight:bold;";
    var boldParagraphStyleRight = baseStyle + "font-weight:bold;text-align: right;";

    var deliveryCharge = Model.Order.DeliveryCharge;
    var paymentCharge = 0;
    
    if (Model.Order.OrderPayments != null) 
    {
        paymentCharge = Model.Order.OrderPayments.Sum(e => e.PaymentCharge.GetValueOrDefault());
    }
    decimal subTotalPlusDeliveryAndCardCharge = linesTotal + paymentCharge + (Model.Order.DeliveryCharge * 100);
    decimal total = (Model.Order.FinalPrice + Model.Order.DeliveryCharge) * 100;


    var orderIds = new {
        RamesesOrderNum = Model.Order.RamesesOrderNum,
        TicketNum = Model.Order.TicketNumber
    };
    var subject = orderIds.TicketNum.HasValue
        ? string.Format("Order update: Ticket {0} - accepted - {1}", orderIds.TicketNum, Model.Store.ClientSiteName)
        : string.Format("Order update: {0} - accepted - {1}", orderIds.RamesesOrderNum, Model.Store.ClientSiteName);
}
@section Header
{
    To: @Model.Contact.Value
    Bcc: @Html.SuccessDistribution()
    From: donotreply@androtech.com
    Reply-To: helpdesk@androtech.com
    Subject: @subject
}

@section OrderHeader
{
    <table border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" width="100%" style="width: 100%;">
        <tr>
            <td style="padding: 4px 7px;">
                <p style="@paragraphStyle">
                    Dear @Model.Customer.FirstName,
                </p>

                <p style="@boldParagraphStyle">Thanks for your order!</p>
                <!-- spacing -->
                <div style="height: 25px">&nbsp;</div>
                <div>
                    @if (Model.Order.OrderType.Equals("Delivery", StringComparison.InvariantCultureIgnoreCase))
                    {
                        <p style="@paragraphStyle">
                            We aim to deliver your order by
                            <span style="@boldParagraphStyle">
                                @Html.ConvertUtcToLocal(Model.Order.OrderWantedTime.Value).Value.ToString("t")
                            </span>
                            on
                            <span style="@boldParagraphStyle">@Html.ConvertUtcToLocal(Model.Order.OrderWantedTime.Value).Value.ToString("D")</span>
                        </p>
                    }
                    @if (Model.Order.OrderType.Equals("Collection", StringComparison.InvariantCultureIgnoreCase))
                    {
                        <p style="@paragraphStyle">
                            Your order will be ready for collection at
                            <span style="@boldParagraphStyle">@Html.ConvertUtcToLocal(Model.Order.OrderWantedTime.Value).Value.ToString("t")</span>
                            on
                            <span style="@boldParagraphStyle">@Html.ConvertUtcToLocal(Model.Order.OrderWantedTime.Value).Value.ToString("D")</span>
                        </p>
                    }
                </div>

                
                    @if (orderIds.TicketNum.HasValue)
                    {
                        <p style="@paragraphStyle">
                            Your ticket number is: <span style="@boldParagraphStyle">@orderIds.TicketNum.GetValueOrDefault()</span>
                            <br /> (order reference: @orderIds.RamesesOrderNum)
                        </p>
                    }
                    else
                    {
                        <p style="@paragraphStyle">
                            Your order reference number is: <span style="@boldParagraphStyle">@Model.Order.RamesesOrderNum </span>
                        </p>
                    }
                
            </td>

        </tr>

    </table>


    <!-- spacing -->
    <div style="height: 25px">&nbsp;</div>
}

@section CustomCmsDetail {
    @BuildCmsPage(this.Model.PreviewWebsiteConfiguration)    
}

@section OrderDetail{
    <table border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="width: 100%;">
        <colgroup>
            <col style="width: 30px;" />
            <col style="width: 30px;" />
            <col style="width: 30px;" />
            <col style="width: 30px;" />
            <col style="width: 30px;" />
            <col style="width: 30px;" />
        </colgroup>
        <thead>
            <tr>
                <td colspan="1" style="width: 30px; padding: 4px 7px;">
                    <p style="@boldParagraphStyle">Qty</p>
                </td>
                <td colspan="4" style="padding: 4px 7px;">
                    <p style="@boldParagraphStyle">Description</p>
                </td>
                <td colspan="1" style="padding: 4px 7px; width: 55px; text-align: right;">
                    <p style="@boldParagraphStyleRight">Price</p>
                </td>
            </tr>
        </thead>
        <tbody>
            <!-- Start building order lines -->
            @foreach (var item in this.Model.Order.OrderLines.Where(e=> !e.DealID.HasValue))
            {
                @* includes the modifiers *@
                <text>
                @this.BuildLineItem(item, this.Model.Order.OrderLines)
                </text>
            }
            <!-- End building order lines -->
        </tbody>
        <tfoot>
            @*@this.BuildSubTotal(linesTotal, paymentCharge, deliveryCharge)*@
            <tr>
                <td colspan="3"></td>
                <td colspan="2" style="@paragraphStyleRight; padding: 4px 7px">
                    Subtotal:
                </td>
                <td colspan="1" style="@paragraphStyleRight; padding: 4px 7px">
                    @( string.Format("{0:0.00}", ((decimal)linesTotal / 100)))
                </td>
            </tr>

            @* why yes i am guessing here **@

            @{
                decimal savings = subTotalPlusDeliveryAndCardCharge - total;
            }

            @if (savings > 0)
            {
                <tr>
                    <td colspan="1" style="width: 30px; padding: 4px 7px;">
                        &nbsp;
                    </td>
                    <td colspan="4" style="padding: 4px 7px;">
                        <p style="@boldParagraphStyle">Discounts</p>
                    </td>
                    <td colspan="1" style="padding: 4px 7px; width: 55px; text-align: right;">
                        &nbsp;
                    </td>
                </tr>
            }
            @this.BuildLoyalty(this.Model.Order, linesTotal)

            @if (savings > 0)
            {
                <tr>
                    <td colspan="3"></td>
                    <td colspan="2" style="@paragraphStyleRight; padding: 4px 7px">
                        Total Discounts:
                    </td>
                    <td colspan="1" style="@paragraphStyleRight; padding: 4px 7px">
                        @((savings / 100).ToString("#0.00"))
                    </td>
                </tr>
            }
            @if (deliveryCharge > 0 | paymentCharge > 0)
            {
                <tr>
                    <td colspan="1" style="width: 30px; padding: 4px 7px;">
                        &nbsp;
                    </td>
                    <td colspan="4" style="padding: 4px 7px;">
                        <p style="@boldParagraphStyle">Charges</p>
                    </td>
                    <td colspan="1" style="padding: 4px 7px; width: 55px; text-align: right;">
                        &nbsp;
                    </td>
                </tr>
            }

            @if (deliveryCharge > 0)
            {
                <tr>
                    <td colspan="3"></td>
                    <td colspan="2" style="padding: 4px 7px">
                        Delivery
                    </td>
                    <td colspan="1" style="@paragraphStyleRight; padding: 4px 7px">
                        @( string.Format("{0:0.00}", deliveryCharge))
                    </td>
                </tr>
            }
            @if (paymentCharge > 0)
            {
                <tr>
                    <td colspan="3"></td>
                    <td colspan="2" style="padding: 4px 7px">
                        Payment charge
                    </td>
                    <td colspan="1" style="@paragraphStyleRight; padding: 4px 7px">
                        @( string.Format("{0:0.00}", ((decimal)paymentCharge) / 100))
                    </td>
                </tr>
            }

            <tr>
                <td colspan="3"></td>
                <td colspan="2" style="@boldParagraphStyleRight; padding: 4px 7px">
                    Total:
                </td>
                <td colspan="1" style="@boldParagraphStyleRight; padding: 4px 7px">
                    @((total / 100).ToString("c"))
                </td>
            </tr>

            <tr>
                <td colspan="6">&nbsp;</td>
            </tr>
            <tr>
                <td colspan="6" style="padding: 4px 7px;">
                    <p style="@paragraphStyle">
                        Payment:
                        @if (Model.Order.paytype.Equals("PAYLATER") && Model.Order.OrderType.Equals("DELIVERY", StringComparison.InvariantCultureIgnoreCase))
                        {
                            <span>To be paid on delivery</span>
                        }
                        else if (Model.Order.paytype.Equals("PAYLATER") && Model.Order.OrderType.Equals("COLLECTION", StringComparison.InvariantCultureIgnoreCase))
                        {
                            <span>To be paid on collection</span>
                        }
                        else
                        {
                            <span>Order paid</span>
                        }
                    </p>
                </td>
            </tr>
        </tfoot>

    </table>
}

@section StoreDetails
{
    <table border="0" cellpadding="0" cellspacing="0" align="center" bgcolor="#FFFFFF" style="width: 100%;">

        <tbody>
            @if (!string.IsNullOrWhiteSpace(Model.Store.Telephone))
            {
                <tr>
                    <td style="padding: 4px 7px;">
                        <p style="@paragraphStyle">You can contact us on: <b>@Model.Store.Telephone</b></p>
                    </td>
                </tr>
            }
            @if (this.Model.Store.Address != null)
            {
                <tr>
                    <td valign="top" style="vertical-align: top; padding: 4px 7px;">
                        <p style="@paragraphStyle">Store Address:</p>
                    </td>
                </tr>
                <tr>
                    <td style="padding: 4px 7px;">
                        <p style="@paragraphStyle">
                            @Html.WriteIfNotNullOrEmpty(e => e.Store.Address.RoadNum)
                            @Html.WriteIfNotNullOrEmpty(e => e.Store.Address.RoadName)
                            @Html.WriteIfNotNullOrEmpty(e => e.Store.Address.Town)
                            @Html.WriteIfNotNullOrEmpty(e => e.Store.Address.PostCode)
                        </p>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@section ThankYou {
 <table border="0" cellpadding="0" cellspacing="0" align="center" bgcolor="#FFFFFF" style="width: 100%;">
    <tbody>
        <tr>
            <td style="padding: 4px 7px;">
                <p style="@paragraphStyle">Thank you for ordering from @Model.Store.ClientSiteName</p>
            </td>
        </tr>
    </tbody>
</table>           
}


@section AwardLoyaltyPoints {
    @{
        OrderLoyalty loyalty = Model.Order.OrderLoyalties.FirstOrDefault();
        var points = loyalty == null ? 0 : loyalty.awardedPoints.GetValueOrDefault(0); 
    }
    @if (points > 0) { 
    <table border="0" cellpadding="0" cellspacing="0" align="center" bgcolor="#FFFFFF" style="width: 100%;">
        <tbody>
            <tr>
                <td style="padding: 4px 7px;">
                    <p style="@paragraphStyle">
                        You have earned @(points) points with this order
                    </p>
                </td>
            </tr>
        </tbody>
    </table>
    }
}

@helper BuildLineItem(OrderLine item, ICollection<OrderLine> orderLines)
{
    var baseStyle = "margin:0; padding:0; font-size: 16px; line-height:17px;";
    var paragraphStyle = baseStyle + "text-align: left;";
    var paragraphStyleRight = baseStyle + "text-align: right;";
    var boldParagraphStyle = baseStyle + "font-weight: bold;";

    var lineItemPrice = (decimal)item.Price.Value + item.modifiers.Sum(modifier => ((decimal)modifier.Price.GetValueOrDefault()) * item.Qty.GetValueOrDefault(1));
    
    <tr>
        <td colspan="1" style="@paragraphStyle; padding: 4px 7px; vertical-align: top" valign="top">
            @if (!item.IsDeal.GetValueOrDefault())
            {
                <span>@item.Qty.GetValueOrDefault(1)</span>
            }
        </td>
        
        <td colspan="4" valign="top" style="@paragraphStyle; vertical-align: top; padding: 4px 7px;">

            @if (!string.IsNullOrWhiteSpace(item.Cat1) || !string.IsNullOrWhiteSpace(item.Cat2))
            {
                <span>
                    @Html.WriteIfNotNullOrEmpty(item.Cat1)
                    @Html.WriteIfNotNullOrEmpty(item.Cat2)
                </span>
            }

            @item.Description

            @foreach (var modifier in item.modifiers.OrderBy(e => !e.Removed))
            {
                <br />
                if (!modifier.Removed.Value)
                {
                <span>&nbsp;&nbsp;&nbsp;</span>
                <text> + @modifier.Qty x @modifier.Description</text>
                }
                else
                {
                <span>&nbsp;&nbsp;&nbsp;</span>
                <text>@(modifier.Qty.Value * -1) x @modifier.Description</text>
                }
            }

        </td>

        <td colspan="1" valign="bottom" style="@paragraphStyleRight; vertical-align: bottom; padding: 4px 7px; text-align: right">
            @if (item.Price.GetValueOrDefault() != 0) { 
                @( string.Format("{0:0.00}", lineItemPrice / 100))
            }
        </td>
    </tr>
    
    if (item.IsDeal.GetValueOrDefault() && orderLines != null) 
    {
        var children = orderLines.Where(e => e.DealID == item.ID).OrderBy(e=>e.DealSequence.GetValueOrDefault()).ToArray();
        foreach (var child in children) 
        {
            @BuildLineItem(child, null);
        }
    }
}

@helper BuildSubTotal(int total, int paymentCharge, decimal deliveryCharge)
{
    var baseStyle = "margin:0; padding:0; font-size: 16px; line-height:17px;";
    var paragraphStyle = baseStyle + "text-align: left;";
    var paragraphStyleRight = baseStyle + "text-align: right;";
    var boldParagraphStyle = baseStyle + "font-weight:bold;";
    var subTotal = (decimal)total / 100;



    
    
}

@helper BuildTotal(OrderHeader header, int total)
{
    var baseStyle = "margin:0; padding: 4px 7px; font-size: 16px; line-height:17px;";
    var paragraphStyle = baseStyle + "text-align: left;";
    var paragraphStyleRight = baseStyle + "text-align: right;";
    var boldParagraphStyle = baseStyle + "font-weight:bold;";
    var boldParagraphStyleRight = boldParagraphStyle + "text-align: right;"; 
    
    
}

@helper BuildLoyaltyAwardRow(OrderHeader header) { 
    var baseStyle = "margin:0; padding:0; font-size: 16px; line-height:17px;";
    var boldParagraphStyle = baseStyle + "font-weight:bold;";
    
    <div>
        <p>You have earned </p>  
    </div>
} 

@helper BuildLoyalty(OrderHeader header, decimal total)
{
    
    var baseStyle = "margin:0; padding:0; font-size: 16px; line-height:17px;";
    var paragraphStyle = baseStyle + "text-align: left;";
    var paragraphStyleRight = baseStyle + "text-align: right;";
    var boldParagraphStyle = baseStyle + "font-weight:bold;";

    // Loyalty
    @*decimal loyaltyPointsBeforeOrder = 0;
    decimal loyaltyPointsGained = 0;
    decimal loyaltyPointsUsed = 0;
    decimal loyaltyPointsGainedMoney = 0;
    decimal loyaltyPointsUsedMoney = 0;
    
    bool displayLoyalty = false;
    bool displayVouchers = false;

    if (Model.Order.Customer.CustomerLoyalties != null && Model.Order.Customer.CustomerLoyalties.Count > 0)
    {
        loyaltyPointsBeforeOrder = Model.Order.Customer.CustomerLoyalties.FirstOrDefault().Points ?? 0;
    }

    if (Model.Order.OrderLoyalties != null && Model.Order.OrderLoyalties.Any(e => e.redeemedPoints.GetValueOrDefault() > 0))
    {
        displayLoyalty = true;
        var loyaltyRecord = Model.Order.OrderLoyalties.FirstOrDefault(e=> e.redeemedPoints.GetValueOrDefault() > 0);
        loyaltyPointsGained = loyaltyRecord.awardedPoints ?? 0;
        loyaltyPointsUsed = loyaltyRecord.redeemedPoints ?? 0;
        loyaltyPointsGainedMoney = loyaltyRecord.awardedPointsValue ?? 0;
        loyaltyPointsUsedMoney = (loyaltyRecord.redeemedPointsValue ?? 0);
        loyaltyPointsUsedMoney = loyaltyPointsUsedMoney / 100;
    }

    if (Model.Order.UsedVouchers != null && Model.Order.UsedVouchers.Count > 0) 
    {
        displayVouchers = true;
    }
    


    if (displayVouchers) 
    {
        foreach (var voucher in Model.Order.UsedVouchers) {
            var allSavings = (((decimal)total - header.FinalPrice * 100) / 100);
            <tr> 
                <td colspan="3"></td>
                <td colspan="2" style="@paragraphStyle; padding: 4px 7px">
                    @voucher.Voucher.VoucherCode
                    @if (voucher.Voucher.DiscountType == "Percentage")
                    {
                        <span>(@((100 - voucher.Voucher.DiscountValue).ToString("#0.00"))%)</span>
                    }
                </td>
                <td colspan="1" style="text-align: right; padding: 4px 7px">
                    @((allSavings - loyaltyPointsUsedMoney).ToString("#0.00"))
                </td>
            </tr>
        }
    }*@
    var discounts = header.OrderDiscounts.ToArray();
    var voucherDiscounts = discounts.Where(e => e.Type == "VOUCHER").ToArray();
    var loyaltyDiscounts = discounts.Where(e => e.Type == "LOYALTY").ToArray();

    foreach (var voucher in voucherDiscounts)
    {
        <tr>
            <td colspan="3"></td>
            <td colspan="2" style="@paragraphStyle; padding: 4px 7px">
                @voucher.InitialDiscountReason
                @if (voucher.DiscountType.Equals("Percentage", StringComparison.InvariantCultureIgnoreCase))
                {
                    <span>(@((100 - voucher.DiscountTypeAmount).ToString("#0.00"))%)</span>
                }
            </td>
            <td colspan="1" style="text-align: right; padding: 4px 7px">
                @((voucher.DiscountAmount / 100).ToString("#0.00"))
            </td>
        </tr>
    }
    foreach (var loyalty in loyaltyDiscounts)
    {
        var loyaltyRecord = Model.Order.OrderLoyalties.First(e => e.redeemedPoints.GetValueOrDefault() > 0);
        
        <tr>
            <td colspan="3"></td>
            <td colspan="2" style="@paragraphStyle; padding: 4px 7px">
                Loyalty (@loyaltyRecord.redeemedPoints)
            </td>
            <td colspan="1" style="text-align: right; padding: 4px 7px">
                @((loyalty.DiscountAmount / 100).ToString("#0.00"))
            </td>
        </tr>
    }

}

@helper BuildCmsPage(WebSiteConfigurations previewWebsiteConfiguration) 
{
    if (this.Model.PreviewWebsiteConfiguration.CustomEmailTemplate == null) { return; }
    if (this.Model.PreviewWebsiteConfiguration.CustomEmailTemplate.CustomTemplates == null) { return; }
    if (this.Model.PreviewWebsiteConfiguration.CustomEmailTemplate.CustomTemplates.Keys.Count == 0) { return; }
    if (!previewWebsiteConfiguration.CustomEmailTemplate.CustomTemplates.ContainsKey(this.Model.Store.AndromedaSiteId.ToString())) 
    {
        return;
    }
    var pages = previewWebsiteConfiguration.CustomEmailTemplate.CustomTemplates[this.Model.Store.AndromedaSiteId.ToString()];
    if (!pages.Any(e => e.Enabled)) 
    {
        return; 
    }
    var emailContent = pages.FirstOrDefault(e => e.Enabled);   
         
    
    <table border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" width="100%" style="width: 100%;">
        <tr>
            <td style="padding: 4px 7px;">
                @Html.Raw(emailContent.Content)
            </td>
        </tr>
    </table>
}