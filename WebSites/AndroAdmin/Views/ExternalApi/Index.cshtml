@{
    ViewBag.Title = "Index";
}

<h2>API</h2>
<div class="delete-message" style="display:none"></div>

@(Html.Kendo().Grid<AndroAdmin.ViewModels.ApiCredentials.ExernalApiViewModel>()
    .Name("ApiCrentialGrid")
    .Columns(cols =>
    {
        cols.Bound(e => e.Name).Width(700).HtmlAttributes(new { style = "word-break:break-all;" });
        cols.Command(c => c.Edit()).Width(100);
        cols.Command(c => c.Destroy()).Width(100);
    })
    .ToolBar(tools => tools.Create())
    .ClientDetailTemplateId("ApiCrentialDetailTemplate")
    .Filterable()
    .Sortable()
    .Pageable(paging => paging.Refresh(true))
    .DataSource(dataSource =>
    {
        dataSource.Ajax()
            .Read(r => r.Action("Read", "ExternalApi"))
            .Update(u => u.Action("Update", "ExternalApi"))
            .Create(c => c.Action("Create", "ExternalApi"))
            .Destroy(d => d.Action("Destroy", "ExternalApi"))
            .Model(model => model.Id(e => e.Id))
            .Events(e => e.RequestEnd("onRequestEnd"));
    })
)

<script type="text/html" id="ApiCrentialDetailTemplate">
    @(Html.Kendo()
        .TabStrip()
        .Name("ApiCredentialTabs_#=Id#")
        .Items(tabs =>
        {
            tabs.Add()
                .Text("Schema")
                .Selected(true)
                .Content(
                @<text>

                    @(Html.Kendo().Grid<AndroAdmin.ViewModels.ApiCredentials.ApiCredentialKeyPairViewModel>()
                        .Name("ApiTemplateGrid_#=Id#")
                        .ToolBar(tools => { tools.Create(); })
                        .Columns(cols =>
                        {
                            cols.Bound(e => e.Key).Width(350).HtmlAttributes(new { style = "word-break: break-all;" });
                            cols.Bound(e => e.Value).Title("Default Value").Width(400).HtmlAttributes(new { style = "word-break: break-all;" });
                            cols.Command(e => e.Edit()).Width(100);
                            cols.Command(e => e.Destroy()).Width(100);
                        })
                        .Events(events => events.Edit("disableOnEdit"))
                        .Editable()
                        .Filterable()
                        .Sortable()
                        .DataSource(dataSource =>
                        {
                            dataSource.Ajax()
                                .Read(read => read.Action("ReadTemplate", "ExternalApi", new { Id = "#=Id#" }))
                                .Create(create => create.Action("CreateTemplate", "ExternalApi", new { Id = "#=Id#" }))
                                .Update(update => update.Action("UpdateTemplate", "ExternalApi", new { Id = "#=Id#" }))
                                .Destroy(destroy => destroy.Action("DeleteTemplate", "ExternalApi", new { Id = "#=Id#" }))
                                .Model(model => model.Id(e => e.Key))
                                .Events(e => e.RequestEnd("onRequestEnd"));
                        })
                        .ToClientTemplate()
                    )

                </text>);
        })
        .ToClientTemplate()
    )

</script>

<script id="InnerApiGridTemplate" type="text/template">
    <p>hello</p>
</script>

<script type="text/javascript">

    function onRequestEnd(e) {
        //dont need this ...
        //if (e.type == "update" && !e.response.Errors && e.response.Data[0] != null) {
        //    $(".Message").text(item + name + " updated successfully")
        //    $(".Message").css("display", "block");
        //}
        if (e.type == "destroy" && !e.response.Errors && e.response.Data[0] != null) {
            $(".delete-message").text("Successfully deleted ");
            $(".delete-message").css("display", "block");
        }
        //if (e.type == "create" && !e.response.Errors && e.response.Data[0] != null) {
        //    $(".Message").text(item + name + " created successfully")
        //    $(".Message").css("display", "block");
        //}
        //else if ($(".Message").text() == "") {
        //    $(".Message").css("display", "none");
        //}


        //var item = e.response.Data[0].Name == null ? "Key " : "API ";
        //var name = e.response.Data[0].Name == null ? e.response.Data[0].Key : e.response.Data[0].Name;

    }

    //register custom validation rules
    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            properties: {

            },
            rules: { // custom rules
                keynamevalidation: function (input, params) {
                    //check for the rule attribute
                    if (input.attr("id") == "Key") {
                        regex = RegExp("^[a-zA-Z0-9_]+$")
                        if (input.val() != null && input.val().trim() != "") {
                            if (!regex.test(input.val().trim())) {
                                input.attr("data-val-keynamevalidation", "Special characters are not allowed except underscore(_)");
                                return false;
                            }
                        }
                        if (input.val() == null || input.val().trim() == "") {
                            input.attr("data-val-keynamevalidation", "Key name should not be empty");
                            return false;
                        }
                        else if (input.val().trim().indexOf(" ") > -1) {
                            input.attr("data-val-keynamevalidation", "Key name should not contains space");
                            return false;
                        }
                            //Check for duplicate key
                        else {
                            var dupKeyValidation = duplicateKeyValidation(input, "Key");
                            if (!dupKeyValidation) {
                                input.attr("data-val-keynamevalidation", "Duplicate Key names are not allowed");
                                return false;
                            }

                            return true;
                        }
                    }
                    else if (input.attr("id") == "Name") {
                        regex = RegExp("^[a-zA-Z0-9 -]+$")
                        if (input.val() != null && input.val().trim() != "") {
                            if (!regex.test(input.val())) {
                                input.attr("data-val-keynamevalidation", "Special characters are not allowed except space and hyphen(-)");
                                return false;
                            }
                        }
                        if (input.val() == null || input.val().trim() == "") {
                            input.attr("data-val-keynamevalidation", "API name should not be empty");
                            return false;
                        }
                        if (input.val().trim().length > 255) {
                            input.attr("data-val-keynamevalidation", "API name should be less than or equal to 255 characters");
                            return false;
                        }
                            //Check for duplicate api names
                        else {
                            var dupKeyValidation = duplicateKeyValidation(input, "Name");
                            if (!dupKeyValidation) {
                                input.attr("data-val-keynamevalidation", "Duplicate API names are not allowed");
                                return false;
                            }

                            return true;
                        }
                    }
                    input.val(input.val().trim());
                    return true;
                }

            },
            messages: { //custom rules messages
                keynamevalidation: function (input) {
                    // return the message text
                    return input.attr("data-val-keynamevalidation");
                }
            }
        });
    })(jQuery, kendo);

    function duplicateKeyValidation(input, keyName) {
        var grid = $(input).closest(".k-grid").data("kendoGrid");
        var dataSource = grid.dataSource;
        var data = dataSource.data();
        var newValue = input.val();
        var count = 0;
        var isNewRecord = false;
        $(data).each(function (index) {
            var itemKey = $(this)[0].get(keyName);
            //if insert action performed
            if (index == 0 && ($(this)[0].get(keyName) == null || $(this)[0].get(keyName) == "")) {
                isNewRecord = true;
            }
            //Update action performed
            if (itemKey.toLowerCase().trim() == newValue.toLowerCase().trim()) {
                count++;
            }

        })
        if (isNewRecord && count >= 1) {
            return false;
        }
        else if (count > 1) {
            return false;
        }
        else {
            return true;
        }
    }

    function disableOnEdit(e) {
        if (e.model.isNew()) {
            // Leave it editable if the row is new.
        } else {
            // Disable the editor for Element in this row if the row already exists.
            e.container.find('input[name=Key]')[0].disabled = true
        }
    }

</script>
