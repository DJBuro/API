/// <reference path="addressHelper.js" />
/// <reference path="../ViewModels/RegisterFullViewModel.js" />

var accountHelper =
{
    loginEnabled: ko.observable(true),
    helloText: ko.observable(),
    customerDetails: undefined,
    emailAddress: undefined,
    username: undefined,
    password: undefined,
    isFacebookLogin: false,
    loggedInCallback: undefined,
    loginDetails:
    {
        errorMessage: ko.observable(''),
        emailAddress: ko.observable(''),
        password: ko.observable('')
    },
    newAccount:
    {
        errorMessage: ko.observable(''),
        currentPassword: ko.observable(''),
        currentPasswordHasError: ko.observable(false),
        password: ko.observable(''),
        reenterPassword: ko.observable(''),
        passwordHasError: ko.observable(false),
        address: new Address(),
        customer: new Customer()
    },
    isRegisterOpen: false,
    isLoggedIn: ko.observable(false),
    loginRegister: function ()
    {
        accountHelper.showPopup();
    },
    isPopupVisible: ko.observable(false),
    showPopup: function (loggedInCallback)
    {
        if (guiHelper.isMobileMode())
        {
            accountHelper.loggedInCallback = loggedInCallback;

            guiHelper.showView('registerView');

            guiHelper.isMobileMenuVisible(false);
        }
        else
        {
            $(window).scrollTop(0);

            accountHelper.isRegisterOpen = false;

            $('#loginRegister').css('height', '260px');
            $('#registerContainer').css('paddingTop', '45px');

            accountHelper.loggedInCallback = loggedInCallback;

            // Make the popup visible
            toppingsPopupHelper.isBackgroundVisible(true);
            accountHelper.isPopupVisible(true);

            if (guiHelper.isMobileMode())
            {
                // In mobile mode the cart is a view and not a popup
                guiHelper.isViewVisible(false);
                guiHelper.isInnerMenuVisible(false);
            }
        }
    },
    hidePopup: function (callback)
    {
        if (!guiHelper.isMobileMode())
        {
            toppingsPopupHelper.isBackgroundVisible(false);
            accountHelper.isPopupVisible(false);
        }

        if (typeof (callback) == 'function')
        {
            callback();
        }

        accountHelper.loggedInCallback = undefined;
    },
    androLogin: function ()
    {
        return accountHelper.login
        (
            accountHelper.loginDetails.emailAddress(),
            accountHelper.loginDetails.password(),
            undefined
        );
    },
    normalLogin: function (callback)
    {
        return accountHelper.login
        (
            accountHelper.loginDetails.emailAddress(),
            accountHelper.loginDetails.password(),
            callback
        );
    },
    login: function (email, password, callback)
    {
        accountHelper.loginDetails.errorMessage('');

        if (email == undefined || email.length == 0)
        {
            accountHelper.loginDetails.errorMessage(textStrings.hMissingEmail);
            if (callback != undefined) callback(false, undefined);
            return;
        }

        if (password == undefined || password.length == 0)
        {
            accountHelper.loginDetails.errorMessage(textStrings.hMissingPassword);
            if (callback != undefined) callback(false, undefined);
            return;
        }

        // Make sure the login popup is hidden (even if it wasn't visible anyway)
        toppingsPopupHelper.isBackgroundVisible(false);
        accountHelper.isPopupVisible(false);

        if (guiHelper.isMobileMode())
        {
            // In mobile mode the cart is a view and not a popup
            guiHelper.isViewVisible(true);
            guiHelper.isInnerMenuVisible(true);
        }

        guiHelper.showPleaseWait
        (
            textStrings.hLoggingIn,
            '',
            function (pleaseWaitViewModel)
            {
                acsapi.getCustomer
                (
                    email,
                    password,
                    function (getCustomerResponse)
                    {
                        if (getCustomerResponse == undefined)
                        {
                            // Failed!
                            accountHelper.loginDetails.errorMessage(textStrings.hUnableToLogin);

                            // Return to previous view
                            if (callback != undefined)
                            {
                                callback(false, pleaseWaitViewModel);
                            }
                        }
                        else
                        {
                            // Was an error returned?
                            if (getCustomerResponse.errorCode == undefined)
                            {
                                // Success
                                accountHelper.loggedIn(getCustomerResponse, email, email, password, false);

                                // Return to previous view
                                if (callback != undefined)
                                {
                                    callback(true, pleaseWaitViewModel);
                                }
                            }
                            else
                            {
                                // Error returned by server
                                if (getCustomerResponse.errorCode == 1036)
                                {
                                    // Invalid username
                                    accountHelper.loginDetails.errorMessage(textStrings.hInvalidUserPass);

                                    // Return to previous view
                                    if (callback != undefined)
                                    {
                                        callback(false, pleaseWaitViewModel);
                                    }
                                }
                                else if (getCustomerResponse.errorCode == 1042)
                                {
                                    // Invalid password
                                    accountHelper.loginDetails.errorMessage(textStrings.hInvalidUserPass);

                                    // Return to previous view
                                    if (callback != undefined)
                                    {
                                        callback(false, pleaseWaitViewModel);
                                    }
                                }
                                else
                                {
                                    // Other error
                                    accountHelper.loginDetails.errorMessage(textStrings.hUnableToLogin);

                                    // Return to previous view
                                    if (callback != undefined)
                                    {
                                        callback(false, pleaseWaitViewModel);
                                    }
                                }
                            }
                        }
                    },
                    function (error)
                    {
                        callback(false, pleaseWaitViewModel);
                    }
                );
            }
        );
    },
    loggedIn: function (customerDetails, username, email, password, isFacebookLogin)
    {
        accountHelper.isLoggedIn(true);
        accountHelper.customerDetails = customerDetails;
        accountHelper.username = username;
        accountHelper.emailAddress = email;
        accountHelper.password = password;
        accountHelper.hidePopup(accountHelper.loggedInCallback);
        accountHelper.isFacebookLogin = (isFacebookLogin === undefined ? false : isFacebookLogin);

        accountHelper.generateWelcomeMessage();

        // If the user logs in before selecting a store and the user hasn't entered a postcode yet
        // then use the postcode from the users profile
        if (siteSelectorHelper.postcode().length == 0 &&
            accountHelper.customerDetails != undefined &&
            accountHelper.customerDetails.address != undefined &&
            accountHelper.customerDetails.address.postcode != undefined &&
            accountHelper.customerDetails.address.postcode.length > 0)
        {
            siteSelectorHelper.postcode(accountHelper.customerDetails.address.postcode);
        }
    },
    generateWelcomeMessage: function ()
    {
        var helloText = '';

        // Is the user logged in?
        if (accountHelper.isLoggedIn())
        {
            if (viewModel.siteDetails() === undefined)
            {
                helloText = textStrings.hHelloLoggedInNoStore;
            }
            else
            {
                helloText = textStrings.hHelloLoggedIn;

                // Customer has already selected a store so inject the store name
                helloText = helloText.replace('{storeName}', viewModel.siteDetails().name);
            }

            // Inject customers first name into the welcome message
            if (accountHelper.customerDetails != undefined)
            {
                helloText = helloText.replace('{firstName}', accountHelper.customerDetails.firstname);
            }
        }
        else
        {
            if (viewModel.siteDetails() !== undefined)
            {
                helloText = textStrings.hHelloNotLoggedIn.replace('{storeName}', viewModel.siteDetails().name);
            }
        }  

        accountHelper.helloText(helloText);
    },
    facebookLogin: function (response, callback)
    {
        accountHelper.loginDetails.errorMessage('');

        if (response == undefined || response.authResponse == undefined || response.authResponse === false)
        {
            accountHelper.loginDetails.errorMessage(textStrings.hUnableToLogin);
            if (callback != undefined) callback(false, undefined);
            return;
        }

        // Make sure the login popup is hidden (even if it wasn't visible anyway)
        toppingsPopupHelper.isBackgroundVisible(false);
        accountHelper.isPopupVisible(false);

        if (guiHelper.isMobileMode())
        {
            // In mobile mode the cart is a view and not a popup
            guiHelper.isViewVisible(true);
            guiHelper.isInnerMenuVisible(true);
        }

        guiHelper.showPleaseWait
        (
            textStrings.hLoggingIn,
            '',
            function (pleaseWaitViewModel)
            {
                FB.api
                (
                    '/me', 
                    function (response)
                    {
                        var username = (response.email === undefined || response.email === null || response.email.length === 0 ? response.id : response.email);

                        acsapi.getCustomer
                        (
                            username,
                            response.id,
                            function (getCustomerResponse)
                            {
                                if (getCustomerResponse == undefined)
                                {
                                    // Failed!
                                    accountHelper.loginDetails.errorMessage(textStrings.hUnableToLogin);
                                    
                                    // Return to previous view
                                    if (callback != undefined)
                                    {
                                        callback(false, pleaseWaitViewModel);
                                    }
                                }
                                else
                                {
                                    // Was an error returned
                                    if (getCustomerResponse.errorCode == undefined)
                                    {
                                        // Success
                                        accountHelper.loggedIn(getCustomerResponse, username, response.email, response.id, true);

                                        // Return to previous view
                                        if (callback != undefined)
                                        {
                                            callback(true, pleaseWaitViewModel);
                                        }
                                    }
                                    else
                                    {
                                        // Error returned by server
                                        if (getCustomerResponse.errorCode == 1036 || getCustomerResponse.errorCode == 1042)
                                        {
                                            // No account so we'll need to create one - ask the user to register

                                            var customer = new Customer();
                                            customer.facebookId = response.id;
                                            customer.facebookUsername = response.username;
                                            customer.emailAddress(response.email);
                                            customer.firstName(response.first_name);
                                            customer.surname(response.last_name);

                                            // Prefill the registration page with details from Facebook
                                            var registerFullViewModel = new RegisterFullViewModel(false, customer, true);

                                            accountHelper.newAccount.username = username;
                                            accountHelper.newAccount.password(customerHelper.bindableCustomer().facebookId);
                                            accountHelper.newAccount.reenterPassword(customerHelper.bindableCustomer().facebookId);

                                            // Show the register page
                                            guiHelper.showView('registerQuickView', registerFullViewModel);
                                            registerFullViewModel.onLoad();

                                            return;
                                        }
                                        else
                                        {
                                            // Other error
                                            guiHelper.showView('loginView', new LoginViewModel());
                                            return;
                                        }
                                    }
                                }
                            },
                            function ()
                            {
                                guiHelper.showView('loginView', new LoginViewModel());
                                return;
                            }
                        );
                    }
                );
            }
        );
    },
    register: function (checkInDeliveryArea, callback)
    {
        console.log("do i ever get here: accounthelper.register")
        // Validate customer details
        if (!customerHelper.validateCustomer(accountHelper.newAccount.customer))
        {
            accountHelper.newAccount.errorMessage(accountHelper.newAccount.customer.errorMessage());
            if (callback != undefined) callback(false);
            return;
        }

        // Check passwords match
        if (accountHelper.newAccount.password() != accountHelper.newAccount.reenterPassword())
        {
            accountHelper.newAccount.errorMessage(textStrings.lrPasswordMismatch);
            accountHelper.newAccount.passwordHasError(true);
            if (callback != undefined) callback(false);
            return;
        }

        // Minimum password length
        if (!accountHelper.validatePassword(accountHelper.newAccount.password()))
        {
            accountHelper.newAccount.errorMessage(textStrings.lrPassToShort);
            accountHelper.newAccount.passwordHasError(true);
            if (callback != undefined) callback(false);
            return;
        }

        // Validate address
        //removed the address of the quick reigster. 
       
        //if (!addressHelper.anyAddressDetail(addressHelper.bindableAddress()))
        //{
        //    console.log("no address")
        //    return;
        //}

        //no longer part of register 
        //if (!addressHelper.validateAddress(accountHelper.newAccount.address, checkInDeliveryArea))
        //{
        //    accountHelper.newAccount.errorMessage(accountHelper.newAccount.address.errorMessage());
        //    if (callback != undefined) callback(false);
        //    return;
        //}

        //unused 
        //var customerDetails =
        //{
        //    title: '',
        //    firstname: accountHelper.newAccount.firstName(),
        //    surname: accountHelper.newAccount.surname(),
        //    contacts:
        //    [
        //        {
        //            type: 'Email',
        //            value: accountHelper.newAccount.emailAddress(),
        //            marketingLevel: accountHelper.newAccount.marketing() ? '3rdParty' : 'OrderOnly'
        //        },
        //        {
        //            type: 'Mobile',
        //            value: accountHelper.newAccount.phoneNumber(),
        //            marketingLevel: accountHelper.newAccount.marketing() ? '3rdParty' : 'OrderOnly'
        //        }
        //    ],
        //    address: undefined
        //};
    },
    logout: function ()
    {
        accountHelper.isLoggedIn(false);
        accountHelper.loginDetails.errorMessage('');
        accountHelper.loginDetails.emailAddress('');
        accountHelper.loginDetails.password('');
        accountHelper.generateWelcomeMessage();

        // If the customer is on the checkout pages then return the customer to the menu page
        if (typeof(viewModel.contentViewModel().onLogout) == "function")
        {
            viewModel.contentViewModel().onLogout();
        }
        else
        {
            guiHelper.showMenu();
        }
    },
    validateEmail: function(email)
    {
        // Valid email address?
        var regex = /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        return regex.test(email);
    },
    validatePassword: function (password)
    {
        return password.length >= 4;
    }
}
