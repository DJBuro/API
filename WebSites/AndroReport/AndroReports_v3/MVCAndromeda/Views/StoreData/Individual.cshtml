@model MVCAndromeda.Models.Store

@using MVCAndromeda.Models;
@using MVCAndromeda.Controllers;
@{
    ViewBag.Title = "Data for " + Model.StoreName;
    int numOfstoreMeasure = Model.StoreMeasures.Count();
}

<h3>@Model.StoreName</h3>
@{
    string ownerName = (string)Session["Owner Name"];
    string country = ViewBag.country;
}
@(Html.Kendo().MobileView()
        .Name("navbar-home")
        .Title(ownerName)
        .Header(obj =>
            Html.Kendo().MobileNavBar()
                   .Content(navbar =>
                    @<text>
@(Html.Kendo().MobileBackButton()
                                .Align(MobileButtonAlign.Left)
                                .HtmlAttributes(new Dictionary<string,object>(){{"data-show-spinner",true}})//,{ "@class","nav-button" }})
                                .Url(Url.Action( "Index", "StoreData", 
                        new { 
                            chosenCountry=ViewBag.country, 
                            Time = ViewBag.Time, 
                            term = (new List<string>(MVCAndromeda.Models.DateUtilities.weekDayAveragingPeriod)).Contains(ViewBag.term)? 
                            MVCAndromeda.Models.DateUtilities.averagingPeriod[0]:ViewBag.term, 
                            unitsAgo = ViewBag.unitsAgo, 
                            orderHow=ViewBag.orderHow, orderWhat=ViewBag.orderWhat}))
                                .Text("Back To Stores"))
@navbar.ViewTitle("")               
               @(Html.Kendo().MobileButton()
               .HtmlAttributes(new Dictionary<string,object>(){{"data-show-spinner",true}})
                                .Align(MobileButtonAlign.Right)
                                .Text("Log Off")
                                .Url(Url.Action("LogOff", "Account", new { i = 0 } ))   ) 
         

</text>)
            )

.Content(
     @<text>
@{int k = -1;}
@(Html.Kendo().MobileButtonGroup()
                        .Name("select-period2")
                        .Items(items =>
                        {

                            for (int i = 0; i < DateUtilities.averagingPeriod.Length / 2; i++)//loop over averaging span: day, weeks etc
                            {
                                for (int j = 0; j < StoreDataController.timeGrid.GetLength(1); j++) //loop over present  and past times
                                {
                                    string time = StoreDataController.timeGrid[i, j];
                                    if (ViewBag.Time == time)  // then this option is chosen, so do not make a link
                                    {
                                        //chosen link
                                        k = i * StoreDataController.timeGrid.GetLength(1) + j;
                                    }
                                    var route = Url.Action("Individual", new
                   {
                       storename = Model.StoreName,
                       country = Model.Country
                       ,
                       term = DateUtilities.averagingPeriod[i],
                       unitsAgo = j,
                       Time = time
                   });
                                    items.Add().Text(StoreDataController.shortTimeGrid[i, j]).
                                        HtmlAttributes(new Dictionary<string, object>(){
                                        { "onclick",string.Format("location.href='{0}'", route)},
                                        {"data-show-spinner",true} });
                                }
                            }
                        })
                        .Index(k)
                        .Events(events => events.Select("onSelect"))
                )


@{k = -1;}
@(Html.Kendo().MobileButtonGroup()
                        .Name("select-period")
                        .Items(items =>
                        {

                            for (int i = DateUtilities.averagingPeriod.Length / 2; i < DateUtilities.averagingPeriod.Length; i++)//loop over averaging span: day, weeks etc
                            {
                                for (int j = 0; j < StoreDataController.timeGrid.GetLength(1); j++) //loop over present  and past times
                                {
                                    string time = StoreDataController.timeGrid[i, j];
                                    if (ViewBag.Time == time)  // then this option is chosen, so do not make a link
                                    {
                                        //just text, no link

                                        k = (i - DateUtilities.averagingPeriod.Length / 2) * StoreDataController.timeGrid.GetLength(1) + j;

                                    }
                                    var route = Url.Action("Individual", new
                   {
                       storename = Model.StoreName,
                       country = Model.Country
                       ,
                       term = DateUtilities.averagingPeriod[i],
                       unitsAgo = j,
                       Time = time
                   });
                                    items.Add().Text(StoreDataController.shortTimeGrid[i, j]).
                                        HtmlAttributes(new Dictionary<string, object>(){
                                        { "onclick",string.Format("location.href='{0}'", route)},
                                        {"data-show-spinner",true} });
                                }
                            }
                        })
                        .Index(k)
                        .Events(events => events.Select("onSelect"))
                )


<h4>@ViewBag.TimeDesc</h4>
@ListHeaderHelper(this)
@ListViewHelper1(this)

</text>

)
)
@helper ListViewHelper1(WebViewPage page)
{ 
    var dat = CubeAdapter.storeMeasureNames.ToList();
    var list = dat.Select(e => new
    {
        Name = e,
        Index = dat.IndexOf(e),

    });
    @(Html.Kendo().MobileListView().Style("inset")//.HtmlAttributes(new { style = "height:300px; overflow:auto" })     
        .Items(items =>
                    {
                        foreach (var storeItem in list)
                        {
                            int i = storeItem.Index;
                            items.AddLink().Content(@<text>
    <table style="width: 90%">
        <colgroup>
            <col style="width: 70%;" />
            <col style="width: 30%;" />
        </colgroup>

        <tr>
            <td>@storeItem.Name</td>
            
                @{double? data = CubeAdapter.Scale(Model, storeItem.Index)[0];

                  if (data == null)
                  {                    
                    <td>@StoreDataController.noRecord
                    </td>
                  }
                  else
                  {
                      string num;
                      if (CubeAdapter.storeMeasureFormat[i] == "C")
                      {
                          num = ((double)data).ToString(CubeAdapter.storeMeasureFormat[i],
                              new System.Globalization.CultureInfo(CultureName.getName(Model.Country)));
                      }
                      else
                      {
                          num = ((int)data).ToString(CubeAdapter.storeMeasureFormat[i],
                              new System.Globalization.CultureInfo(CultureName.getName(Model.Country)));
                      }
                    <td style="white-space: nowrap;">
                        @num
                    </td>
                  }
                }
        </tr>


    </table>
    @Html.Kendo().MobileDetailButton().Style(MobileDetailButtonStyle.Detaildisclose).Url(Url.Action("StorePlot", new { storeName = Model.StoreName, country = Model.Country, storeMeasureIndex = storeItem.Index }))
 
    </text>).Url(Url.Action("StorePlot", new { storeName = Model.StoreName, country = Model.Country, storeMeasureIndex = storeItem.Index }))
    .HtmlAttributes(new Dictionary<string,object>(){{"data-show-spinner",true} });
                        }

                    })
            )
}

@helper ListHeaderHelper(WebViewPage page)
{ 
    
  
 
    @(Html.Kendo().MobileListView().Style("inset")
    .HtmlAttributes(new Dictionary<string,object>(){{"style", "overflow:auto"},{"data-show-spinner",true}})
                    .Items(items =>
                    {


                        items.AddLink().Content(@<text>
    <table class="list" style="width: 80%">
        <colgroup>
            <col style="width: 50%;" />
            <col style="width: 20%;" />
            <col style="width: 20%;" />
        </colgroup>
        <tr>
            <td>Indicator</td>
            <td>Value</td>
        </tr>
    </table>
    @Html.Kendo().MobileDetailButton().Icon("globe")

    </text>);


                    })
            )
}




