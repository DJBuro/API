//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyAndromeda.Data.DailyReporting.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DailyReportingDbContext : DbContext
    {
        public DailyReportingDbContext()
            : base("name=DailyReportingDbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public DbSet<address> addresses { get; set; }
        public DbSet<AMS_MenuBasedRegions> AMS_MenuBasedRegions { get; set; }
        public DbSet<AMS_TLKP_JobCodes> AMS_TLKP_JobCodes { get; set; }
        public DbSet<AMS_TLKP_OrderLineTypes> AMS_TLKP_OrderLineTypes { get; set; }
        public DbSet<AMS_Translation> AMS_Translation { get; set; }
        public DbSet<AMSUploadStatu> AMSUploadStatus { get; set; }
        public DbSet<audit> audits { get; set; }
        public DbSet<auditservice> auditservices { get; set; }
        public DbSet<basesize> basesizes { get; set; }
        public DbSet<cashrec> cashrecs { get; set; }
        public DbSet<Chain> Chains { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<createorder> createorders { get; set; }
        public DbSet<credit> credits { get; set; }
        public DbSet<CustomLookup> CustomLookups { get; set; }
        public DbSet<Delete_IDs> Delete_IDs { get; set; }
        public DbSet<Delete_TheDate> Delete_TheDate { get; set; }
        public DbSet<displaybar> displaybars { get; set; }
        public DbSet<employee> employees { get; set; }
        public DbSet<Group> Groups { get; set; }
        public DbSet<Groups_Ext> Groups_Ext { get; set; }
        public DbSet<menucontent> menucontents { get; set; }
        public DbSet<orderline> orderlines { get; set; }
        public DbSet<orderpayment> orderpayments { get; set; }
        public DbSet<orderstatu> orderstatus { get; set; }
        public DbSet<ordertype> ordertypes { get; set; }
        public DbSet<PAFSector> PAFSectors { get; set; }
        public DbSet<payroll> payrolls { get; set; }
        public DbSet<Paytype> Paytypes { get; set; }
        public DbSet<PollingMonitor_Translation> PollingMonitor_Translation { get; set; }
        public DbSet<price> prices { get; set; }
        public DbSet<primarycat> primarycats { get; set; }
        public DbSet<product> products { get; set; }
        public DbSet<ramesesaudit> ramesesaudits { get; set; }
        public DbSet<Recipe> Recipes { get; set; }
        public DbSet<recipegroup> recipegroups { get; set; }
        public DbSet<scheduling> schedulings { get; set; }
        public DbSet<secondarycat> secondarycats { get; set; }
        public DbSet<servicesetting> servicesettings { get; set; }
        public DbSet<storecatagory> storecatagories { get; set; }
        public DbSet<storecatagorytogroup> storecatagorytogroups { get; set; }
        public DbSet<storegroup> storegroups { get; set; }
        public DbSet<storegroup1> storegroups1 { get; set; }
        public DbSet<store> stores { get; set; }
        public DbSet<DailySummary> DailySummaries { get; set; }
        public DbSet<HourlyServiceMetric> HourlyServiceMetrics { get; set; }
    
        [EdmFunction("DailyReportingDbContext", "GetMappedItems")]
        public virtual IQueryable<GetMappedItems_Result> GetMappedItems(Nullable<int> menuId, Nullable<int> occasion, Nullable<int> storeID)
        {
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("menuId", menuId) :
                new ObjectParameter("menuId", typeof(int));
    
            var occasionParameter = occasion.HasValue ?
                new ObjectParameter("Occasion", occasion) :
                new ObjectParameter("Occasion", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMappedItems_Result>("[DailyReportingDbContext].[GetMappedItems](@menuId, @Occasion, @StoreID)", menuIdParameter, occasionParameter, storeIDParameter);
        }
    
        [EdmFunction("DailyReportingDbContext", "SplitStoreIDs")]
        public virtual IQueryable<Nullable<int>> SplitStoreIDs(string storeList)
        {
            var storeListParameter = storeList != null ?
                new ObjectParameter("StoreList", storeList) :
                new ObjectParameter("StoreList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[DailyReportingDbContext].[SplitStoreIDs](@StoreList)", storeListParameter);
        }
    }
}
