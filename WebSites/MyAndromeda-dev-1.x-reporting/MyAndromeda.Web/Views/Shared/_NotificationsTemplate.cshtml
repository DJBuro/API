@model dynamic
@if (Html.HasNotificationMessages() || Html.HasNotificationErrorMessages())
{

    <section id="notifications">
        @if (Html.HasNotificationErrorMessages()) {
            <section id="errors" class="k-block k-error-colored">
                @foreach (var message in Html.NotificationErrorMessage())
            {
                    <div class="message">@message</div>
            }
            </section>
        }
        @if (Html.HasNotificationMessages()) {
            <section id="notes" class="k-block k-info-colored">
                @foreach (var message in Html.NotificationMessages())
            {
                    <div class="message">@message</div>
            }
            </section>
        }
        @if (Html.HasExceptionMessages() && MyAndromeda.Web.Helper.SettingsHelper.DebugMode) {
            <section id="exceptions">
                <ol>
                    @foreach (var exception in Html.NotificationExceptionMessages())
            {
                        <li>
                            <b>@exception.Message</b>
                            <div class="exception message">

                                <div>
                                    @exception.StackTrace
                                </div>
                            </div>
                        </li>
            }
                </ol>
            </section>
        }
    </section>
    <div class="separator"></div>
}

@(Html.Kendo().Notification()
    .Name("clientNotification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Stacking(NotificationStackingSettings.Down)
    .Animation(a => a.Open(e=> e.SlideIn(SlideDirection.Left)))
    .AutoHideAfter(120000)
    .Templates(t =>
    {
        t.Add().Type("notify").ClientTemplateID("notifyTemplate");
        t.Add().Type("success").ClientTemplateID("successTemplate");

        t.Add().Type("info").ClientTemplateID("emailTemplate");
        t.Add().Type("debug").ClientTemplateID("notifyTemplate");
        t.Add().Type("error").ClientTemplateID("errorTemplate");
    })
)
@using (Html.BeginScripts())
{
    var translator = Html.GetTranslator();
    if (false) {
    <script src="~/Scripts/app/Hubs/MenuHub.js"></script>
    }
    <script type="text/javascript">
        $(function () {
            var options = @Html.GetJsonContextOptions();

            if(typeof(MyAndromeda) === 'undefined'){ return; }
            if(typeof(MyAndromeda.Hubs) === 'undefined'){ return; }

            var hub = MyAndromeda.Hubs.StoreHub.GetInstance(options);
            var notification = $("#clientNotification").data("kendoNotification");

            hub.bind("onNotifierNotify onNotifierSuccess", function (data) {
                //console.log("success");
                setTimeout(function(){
                    notification.show({
                        title: "Messages",
                        message: data.Message,
                        from: data.UserName,
                        date: kendo.toString(new Date(), "G")
                    }, "success");
                }, 100);
            });

            hub.bind("onNotifyMail", function (data) {
                //console.log("mail");

                setTimeout(function(){
                    notification.show({
                        title: "Email",
                        message: $(data.Message).html,
                        from: data.UserName,
                        date: kendo.toString(new Date(), "G")
                    }, "success");
                }, 100);
                
            });

            hub.bind("onNotifierDebug", function (data) {
                //console.log("debug");
                setTimeout(function(){
                    notification.show({
                        title: "Debug",
                        message: data.Message,
                        from: data.UserName,
                        date: kendo.toString(new Date(), "G")
                    }, "debug");
                });
            });

            hub.bind("onNotifierError", function (data) {
                //console.log("error");
                setTimeout(function(){
                    notification.show({
                        title: "Error",
                        message: data.Message,
                        from: data.UserName,
                        date: kendo.toString(new Date(), "G")
                    }, "error");
                });
            });
        });
    </script>

    <script id="emailTemplate" type="text/template">
        <div class="notificationPopup">
            <img src="@Url.Content("~/Content/images/envelope.png")" alt="" />
            <h3>#= title #</h3>
            <div>#= from #</div>
            <div>#= date #</div>
            <p>#= message #</p>
        </div>
    </script>

    <script id="notifyTemplate" type="text/template">
        <div class="notify notificationPopup">
            <img src="@Url.Content("~/Content/images/envelope.png")" alt="" />
            <h3>#= title #</h3>
            <div>#= from #</div>
            <div>#= date #</div>
            <p>#= message #</p>
        </div>
    </script>

    <script id="successTemplate" type="text/template">
        <div class="notify notificationPopup">
            <img src="@Url.Content("~/Content/images/success-icon.png")" alt="" />
            <h3>#= title #</h3>
            <div>Started by: #= from #</div>
            <div>#= date #</div>
            <p>#= message #</p>
        </div>
    </script>

    <script id="errorTemplate" type="text/template">
        <div class="popup-error notificationPopup">
            <img src="@Url.Content("~/Content/images/error-icon.png")" />
            <h3>#= title #</h3>
            <div>Started by: #= from #</div>
            <div>#= date #</div>
            <p>#= message #</p>
        </div>
    </script>
}