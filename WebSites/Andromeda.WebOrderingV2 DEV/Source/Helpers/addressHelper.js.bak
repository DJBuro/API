function Address(isPostcodeLocked)
{
    "use strict";

    var self = this;

    self.errorMessage = ko.observable(''),
    self.addressMissingDetails = ko.observable(false); // True when any of the required address elements are missing
    self.addressHasError = ko.observable(false); // True when there are any problems with the address
    self.outOfDeliveryArea = ko.observable(false); // True when the address is not in the delivery area of the currently selected store
    self.prem1 = ko.observable('');
    self.prem2 = ko.observable('');
    self.prem3 = ko.observable('');
    self.prem4 = ko.observable('');
    self.prem5 = ko.observable('');
    self.prem6 = ko.observable('');
    self.org1 = ko.observable('');
    self.org2 = ko.observable('');
    self.org3 = ko.observable('');
    self.roadNum = ko.observable('');
    self.roadName = ko.observable('');
    self.roadNameHasError = ko.observable(false);
    self.city = ko.observable('');
    self.town = ko.observable('');
    self.townHasError = ko.observable(false);
    self.postcode = ko.observable('');
    self.postcodeHasError = ko.observable(false);
    self.county = ko.observable('');
    self.state = ko.observable('');
    self.locality = ko.observable('');
    self.country = ko.observable(settings.customerAddressCountry);
    self.directions = ko.observable('');
    self.userLocality1 = ko.observable('');
    self.userLocality2 = ko.observable('');
    self.userLocality3 = ko.observable('');
    self.isPostcodeLocked = ko.observable(isPostcodeLocked == undefined ? false : isPostcodeLocked);

    self.toPlainObject = function ()
    {
        var address =
            {
                prem1: self.prem1(),
                prem2: self.prem2(),
                prem3: self.prem3(),
                prem4: self.prem4(),
                prem5: self.prem5(),
                prem6: self.prem6(),
                org1: self.org1(),
                org2: self.org2(),
                org3: self.org3(),
                roadNum: self.roadNum(),
                roadName: self.roadName(),
                city: self.city(),
                town: self.town(),
                postcode: self.postcode(),
                county: self.county(),
                state: self.state(),
                locality: self.locality(),
                country: self.country(),
                directions: self.directions(),
                userLocality1: self.userLocality1(),
                userLocality2: self.userLocality2(),
                userLocality3: self.userLocality3()
            };

        return address;    
    }

    self.fromPlainObject = function (address)
    {
        self.prem1(helper.ensureBlank(address.prem1));
        self.prem2(helper.ensureBlank(address.prem2));
        self.prem3(helper.ensureBlank(address.prem3));
        self.prem4(helper.ensureBlank(address.prem4));
        self.prem5(helper.ensureBlank(address.prem5));
        self.prem6(helper.ensureBlank(address.prem6));
        self.org1(helper.ensureBlank(address.org1));
        self.org2(helper.ensureBlank(address.org2));
        self.org3(helper.ensureBlank(address.org3));
        self.roadNum(helper.ensureBlank(address.roadNum));
        self.roadName(helper.ensureBlank(address.roadName));
        self.city(helper.ensureBlank(address.city));
        self.town(helper.ensureBlank(address.town));
        self.postcode(helper.ensureBlank(address.postcode));
        self.county(helper.ensureBlank(address.county));
        self.state(helper.ensureBlank(address.state));
        self.locality(helper.ensureBlank(address.locality));
        self.country(helper.ensureBlank(address.country));
        self.directions(helper.ensureBlank(address.directions));
        self.userLocality1(helper.ensureBlank(address.userLocality1));
        self.userLocality2(helper.ensureBlank(address.userLocality2));
        self.userLocality3(helper.ensureBlank(address.userLocality3));

        if (self.country.length == 0)
        {
            self.country(settings.customerAddressCountry);
        }
    }
};

var addressHelper =
{
    bindableAddress: ko.observable(undefined),
    validateAddress: function (address, checkInDeliveryArea)
    {
        address.errorMessage('');

        if (settings.culture == "en-GB")
        {
            return addressHelper.validateUKAddress(address, checkInDeliveryArea);
        }
        else if (settings.culture == "en-US")
        {
            return addressHelper.validateUSAddress(address, checkInDeliveryArea);
        }
        else if (settings.culture == "fr-FR")
        {
            return addressHelper.validateFrenchAddress(address, checkInDeliveryArea);
        }
        else
        {
            return false;
        }
    },
    validateUKAddress: function (address, checkInDeliveryArea)
    {
        var success = true;

        // No errors yet
        address.roadNameHasError(false);
        address.townHasError(false);
        address.postcodeHasError(false);

        // Make sure the required details were entered
        if (address.roadName().trim().length == 0)
        {
            address.errorMessage(textStrings.lrMissingRoadName);
            address.roadNameHasError(true);
            success = false;
        }

        if (address.town().trim().length == 0)
        {
            address.errorMessage(textStrings.lrMissingTown);
            address.townHasError(true);
            success = false;
        }

        if (settings.postcodeRequired && address.postcode().length == 0)
        {
            address.errorMessage(textStrings.lrMissingPostcode);
            address.postcodeHasError(true);
            success = false;
        }

        if (settings.postcodeRequired && !addressHelper.validatePostcode(address.postcode()))
        {
            address.errorMessage(textStrings.lrInvalidPostcode);
            address.postcodeHasError(true);
            success = false;
        }

        if (checkInDeliveryArea && !address.postcodeHasError())
        {
            var isInDeliveryZone = addressHelper.validateIsPostcodeInDeliveryZone(address);

            address.outOfDeliveryArea(!isInDeliveryZone);
            address.postcodeHasError(!isInDeliveryZone);
            if (!isInDeliveryZone)
            {
                address.errorMessage(textStrings.checkBadPostcode);

                // Tell Google analytics that a register has completed
                ga
                (
                    "send",
                    "event",
                    {
                        eventCategory: "Sales",
                        eventAction: "Checkout-PostcodeUnknown",
                        eventLabel: address.postcode(),
                        eventValue: 1,
                        metric1: 1
                    }
                );
            }

            address.addressHasError
            (
                address.addressMissingDetails() ||
                address.outOfDeliveryArea()
            );

            success = isInDeliveryZone ? success : false;
        }

        // Was there an error?
        return success;
    },
    validatePostcode: function (postcode)
    {
        var regex = /^([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)$/i;
        return regex.test(postcode.toUpperCase());
    },
    validateIsPostcodeInDeliveryZone: function (address)
    {
        var isInDeliveryZone = false;

        if (deliveryZoneHelper.deliveryZones() == undefined || deliveryZoneHelper.deliveryZones().length == 0)
        {
            isInDeliveryZone = true; // No postcodes so we can't validate it
        }
        else
        {
            isInDeliveryZone = deliveryZoneHelper.isInDeliveryZone(address.postcode().toUpperCase());
        }

        return isInDeliveryZone;
    },
    generateMultiLineAddress: function (address)
    {
        var displayAddressMultiLine = "";
        displayAddressMultiLine += address.roadNum() != null && address.roadNum().length > 0 ? address.roadNum() + ' ' : '';
        displayAddressMultiLine += address.roadName() != null && address.roadName().length > 0 ? address.roadName() + '<br />' : '';
        displayAddressMultiLine += address.org1() != null && address.org1().length > 0 ? address.org1() + '<br />' : '';
        displayAddressMultiLine += address.org2() != null && address.org2().length > 0 ? address.org2() + '<br />' : '';
        displayAddressMultiLine += address.org3() != null && address.org3().length > 0 ? address.org3() + '<br />' : '';
        displayAddressMultiLine += address.prem1() != null && address.prem1().length > 0 ? address.prem1() + '<br />' : '';
        displayAddressMultiLine += address.prem2() != null && address.prem2().length > 0 ? address.prem2() + '<br />' : '';
        displayAddressMultiLine += address.prem3() != null && address.prem3().length > 0 ? address.prem3() + '<br />' : '';
        displayAddressMultiLine += address.prem4() != null && address.prem4().length > 0 ? address.prem4() + '<br />' : '';
        displayAddressMultiLine += address.prem5() != null && address.prem5().length > 0 ? address.prem5() + '<br />' : '';
        displayAddressMultiLine += address.prem6() != null && address.prem6().length > 0 ? address.prem6() + '<br />' : '';
        displayAddressMultiLine += address.locality() != null && address.locality().length > 0 ? address.locality() + '<br />' : '';
        displayAddressMultiLine += address.town() != null && address.town().length > 0 ? address.town() + '<br />' : '';
        displayAddressMultiLine += address.county() != null && address.county().length > 0 ? address.county() + '<br />' : '';
        displayAddressMultiLine += address.state() != null && address.state().length > 0 ? address.state() + '<br />' : '';
        displayAddressMultiLine += address.postcode() != null && address.postcode().length > 0 ? address.postcode() + '<br />' : '';

        return displayAddressMultiLine;
    }
}