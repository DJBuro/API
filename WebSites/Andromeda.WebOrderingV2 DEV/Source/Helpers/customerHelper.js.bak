function Customer(isPasswordRequired)
{
    "use strict";

    var self = this;

    self.errorMessage = ko.observable(''),
    self.firstName = ko.observable('');
    self.surname = ko.observable('');
    self.emailAddress = ko.observable('');
    self.phoneNumber = ko.observable('');
    self.marketing = ko.observable(true);
    self.smsMarketing = ko.observable(true);
    self.firstNameHasError = ko.observable(false);
    self.surnameHasError = ko.observable(false);
    self.emailAddressHasError = ko.observable(false);
    self.phoneNumberHasError = ko.observable(false);

    self.facebookId = '';
    self.facebookUsername = '';
};

var customerHelper =
{
    bindableCustomer: ko.observable(undefined),
    
    validateCustomer: function (customer)
    {
        var success = true;

        // No error yet
        customer.errorMessage('');
        customer.firstNameHasError(false);
        customer.surnameHasError(false);
        customer.emailAddressHasError(false);
        customer.phoneNumberHasError(false);

        // Check that the account details have been entered
        if (customer.firstName().length == 0)
        {
            customerHelper.setError(customer, textStrings.lrMissingFirstName);
            customer.firstNameHasError(true);
            success = false;
        }

        if (customer.surname().length == 0)
        {
            customerHelper.setError(customer, textStrings.lrMissingSurname);
            customer.surnameHasError(true);
            success = false;
        }

        if (customer.emailAddress().length == 0)
        {
            customerHelper.setError(customer, textStrings.lrMissingEmail);
            customer.emailAddressHasError(true);
            success = false;
        }

        // Valid email address?
        customer.emailAddressHasError(!accountHelper.validateEmail(customer.emailAddress()));
        if (customer.emailAddressHasError())
        {
            customerHelper.setError(customer, textStrings.lrEmailNotValid);
            success = false;
        }

        if (customer.phoneNumber().length == 0)
        {
            customerHelper.setError(customer, textStrings.lrPhoneMissing);
            customer.phoneNumberHasError(true);
            success = false;
        }
        if (!customerHelper.validatePhoneNumber(customer.phoneNumber()))
        {
            customerHelper.setError(customer, textStrings.lrInvalidPhoneNumberMaxLength);
            customer.phoneNumberHasError(true);
            success = false;
        }
        // All good!
        return success;
    },
    
    setError: function (customer, errorMessage)
    {
        // Only set the first error
        if (customer.errorMessage().length == 0)
        {
            customer.errorMessage(errorMessage);
        }
    },

    validatePhoneNumber: function (phoneNumber) 
    {
        var regex = /^\d{1,15}$/i; // numbers only upto 15.
        return regex.test(phoneNumber);
    }
}