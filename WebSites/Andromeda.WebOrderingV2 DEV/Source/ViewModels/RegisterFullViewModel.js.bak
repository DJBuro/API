/*
    Copyright © 2014 Andromeda Trading Limited.  All rights reserved.  
    THIS FILE AND ITS CONTENTS ARE PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. 
    ANY USE OF THE CONTENTS OF THIS FILE OR ANY PART OF THIS FILE WITHOUT EXPLICIT PERMISSION FROM ANDROMEDA TRADING LIMITED IS PROHIBITED. 
*/

function RegisterFullViewModel(checkoutEntry, customer, isFacebookRegister)
{
    "use strict";

    var self = this;
    var hide = {};

    hide.boundPassword = false;
    hide.bindPassword = function () {
        if (this.boundPassword) { return; }

        var validatePassword = function () { self.validate(); };

        accountHelper.newAccount.password.subscribe(validatePassword);
        accountHelper.newAccount.reenterPassword.subscribe(validatePassword);

        this.boundPassword = true;
    };

    self.checkoutEntry = checkoutEntry;

    self.isFacebookRegister = (isFacebookRegister === undefined ? false : isFacebookRegister);

    self.isShowStoreDetailsButtonVisible = ko.observable(true);
    self.isShowHomeButtonVisible = ko.observable(true);
    self.isShowMenuButtonVisible = ko.observable(true);
    self.isShowCartButtonVisible = ko.observable(true);

    self.isHeaderVisible = ko.observable(true);
    self.isPostcodeSelectorVisible = ko.observable(settings.storeSelectorMode && settings.storeSelectorInHeader);
    self.areHeaderOptionsVisible = ko.observable(true);
    self.isHeaderLoginVisible = ko.observable(true);

    // Mobile mode
    self.title = ko.observable(textStrings.mmChangeStoreButton); // Current section name - shown in the header
    self.titleClass = ko.observable('mobileSectionSelectStore'); // Class to use to style the section name - used for showing an icon for the section

    // Create a new address & customer that we can bind to
    addressHelper.bindableAddress(new Address());
    customerHelper.bindableCustomer(customer === undefined ? new Customer() : customer);

    self.onLoad = function () {
        this.validate();
        hide.bindPassword();
    };

    // For facebook if the facebook account already has an email address then use it but don't let the user change it
    self.canModifyEmailAddress = true;
    if (self.isFacebookRegister &&
        customerHelper.bindableCustomer().emailAddress() != undefined &&
        customerHelper.bindableCustomer().emailAddress().length > 0)
    {
        self.canModifyEmailAddress = false;
    }

    if (siteSelectorHelper.postcode().length > 0)
    {
        // Always use the postcode entered on the site selector
        addressHelper.bindableAddress().postcode(siteSelectorHelper.postcode());
    }

    self.onLogout = function ()
    {
    }

    if (viewModel.contentViewModel() != undefined && viewModel.contentViewModel().previousViewName != undefined && viewModel.contentViewModel().previousViewName.length > 0)
    {
        self.previousViewName = viewModel.contentViewModel().previousViewName;
        self.previousContentViewModel = viewModel.contentViewModel().previousContentViewModel;
    }
    else
    {
        self.previousViewName = guiHelper.getCurrentViewName();
        self.previousContentViewModel = viewModel.contentViewModel();
    }

    self.addressType = function ()
    {
        // Figure out what address format to use
        if (settings.culture == "en-GB")
        {
            return 'ukAddress-min-template';
        }
        else if (settings.culture == "en-US")
        {
            return 'usAddress-template';
        }
        else if (settings.culture == "fr-FR")
        {
            return 'frenchAddress-template';
        }
        else
        {
            return 'genericAddress-template';
        }
    };

    self.validate = function ()
    {
        // Clear errors
        accountHelper.newAccount.errorMessage('');
        accountHelper.newAccount.passwordHasError(false);

        // Validate customer details
        if (!customerHelper.validateCustomer(customerHelper.bindableCustomer()))
        {
            self.setError(customerHelper.bindableCustomer().errorMessage());
        }

        // Check password
        if (accountHelper.newAccount.password().length == 0)
        {
            self.setError(textStrings.lrMissingPassword);
            accountHelper.newAccount.passwordHasError(true);
        }

        // Check password
        if (accountHelper.newAccount.reenterPassword().length == 0)
        {
            self.setError(textStrings.lrMissingReneterPassword);
            accountHelper.newAccount.passwordHasError(true);
        }

        // Check passwords match
        if (accountHelper.newAccount.password() != accountHelper.newAccount.reenterPassword())
        {
            self.setError(textStrings.lrPasswordsDontMatch);
            accountHelper.newAccount.passwordHasError(true);
        }

        // Minimum password length
        if (!accountHelper.validatePassword(accountHelper.newAccount.password()))
        {
            self.setError(textStrings.lrPasswordTooShort);
            accountHelper.newAccount.passwordHasError(true);
        }


        //if (!addressHelper.anyAddressDetail(addressHelper.bindableAddress())) {
        //    console.log("no address")
        //    return;
        //}

        //not part of register any more.
        // Validate address
        //if (!addressHelper.validateAddress(addressHelper.bindableAddress()))
        //{
        //    self.setError(addressHelper.bindableAddress().errorMessage());
        //}

        // Were there any errors?
        return accountHelper.newAccount.errorMessage().length == 0;
    };

    self.register = function ()
    {
        if (!self.validate()) return;

        var customerDetails =
        {
            title: '',
            firstname: customerHelper.bindableCustomer().firstName(),
            surname: customerHelper.bindableCustomer().surname(),
            contacts:
            [
                {
                    type: 'Email',
                    value: customerHelper.bindableCustomer().emailAddress(),
                    marketingLevel: customerHelper.bindableCustomer().marketing() ? '3rdParty' : 'OrderOnly'
                },
                {
                    type: 'Mobile',
                    value: customerHelper.bindableCustomer().phoneNumber(),
                    marketingLevel: customerHelper.bindableCustomer().smsMarketing() ? '3rdParty' : 'OrderOnly'
                }
            ],
            address: addressHelper.bindableAddress().toPlainObject(),
            facebookId: customerHelper.bindableCustomer().facebookId,
            facebookUsername: customerHelper.bindableCustomer().facebookUsername
        };

        if (!self.isFacebookRegister)
        {
            // Always use the customers email address for non-facebook accounts
            accountHelper.newAccount.username = customerHelper.bindableCustomer().emailAddress();
        }

        guiHelper.showPleaseWait
        (
            textStrings.lrRegistering,
            '',
            function (pleaseWaitViewModel)
            {
                // Validation passed - try and create a new customer account
                acsapi.putCustomer
                (
                    accountHelper.newAccount.username,
                    accountHelper.newAccount.password(),
                    customerDetails,
                    function (putCustomerResponse)
                    {
                        if (putCustomerResponse != undefined && putCustomerResponse.errorCode != undefined)
                        {
                            // Server returned an error
                            if (putCustomerResponse.errorCode == 1041)
                            {
                                accountHelper.newAccount.errorMessage(textStrings.lrEmailAlreadyUsed);
                                customerHelper.bindableCustomer().emailAddressHasError(true);
                            }
                            else
                            {
                                accountHelper.newAccount.errorMessage(textStrings.lrUnableToCreateAccount);
                            }
                            
                            guiHelper.showView('registerQuickView', self);
                        }
                        else
                        {
                            // Tell Google analytics that a register has completed
                            ga
                            (
                                "send",
                                "event",
                                {
                                    eventCategory: "Account",
                                    eventAction: "Register",
                                    eventLabel: "Completed",
                                    eventValue: 1,
                                    metric1: 1
                                }
                            );

                            // Success
                            accountHelper.loggedIn
                            (
                                customerDetails,
                                accountHelper.newAccount.username,
                                customerHelper.bindableCustomer().emailAddress(),
                                accountHelper.newAccount.password(),
                                self.isFacebookRegister
                            );

                            // Return to the previous view or go to the checkout page?
                            if (self.checkoutEntry === true)
                            {
                                cartHelper.checkout();
                            }
                            else
                            {
                                guiHelper.showView(self.previousViewName, self.previousContentViewModel);
                            }
                        }
                    },
                    function ()
                    {
                        guiHelper.showView('registerQuickView', self);
                    }
                );
            }
        );
    };
    self.setError = function (errorMessage)
    {
        // Only set the first error
        if (accountHelper.newAccount.errorMessage().length == 0)
        {
            accountHelper.newAccount.errorMessage(errorMessage);
        }
    };
    self.cancel = function ()
    {
        // Clearup
        accountHelper.newAccount.password('');
        accountHelper.newAccount.reenterPassword('');
        
        // Go back to the previous view
        guiHelper.showView(self.previousViewName, self.previousContentViewModel);
    };
    self.keyPress = function (data, event)
    {
        // Did the user press enter?
        if ((event.which >= 48 && event.which <= 57) ||
            (event.keyCode >= 48 && event.keyCode <= 57))
        {
            return true;
        }

        return false;
    }
};






































