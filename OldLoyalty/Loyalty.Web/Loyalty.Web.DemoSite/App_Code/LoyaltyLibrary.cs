using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI.WebControls;
using LoyaltyWS;

/// <summary>
/// Loyalty Web Service notes:
/// There can only be one registered user per loyalty account.
/// There can be multiple loyalty cards against each account.
/// Points are stored against accounts not cards.
/// Users do not need to be registered to use loyalty cards.
/// It is possible to go into negative points, it is up to your business rules to decide 'overdrafts' 
/// 
/// 
/// 
/// 
/// Benefits of registration:
/// Users do need to be registered to get a replacement card with original points (Oyster card scenario)
/// Users can have PINS to secure the card.
/// </summary>
public class LoyaltyLibrary
{
    LoyaltyCardSiteWebService lc = new LoyaltyCardSiteWebService();


        //note: key/password will be generated by Andromeda during setup for your site.
        string siteKey = "267";
        string sitePassword = "password267";

    /// <summary>
    /// Construtor
    /// This 'library' is only for guidance.
    /// </summary>
	public LoyaltyLibrary()
	{
	}

    /// <summary>
    /// Returns a list of the last 20 items logged against your site
    /// </summary>
    /// <returns></returns>
    public List<LoyaltyLog> Last20Logs()
    {
        //Logs:
        //Since some methods of the LoyaltyCardWebService only returns nulls, or ints (-1 on failures)
        //A log has been created that you can TEST your errors against
        //This should NOT be used in production to validate, only for development.
        return lc.GetLastTwentyLogs(siteKey,sitePassword).ToList();

        //Most methods return a Message class
        //Test against the Message.error
        //Examples are shown below (eg. Save method).

    }

    /// <summary>
    /// Returns the points available against a card.
    /// </summary>
    /// <param name="cardNumber"></param>
    /// <returns></returns>
    public int AvailablePoints(string cardNumber)
    {
        //It is YOUR responsiblity to make sure the card number is valid
        var points = lc.GetLoyaltyCardPoints(cardNumber, siteKey, sitePassword);

        //note: it is possible to return negative point values
        //if you allow users to use more than their alloted amounts
        //confusingly it will return -1 on an error, so check the logs if this happens.

        return points;
    }


    /// <summary>
    /// Again, assuming no PIN is required
    /// Please use this method for all but special cases.
    /// </summary>
    /// <param name="loyaltyCardNumber"></param>
    /// <param name="transactionHistory"></param>
    public void ApplyLoyaltyCardDiscount(string loyaltyCardNumber, serviceTransactionHistory transactionHistory, serviceOrderAddress orderAddress)
    {
        //note:
        //all the point manipulations are decided by the transactionHistory
        //therefore, you cannot remove points from a card that doesn't exist.
        //the card will be registed when points are collected
        //transactionHistory.LoyaltyPointsRedeemed = 0;

        //if there is no order address, eg a pickup, pass null
        lc.ApplyLoyaltyCard(loyaltyCardNumber, transactionHistory, orderAddress, siteKey, sitePassword);
    }


    /// <summary>
    /// The ratio at points will be redeemed
    /// eg. 500 points = £1 
    /// as well as business logic for redemptions
    /// </summary>
    /// <returns></returns>
    public serviceRatio LoyaltyRatios()
    {
        //note: the redemption ratio is set by Andromeda during setup for your site.
        //You can modify this ratio in the admin area
        var ratio = lc.GetRatios(siteKey, sitePassword);

        //it is YOUR responsibilty to apply the ratio/points/currency correctly.
        return ratio;
    }


    /// <summary>
    /// A user needs to login to view their loyalty account
    /// Ideally you would integrate/use their existing login details if possible
    /// </summary>
    /// <param name="emailAddress"></param>
    /// <param name="password"></param>
    /// <returns></returns>
    public serviceLoyaltyAccount Login(string emailAddress, string password)
    {
        var loyaltyAccount = GetLoyaltyAccount(emailAddress, password);
        return loyaltyAccount;
    }

    /// <summary>
    /// Ideally this would be emailed to the user.
    /// </summary>
    /// <param name="emailAddress"></param>
    /// <returns></returns>
    public string GetForgottenPassword(string emailAddress)
    {
        return lc.GetForgottenPassword(emailAddress, siteKey, sitePassword);
    }

    /// <summary>
    /// Gets the Loyalty Account
    /// Best to use for login
    /// </summary>
    /// <param name="emailAddress"></param>
    /// <param name="password"></param>
    /// <returns></returns>
    public serviceLoyaltyAccount GetLoyaltyAccount(string emailAddress, string password)
    {
        var loyaltyAccount = lc.GetLoyaltyAccount(emailAddress, password, siteKey, sitePassword);
        return loyaltyAccount;
    }

    /// <summary>
    /// Gets the Loyalty Account
    /// Best to use for reading from Auth cookies
    /// </summary>
    /// <param name="accountId"></param>
    /// <returns></returns>
    public serviceLoyaltyAccount GetLoyaltyAccount(int accountId)
    {
        var loyaltyAccount = lc.GetLoyaltyAccountById(accountId, siteKey, sitePassword);
        return loyaltyAccount;
    }


    /// <summary>
    /// You can view the transaction history by each card.
    /// There can be multiple cards per account
    /// </summary>
    /// <param name="loyaltyCardNumber"></param>
    /// <returns></returns>
    public List<serviceTransactionHistory> GetTransactionHistory(string loyaltyCardNumber)
    {
        var history = lc.GetTransactionHistory(loyaltyCardNumber, siteKey, sitePassword).ToList();
        return history;
    }

    /// <summary>
    /// Gets a list of available UserTitles for drop down lists
    /// </summary>
    /// <returns></returns>
    public List<ListItem> GetUserTitles()
    {
        var titles = lc.GetUserTitles(siteKey, sitePassword);

        var list = new List<ListItem>();

        foreach(UserTitle userTitle in titles)
        {
            var li = new ListItem();
            li.Text = userTitle.Title;
            li.Value = userTitle.Id.Value.ToString();

            list.Add(li);
        }

        return list;
    }

    /// <summary>
    /// Gets a list of available Countries for drop down lists
    /// </summary>
    /// <returns></returns>
    public List<ListItem> GetCountries()
    {
        var countries = lc.GetCountries(siteKey, sitePassword);

        var list = new List<ListItem>();

        foreach(serviceCountry country in countries)
        {
            var listItem = new ListItem();
            listItem.Text = country.Name;
            listItem.Value = country.Id.Value.ToString();

            list.Add(listItem);
        }

        return list;
    }

    /// <summary>
    /// Gets a list of available order typses for drop down lists
    /// </summary>
    /// <returns></returns>
    public List<ListItem> GetOrderTypes()
    {
        var orderTypes = lc.GetOrderTypes(siteKey, sitePassword);

        var list = new List<ListItem>();

        foreach (OrderType orderType in orderTypes)
        {
            var listItem = new ListItem();
            listItem.Text = orderType.Name;
            listItem.Value = orderType.Id.Value.ToString();

            list.Add(listItem);
        }

        return list;
    }

    public OrderType GetOrderTypeById(int id)
    {
        return lc.GetOrderTypeById(id, siteKey, sitePassword);
    }

    //it is up to you to validate data before save/updates/delete
    public Message Save(serviceLoyaltyUser loyaltyUser)
    {
        var save = lc.UpdateUser(loyaltyUser, siteKey, sitePassword);
       
        //note: you can test if the save was successful
        if(save.error != null)
        {
            //handle how you see fit.
            return null;
        }

        return save;
    }

    public Message Save(serviceLoyaltyAccount loyaltyAccount)
    {
        var save = lc.UpdateLoyaltyAccountAddress(loyaltyAccount.AccountAddress, siteKey, sitePassword);

        //note: you can test if the save was successful
        if (save.error != null)
        {
            //handle how you see fit.
            return null;
        }

        return save;
    }

    /// <summary>
    /// Adds a Loyalty Card to an account, you can have multiple cards on one account
    /// note: you would need to apply business logic for the validation of the card number as
    /// the webservice assumes all cards submitted are valid
    /// </summary>
    /// <param name="loyaltyCardNumber"></param>
    /// <param name="account"></param>
    /// <returns></returns>
    public Message AddCardToAccount(string loyaltyCardNumber, serviceLoyaltyAccount account)
    {
        return lc.AddLoyaltyCardToAccount(loyaltyCardNumber, account, siteKey, sitePassword);
    }

    public Message RemoveCardFromAccount(string loyaltyCardNumber)
    {
        return lc.RemoveLoyaltyCard(loyaltyCardNumber, siteKey, sitePassword);
    }


    /// <summary>
    /// Returns a list of Addresses that the card has been used against
    /// </summary>
    /// <param name="loyaltyCardNumber"></param>
    /// <returns></returns>
    public List<RamesesAddress> FindAssociatedAddress(string loyaltyCardNumber)
    {
        return lc.FindAssociatedAddress(loyaltyCardNumber, siteKey, sitePassword).ToList();
    
    }

    /// <summary>
    /// Removes a card from the Associated Address list
    /// The only way an address can be added to the list is if a 
    /// </summary>
    /// <param name="loyaltyCardNumber"></param>
    /// <param name="addressId"></param>
    /// <returns></returns>
    public void RemoveAddressFromCard(string loyaltyCardNumber,int addressId)
    {
        lc.RemoveAssociatedAddress(loyaltyCardNumber, addressId, siteKey, sitePassword);
    }

    /// <summary>
    /// Reports cards as Lost, and makes them inactive
    /// </summary>
    /// <param name="loyaltyCardNumber"></param>
    public void LostCard(string loyaltyCardNumber)
    {
        lc.LostLoyaltyCard(loyaltyCardNumber, siteKey, sitePassword);
    }

    /// <summary>
    /// Reports cards as Stolen, and makes them inactive
    /// </summary>
    /// <param name="loyaltyCardNumber"></param>
    public void StolenCard(string loyaltyCardNumber)
    {
        lc.StolenLoyaltyCard(loyaltyCardNumber, siteKey, sitePassword);
        
    }


    /// <summary>
    /// Register a user,card and address
    /// </summary>
    /// <param name="register"></param>
    /// <returns></returns>
    public Message Register(serviceRegister register)
    {
        return lc.Register(register, siteKey, sitePassword);
    }

    public string ViewLoyaltyCardPin(string loyaltyCardNumber)
    {
        return lc.ViewLoyaltyCardPin(loyaltyCardNumber, siteKey, sitePassword);
    }

    /// <summary>
    /// Adds or Updates a LoyaltyCard Pin.
    /// If you pass in an empty Pin string, the existing Pin is removed from the card.
    /// </summary>
    /// <param name="loyaltyCardNumber"></param>
    /// <param name="pin"></param>
    /// <returns></returns>
    public Message AddUpdateLoyaltyCardPin(string loyaltyCardNumber, string pin)
    {
        return lc.AddUpdateLoyaltyCardPin(loyaltyCardNumber, pin, siteKey, sitePassword);
    }

    //TODO:
    //First time users
    //they use card for first time
    //they create an register/account

}
