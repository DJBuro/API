<%-- 
Name: WRTableDAL.cst
Description: CodeSmith Template for building a data access class for a database table
Asumptions: assumes that the database table being wrapped has exactly one primary key field (primary key field may or may not be an identity field)
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="WRCommon.cst.cs" Inherits="WRCommon" Debug="True" Description="Wrapping a database table" %>
<%-- Register Sub Templates --%>
<%@ Register Name="BindingTableSubTemplate" Template="WRTableDALBindingSub.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="StoredProcSubTemplate" Template="WRTableDALStoredProcSub.cst" MergeProperties="False" ExcludeProperties="" %>
<%-- Properties --%>
<%@ Property Name="DatabaseName" Type="WRDatabase" Category="Options" Description="Choose the William Reed database" %>
<%@ Property Name="NameSpace" Visible="False" Type="System.String" Default="changeMeNameSpace" Category="Options"
	Description="This is the project namespace which contains this data access class. It will be substituted in for XXX in following namespace: WilliamReed.XXX.Data.Base" %>
<%@ Property Name="ProcedurePrefix" Visible="False" Type="System.String" Default="csp_" Category="Options"
	Description="Prefix used in all stored procedure names. This is needed as this class will be using stored procedures" %>
<%@ Property Name="TablePrefix" Type="System.String" Default="d_" Category="Options"
	Description="If this prefix is found at the start of a table name, it will be stripped off to give meaningful procedure and class names." %>
<%@ Property Name="BindingTable1" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="'Add' and 'Remove' public instance methods will be generated for this associated binding table" %>
<%@ Property Name="BindingTable1ExcludeKeyField" Type="ColumnSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="This field will not be exposed as a parameter in public binding table instance methods in this class as the value is already available from the classes primary key eg. set this property to 'PropertyID' for this binding table if the SourceTable is 'Property' and the property ID is already available in the primary key for this class." %>
<%@ Property Name="BindingTable2" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="'Add' and 'Remove' public instance methods will be generated for this associated binding table" %>
<%@ Property Name="BindingTable2ExcludeKeyField" Type="ColumnSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="This field will not be exposed as a parameter in public binding table instance methods in this class as the value is already available from the classes primary key eg. set this property to 'PropertyID' for this binding table if the SourceTable is 'Property' and the property ID is already available in the primary key for this class." %>
<%@ Property Name="BindingTable3" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable3ExcludeKeyField" Type="ColumnSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="This field will not be exposed as a parameter in public binding table instance methods in this class as the value is already available from the classes primary key eg. set this property to 'PropertyID' for this binding table if the SourceTable is 'Property' and the property ID is already available in the primary key for this class." %>
<%@ Property Name="BindingTable4" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable4ExcludeKeyField" Type="ColumnSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="This field will not be exposed as a parameter in public binding table instance methods in this class as the value is already available from the classes primary key eg. set this property to 'PropertyID' for this binding table if the SourceTable is 'Property' and the property ID is already available in the primary key for this class." %>
<%@ Property Name="BindingTable5" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable5ExcludeKeyField" Type="ColumnSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="This field will not be exposed as a parameter in public binding table instance methods in this class as the value is already available from the classes primary key eg. set this property to 'PropertyID' for this binding table if the SourceTable is 'Property' and the property ID is already available in the primary key for this class." %>
<%@ Property Name="BindingTable6" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable6ExcludeKeyField" Type="ColumnSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="This field will not be exposed as a parameter in public binding table instance methods in this class as the value is already available from the classes primary key eg. set this property to 'PropertyID' for this binding table if the SourceTable is 'Property' and the property ID is already available in the primary key for this class." %>
<%@ Property Name="BindingTable7" Type="TableSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="Add and Remove stored procedures will be generated for this associated binding table" %>
<%@ Property Name="BindingTable7ExcludeKeyField" Type="ColumnSchema" Default="" Optional="True" Category="Tables (optional binding tables)"
	Description="This field will not be exposed as a parameter in public binding table instance methods in this class as the value is already available from the classes primary key eg. set this property to 'PropertyID' for this binding table if the SourceTable is 'Property' and the property ID is already available in the primary key for this class." %>
<%@ Property Name="StoredProc1" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 1 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc1Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 1 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc1IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 1 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc1ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 1 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc1Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 1 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProc2" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 2 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc2Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 2 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc2IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 2 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc2ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 2 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc2Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 2 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProc3" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 3 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc3Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 3 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc3IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 3 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc3ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 3 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc3Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 3 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProc4" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 4 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc4Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 4 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc4IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 4 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc4ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 4 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc4Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 4 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProc5" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 5 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc5Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 5 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc5IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 5 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc5ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 5 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc5Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 5 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProc6" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 6 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc6Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 6 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc6IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 6 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc6ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 6 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc6Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 6 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProc7" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 7 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc7Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 7 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc7IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 7 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc7ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 7 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc7Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 7 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProc8" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 8 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc8Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 8 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc8IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 8 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc8ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 8 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc8Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 8 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProc9" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 9 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc9Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 9 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc9IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 9 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc9ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 9 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc9Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 9 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%@ Property Name="StoredProc10" Type="CommandSchema" Default="" Optional="True" Category="Stored Procedure 10 (optional extra)"
	Description="Choose the stored procedure from the database" %>
<%@ Property Name="StoredProc10Database" Type="WRDatabase" Optional="True" Category="Stored Procedure 10 (optional extra)" Description="Choose the William Reed database for this stored procedure" %>
<%@ Property Name="StoredProc10IsPaged" Type="System.Boolean" Default="False" Optional="True" Category="Stored Procedure 10 (optional extra)"
	Description="This stored procedure will be wrapped with code which extracts the statistics result set returned from csp_PagingStatistics. This stored procedure must call csp_PagingStatistics in order to work. This option will only work if the return type of the stored procedure is SqlDataReader." %>
<%@ Property Name="StoredProc10ReferenceName" Type="System.String" Default="" Optional="True" Category="Stored Procedure 10 (optional extra)"
	Description="Enter a name to reference this stored procedure" %>
<%@ Property Name="StoredProc10Return" Type="WRStoredProcReturnType" Default="" Optional="True" Category="Stored Procedure 10 (optional extra)"
	Description="Choose the return type of this stored procedure" %>
<%-- Assemblies and Imports --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%-- Assembly References --%>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<%-- General Validation--%>
<%
	if (DatabaseName == WRDatabase.Ignore)
	{
		ShowValidationError("Please choose a William Reed database other than 'Ignore' for property 'DatabaseName'.");
		return;
	}	
	
	// Source table must have has exactly one field in the primary key
	if ((SourceTable != null) && (!IsValidDataTable(SourceTable)))
	{
		return;
	}
 %>

<%-- Validate Binding Table Fields --%>
<%  
	// Binding Table 1
	if ((BindingTable1 != null) && (!IsValidBindingTable(BindingTable1)))
		return;

	if (!IsValidExcludedKey(BindingTable1, BindingTable1ExcludeKeyField))
		return;

	// Binding Table 2
	if ((BindingTable2 != null) && (!IsValidBindingTable(BindingTable2)))
		return;

	if (!IsValidExcludedKey(BindingTable2, BindingTable2ExcludeKeyField))
		return;

	// Binding Table 3
	if ((BindingTable3 != null) && (!IsValidBindingTable(BindingTable3)))
		return;

	if (!IsValidExcludedKey(BindingTable3, BindingTable3ExcludeKeyField))
		return;

	// Binding Table 4
	if ((BindingTable4 != null) && (!IsValidBindingTable(BindingTable4)))
		return;

	if (!IsValidExcludedKey(BindingTable4, BindingTable4ExcludeKeyField))
		return;
	
	// Binding Table 5
	if ((BindingTable5 != null) && (!IsValidBindingTable(BindingTable5)))
		return;

	if (!IsValidExcludedKey(BindingTable5, BindingTable5ExcludeKeyField))
		return;
	
	// Binding Table 6
	if ((BindingTable6 != null) && (!IsValidBindingTable(BindingTable6)))
		return;

	if (!IsValidExcludedKey(BindingTable6, BindingTable6ExcludeKeyField))
		return;
	
	// Binding Table 7
	if ((BindingTable7 != null) && (!IsValidBindingTable(BindingTable7)))
		return;

	if (!IsValidExcludedKey(BindingTable7, BindingTable7ExcludeKeyField))
		return;
%>

<%-- Validate Stored Procedure Fields --%>
<%  
	// Stored Procedure 1
	if (StoredProc1 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc1, StoredProc1ReferenceName, StoredProc1Return, StoredProc1Database))
			return;
	}

	// Stored Procedure 2
	if (StoredProc2 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc2, StoredProc2ReferenceName, StoredProc2Return, StoredProc2Database))
			return;
	}

	// Stored Procedure 3
	if (StoredProc3 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc3, StoredProc3ReferenceName, StoredProc3Return, StoredProc3Database))
			return;
	}

	// Stored Procedure 4
	if (StoredProc4 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc4, StoredProc4ReferenceName, StoredProc4Return, StoredProc4Database))
			return;
	}
	
	// Stored Procedure 5
	if (StoredProc5 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc5, StoredProc5ReferenceName, StoredProc5Return, StoredProc5Database))
			return;
	}
	
	// Stored Procedure 6
	if (StoredProc6 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc6, StoredProc6ReferenceName, StoredProc6Return, StoredProc6Database))
			return;
	}
	
	// Stored Procedure 7
	if (StoredProc7 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc7, StoredProc7ReferenceName, StoredProc7Return, StoredProc7Database))
			return;
	}
	
	// Stored Procedure 8
	if (StoredProc8 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc8, StoredProc8ReferenceName, StoredProc8Return, StoredProc8Database))
			return;
	}
	
	// Stored Procedure 9
	if (StoredProc9 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc9, StoredProc9ReferenceName, StoredProc9Return, StoredProc9Database))
			return;
	}
	
	// Stored Procedure 10
	if (StoredProc10 != null)
	{
		if (!IsValidStoredProcProperties(StoredProc10, StoredProc10ReferenceName, StoredProc10Return, StoredProc10Database))
			return;
	}
%>

//------------------------------------------------------------------------------
// <autogenerated>
//		This class was auto generated for William Reed Publishing Limited.
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// 			
//		If modifications are required then create a new class which derives 
// 		from this class <%=GetDALClassName(TablePrefix)%>
//
//		A basic example of this derivative might be:
//
//		public class <%= GetDALDerivativeClassName(TablePrefix) %> : <%= GetDALClassName(TablePrefix) %>
//		{
//			public <%= GetDALDerivativeClassName(TablePrefix)%>(<%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0].DataType)%> <%=SourceTable.PrimaryKey.MemberColumns[0].Name%>) : base(<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>)
//			{
//				// specialised construction if required
//			}
//
//			public <%= GetDALDerivativeClassName(TablePrefix)%>() : base()
//			{
//				// specialised construction if required
//			}
//
//			// specialised or overridden methods
//		}
//
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Text;
using System.Xml;
using System.Data;
using System.Data.SqlClient;
using WilliamReed.Data;

namespace WilliamReed.<%=NameSpace%>.Data.Base
{
	/// <summary>
	/// Abstract data access class for the table <%=SourceTable.Name%> in the <%=DatabaseName%> database
	/// </summary>
	public abstract class <%=GetDALClassName(TablePrefix)%>
	{
		protected DataBlock dataBlock = null;
		protected <%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0].DataType)%> _<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = <%=GetCSharpVariableReset(SourceTable.PrimaryKey.MemberColumns[0].DataType)%>; // primary key
		
		#region Constructors
		/// <summary>
		/// Construct with primary key
		/// </summary>
		/// <param name="<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>"></param>
		public <%=GetDALClassName(TablePrefix)%>(<%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0].DataType)%> <%=SourceTable.PrimaryKey.MemberColumns[0].Name%>)
		{
			dataBlock = new DataBlock(WRDatabase.<%=DatabaseName%>);
			_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = <%=SourceTable.PrimaryKey.MemberColumns[0].Name%>;
			Refresh();
		}
		
		/// <summary>
		/// Construct with null primary key
		/// </summary>
		public <%=GetDALClassName(TablePrefix)%>()
		{
			dataBlock = new DataBlock(WRDatabase.<%=DatabaseName%>);
			Refresh();
		}
		#endregion

		#region Public Properties
		/// <summary>
		/// <%=SourceTable.Database.Name%>.<%=SourceTable.Name%>.<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> (primary key)
		/// </summary>
		public <%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0].DataType)%> <%=SourceTable.PrimaryKey.MemberColumns[0].Name%>
		{
			get
			{
				return _<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>;
			}
			set
			{
				_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = value;
				Refresh();
			}
		}
		
		<% for (int i=0; i<SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
		protected <%= GetCSharpVariableType(SourceTable.NonPrimaryKeyColumns[i].DataType)%> _<%= SourceTable.NonPrimaryKeyColumns[i].Name %> = <%= GetCSharpVariableReset(SourceTable.NonPrimaryKeyColumns[i].DataType) %>;
		/// <summary>
		/// <%=SourceTable.Database.Name%>.<%=SourceTable.Name%>.<%= SourceTable.NonPrimaryKeyColumns[i].Name %> <%= SourceTable.NonPrimaryKeyColumns[i].Description%>
		/// </summary>
		public <%= GetCSharpVariableType(SourceTable.NonPrimaryKeyColumns[i].DataType) %> <%= SourceTable.NonPrimaryKeyColumns[i].Name %>
		{
			get {return _<%= SourceTable.NonPrimaryKeyColumns[i].Name %>;}
			set
			{
				_<%= SourceTable.NonPrimaryKeyColumns[i].Name %> = value;
			}
		}
		<% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1){ Response.WriteLine("");} %>		
		<% } %>
		#endregion

		#region Instance Methods
		<%-- special "set" primary key routine for tables which require the explicit setting of primary keys ie where the primary key is NOT an IDENTITY field --%>
		<% if (!((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value)) {  %>
		/// <summary>
		/// Explicitly set the primary key for <%=DatabaseName%>.<%=GetEntityName(false, TablePrefix)%> without triggering a call of Refresh().
		/// WARNING: an exception is thrown if the primary key is already set as per the condition (_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> != <%=GetCSharpVariableReset(SourceTable.PrimaryKey.MemberColumns[0].DataType)%>)
		/// </summary>
		/// <param name="new<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>">new primary key</param>
		public virtual void Set<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>WithNoRefresh(<%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0].DataType)%> new<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>)
		{
			if (_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> == <%=GetCSharpVariableReset(SourceTable.PrimaryKey.MemberColumns[0].DataType)%>)
				_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = new<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>;
			else
				throw new Exception("<%=GetDALClassName(TablePrefix)%>.Set<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>WithNoRefresh() was called when the primary key was already set for this object. This object's primary key identifier '_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>' is only permitted to be <%=GetCSharpVariableReset(SourceTable.PrimaryKey.MemberColumns[0].DataType)%> but is currently " + Convert.ToString(_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>));
		}
		
		<% } %>
		/// <summary>
		/// Save the current row for <%=DatabaseName%>.<%=GetEntityName(false, TablePrefix)%>
		/// </summary>
		/// <returns>true for success (rowsAffected > 0)</returns>
		public virtual bool Save()
		{
			<%-- only pull back output parameter if the primary key is an IDENTITY field --%>
			<% if ((bool)SourceTable.PrimaryKey.MemberColumns[0].ExtendedProperties["CS_IsIdentity"].Value) {  %>
			if (_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> != <%=GetCSharpVariableReset(SourceTable.PrimaryKey.MemberColumns[0].DataType)%>) // update
			{
				dataBlock.Command_Init("<%=GetUpdateProcedureName(ProcedurePrefix, TablePrefix)%>");

				<% for (int i=0; i<SourceTable.Columns.Count; i++) { %>
				dataBlock.AddSqlInputParameter(<%=GetParamAttributes(SourceTable.Columns[i])%>).Value = _<%= SourceTable.Columns[i].Name %>;
				<% } %>

				// retrieve rows affected
				dataBlock.AddSqlOutputParameter("@autoRowsAffected", SqlDbType.Int);

				dataBlock.Command_ExecuteNonQuery();
			
				#region Read Rows Affected
				int rowsAffected = 0;
				Hashtable hashParams = dataBlock.Parameters();
				if (((SqlParameter)hashParams["@autoRowsAffected"]).Value != DBNull.Value)
				{
					rowsAffected = (int)((SqlParameter)hashParams["@autoRowsAffected"]).Value;
				}
				else
					throw new Exception("<%=GetDALClassName(TablePrefix)%>.Save() failed to retrieve the @autoRowsAffected field using stored procedure <%=GetUpdateProcedureName(ProcedurePrefix, TablePrefix)%>");
				#endregion

				return (rowsAffected > 0);
			}
			else // insert
			{
				dataBlock.Command_Init("<%=GetAddProcedureName(ProcedurePrefix, TablePrefix)%>");

				// add parameter for each field in table
				<% for (int i=0; i<SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
				dataBlock.AddSqlInputParameter(<%=GetParamAttributes(SourceTable.NonPrimaryKeyColumns[i])%>).Value = _<%= SourceTable.NonPrimaryKeyColumns[i].Name %>;
				<% } %>

				// retrieve new ID
				dataBlock.AddSqlOutputParameter(<%=GetParamAttributes(SourceTable.PrimaryKey)%>);

				dataBlock.Command_ExecuteNonQuery();
				Hashtable hashParams = dataBlock.Parameters();
				if (((SqlParameter)hashParams["@<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>"]).Value != DBNull.Value)
				{
					_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = (<%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0].DataType)%>)((SqlParameter)hashParams["@<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>"]).Value;
					return true;
				}
				else
					throw new Exception("<%=GetDALClassName(TablePrefix)%>.Save() failed to retrieve the new primary key identity field using stored procedure <%=GetAddProcedureName(ProcedurePrefix, TablePrefix)%>");
			}
			<% } else { %>
			<%-- primary key is not an identity field therefore use the AddUpdate stored procedure --%>
			dataBlock.Command_Init("<%=GetAddUpdateProcedureName(ProcedurePrefix, TablePrefix)%>");

			// add parameter for each field in table
			<% for (int i=0; i<SourceTable.Columns.Count; i++) { %>
			dataBlock.AddSqlInputParameter(<%=GetParamAttributes(SourceTable.Columns[i])%>).Value = _<%= SourceTable.Columns[i].Name %>;
			<% } %>

			int rowsAffected = dataBlock.Command_ExecuteNonQuery();
			return (rowsAffected > 0);
			<% } %>
		}

		/// <summary>
		/// Delete the current row for <%=DatabaseName%>.<%=GetEntityName(false, TablePrefix)%>
		/// </summary>
		/// <returns>true for success (rowsAffected > 0)</returns>
		public virtual bool Delete()
		{
			dataBlock.Command_Init("<%=GetDeleteProcedureName(ProcedurePrefix, TablePrefix)%>"); 
			dataBlock.AddSqlInputParameter(<%=GetParamAttributes(SourceTable.PrimaryKey)%>).Value = _<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>;

			// retrieve rows affected
			dataBlock.AddSqlOutputParameter("@autoRowsAffected", SqlDbType.Int);

			dataBlock.Command_ExecuteNonQuery();
		
			#region Read Rows Affected
			int rowsAffected = 0;
			Hashtable hashParams = dataBlock.Parameters();
			if (((SqlParameter)hashParams["@autoRowsAffected"]).Value != DBNull.Value)
			{
				rowsAffected = (int)((SqlParameter)hashParams["@autoRowsAffected"]).Value;
			}
			else
				throw new Exception("<%=GetDALClassName(TablePrefix)%>.Delete() failed to retrieve the @autoRowsAffected field using stored procedure <%=GetDeleteProcedureName(ProcedurePrefix, TablePrefix)%>");
			#endregion

			if (rowsAffected > 0) // row was deleted
			{
				_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = <%=GetCSharpVariableReset(SourceTable.PrimaryKey.MemberColumns[0].DataType)%>;
				Refresh();
			}

			return (rowsAffected > 0);
		}

		/// <summary>
		/// Load row for <%=DatabaseName%>.<%=GetEntityName(false, TablePrefix)%> using primary key. Any unsaved field values will be lost and overwritten
		/// </summary>
		/// <param name="new<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>">primary key for required row</param>
		public virtual void Load(<%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0].DataType)%> new<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>)
		{
			_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = new<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>;
			Refresh();
		}

		/// <summary>
		/// Refresh the contents of all non primary key fields for database table <%=DatabaseName%>.<%=GetEntityName(false, TablePrefix)%>
		/// </summary>
		public virtual void Refresh()
		{
		<%-- if the data types text, ntext or images are found in the columns then cannot use output parameters --%>
		<% if (!ContainsTextFields(SourceTable.NonPrimaryKeyColumns)) {  %>
			if (_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> != <%=GetCSharpVariableReset(SourceTable.PrimaryKey.MemberColumns[0].DataType)%>)
			{
				// initialise stored procedure
				dataBlock.Command_Init("<%=GetSelectRowProcedureName(ProcedurePrefix, TablePrefix)%>");

				// add input parameter
				dataBlock.AddSqlInputParameter(<%=GetParamAttributes(SourceTable.PrimaryKey)%>).Value = _<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>;

				// add output parameters
				<% for (int i=0; i<SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
				dataBlock.AddSqlOutputParameter(<%=GetParamAttributes(SourceTable.NonPrimaryKeyColumns[i])%>);
				<% } %>
				
				// retrieve rows affected
				dataBlock.AddSqlOutputParameter("@autoRowsAffected", SqlDbType.Int);

				dataBlock.Command_ExecuteNonQuery();

				#region Read Rows Affected
				int rowsAffected = 0;
				Hashtable hashParams = dataBlock.Parameters();
				if (((SqlParameter)hashParams["@autoRowsAffected"]).Value != DBNull.Value)
				{
					rowsAffected = (int)((SqlParameter)hashParams["@autoRowsAffected"]).Value;
				}
				else
					throw new Exception("<%=GetDALClassName(TablePrefix)%>.Refresh() failed to retrieve the @autoRowsAffected field using stored procedure <%=GetSelectRowProcedureName(ProcedurePrefix, TablePrefix)%>");

				if (rowsAffected < 1)
				{
					throw new Exception("<%=GetDALClassName(TablePrefix)%>.Refresh() failed to retrieve the database record where <%=SourceTable.Name%>.<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = " + Convert.ToString(_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>) + " using stored procedure <%=GetSelectRowProcedureName(ProcedurePrefix, TablePrefix)%>. This record may not exist in the database.");
				}
				#endregion
				
				#region Refresh All Properties
				<% 	for (int i=0; i<SourceTable.NonPrimaryKeyColumns.Count; i++) 
					{
						ExtractProperty(SourceTable.NonPrimaryKeyColumns[i]);
					} %>
				#endregion
			}
			else
			{
				// reset all the properties
				<% 	for (int i=0; i<SourceTable.NonPrimaryKeyColumns.Count; i++) 
					{
						ClearProperty(SourceTable.NonPrimaryKeyColumns[i]);
					} %>
			}
			<% } else { %>
			// reset all the properties
			<% 	for (int i=0; i<SourceTable.NonPrimaryKeyColumns.Count; i++) 
				{
					ClearProperty(SourceTable.NonPrimaryKeyColumns[i], 3);
				} %>
					
			if (_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> != <%=GetCSharpVariableReset(SourceTable.PrimaryKey.MemberColumns[0].DataType)%>)
			{
				// initialise stored procedure
				dataBlock.Command_Init("<%=GetSelectRowProcedureName(ProcedurePrefix, TablePrefix)%>");

				// add input parameter
				dataBlock.AddSqlInputParameter(<%=GetParamAttributes(SourceTable.PrimaryKey)%>).Value = _<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>;

				// ====================================================================
				// Note: Output parameters are not used because the record contains one 
				// or more fields which are of type 'text', 'ntext' or 'image'
				// ====================================================================
				
				SqlDataReader reader = dataBlock.Command_ExecuteReader(); 
				try
				{
					if (reader.Read()) // only first row is read
					{
						<% for (int i=0; i<SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
						if (reader["<%= SourceTable.NonPrimaryKeyColumns[i].Name %>"] != DBNull.Value)
							<%= SourceTable.NonPrimaryKeyColumns[i].Name %> = (<%= GetCSharpVariableType(SourceTable.NonPrimaryKeyColumns[i].DataType) %>)(reader["<%= SourceTable.NonPrimaryKeyColumns[i].Name %>"]);
						<% } %>
					}
					else
						throw new Exception("<%=GetDALClassName(TablePrefix)%>.Refresh() failed to retrieve the database record where <%=SourceTable.Name%>.<%=SourceTable.PrimaryKey.MemberColumns[0].Name%> = " + Convert.ToString(_<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>) + " using stored procedure <%=GetSelectRowProcedureName(ProcedurePrefix, TablePrefix)%>. This record may not exist in the database.");
				}
				finally
				{
					reader.Close();
				}
			}
			<% } %>
		}
		<% 	//	==============================================================================
			//	Binding Table public instance methods (uses sub template WRTableDALBindingSub)
			// 	==============================================================================
		 	
			// instantiate the sub-template
			BindingTableSubTemplate bindingSubTemplate = this.Create<BindingTableSubTemplate>();

			// Binding Table 1
			if ((BindingTable1 != null) && (IsValidBindingTable(BindingTable1)))
			{
				if (IsValidExcludedKey(BindingTable1, BindingTable1ExcludeKeyField))
					OutputBindingTable(BindingTable1, BindingTable1ExcludeKeyField, bindingSubTemplate);
			}

			// Binding Table 2
			if ((BindingTable2 != null) && (IsValidBindingTable(BindingTable2)))
			{
				if (IsValidExcludedKey(BindingTable2, BindingTable2ExcludeKeyField))
					OutputBindingTable(BindingTable2, BindingTable2ExcludeKeyField, bindingSubTemplate);
			}

			// Binding Table 3
			if ((BindingTable3 != null) && (IsValidBindingTable(BindingTable3)))
			{
				if (IsValidExcludedKey(BindingTable3, BindingTable3ExcludeKeyField))
					OutputBindingTable(BindingTable3, BindingTable3ExcludeKeyField, bindingSubTemplate);
			}

			// Binding Table 4
			if ((BindingTable4 != null) && (IsValidBindingTable(BindingTable4)))
			{
				if (IsValidExcludedKey(BindingTable4, BindingTable4ExcludeKeyField))
					OutputBindingTable(BindingTable4, BindingTable4ExcludeKeyField, bindingSubTemplate);
			}
			
			// Binding Table 5
			if ((BindingTable5 != null) && (IsValidBindingTable(BindingTable5)))
			{
				if (IsValidExcludedKey(BindingTable5, BindingTable5ExcludeKeyField))
					OutputBindingTable(BindingTable5, BindingTable5ExcludeKeyField, bindingSubTemplate);
			}
			
			// Binding Table 6
			if ((BindingTable6 != null) && (IsValidBindingTable(BindingTable6)))
			{
				if (IsValidExcludedKey(BindingTable6, BindingTable6ExcludeKeyField))
					OutputBindingTable(BindingTable6, BindingTable6ExcludeKeyField, bindingSubTemplate);
			}

			// Binding Table 7
			if ((BindingTable7 != null) && (IsValidBindingTable(BindingTable7)))
			{
				if (IsValidExcludedKey(BindingTable7, BindingTable7ExcludeKeyField))
					OutputBindingTable(BindingTable7, BindingTable7ExcludeKeyField, bindingSubTemplate);
			}
		%>
		#endregion
		<% 	
			// instantiate the sub-template
			StoredProcSubTemplate storedProcSubTemplate = this.Create<StoredProcSubTemplate>();

			// Stored Procedure 1
			if (StoredProc1 != null)
			{
				OutputStoredProc(StoredProc1, StoredProc1ReferenceName, StoredProc1Return, StoredProc1Database, StoredProc1IsPaged, storedProcSubTemplate);
			}

			// Stored Procedure 2
			if (StoredProc2 != null)
			{
				OutputStoredProc(StoredProc2, StoredProc2ReferenceName, StoredProc2Return, StoredProc2Database, StoredProc2IsPaged, storedProcSubTemplate);
			}

			// Stored Procedure 3
			if (StoredProc3 != null)
			{
				OutputStoredProc(StoredProc3, StoredProc3ReferenceName, StoredProc3Return, StoredProc3Database, StoredProc3IsPaged, storedProcSubTemplate);
			}

			// Stored Procedure 4
			if (StoredProc4 != null)
			{
				OutputStoredProc(StoredProc4, StoredProc4ReferenceName, StoredProc4Return, StoredProc4Database, StoredProc4IsPaged, storedProcSubTemplate);
			}

			// Stored Procedure 5
			if (StoredProc5 != null)
			{
				OutputStoredProc(StoredProc5, StoredProc5ReferenceName, StoredProc5Return, StoredProc5Database, StoredProc5IsPaged, storedProcSubTemplate);
			}

			// Stored Procedure 6
			if (StoredProc6 != null)
			{
				OutputStoredProc(StoredProc6, StoredProc6ReferenceName, StoredProc6Return, StoredProc6Database, StoredProc6IsPaged, storedProcSubTemplate);
			}

			// Stored Procedure 7
			if (StoredProc7 != null)
			{
				OutputStoredProc(StoredProc7, StoredProc7ReferenceName, StoredProc7Return, StoredProc7Database, StoredProc7IsPaged, storedProcSubTemplate);
			}

			// Stored Procedure 8
			if (StoredProc8 != null)
			{
				OutputStoredProc(StoredProc8, StoredProc8ReferenceName, StoredProc8Return, StoredProc8Database, StoredProc8IsPaged, storedProcSubTemplate);
			}

			// Stored Procedure 9
			if (StoredProc9 != null)
			{
				OutputStoredProc(StoredProc9, StoredProc9ReferenceName, StoredProc9Return, StoredProc9Database, StoredProc9IsPaged, storedProcSubTemplate);
			}

			// Stored Procedure 10
			if (StoredProc10 != null)
			{
				OutputStoredProc(StoredProc10, StoredProc10ReferenceName, StoredProc10Return, StoredProc10Database, StoredProc10IsPaged, storedProcSubTemplate);
			}
  		%>

		#region Static Methods For Retrieving Data (SqlDataReader, DataSet, XmlReader and ExecuteScalar method)
		/// <summary>
		/// Get all records for table <%=DatabaseName%>.<%=GetEntityName(false, TablePrefix)%>
		/// </summary>
		/// <returns>SqlDataReader (WARNING: the SqlDataReader must be closed to release the valuable SqlConnection object. Use Try{} Finally{} exception handling</returns>
		public static SqlDataReader GetReader()
		{
			DataBlock localDataBlock = new DataBlock(WRDatabase.<%=DatabaseName%>);
			localDataBlock.Command_Init("<%=GetSelectProcedureName(ProcedurePrefix, TablePrefix)%>");
			return localDataBlock.Command_ExecuteReader();
		}

		/// <summary>
		/// Get all records for table <%=DatabaseName%>.<%=GetEntityName(false, TablePrefix)%>
		/// </summary>
		/// <returns>DataSet</returns>
		public static DataSet Get()
		{
			DataBlock localDataBlock = new DataBlock(WRDatabase.<%=DatabaseName%>);
			localDataBlock.Command_Init("<%=GetSelectProcedureName(ProcedurePrefix, TablePrefix)%>");
			return localDataBlock.Command_FillDataSet();	
		}

		/// <summary>
		/// Return first column of first row resulting from the command text entered in parameter commandText for table <%=DatabaseName%>.<%=GetEntityName(false, TablePrefix)%>.
		/// </summary>
		/// <param name="commandText">eg. "select count(*) from <%=SourceTable.Name%>"</param>
		/// <returns>first column of first row of result set. Value is null if no records in result set</returns>
		public static object ExecuteScalar(string commandText)
		{
			DataBlock localDataBlock = new DataBlock(WRDatabase.<%=DatabaseName%>);
			localDataBlock.Command_Init(commandText, CommandType.Text);
			return localDataBlock.Command_ExecuteScalar();
		}

		/// <summary>
		/// Get all records for table <%=DatabaseName%>.<%=GetEntityName(false, TablePrefix)%>
		/// </summary>
		/// <returns>XmlReader (WARNING: the XmlReader must be closed to release the valuable SqlConnection object. Use Try{} Finally{} exception handling</returns>
		public static XmlReader GetXmlReader()
		{
			DataBlock localDataBlock = new DataBlock(WRDatabase.<%=DatabaseName%>);
			localDataBlock.Command_Init("<%=GetSelectProcedureName(ProcedurePrefix, TablePrefix)%>"); 
			return localDataBlock.Command_ExecuteXmlReader();
		}
		#endregion
	}
}
<script runat="template">
	protected string _dalOutputFile = String.Empty;
	[Category("Output")]
	[FileDialog(FileDialogType.Save, Title="Select DAL Class File", Filter="CSharp Files (*.cs)|*.cs|All Files (*.*)|*.*", DefaultExtension=".cs")]
	[EditorAttribute(typeof(CodeSmith.CustomProperties.FileNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
	[Description("Select a file for the DAL class")]
	public virtual string DALClassOutputFile
	{
		get {return _dalOutputFile;}
		set {_dalOutputFile = value;}
	}

	protected override void OnPostRender(string result)
	{
		if (this.DALClassOutputFile.Length > 0)
		{
			FileStream stream = null;
			try
			{
				stream = new FileStream(this.DALClassOutputFile, FileMode.Create, FileAccess.Write);
				byte[] output = System.Text.Encoding.UTF8.GetBytes(result);
				stream.Write(output, 0, output.Length);
			}
			finally
			{
				if (stream != null) stream.Close();
			}
		}
		
		base.OnPostRender(result);
	}

	// assign an appropriate file name to DALClassOutputFile
	public override string GetFileName()
	{
		if (this.SourceTable != null)
		{
			return GetDALFileName(TablePrefix);
		}
		else
		{
			return base.GetFileName();
		}
	}

	public void OutputBindingTable(TableSchema bindingTable, ColumnSchema excludedKey, BindingTableSubTemplate bindingSubTemplate)
	{
		// copy relevant properties through to sub template
		this.CopyPropertiesTo(bindingSubTemplate);
				
		// setup custom properties
		bindingSubTemplate.BindingTableSub = bindingTable; 
		bindingSubTemplate.BindingTableSubExcludeKeyField = excludedKey;
		bindingSubTemplate.Render(this.Response);
	}

	public void OutputStoredProc(CommandSchema storedProc, string storedProcName, WRStoredProcReturnType returnType, WRDatabase database, bool isPaged, StoredProcSubTemplate storedProcSubTemplate)
	{
		// copy relevant properties through to sub template
		this.CopyPropertiesTo(storedProcSubTemplate);
				
		// setup custom properties
		storedProcSubTemplate.StoredProcSub = storedProc; 
		storedProcSubTemplate.StoredProcSubDatabase = database; 
		storedProcSubTemplate.StoredProcSubIsPaged = isPaged; 
		storedProcSubTemplate.StoredProcSubName = storedProcName; 
		storedProcSubTemplate.StoredProcSubReturn = returnType; 
		storedProcSubTemplate.Render(this.Response);
	}
</script>